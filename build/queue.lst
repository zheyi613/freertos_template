ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"queue.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvIsQueueFull,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	prvIsQueueFull:
  26              	.LVL0:
  27              	.LFB28:
  28              		.file 1 "FreeRTOS/queue.c"
   1:FreeRTOS/queue.c **** /*
   2:FreeRTOS/queue.c ****  * FreeRTOS Kernel V10.4.3
   3:FreeRTOS/queue.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/queue.c ****  *
   5:FreeRTOS/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/queue.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/queue.c ****  * subject to the following conditions:
  11:FreeRTOS/queue.c ****  *
  12:FreeRTOS/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/queue.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS/queue.c ****  *
  15:FreeRTOS/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/queue.c ****  *
  22:FreeRTOS/queue.c ****  * https://www.FreeRTOS.org
  23:FreeRTOS/queue.c ****  * https://github.com/FreeRTOS
  24:FreeRTOS/queue.c ****  *
  25:FreeRTOS/queue.c ****  */
  26:FreeRTOS/queue.c **** 
  27:FreeRTOS/queue.c **** #include <stdlib.h>
  28:FreeRTOS/queue.c **** #include <string.h>
  29:FreeRTOS/queue.c **** 
  30:FreeRTOS/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 2


  31:FreeRTOS/queue.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  32:FreeRTOS/queue.c ****  * task.h is included from an application file. */
  33:FreeRTOS/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  34:FreeRTOS/queue.c **** 
  35:FreeRTOS/queue.c **** #include "FreeRTOS.h"
  36:FreeRTOS/queue.c **** #include "task.h"
  37:FreeRTOS/queue.c **** #include "queue.h"
  38:FreeRTOS/queue.c **** 
  39:FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  40:FreeRTOS/queue.c ****     #include "croutine.h"
  41:FreeRTOS/queue.c **** #endif
  42:FreeRTOS/queue.c **** 
  43:FreeRTOS/queue.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:FreeRTOS/queue.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:FreeRTOS/queue.c ****  * for the header files above, but not in this file, in order to generate the
  46:FreeRTOS/queue.c ****  * correct privileged Vs unprivileged linkage and placement. */
  47:FreeRTOS/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:FreeRTOS/queue.c **** 
  49:FreeRTOS/queue.c **** 
  50:FreeRTOS/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  51:FreeRTOS/queue.c **** #define queueUNLOCKED             ( ( int8_t ) -1 )
  52:FreeRTOS/queue.c **** #define queueLOCKED_UNMODIFIED    ( ( int8_t ) 0 )
  53:FreeRTOS/queue.c **** #define queueINT8_MAX             ( ( int8_t ) 127 )
  54:FreeRTOS/queue.c **** 
  55:FreeRTOS/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:FreeRTOS/queue.c ****  * pcTail members are used as pointers into the queue storage area.  When the
  57:FreeRTOS/queue.c ****  * Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:FreeRTOS/queue.c ****  * not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:FreeRTOS/queue.c ****  * structure instead holds a pointer to the mutex holder (if any).  Map alternative
  60:FreeRTOS/queue.c ****  * names to the pcHead and structure member to ensure the readability of the code
  61:FreeRTOS/queue.c ****  * is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  62:FreeRTOS/queue.c ****  * a union as their usage is mutually exclusive dependent on what the queue is
  63:FreeRTOS/queue.c ****  * being used for. */
  64:FreeRTOS/queue.c **** #define uxQueueType               pcHead
  65:FreeRTOS/queue.c **** #define queueQUEUE_IS_MUTEX       NULL
  66:FreeRTOS/queue.c **** 
  67:FreeRTOS/queue.c **** typedef struct QueuePointers
  68:FreeRTOS/queue.c **** {
  69:FreeRTOS/queue.c ****     int8_t * pcTail;     /*< Points to the byte at the end of the queue storage area.  Once more by
  70:FreeRTOS/queue.c ****     int8_t * pcReadFrom; /*< Points to the last place that a queued item was read from when the str
  71:FreeRTOS/queue.c **** } QueuePointers_t;
  72:FreeRTOS/queue.c **** 
  73:FreeRTOS/queue.c **** typedef struct SemaphoreData
  74:FreeRTOS/queue.c **** {
  75:FreeRTOS/queue.c ****     TaskHandle_t xMutexHolder;        /*< The handle of the task that holds the mutex. */
  76:FreeRTOS/queue.c ****     UBaseType_t uxRecursiveCallCount; /*< Maintains a count of the number of times a recursive mute
  77:FreeRTOS/queue.c **** } SemaphoreData_t;
  78:FreeRTOS/queue.c **** 
  79:FreeRTOS/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  80:FreeRTOS/queue.c ****  * zero. */
  81:FreeRTOS/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH    ( ( UBaseType_t ) 0 )
  82:FreeRTOS/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME          ( ( TickType_t ) 0U )
  83:FreeRTOS/queue.c **** 
  84:FreeRTOS/queue.c **** #if ( configUSE_PREEMPTION == 0 )
  85:FreeRTOS/queue.c **** 
  86:FreeRTOS/queue.c **** /* If the cooperative scheduler is being used then a yield should not be
  87:FreeRTOS/queue.c ****  * performed just because a higher priority task has been woken. */
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 3


  88:FreeRTOS/queue.c ****     #define queueYIELD_IF_USING_PREEMPTION()
  89:FreeRTOS/queue.c **** #else
  90:FreeRTOS/queue.c ****     #define queueYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  91:FreeRTOS/queue.c **** #endif
  92:FreeRTOS/queue.c **** 
  93:FreeRTOS/queue.c **** /*
  94:FreeRTOS/queue.c ****  * Definition of the queue used by the scheduler.
  95:FreeRTOS/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  96:FreeRTOS/queue.c ****  * rationale: https://www.FreeRTOS.org/Embedded-RTOS-Queues.html
  97:FreeRTOS/queue.c ****  */
  98:FreeRTOS/queue.c **** typedef struct QueueDefinition /* The old naming convention is used to prevent breaking kernel awar
  99:FreeRTOS/queue.c **** {
 100:FreeRTOS/queue.c ****     int8_t * pcHead;           /*< Points to the beginning of the queue storage area. */
 101:FreeRTOS/queue.c ****     int8_t * pcWriteTo;        /*< Points to the free next place in the storage area. */
 102:FreeRTOS/queue.c **** 
 103:FreeRTOS/queue.c ****     union
 104:FreeRTOS/queue.c ****     {
 105:FreeRTOS/queue.c ****         QueuePointers_t xQueue;     /*< Data required exclusively when this structure is used as a 
 106:FreeRTOS/queue.c ****         SemaphoreData_t xSemaphore; /*< Data required exclusively when this structure is used as a 
 107:FreeRTOS/queue.c ****     } u;
 108:FreeRTOS/queue.c **** 
 109:FreeRTOS/queue.c ****     List_t xTasksWaitingToSend;             /*< List of tasks that are blocked waiting to post onto
 110:FreeRTOS/queue.c ****     List_t xTasksWaitingToReceive;          /*< List of tasks that are blocked waiting to read from
 111:FreeRTOS/queue.c **** 
 112:FreeRTOS/queue.c ****     volatile UBaseType_t uxMessagesWaiting; /*< The number of items currently in the queue. */
 113:FreeRTOS/queue.c ****     UBaseType_t uxLength;                   /*< The length of the queue defined as the number of it
 114:FreeRTOS/queue.c ****     UBaseType_t uxItemSize;                 /*< The size of each items that the queue will hold. */
 115:FreeRTOS/queue.c **** 
 116:FreeRTOS/queue.c ****     volatile int8_t cRxLock;                /*< Stores the number of items received from the queue 
 117:FreeRTOS/queue.c ****     volatile int8_t cTxLock;                /*< Stores the number of items transmitted to the queue
 118:FreeRTOS/queue.c **** 
 119:FreeRTOS/queue.c ****     #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 120:FreeRTOS/queue.c ****         uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the memory used by the queue was static
 121:FreeRTOS/queue.c ****     #endif
 122:FreeRTOS/queue.c **** 
 123:FreeRTOS/queue.c ****     #if ( configUSE_QUEUE_SETS == 1 )
 124:FreeRTOS/queue.c ****         struct QueueDefinition * pxQueueSetContainer;
 125:FreeRTOS/queue.c ****     #endif
 126:FreeRTOS/queue.c **** 
 127:FreeRTOS/queue.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 128:FreeRTOS/queue.c ****         UBaseType_t uxQueueNumber;
 129:FreeRTOS/queue.c ****         uint8_t ucQueueType;
 130:FreeRTOS/queue.c ****     #endif
 131:FreeRTOS/queue.c **** } xQUEUE;
 132:FreeRTOS/queue.c **** 
 133:FreeRTOS/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 134:FreeRTOS/queue.c ****  * name below to enable the use of older kernel aware debuggers. */
 135:FreeRTOS/queue.c **** typedef xQUEUE Queue_t;
 136:FreeRTOS/queue.c **** 
 137:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 138:FreeRTOS/queue.c **** 
 139:FreeRTOS/queue.c **** /*
 140:FreeRTOS/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 141:FreeRTOS/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 142:FreeRTOS/queue.c ****  */
 143:FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 144:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 4


 145:FreeRTOS/queue.c **** /* The type stored within the queue registry array.  This allows a name
 146:FreeRTOS/queue.c ****  * to be assigned to each queue making kernel aware debugging a little
 147:FreeRTOS/queue.c ****  * more user friendly. */
 148:FreeRTOS/queue.c ****     typedef struct QUEUE_REGISTRY_ITEM
 149:FreeRTOS/queue.c ****     {
 150:FreeRTOS/queue.c ****         const char * pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and s
 151:FreeRTOS/queue.c ****         QueueHandle_t xHandle;
 152:FreeRTOS/queue.c ****     } xQueueRegistryItem;
 153:FreeRTOS/queue.c **** 
 154:FreeRTOS/queue.c **** /* The old xQueueRegistryItem name is maintained above then typedefed to the
 155:FreeRTOS/queue.c ****  * new xQueueRegistryItem name below to enable the use of older kernel aware
 156:FreeRTOS/queue.c ****  * debuggers. */
 157:FreeRTOS/queue.c ****     typedef xQueueRegistryItem QueueRegistryItem_t;
 158:FreeRTOS/queue.c **** 
 159:FreeRTOS/queue.c **** /* The queue registry is simply an array of QueueRegistryItem_t structures.
 160:FreeRTOS/queue.c ****  * The pcQueueName member of a structure being NULL is indicative of the
 161:FreeRTOS/queue.c ****  * array position being vacant. */
 162:FreeRTOS/queue.c ****     PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 163:FreeRTOS/queue.c **** 
 164:FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 165:FreeRTOS/queue.c **** 
 166:FreeRTOS/queue.c **** /*
 167:FreeRTOS/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 168:FreeRTOS/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 169:FreeRTOS/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 170:FreeRTOS/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 171:FreeRTOS/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 172:FreeRTOS/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 173:FreeRTOS/queue.c ****  */
 174:FreeRTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 175:FreeRTOS/queue.c **** 
 176:FreeRTOS/queue.c **** /*
 177:FreeRTOS/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 178:FreeRTOS/queue.c ****  *
 179:FreeRTOS/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 180:FreeRTOS/queue.c ****  */
 181:FreeRTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 182:FreeRTOS/queue.c **** 
 183:FreeRTOS/queue.c **** /*
 184:FreeRTOS/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 185:FreeRTOS/queue.c ****  *
 186:FreeRTOS/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 187:FreeRTOS/queue.c ****  */
 188:FreeRTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 189:FreeRTOS/queue.c **** 
 190:FreeRTOS/queue.c **** /*
 191:FreeRTOS/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 192:FreeRTOS/queue.c ****  * back of the queue.
 193:FreeRTOS/queue.c ****  */
 194:FreeRTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
 195:FreeRTOS/queue.c ****                                       const void * pvItemToQueue,
 196:FreeRTOS/queue.c ****                                       const BaseType_t xPosition ) PRIVILEGED_FUNCTION;
 197:FreeRTOS/queue.c **** 
 198:FreeRTOS/queue.c **** /*
 199:FreeRTOS/queue.c ****  * Copies an item out of a queue.
 200:FreeRTOS/queue.c ****  */
 201:FreeRTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 5


 202:FreeRTOS/queue.c ****                                   void * const pvBuffer ) PRIVILEGED_FUNCTION;
 203:FreeRTOS/queue.c **** 
 204:FreeRTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 205:FreeRTOS/queue.c **** 
 206:FreeRTOS/queue.c **** /*
 207:FreeRTOS/queue.c ****  * Checks to see if a queue is a member of a queue set, and if so, notifies
 208:FreeRTOS/queue.c ****  * the queue set that the queue contains data.
 209:FreeRTOS/queue.c ****  */
 210:FreeRTOS/queue.c ****     static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue ) PRIVILEGED_FUNCTI
 211:FreeRTOS/queue.c **** #endif
 212:FreeRTOS/queue.c **** 
 213:FreeRTOS/queue.c **** /*
 214:FreeRTOS/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 215:FreeRTOS/queue.c ****  * dynamically to fill in the structure's members.
 216:FreeRTOS/queue.c ****  */
 217:FreeRTOS/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 218:FreeRTOS/queue.c ****                                    const UBaseType_t uxItemSize,
 219:FreeRTOS/queue.c ****                                    uint8_t * pucQueueStorage,
 220:FreeRTOS/queue.c ****                                    const uint8_t ucQueueType,
 221:FreeRTOS/queue.c ****                                    Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 222:FreeRTOS/queue.c **** 
 223:FreeRTOS/queue.c **** /*
 224:FreeRTOS/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 225:FreeRTOS/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 226:FreeRTOS/queue.c ****  * as a mutex.
 227:FreeRTOS/queue.c ****  */
 228:FreeRTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 229:FreeRTOS/queue.c ****     static void prvInitialiseMutex( Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 230:FreeRTOS/queue.c **** #endif
 231:FreeRTOS/queue.c **** 
 232:FreeRTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 233:FreeRTOS/queue.c **** 
 234:FreeRTOS/queue.c **** /*
 235:FreeRTOS/queue.c ****  * If a task waiting for a mutex causes the mutex holder to inherit a
 236:FreeRTOS/queue.c ****  * priority, but the waiting task times out, then the holder should
 237:FreeRTOS/queue.c ****  * disinherit the priority - but only down to the highest priority of any
 238:FreeRTOS/queue.c ****  * other tasks that are waiting for the same mutex.  This function returns
 239:FreeRTOS/queue.c ****  * that priority.
 240:FreeRTOS/queue.c ****  */
 241:FreeRTOS/queue.c ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVIL
 242:FreeRTOS/queue.c **** #endif
 243:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 244:FreeRTOS/queue.c **** 
 245:FreeRTOS/queue.c **** /*
 246:FreeRTOS/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 247:FreeRTOS/queue.c ****  * accessing the queue event lists.
 248:FreeRTOS/queue.c ****  */
 249:FreeRTOS/queue.c **** #define prvLockQueue( pxQueue )                            \
 250:FreeRTOS/queue.c ****     taskENTER_CRITICAL();                                  \
 251:FreeRTOS/queue.c ****     {                                                      \
 252:FreeRTOS/queue.c ****         if( ( pxQueue )->cRxLock == queueUNLOCKED )        \
 253:FreeRTOS/queue.c ****         {                                                  \
 254:FreeRTOS/queue.c ****             ( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED; \
 255:FreeRTOS/queue.c ****         }                                                  \
 256:FreeRTOS/queue.c ****         if( ( pxQueue )->cTxLock == queueUNLOCKED )        \
 257:FreeRTOS/queue.c ****         {                                                  \
 258:FreeRTOS/queue.c ****             ( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED; \
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 6


 259:FreeRTOS/queue.c ****         }                                                  \
 260:FreeRTOS/queue.c ****     }                                                      \
 261:FreeRTOS/queue.c ****     taskEXIT_CRITICAL()
 262:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 263:FreeRTOS/queue.c **** 
 264:FreeRTOS/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
 265:FreeRTOS/queue.c ****                                BaseType_t xNewQueue )
 266:FreeRTOS/queue.c **** {
 267:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 268:FreeRTOS/queue.c **** 
 269:FreeRTOS/queue.c ****     configASSERT( pxQueue );
 270:FreeRTOS/queue.c **** 
 271:FreeRTOS/queue.c ****     taskENTER_CRITICAL();
 272:FreeRTOS/queue.c ****     {
 273:FreeRTOS/queue.c ****         pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /
 274:FreeRTOS/queue.c ****         pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 275:FreeRTOS/queue.c ****         pxQueue->pcWriteTo = pxQueue->pcHead;
 276:FreeRTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->ux
 277:FreeRTOS/queue.c ****         pxQueue->cRxLock = queueUNLOCKED;
 278:FreeRTOS/queue.c ****         pxQueue->cTxLock = queueUNLOCKED;
 279:FreeRTOS/queue.c **** 
 280:FreeRTOS/queue.c ****         if( xNewQueue == pdFALSE )
 281:FreeRTOS/queue.c ****         {
 282:FreeRTOS/queue.c ****             /* If there are tasks blocked waiting to read from the queue, then
 283:FreeRTOS/queue.c ****              * the tasks will remain blocked as after this function exits the queue
 284:FreeRTOS/queue.c ****              * will still be empty.  If there are tasks blocked waiting to write to
 285:FreeRTOS/queue.c ****              * the queue, then one should be unblocked as after this function exits
 286:FreeRTOS/queue.c ****              * it will be possible to write to it. */
 287:FreeRTOS/queue.c ****             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 288:FreeRTOS/queue.c ****             {
 289:FreeRTOS/queue.c ****                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 290:FreeRTOS/queue.c ****                 {
 291:FreeRTOS/queue.c ****                     queueYIELD_IF_USING_PREEMPTION();
 292:FreeRTOS/queue.c ****                 }
 293:FreeRTOS/queue.c ****                 else
 294:FreeRTOS/queue.c ****                 {
 295:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
 296:FreeRTOS/queue.c ****                 }
 297:FreeRTOS/queue.c ****             }
 298:FreeRTOS/queue.c ****             else
 299:FreeRTOS/queue.c ****             {
 300:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 301:FreeRTOS/queue.c ****             }
 302:FreeRTOS/queue.c ****         }
 303:FreeRTOS/queue.c ****         else
 304:FreeRTOS/queue.c ****         {
 305:FreeRTOS/queue.c ****             /* Ensure the event queues start in the correct state. */
 306:FreeRTOS/queue.c ****             vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 307:FreeRTOS/queue.c ****             vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 308:FreeRTOS/queue.c ****         }
 309:FreeRTOS/queue.c ****     }
 310:FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
 311:FreeRTOS/queue.c **** 
 312:FreeRTOS/queue.c ****     /* A value is returned for calling semantic consistency with previous
 313:FreeRTOS/queue.c ****      * versions. */
 314:FreeRTOS/queue.c ****     return pdPASS;
 315:FreeRTOS/queue.c **** }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 7


 316:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 317:FreeRTOS/queue.c **** 
 318:FreeRTOS/queue.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 319:FreeRTOS/queue.c **** 
 320:FreeRTOS/queue.c ****     QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
 321:FreeRTOS/queue.c ****                                              const UBaseType_t uxItemSize,
 322:FreeRTOS/queue.c ****                                              uint8_t * pucQueueStorage,
 323:FreeRTOS/queue.c ****                                              StaticQueue_t * pxStaticQueue,
 324:FreeRTOS/queue.c ****                                              const uint8_t ucQueueType )
 325:FreeRTOS/queue.c ****     {
 326:FreeRTOS/queue.c ****         Queue_t * pxNewQueue;
 327:FreeRTOS/queue.c **** 
 328:FreeRTOS/queue.c ****         configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 329:FreeRTOS/queue.c **** 
 330:FreeRTOS/queue.c ****         /* The StaticQueue_t structure and the queue storage area must be
 331:FreeRTOS/queue.c ****          * supplied. */
 332:FreeRTOS/queue.c ****         configASSERT( pxStaticQueue != NULL );
 333:FreeRTOS/queue.c **** 
 334:FreeRTOS/queue.c ****         /* A queue storage area should be provided if the item size is not 0, and
 335:FreeRTOS/queue.c ****          * should not be provided if the item size is 0. */
 336:FreeRTOS/queue.c ****         configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 337:FreeRTOS/queue.c ****         configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 338:FreeRTOS/queue.c **** 
 339:FreeRTOS/queue.c ****         #if ( configASSERT_DEFINED == 1 )
 340:FreeRTOS/queue.c ****             {
 341:FreeRTOS/queue.c ****                 /* Sanity check that the size of the structure used to declare a
 342:FreeRTOS/queue.c ****                  * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 343:FreeRTOS/queue.c ****                  * the real queue and semaphore structures. */
 344:FreeRTOS/queue.c ****                 volatile size_t xSize = sizeof( StaticQueue_t );
 345:FreeRTOS/queue.c ****                 configASSERT( xSize == sizeof( Queue_t ) );
 346:FreeRTOS/queue.c ****                 ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 347:FreeRTOS/queue.c ****             }
 348:FreeRTOS/queue.c ****         #endif /* configASSERT_DEFINED */
 349:FreeRTOS/queue.c **** 
 350:FreeRTOS/queue.c ****         /* The address of a statically allocated queue was passed in, use it.
 351:FreeRTOS/queue.c ****          * The address of a statically allocated storage area was also passed in
 352:FreeRTOS/queue.c ****          * but is already set. */
 353:FreeRTOS/queue.c ****         pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the str
 354:FreeRTOS/queue.c **** 
 355:FreeRTOS/queue.c ****         if( pxNewQueue != NULL )
 356:FreeRTOS/queue.c ****         {
 357:FreeRTOS/queue.c ****             #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 358:FreeRTOS/queue.c ****                 {
 359:FreeRTOS/queue.c ****                     /* Queues can be allocated wither statically or dynamically, so
 360:FreeRTOS/queue.c ****                      * note this queue was allocated statically in case the queue is
 361:FreeRTOS/queue.c ****                      * later deleted. */
 362:FreeRTOS/queue.c ****                     pxNewQueue->ucStaticallyAllocated = pdTRUE;
 363:FreeRTOS/queue.c ****                 }
 364:FreeRTOS/queue.c ****             #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 365:FreeRTOS/queue.c **** 
 366:FreeRTOS/queue.c ****             prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQu
 367:FreeRTOS/queue.c ****         }
 368:FreeRTOS/queue.c ****         else
 369:FreeRTOS/queue.c ****         {
 370:FreeRTOS/queue.c ****             traceQUEUE_CREATE_FAILED( ucQueueType );
 371:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 372:FreeRTOS/queue.c ****         }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 8


 373:FreeRTOS/queue.c **** 
 374:FreeRTOS/queue.c ****         return pxNewQueue;
 375:FreeRTOS/queue.c ****     }
 376:FreeRTOS/queue.c **** 
 377:FreeRTOS/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 378:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 379:FreeRTOS/queue.c **** 
 380:FreeRTOS/queue.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 381:FreeRTOS/queue.c **** 
 382:FreeRTOS/queue.c ****     QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
 383:FreeRTOS/queue.c ****                                        const UBaseType_t uxItemSize,
 384:FreeRTOS/queue.c ****                                        const uint8_t ucQueueType )
 385:FreeRTOS/queue.c ****     {
 386:FreeRTOS/queue.c ****         Queue_t * pxNewQueue;
 387:FreeRTOS/queue.c ****         size_t xQueueSizeInBytes;
 388:FreeRTOS/queue.c ****         uint8_t * pucQueueStorage;
 389:FreeRTOS/queue.c **** 
 390:FreeRTOS/queue.c ****         configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 391:FreeRTOS/queue.c **** 
 392:FreeRTOS/queue.c ****         /* Allocate enough space to hold the maximum number of items that
 393:FreeRTOS/queue.c ****          * can be in the queue at any time.  It is valid for uxItemSize to be
 394:FreeRTOS/queue.c ****          * zero in the case the queue is used as a semaphore. */
 395:FreeRTOS/queue.c ****         xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception
 396:FreeRTOS/queue.c **** 
 397:FreeRTOS/queue.c ****         /* Check for multiplication overflow. */
 398:FreeRTOS/queue.c ****         configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) 
 399:FreeRTOS/queue.c **** 
 400:FreeRTOS/queue.c ****         /* Check for addition overflow. */
 401:FreeRTOS/queue.c ****         configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 402:FreeRTOS/queue.c **** 
 403:FreeRTOS/queue.c ****         /* Allocate the queue and storage area.  Justification for MISRA
 404:FreeRTOS/queue.c ****          * deviation as follows:  pvPortMalloc() always ensures returned memory
 405:FreeRTOS/queue.c ****          * blocks are aligned per the requirements of the MCU stack.  In this case
 406:FreeRTOS/queue.c ****          * pvPortMalloc() must return a pointer that is guaranteed to meet the
 407:FreeRTOS/queue.c ****          * alignment requirements of the Queue_t structure - which in this case
 408:FreeRTOS/queue.c ****          * is an int8_t *.  Therefore, whenever the stack alignment requirements
 409:FreeRTOS/queue.c ****          * are greater than or equal to the pointer to char requirements the cast
 410:FreeRTOS/queue.c ****          * is safe.  In other cases alignment requirements are not strict (one or
 411:FreeRTOS/queue.c ****          * two bytes). */
 412:FreeRTOS/queue.c ****         pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e
 413:FreeRTOS/queue.c **** 
 414:FreeRTOS/queue.c ****         if( pxNewQueue != NULL )
 415:FreeRTOS/queue.c ****         {
 416:FreeRTOS/queue.c ****             /* Jump past the queue structure to find the location of the queue
 417:FreeRTOS/queue.c ****              * storage area. */
 418:FreeRTOS/queue.c ****             pucQueueStorage = ( uint8_t * ) pxNewQueue;
 419:FreeRTOS/queue.c ****             pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char 
 420:FreeRTOS/queue.c **** 
 421:FreeRTOS/queue.c ****             #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 422:FreeRTOS/queue.c ****                 {
 423:FreeRTOS/queue.c ****                     /* Queues can be created either statically or dynamically, so
 424:FreeRTOS/queue.c ****                      * note this task was created dynamically in case it is later
 425:FreeRTOS/queue.c ****                      * deleted. */
 426:FreeRTOS/queue.c ****                     pxNewQueue->ucStaticallyAllocated = pdFALSE;
 427:FreeRTOS/queue.c ****                 }
 428:FreeRTOS/queue.c ****             #endif /* configSUPPORT_STATIC_ALLOCATION */
 429:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 9


 430:FreeRTOS/queue.c ****             prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQu
 431:FreeRTOS/queue.c ****         }
 432:FreeRTOS/queue.c ****         else
 433:FreeRTOS/queue.c ****         {
 434:FreeRTOS/queue.c ****             traceQUEUE_CREATE_FAILED( ucQueueType );
 435:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 436:FreeRTOS/queue.c ****         }
 437:FreeRTOS/queue.c **** 
 438:FreeRTOS/queue.c ****         return pxNewQueue;
 439:FreeRTOS/queue.c ****     }
 440:FreeRTOS/queue.c **** 
 441:FreeRTOS/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 442:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 443:FreeRTOS/queue.c **** 
 444:FreeRTOS/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 445:FreeRTOS/queue.c ****                                    const UBaseType_t uxItemSize,
 446:FreeRTOS/queue.c ****                                    uint8_t * pucQueueStorage,
 447:FreeRTOS/queue.c ****                                    const uint8_t ucQueueType,
 448:FreeRTOS/queue.c ****                                    Queue_t * pxNewQueue )
 449:FreeRTOS/queue.c **** {
 450:FreeRTOS/queue.c ****     /* Remove compiler warnings about unused parameters should
 451:FreeRTOS/queue.c ****      * configUSE_TRACE_FACILITY not be set to 1. */
 452:FreeRTOS/queue.c ****     ( void ) ucQueueType;
 453:FreeRTOS/queue.c **** 
 454:FreeRTOS/queue.c ****     if( uxItemSize == ( UBaseType_t ) 0 )
 455:FreeRTOS/queue.c ****     {
 456:FreeRTOS/queue.c ****         /* No RAM was allocated for the queue storage area, but PC head cannot
 457:FreeRTOS/queue.c ****          * be set to NULL because NULL is used as a key to say the queue is used as
 458:FreeRTOS/queue.c ****          * a mutex.  Therefore just set pcHead to point to the queue as a benign
 459:FreeRTOS/queue.c ****          * value that is known to be within the memory map. */
 460:FreeRTOS/queue.c ****         pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 461:FreeRTOS/queue.c ****     }
 462:FreeRTOS/queue.c ****     else
 463:FreeRTOS/queue.c ****     {
 464:FreeRTOS/queue.c ****         /* Set the head to the start of the queue storage area. */
 465:FreeRTOS/queue.c ****         pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 466:FreeRTOS/queue.c ****     }
 467:FreeRTOS/queue.c **** 
 468:FreeRTOS/queue.c ****     /* Initialise the queue members as described where the queue type is
 469:FreeRTOS/queue.c ****      * defined. */
 470:FreeRTOS/queue.c ****     pxNewQueue->uxLength = uxQueueLength;
 471:FreeRTOS/queue.c ****     pxNewQueue->uxItemSize = uxItemSize;
 472:FreeRTOS/queue.c ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 473:FreeRTOS/queue.c **** 
 474:FreeRTOS/queue.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 475:FreeRTOS/queue.c ****         {
 476:FreeRTOS/queue.c ****             pxNewQueue->ucQueueType = ucQueueType;
 477:FreeRTOS/queue.c ****         }
 478:FreeRTOS/queue.c ****     #endif /* configUSE_TRACE_FACILITY */
 479:FreeRTOS/queue.c **** 
 480:FreeRTOS/queue.c ****     #if ( configUSE_QUEUE_SETS == 1 )
 481:FreeRTOS/queue.c ****         {
 482:FreeRTOS/queue.c ****             pxNewQueue->pxQueueSetContainer = NULL;
 483:FreeRTOS/queue.c ****         }
 484:FreeRTOS/queue.c ****     #endif /* configUSE_QUEUE_SETS */
 485:FreeRTOS/queue.c **** 
 486:FreeRTOS/queue.c ****     traceQUEUE_CREATE( pxNewQueue );
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 10


 487:FreeRTOS/queue.c **** }
 488:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 489:FreeRTOS/queue.c **** 
 490:FreeRTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 491:FreeRTOS/queue.c **** 
 492:FreeRTOS/queue.c ****     static void prvInitialiseMutex( Queue_t * pxNewQueue )
 493:FreeRTOS/queue.c ****     {
 494:FreeRTOS/queue.c ****         if( pxNewQueue != NULL )
 495:FreeRTOS/queue.c ****         {
 496:FreeRTOS/queue.c ****             /* The queue create function will set all the queue structure members
 497:FreeRTOS/queue.c ****             * correctly for a generic queue, but this function is creating a
 498:FreeRTOS/queue.c ****             * mutex.  Overwrite those members that need to be set differently -
 499:FreeRTOS/queue.c ****             * in particular the information required for priority inheritance. */
 500:FreeRTOS/queue.c ****             pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 501:FreeRTOS/queue.c ****             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 502:FreeRTOS/queue.c **** 
 503:FreeRTOS/queue.c ****             /* In case this is a recursive mutex. */
 504:FreeRTOS/queue.c ****             pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 505:FreeRTOS/queue.c **** 
 506:FreeRTOS/queue.c ****             traceCREATE_MUTEX( pxNewQueue );
 507:FreeRTOS/queue.c **** 
 508:FreeRTOS/queue.c ****             /* Start with the semaphore in the expected state. */
 509:FreeRTOS/queue.c ****             ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 510:FreeRTOS/queue.c ****         }
 511:FreeRTOS/queue.c ****         else
 512:FreeRTOS/queue.c ****         {
 513:FreeRTOS/queue.c ****             traceCREATE_MUTEX_FAILED();
 514:FreeRTOS/queue.c ****         }
 515:FreeRTOS/queue.c ****     }
 516:FreeRTOS/queue.c **** 
 517:FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 518:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 519:FreeRTOS/queue.c **** 
 520:FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 521:FreeRTOS/queue.c **** 
 522:FreeRTOS/queue.c ****     QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 523:FreeRTOS/queue.c ****     {
 524:FreeRTOS/queue.c ****         QueueHandle_t xNewQueue;
 525:FreeRTOS/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 526:FreeRTOS/queue.c **** 
 527:FreeRTOS/queue.c ****         xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 528:FreeRTOS/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 529:FreeRTOS/queue.c **** 
 530:FreeRTOS/queue.c ****         return xNewQueue;
 531:FreeRTOS/queue.c ****     }
 532:FreeRTOS/queue.c **** 
 533:FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 534:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 535:FreeRTOS/queue.c **** 
 536:FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 537:FreeRTOS/queue.c **** 
 538:FreeRTOS/queue.c ****     QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
 539:FreeRTOS/queue.c ****                                            StaticQueue_t * pxStaticQueue )
 540:FreeRTOS/queue.c ****     {
 541:FreeRTOS/queue.c ****         QueueHandle_t xNewQueue;
 542:FreeRTOS/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 543:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 11


 544:FreeRTOS/queue.c ****         /* Prevent compiler warnings about unused parameters if
 545:FreeRTOS/queue.c ****          * configUSE_TRACE_FACILITY does not equal 1. */
 546:FreeRTOS/queue.c ****         ( void ) ucQueueType;
 547:FreeRTOS/queue.c **** 
 548:FreeRTOS/queue.c ****         xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQ
 549:FreeRTOS/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 550:FreeRTOS/queue.c **** 
 551:FreeRTOS/queue.c ****         return xNewQueue;
 552:FreeRTOS/queue.c ****     }
 553:FreeRTOS/queue.c **** 
 554:FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 555:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 556:FreeRTOS/queue.c **** 
 557:FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 558:FreeRTOS/queue.c **** 
 559:FreeRTOS/queue.c ****     TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 560:FreeRTOS/queue.c ****     {
 561:FreeRTOS/queue.c ****         TaskHandle_t pxReturn;
 562:FreeRTOS/queue.c ****         Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 563:FreeRTOS/queue.c **** 
 564:FreeRTOS/queue.c ****         /* This function is called by xSemaphoreGetMutexHolder(), and should not
 565:FreeRTOS/queue.c ****          * be called directly.  Note:  This is a good way of determining if the
 566:FreeRTOS/queue.c ****          * calling task is the mutex holder, but not a good way of determining the
 567:FreeRTOS/queue.c ****          * identity of the mutex holder, as the holder may change between the
 568:FreeRTOS/queue.c ****          * following critical section exiting and the function returning. */
 569:FreeRTOS/queue.c ****         taskENTER_CRITICAL();
 570:FreeRTOS/queue.c ****         {
 571:FreeRTOS/queue.c ****             if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 572:FreeRTOS/queue.c ****             {
 573:FreeRTOS/queue.c ****                 pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 574:FreeRTOS/queue.c ****             }
 575:FreeRTOS/queue.c ****             else
 576:FreeRTOS/queue.c ****             {
 577:FreeRTOS/queue.c ****                 pxReturn = NULL;
 578:FreeRTOS/queue.c ****             }
 579:FreeRTOS/queue.c ****         }
 580:FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
 581:FreeRTOS/queue.c **** 
 582:FreeRTOS/queue.c ****         return pxReturn;
 583:FreeRTOS/queue.c ****     } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 584:FreeRTOS/queue.c **** 
 585:FreeRTOS/queue.c **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 586:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 587:FreeRTOS/queue.c **** 
 588:FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 589:FreeRTOS/queue.c **** 
 590:FreeRTOS/queue.c ****     TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 591:FreeRTOS/queue.c ****     {
 592:FreeRTOS/queue.c ****         TaskHandle_t pxReturn;
 593:FreeRTOS/queue.c **** 
 594:FreeRTOS/queue.c ****         configASSERT( xSemaphore );
 595:FreeRTOS/queue.c **** 
 596:FreeRTOS/queue.c ****         /* Mutexes cannot be used in interrupt service routines, so the mutex
 597:FreeRTOS/queue.c ****          * holder should not change in an ISR, and therefore a critical section is
 598:FreeRTOS/queue.c ****          * not required here. */
 599:FreeRTOS/queue.c ****         if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 600:FreeRTOS/queue.c ****         {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 12


 601:FreeRTOS/queue.c ****             pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 602:FreeRTOS/queue.c ****         }
 603:FreeRTOS/queue.c ****         else
 604:FreeRTOS/queue.c ****         {
 605:FreeRTOS/queue.c ****             pxReturn = NULL;
 606:FreeRTOS/queue.c ****         }
 607:FreeRTOS/queue.c **** 
 608:FreeRTOS/queue.c ****         return pxReturn;
 609:FreeRTOS/queue.c ****     } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 610:FreeRTOS/queue.c **** 
 611:FreeRTOS/queue.c **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 612:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 613:FreeRTOS/queue.c **** 
 614:FreeRTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 615:FreeRTOS/queue.c **** 
 616:FreeRTOS/queue.c ****     BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 617:FreeRTOS/queue.c ****     {
 618:FreeRTOS/queue.c ****         BaseType_t xReturn;
 619:FreeRTOS/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 620:FreeRTOS/queue.c **** 
 621:FreeRTOS/queue.c ****         configASSERT( pxMutex );
 622:FreeRTOS/queue.c **** 
 623:FreeRTOS/queue.c ****         /* If this is the task that holds the mutex then xMutexHolder will not
 624:FreeRTOS/queue.c ****          * change outside of this task.  If this task does not hold the mutex then
 625:FreeRTOS/queue.c ****          * pxMutexHolder can never coincidentally equal the tasks handle, and as
 626:FreeRTOS/queue.c ****          * this is the only condition we are interested in it does not matter if
 627:FreeRTOS/queue.c ****          * pxMutexHolder is accessed simultaneously by another task.  Therefore no
 628:FreeRTOS/queue.c ****          * mutual exclusion is required to test the pxMutexHolder variable. */
 629:FreeRTOS/queue.c ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 630:FreeRTOS/queue.c ****         {
 631:FreeRTOS/queue.c ****             traceGIVE_MUTEX_RECURSIVE( pxMutex );
 632:FreeRTOS/queue.c **** 
 633:FreeRTOS/queue.c ****             /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 634:FreeRTOS/queue.c ****              * the task handle, therefore no underflow check is required.  Also,
 635:FreeRTOS/queue.c ****              * uxRecursiveCallCount is only modified by the mutex holder, and as
 636:FreeRTOS/queue.c ****              * there can only be one, no mutual exclusion is required to modify the
 637:FreeRTOS/queue.c ****              * uxRecursiveCallCount member. */
 638:FreeRTOS/queue.c ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 639:FreeRTOS/queue.c **** 
 640:FreeRTOS/queue.c ****             /* Has the recursive call count unwound to 0? */
 641:FreeRTOS/queue.c ****             if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 642:FreeRTOS/queue.c ****             {
 643:FreeRTOS/queue.c ****                 /* Return the mutex.  This will automatically unblock any other
 644:FreeRTOS/queue.c ****                  * task that might be waiting to access the mutex. */
 645:FreeRTOS/queue.c ****                 ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO
 646:FreeRTOS/queue.c ****             }
 647:FreeRTOS/queue.c ****             else
 648:FreeRTOS/queue.c ****             {
 649:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 650:FreeRTOS/queue.c ****             }
 651:FreeRTOS/queue.c **** 
 652:FreeRTOS/queue.c ****             xReturn = pdPASS;
 653:FreeRTOS/queue.c ****         }
 654:FreeRTOS/queue.c ****         else
 655:FreeRTOS/queue.c ****         {
 656:FreeRTOS/queue.c ****             /* The mutex cannot be given because the calling task is not the
 657:FreeRTOS/queue.c ****              * holder. */
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 13


 658:FreeRTOS/queue.c ****             xReturn = pdFAIL;
 659:FreeRTOS/queue.c **** 
 660:FreeRTOS/queue.c ****             traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 661:FreeRTOS/queue.c ****         }
 662:FreeRTOS/queue.c **** 
 663:FreeRTOS/queue.c ****         return xReturn;
 664:FreeRTOS/queue.c ****     }
 665:FreeRTOS/queue.c **** 
 666:FreeRTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 667:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 668:FreeRTOS/queue.c **** 
 669:FreeRTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 670:FreeRTOS/queue.c **** 
 671:FreeRTOS/queue.c ****     BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
 672:FreeRTOS/queue.c ****                                          TickType_t xTicksToWait )
 673:FreeRTOS/queue.c ****     {
 674:FreeRTOS/queue.c ****         BaseType_t xReturn;
 675:FreeRTOS/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 676:FreeRTOS/queue.c **** 
 677:FreeRTOS/queue.c ****         configASSERT( pxMutex );
 678:FreeRTOS/queue.c **** 
 679:FreeRTOS/queue.c ****         /* Comments regarding mutual exclusion as per those within
 680:FreeRTOS/queue.c ****          * xQueueGiveMutexRecursive(). */
 681:FreeRTOS/queue.c **** 
 682:FreeRTOS/queue.c ****         traceTAKE_MUTEX_RECURSIVE( pxMutex );
 683:FreeRTOS/queue.c **** 
 684:FreeRTOS/queue.c ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 685:FreeRTOS/queue.c ****         {
 686:FreeRTOS/queue.c ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 687:FreeRTOS/queue.c ****             xReturn = pdPASS;
 688:FreeRTOS/queue.c ****         }
 689:FreeRTOS/queue.c ****         else
 690:FreeRTOS/queue.c ****         {
 691:FreeRTOS/queue.c ****             xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 692:FreeRTOS/queue.c **** 
 693:FreeRTOS/queue.c ****             /* pdPASS will only be returned if the mutex was successfully
 694:FreeRTOS/queue.c ****              * obtained.  The calling task may have entered the Blocked state
 695:FreeRTOS/queue.c ****              * before reaching here. */
 696:FreeRTOS/queue.c ****             if( xReturn != pdFAIL )
 697:FreeRTOS/queue.c ****             {
 698:FreeRTOS/queue.c ****                 ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 699:FreeRTOS/queue.c ****             }
 700:FreeRTOS/queue.c ****             else
 701:FreeRTOS/queue.c ****             {
 702:FreeRTOS/queue.c ****                 traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 703:FreeRTOS/queue.c ****             }
 704:FreeRTOS/queue.c ****         }
 705:FreeRTOS/queue.c **** 
 706:FreeRTOS/queue.c ****         return xReturn;
 707:FreeRTOS/queue.c ****     }
 708:FreeRTOS/queue.c **** 
 709:FreeRTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 710:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 711:FreeRTOS/queue.c **** 
 712:FreeRTOS/queue.c **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 713:FreeRTOS/queue.c **** 
 714:FreeRTOS/queue.c ****     QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 14


 715:FreeRTOS/queue.c ****                                                        const UBaseType_t uxInitialCount,
 716:FreeRTOS/queue.c ****                                                        StaticQueue_t * pxStaticQueue )
 717:FreeRTOS/queue.c ****     {
 718:FreeRTOS/queue.c ****         QueueHandle_t xHandle;
 719:FreeRTOS/queue.c **** 
 720:FreeRTOS/queue.c ****         configASSERT( uxMaxCount != 0 );
 721:FreeRTOS/queue.c ****         configASSERT( uxInitialCount <= uxMaxCount );
 722:FreeRTOS/queue.c **** 
 723:FreeRTOS/queue.c ****         xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, px
 724:FreeRTOS/queue.c **** 
 725:FreeRTOS/queue.c ****         if( xHandle != NULL )
 726:FreeRTOS/queue.c ****         {
 727:FreeRTOS/queue.c ****             ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 728:FreeRTOS/queue.c **** 
 729:FreeRTOS/queue.c ****             traceCREATE_COUNTING_SEMAPHORE();
 730:FreeRTOS/queue.c ****         }
 731:FreeRTOS/queue.c ****         else
 732:FreeRTOS/queue.c ****         {
 733:FreeRTOS/queue.c ****             traceCREATE_COUNTING_SEMAPHORE_FAILED();
 734:FreeRTOS/queue.c ****         }
 735:FreeRTOS/queue.c **** 
 736:FreeRTOS/queue.c ****         return xHandle;
 737:FreeRTOS/queue.c ****     }
 738:FreeRTOS/queue.c **** 
 739:FreeRTOS/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 740:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 741:FreeRTOS/queue.c **** 
 742:FreeRTOS/queue.c **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 743:FreeRTOS/queue.c **** 
 744:FreeRTOS/queue.c ****     QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
 745:FreeRTOS/queue.c ****                                                  const UBaseType_t uxInitialCount )
 746:FreeRTOS/queue.c ****     {
 747:FreeRTOS/queue.c ****         QueueHandle_t xHandle;
 748:FreeRTOS/queue.c **** 
 749:FreeRTOS/queue.c ****         configASSERT( uxMaxCount != 0 );
 750:FreeRTOS/queue.c ****         configASSERT( uxInitialCount <= uxMaxCount );
 751:FreeRTOS/queue.c **** 
 752:FreeRTOS/queue.c ****         xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYP
 753:FreeRTOS/queue.c **** 
 754:FreeRTOS/queue.c ****         if( xHandle != NULL )
 755:FreeRTOS/queue.c ****         {
 756:FreeRTOS/queue.c ****             ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 757:FreeRTOS/queue.c **** 
 758:FreeRTOS/queue.c ****             traceCREATE_COUNTING_SEMAPHORE();
 759:FreeRTOS/queue.c ****         }
 760:FreeRTOS/queue.c ****         else
 761:FreeRTOS/queue.c ****         {
 762:FreeRTOS/queue.c ****             traceCREATE_COUNTING_SEMAPHORE_FAILED();
 763:FreeRTOS/queue.c ****         }
 764:FreeRTOS/queue.c **** 
 765:FreeRTOS/queue.c ****         return xHandle;
 766:FreeRTOS/queue.c ****     }
 767:FreeRTOS/queue.c **** 
 768:FreeRTOS/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 769:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 770:FreeRTOS/queue.c **** 
 771:FreeRTOS/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 15


 772:FreeRTOS/queue.c ****                               const void * const pvItemToQueue,
 773:FreeRTOS/queue.c ****                               TickType_t xTicksToWait,
 774:FreeRTOS/queue.c ****                               const BaseType_t xCopyPosition )
 775:FreeRTOS/queue.c **** {
 776:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 777:FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
 778:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 779:FreeRTOS/queue.c **** 
 780:FreeRTOS/queue.c ****     configASSERT( pxQueue );
 781:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 782:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 783:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 784:FreeRTOS/queue.c ****         {
 785:FreeRTOS/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 786:FreeRTOS/queue.c ****         }
 787:FreeRTOS/queue.c ****     #endif
 788:FreeRTOS/queue.c **** 
 789:FreeRTOS/queue.c ****     /*lint -save -e904 This function relaxes the coding standard somewhat to
 790:FreeRTOS/queue.c ****      * allow return statements within the function itself.  This is done in the
 791:FreeRTOS/queue.c ****      * interest of execution time efficiency. */
 792:FreeRTOS/queue.c ****     for( ; ; )
 793:FreeRTOS/queue.c ****     {
 794:FreeRTOS/queue.c ****         taskENTER_CRITICAL();
 795:FreeRTOS/queue.c ****         {
 796:FreeRTOS/queue.c ****             /* Is there room on the queue now?  The running task must be the
 797:FreeRTOS/queue.c ****              * highest priority task wanting to access the queue.  If the head item
 798:FreeRTOS/queue.c ****              * in the queue is to be overwritten then it does not matter if the
 799:FreeRTOS/queue.c ****              * queue is full. */
 800:FreeRTOS/queue.c ****             if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERW
 801:FreeRTOS/queue.c ****             {
 802:FreeRTOS/queue.c ****                 traceQUEUE_SEND( pxQueue );
 803:FreeRTOS/queue.c **** 
 804:FreeRTOS/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
 805:FreeRTOS/queue.c ****                     {
 806:FreeRTOS/queue.c ****                         const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 807:FreeRTOS/queue.c **** 
 808:FreeRTOS/queue.c ****                         xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition 
 809:FreeRTOS/queue.c **** 
 810:FreeRTOS/queue.c ****                         if( pxQueue->pxQueueSetContainer != NULL )
 811:FreeRTOS/queue.c ****                         {
 812:FreeRTOS/queue.c ****                             if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting 
 813:FreeRTOS/queue.c ****                             {
 814:FreeRTOS/queue.c ****                                 /* Do not notify the queue set as an existing item
 815:FreeRTOS/queue.c ****                                  * was overwritten in the queue so the number of items
 816:FreeRTOS/queue.c ****                                  * in the queue has not changed. */
 817:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 818:FreeRTOS/queue.c ****                             }
 819:FreeRTOS/queue.c ****                             else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 820:FreeRTOS/queue.c ****                             {
 821:FreeRTOS/queue.c ****                                 /* The queue is a member of a queue set, and posting
 822:FreeRTOS/queue.c ****                                  * to the queue set caused a higher priority task to
 823:FreeRTOS/queue.c ****                                  * unblock. A context switch is required. */
 824:FreeRTOS/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
 825:FreeRTOS/queue.c ****                             }
 826:FreeRTOS/queue.c ****                             else
 827:FreeRTOS/queue.c ****                             {
 828:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 16


 829:FreeRTOS/queue.c ****                             }
 830:FreeRTOS/queue.c ****                         }
 831:FreeRTOS/queue.c ****                         else
 832:FreeRTOS/queue.c ****                         {
 833:FreeRTOS/queue.c ****                             /* If there was a task waiting for data to arrive on the
 834:FreeRTOS/queue.c ****                              * queue then unblock it now. */
 835:FreeRTOS/queue.c ****                             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALS
 836:FreeRTOS/queue.c ****                             {
 837:FreeRTOS/queue.c ****                                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) 
 838:FreeRTOS/queue.c ****                                 {
 839:FreeRTOS/queue.c ****                                     /* The unblocked task has a priority higher than
 840:FreeRTOS/queue.c ****                                      * our own so yield immediately.  Yes it is ok to
 841:FreeRTOS/queue.c ****                                      * do this from within the critical section - the
 842:FreeRTOS/queue.c ****                                      * kernel takes care of that. */
 843:FreeRTOS/queue.c ****                                     queueYIELD_IF_USING_PREEMPTION();
 844:FreeRTOS/queue.c ****                                 }
 845:FreeRTOS/queue.c ****                                 else
 846:FreeRTOS/queue.c ****                                 {
 847:FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
 848:FreeRTOS/queue.c ****                                 }
 849:FreeRTOS/queue.c ****                             }
 850:FreeRTOS/queue.c ****                             else if( xYieldRequired != pdFALSE )
 851:FreeRTOS/queue.c ****                             {
 852:FreeRTOS/queue.c ****                                 /* This path is a special case that will only get
 853:FreeRTOS/queue.c ****                                  * executed if the task was holding multiple mutexes
 854:FreeRTOS/queue.c ****                                  * and the mutexes were given back in an order that is
 855:FreeRTOS/queue.c ****                                  * different to that in which they were taken. */
 856:FreeRTOS/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
 857:FreeRTOS/queue.c ****                             }
 858:FreeRTOS/queue.c ****                             else
 859:FreeRTOS/queue.c ****                             {
 860:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 861:FreeRTOS/queue.c ****                             }
 862:FreeRTOS/queue.c ****                         }
 863:FreeRTOS/queue.c ****                     }
 864:FreeRTOS/queue.c ****                 #else /* configUSE_QUEUE_SETS */
 865:FreeRTOS/queue.c ****                     {
 866:FreeRTOS/queue.c ****                         xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition 
 867:FreeRTOS/queue.c **** 
 868:FreeRTOS/queue.c ****                         /* If there was a task waiting for data to arrive on the
 869:FreeRTOS/queue.c ****                          * queue then unblock it now. */
 870:FreeRTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 871:FreeRTOS/queue.c ****                         {
 872:FreeRTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
 873:FreeRTOS/queue.c ****                             {
 874:FreeRTOS/queue.c ****                                 /* The unblocked task has a priority higher than
 875:FreeRTOS/queue.c ****                                  * our own so yield immediately.  Yes it is ok to do
 876:FreeRTOS/queue.c ****                                  * this from within the critical section - the kernel
 877:FreeRTOS/queue.c ****                                  * takes care of that. */
 878:FreeRTOS/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
 879:FreeRTOS/queue.c ****                             }
 880:FreeRTOS/queue.c ****                             else
 881:FreeRTOS/queue.c ****                             {
 882:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 883:FreeRTOS/queue.c ****                             }
 884:FreeRTOS/queue.c ****                         }
 885:FreeRTOS/queue.c ****                         else if( xYieldRequired != pdFALSE )
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 17


 886:FreeRTOS/queue.c ****                         {
 887:FreeRTOS/queue.c ****                             /* This path is a special case that will only get
 888:FreeRTOS/queue.c ****                              * executed if the task was holding multiple mutexes and
 889:FreeRTOS/queue.c ****                              * the mutexes were given back in an order that is
 890:FreeRTOS/queue.c ****                              * different to that in which they were taken. */
 891:FreeRTOS/queue.c ****                             queueYIELD_IF_USING_PREEMPTION();
 892:FreeRTOS/queue.c ****                         }
 893:FreeRTOS/queue.c ****                         else
 894:FreeRTOS/queue.c ****                         {
 895:FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
 896:FreeRTOS/queue.c ****                         }
 897:FreeRTOS/queue.c ****                     }
 898:FreeRTOS/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
 899:FreeRTOS/queue.c **** 
 900:FreeRTOS/queue.c ****                 taskEXIT_CRITICAL();
 901:FreeRTOS/queue.c ****                 return pdPASS;
 902:FreeRTOS/queue.c ****             }
 903:FreeRTOS/queue.c ****             else
 904:FreeRTOS/queue.c ****             {
 905:FreeRTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
 906:FreeRTOS/queue.c ****                 {
 907:FreeRTOS/queue.c ****                     /* The queue was full and no block time is specified (or
 908:FreeRTOS/queue.c ****                      * the block time has expired) so leave now. */
 909:FreeRTOS/queue.c ****                     taskEXIT_CRITICAL();
 910:FreeRTOS/queue.c **** 
 911:FreeRTOS/queue.c ****                     /* Return to the original privilege level before exiting
 912:FreeRTOS/queue.c ****                      * the function. */
 913:FreeRTOS/queue.c ****                     traceQUEUE_SEND_FAILED( pxQueue );
 914:FreeRTOS/queue.c ****                     return errQUEUE_FULL;
 915:FreeRTOS/queue.c ****                 }
 916:FreeRTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
 917:FreeRTOS/queue.c ****                 {
 918:FreeRTOS/queue.c ****                     /* The queue was full and a block time was specified so
 919:FreeRTOS/queue.c ****                      * configure the timeout structure. */
 920:FreeRTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
 921:FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 922:FreeRTOS/queue.c ****                 }
 923:FreeRTOS/queue.c ****                 else
 924:FreeRTOS/queue.c ****                 {
 925:FreeRTOS/queue.c ****                     /* Entry time was already set. */
 926:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
 927:FreeRTOS/queue.c ****                 }
 928:FreeRTOS/queue.c ****             }
 929:FreeRTOS/queue.c ****         }
 930:FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
 931:FreeRTOS/queue.c **** 
 932:FreeRTOS/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
 933:FreeRTOS/queue.c ****          * now the critical section has been exited. */
 934:FreeRTOS/queue.c **** 
 935:FreeRTOS/queue.c ****         vTaskSuspendAll();
 936:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 937:FreeRTOS/queue.c **** 
 938:FreeRTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
 939:FreeRTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 940:FreeRTOS/queue.c ****         {
 941:FreeRTOS/queue.c ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
 942:FreeRTOS/queue.c ****             {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 18


 943:FreeRTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 944:FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 945:FreeRTOS/queue.c **** 
 946:FreeRTOS/queue.c ****                 /* Unlocking the queue means queue events can effect the
 947:FreeRTOS/queue.c ****                  * event list.  It is possible that interrupts occurring now
 948:FreeRTOS/queue.c ****                  * remove this task from the event list again - but as the
 949:FreeRTOS/queue.c ****                  * scheduler is suspended the task will go onto the pending
 950:FreeRTOS/queue.c ****                  * ready last instead of the actual ready list. */
 951:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 952:FreeRTOS/queue.c **** 
 953:FreeRTOS/queue.c ****                 /* Resuming the scheduler will move tasks from the pending
 954:FreeRTOS/queue.c ****                  * ready list into the ready list - so it is feasible that this
 955:FreeRTOS/queue.c ****                  * task is already in a ready list before it yields - in which
 956:FreeRTOS/queue.c ****                  * case the yield will not cause a context switch unless there
 957:FreeRTOS/queue.c ****                  * is also a higher priority task in the pending ready list. */
 958:FreeRTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
 959:FreeRTOS/queue.c ****                 {
 960:FreeRTOS/queue.c ****                     portYIELD_WITHIN_API();
 961:FreeRTOS/queue.c ****                 }
 962:FreeRTOS/queue.c ****             }
 963:FreeRTOS/queue.c ****             else
 964:FreeRTOS/queue.c ****             {
 965:FreeRTOS/queue.c ****                 /* Try again. */
 966:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 967:FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
 968:FreeRTOS/queue.c ****             }
 969:FreeRTOS/queue.c ****         }
 970:FreeRTOS/queue.c ****         else
 971:FreeRTOS/queue.c ****         {
 972:FreeRTOS/queue.c ****             /* The timeout has expired. */
 973:FreeRTOS/queue.c ****             prvUnlockQueue( pxQueue );
 974:FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
 975:FreeRTOS/queue.c **** 
 976:FreeRTOS/queue.c ****             traceQUEUE_SEND_FAILED( pxQueue );
 977:FreeRTOS/queue.c ****             return errQUEUE_FULL;
 978:FreeRTOS/queue.c ****         }
 979:FreeRTOS/queue.c ****     } /*lint -restore */
 980:FreeRTOS/queue.c **** }
 981:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 982:FreeRTOS/queue.c **** 
 983:FreeRTOS/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
 984:FreeRTOS/queue.c ****                                      const void * const pvItemToQueue,
 985:FreeRTOS/queue.c ****                                      BaseType_t * const pxHigherPriorityTaskWoken,
 986:FreeRTOS/queue.c ****                                      const BaseType_t xCopyPosition )
 987:FreeRTOS/queue.c **** {
 988:FreeRTOS/queue.c ****     BaseType_t xReturn;
 989:FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
 990:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 991:FreeRTOS/queue.c **** 
 992:FreeRTOS/queue.c ****     configASSERT( pxQueue );
 993:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 994:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 995:FreeRTOS/queue.c **** 
 996:FreeRTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
 997:FreeRTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
 998:FreeRTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
 999:FreeRTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 19


1000:FreeRTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1001:FreeRTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1002:FreeRTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1003:FreeRTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1004:FreeRTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1005:FreeRTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1006:FreeRTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1007:FreeRTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1008:FreeRTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1009:FreeRTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1010:FreeRTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1011:FreeRTOS/queue.c **** 
1012:FreeRTOS/queue.c ****     /* Similar to xQueueGenericSend, except without blocking if there is no room
1013:FreeRTOS/queue.c ****      * in the queue.  Also don't directly wake a task that was blocked on a queue
1014:FreeRTOS/queue.c ****      * read, instead return a flag to say whether a context switch is required or
1015:FreeRTOS/queue.c ****      * not (i.e. has a task with a higher priority than us been woken by this
1016:FreeRTOS/queue.c ****      * post). */
1017:FreeRTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1018:FreeRTOS/queue.c ****     {
1019:FreeRTOS/queue.c ****         if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE
1020:FreeRTOS/queue.c ****         {
1021:FreeRTOS/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
1022:FreeRTOS/queue.c ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
1023:FreeRTOS/queue.c **** 
1024:FreeRTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
1025:FreeRTOS/queue.c **** 
1026:FreeRTOS/queue.c ****             /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
1027:FreeRTOS/queue.c ****              *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
1028:FreeRTOS/queue.c ****              *  in a task disinheriting a priority and prvCopyDataToQueue() can be
1029:FreeRTOS/queue.c ****              *  called here even though the disinherit function does not check if
1030:FreeRTOS/queue.c ****              *  the scheduler is suspended before accessing the ready lists. */
1031:FreeRTOS/queue.c ****             ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1032:FreeRTOS/queue.c **** 
1033:FreeRTOS/queue.c ****             /* The event list is not altered if the queue is locked.  This will
1034:FreeRTOS/queue.c ****              * be done when the queue is unlocked later. */
1035:FreeRTOS/queue.c ****             if( cTxLock == queueUNLOCKED )
1036:FreeRTOS/queue.c ****             {
1037:FreeRTOS/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
1038:FreeRTOS/queue.c ****                     {
1039:FreeRTOS/queue.c ****                         if( pxQueue->pxQueueSetContainer != NULL )
1040:FreeRTOS/queue.c ****                         {
1041:FreeRTOS/queue.c ****                             if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting 
1042:FreeRTOS/queue.c ****                             {
1043:FreeRTOS/queue.c ****                                 /* Do not notify the queue set as an existing item
1044:FreeRTOS/queue.c ****                                  * was overwritten in the queue so the number of items
1045:FreeRTOS/queue.c ****                                  * in the queue has not changed. */
1046:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1047:FreeRTOS/queue.c ****                             }
1048:FreeRTOS/queue.c ****                             else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1049:FreeRTOS/queue.c ****                             {
1050:FreeRTOS/queue.c ****                                 /* The queue is a member of a queue set, and posting
1051:FreeRTOS/queue.c ****                                  * to the queue set caused a higher priority task to
1052:FreeRTOS/queue.c ****                                  * unblock.  A context switch is required. */
1053:FreeRTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1054:FreeRTOS/queue.c ****                                 {
1055:FreeRTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1056:FreeRTOS/queue.c ****                                 }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 20


1057:FreeRTOS/queue.c ****                                 else
1058:FreeRTOS/queue.c ****                                 {
1059:FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1060:FreeRTOS/queue.c ****                                 }
1061:FreeRTOS/queue.c ****                             }
1062:FreeRTOS/queue.c ****                             else
1063:FreeRTOS/queue.c ****                             {
1064:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1065:FreeRTOS/queue.c ****                             }
1066:FreeRTOS/queue.c ****                         }
1067:FreeRTOS/queue.c ****                         else
1068:FreeRTOS/queue.c ****                         {
1069:FreeRTOS/queue.c ****                             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALS
1070:FreeRTOS/queue.c ****                             {
1071:FreeRTOS/queue.c ****                                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) 
1072:FreeRTOS/queue.c ****                                 {
1073:FreeRTOS/queue.c ****                                     /* The task waiting has a higher priority so
1074:FreeRTOS/queue.c ****                                      *  record that a context switch is required. */
1075:FreeRTOS/queue.c ****                                     if( pxHigherPriorityTaskWoken != NULL )
1076:FreeRTOS/queue.c ****                                     {
1077:FreeRTOS/queue.c ****                                         *pxHigherPriorityTaskWoken = pdTRUE;
1078:FreeRTOS/queue.c ****                                     }
1079:FreeRTOS/queue.c ****                                     else
1080:FreeRTOS/queue.c ****                                     {
1081:FreeRTOS/queue.c ****                                         mtCOVERAGE_TEST_MARKER();
1082:FreeRTOS/queue.c ****                                     }
1083:FreeRTOS/queue.c ****                                 }
1084:FreeRTOS/queue.c ****                                 else
1085:FreeRTOS/queue.c ****                                 {
1086:FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1087:FreeRTOS/queue.c ****                                 }
1088:FreeRTOS/queue.c ****                             }
1089:FreeRTOS/queue.c ****                             else
1090:FreeRTOS/queue.c ****                             {
1091:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1092:FreeRTOS/queue.c ****                             }
1093:FreeRTOS/queue.c ****                         }
1094:FreeRTOS/queue.c ****                     }
1095:FreeRTOS/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1096:FreeRTOS/queue.c ****                     {
1097:FreeRTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1098:FreeRTOS/queue.c ****                         {
1099:FreeRTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1100:FreeRTOS/queue.c ****                             {
1101:FreeRTOS/queue.c ****                                 /* The task waiting has a higher priority so record that a
1102:FreeRTOS/queue.c ****                                  * context switch is required. */
1103:FreeRTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1104:FreeRTOS/queue.c ****                                 {
1105:FreeRTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1106:FreeRTOS/queue.c ****                                 }
1107:FreeRTOS/queue.c ****                                 else
1108:FreeRTOS/queue.c ****                                 {
1109:FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1110:FreeRTOS/queue.c ****                                 }
1111:FreeRTOS/queue.c ****                             }
1112:FreeRTOS/queue.c ****                             else
1113:FreeRTOS/queue.c ****                             {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 21


1114:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1115:FreeRTOS/queue.c ****                             }
1116:FreeRTOS/queue.c ****                         }
1117:FreeRTOS/queue.c ****                         else
1118:FreeRTOS/queue.c ****                         {
1119:FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1120:FreeRTOS/queue.c ****                         }
1121:FreeRTOS/queue.c **** 
1122:FreeRTOS/queue.c ****                         /* Not used in this path. */
1123:FreeRTOS/queue.c ****                         ( void ) uxPreviousMessagesWaiting;
1124:FreeRTOS/queue.c ****                     }
1125:FreeRTOS/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1126:FreeRTOS/queue.c ****             }
1127:FreeRTOS/queue.c ****             else
1128:FreeRTOS/queue.c ****             {
1129:FreeRTOS/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1130:FreeRTOS/queue.c ****                  * knows that data was posted while it was locked. */
1131:FreeRTOS/queue.c ****                 configASSERT( cTxLock != queueINT8_MAX );
1132:FreeRTOS/queue.c **** 
1133:FreeRTOS/queue.c ****                 pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1134:FreeRTOS/queue.c ****             }
1135:FreeRTOS/queue.c **** 
1136:FreeRTOS/queue.c ****             xReturn = pdPASS;
1137:FreeRTOS/queue.c ****         }
1138:FreeRTOS/queue.c ****         else
1139:FreeRTOS/queue.c ****         {
1140:FreeRTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1141:FreeRTOS/queue.c ****             xReturn = errQUEUE_FULL;
1142:FreeRTOS/queue.c ****         }
1143:FreeRTOS/queue.c ****     }
1144:FreeRTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1145:FreeRTOS/queue.c **** 
1146:FreeRTOS/queue.c ****     return xReturn;
1147:FreeRTOS/queue.c **** }
1148:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1149:FreeRTOS/queue.c **** 
1150:FreeRTOS/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
1151:FreeRTOS/queue.c ****                               BaseType_t * const pxHigherPriorityTaskWoken )
1152:FreeRTOS/queue.c **** {
1153:FreeRTOS/queue.c ****     BaseType_t xReturn;
1154:FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1155:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
1156:FreeRTOS/queue.c **** 
1157:FreeRTOS/queue.c ****     /* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1158:FreeRTOS/queue.c ****      * item size is 0.  Don't directly wake a task that was blocked on a queue
1159:FreeRTOS/queue.c ****      * read, instead return a flag to say whether a context switch is required or
1160:FreeRTOS/queue.c ****      * not (i.e. has a task with a higher priority than us been woken by this
1161:FreeRTOS/queue.c ****      * post). */
1162:FreeRTOS/queue.c **** 
1163:FreeRTOS/queue.c ****     configASSERT( pxQueue );
1164:FreeRTOS/queue.c **** 
1165:FreeRTOS/queue.c ****     /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1166:FreeRTOS/queue.c ****      * if the item size is not 0. */
1167:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize == 0 );
1168:FreeRTOS/queue.c **** 
1169:FreeRTOS/queue.c ****     /* Normally a mutex would not be given from an interrupt, especially if
1170:FreeRTOS/queue.c ****      * there is a mutex holder, as priority inheritance makes no sense for an
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 22


1171:FreeRTOS/queue.c ****      * interrupts, only tasks. */
1172:FreeRTOS/queue.c ****     configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMu
1173:FreeRTOS/queue.c **** 
1174:FreeRTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1175:FreeRTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1176:FreeRTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1177:FreeRTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1178:FreeRTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1179:FreeRTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1180:FreeRTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1181:FreeRTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1182:FreeRTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1183:FreeRTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1184:FreeRTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1185:FreeRTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1186:FreeRTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1187:FreeRTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1188:FreeRTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1189:FreeRTOS/queue.c **** 
1190:FreeRTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1191:FreeRTOS/queue.c ****     {
1192:FreeRTOS/queue.c ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1193:FreeRTOS/queue.c **** 
1194:FreeRTOS/queue.c ****         /* When the queue is used to implement a semaphore no data is ever
1195:FreeRTOS/queue.c ****          * moved through the queue but it is still valid to see if the queue 'has
1196:FreeRTOS/queue.c ****          * space'. */
1197:FreeRTOS/queue.c ****         if( uxMessagesWaiting < pxQueue->uxLength )
1198:FreeRTOS/queue.c ****         {
1199:FreeRTOS/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
1200:FreeRTOS/queue.c **** 
1201:FreeRTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
1202:FreeRTOS/queue.c **** 
1203:FreeRTOS/queue.c ****             /* A task can only have an inherited priority if it is a mutex
1204:FreeRTOS/queue.c ****              * holder - and if there is a mutex holder then the mutex cannot be
1205:FreeRTOS/queue.c ****              * given from an ISR.  As this is the ISR version of the function it
1206:FreeRTOS/queue.c ****              * can be assumed there is no mutex holder and no need to determine if
1207:FreeRTOS/queue.c ****              * priority disinheritance is needed.  Simply increase the count of
1208:FreeRTOS/queue.c ****              * messages (semaphores) available. */
1209:FreeRTOS/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1210:FreeRTOS/queue.c **** 
1211:FreeRTOS/queue.c ****             /* The event list is not altered if the queue is locked.  This will
1212:FreeRTOS/queue.c ****              * be done when the queue is unlocked later. */
1213:FreeRTOS/queue.c ****             if( cTxLock == queueUNLOCKED )
1214:FreeRTOS/queue.c ****             {
1215:FreeRTOS/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
1216:FreeRTOS/queue.c ****                     {
1217:FreeRTOS/queue.c ****                         if( pxQueue->pxQueueSetContainer != NULL )
1218:FreeRTOS/queue.c ****                         {
1219:FreeRTOS/queue.c ****                             if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1220:FreeRTOS/queue.c ****                             {
1221:FreeRTOS/queue.c ****                                 /* The semaphore is a member of a queue set, and
1222:FreeRTOS/queue.c ****                                  * posting to the queue set caused a higher priority
1223:FreeRTOS/queue.c ****                                  * task to unblock.  A context switch is required. */
1224:FreeRTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1225:FreeRTOS/queue.c ****                                 {
1226:FreeRTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1227:FreeRTOS/queue.c ****                                 }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 23


1228:FreeRTOS/queue.c ****                                 else
1229:FreeRTOS/queue.c ****                                 {
1230:FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1231:FreeRTOS/queue.c ****                                 }
1232:FreeRTOS/queue.c ****                             }
1233:FreeRTOS/queue.c ****                             else
1234:FreeRTOS/queue.c ****                             {
1235:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1236:FreeRTOS/queue.c ****                             }
1237:FreeRTOS/queue.c ****                         }
1238:FreeRTOS/queue.c ****                         else
1239:FreeRTOS/queue.c ****                         {
1240:FreeRTOS/queue.c ****                             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALS
1241:FreeRTOS/queue.c ****                             {
1242:FreeRTOS/queue.c ****                                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) 
1243:FreeRTOS/queue.c ****                                 {
1244:FreeRTOS/queue.c ****                                     /* The task waiting has a higher priority so
1245:FreeRTOS/queue.c ****                                      *  record that a context switch is required. */
1246:FreeRTOS/queue.c ****                                     if( pxHigherPriorityTaskWoken != NULL )
1247:FreeRTOS/queue.c ****                                     {
1248:FreeRTOS/queue.c ****                                         *pxHigherPriorityTaskWoken = pdTRUE;
1249:FreeRTOS/queue.c ****                                     }
1250:FreeRTOS/queue.c ****                                     else
1251:FreeRTOS/queue.c ****                                     {
1252:FreeRTOS/queue.c ****                                         mtCOVERAGE_TEST_MARKER();
1253:FreeRTOS/queue.c ****                                     }
1254:FreeRTOS/queue.c ****                                 }
1255:FreeRTOS/queue.c ****                                 else
1256:FreeRTOS/queue.c ****                                 {
1257:FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1258:FreeRTOS/queue.c ****                                 }
1259:FreeRTOS/queue.c ****                             }
1260:FreeRTOS/queue.c ****                             else
1261:FreeRTOS/queue.c ****                             {
1262:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1263:FreeRTOS/queue.c ****                             }
1264:FreeRTOS/queue.c ****                         }
1265:FreeRTOS/queue.c ****                     }
1266:FreeRTOS/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1267:FreeRTOS/queue.c ****                     {
1268:FreeRTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1269:FreeRTOS/queue.c ****                         {
1270:FreeRTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1271:FreeRTOS/queue.c ****                             {
1272:FreeRTOS/queue.c ****                                 /* The task waiting has a higher priority so record that a
1273:FreeRTOS/queue.c ****                                  * context switch is required. */
1274:FreeRTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1275:FreeRTOS/queue.c ****                                 {
1276:FreeRTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1277:FreeRTOS/queue.c ****                                 }
1278:FreeRTOS/queue.c ****                                 else
1279:FreeRTOS/queue.c ****                                 {
1280:FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1281:FreeRTOS/queue.c ****                                 }
1282:FreeRTOS/queue.c ****                             }
1283:FreeRTOS/queue.c ****                             else
1284:FreeRTOS/queue.c ****                             {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 24


1285:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1286:FreeRTOS/queue.c ****                             }
1287:FreeRTOS/queue.c ****                         }
1288:FreeRTOS/queue.c ****                         else
1289:FreeRTOS/queue.c ****                         {
1290:FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1291:FreeRTOS/queue.c ****                         }
1292:FreeRTOS/queue.c ****                     }
1293:FreeRTOS/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1294:FreeRTOS/queue.c ****             }
1295:FreeRTOS/queue.c ****             else
1296:FreeRTOS/queue.c ****             {
1297:FreeRTOS/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1298:FreeRTOS/queue.c ****                  * knows that data was posted while it was locked. */
1299:FreeRTOS/queue.c ****                 configASSERT( cTxLock != queueINT8_MAX );
1300:FreeRTOS/queue.c **** 
1301:FreeRTOS/queue.c ****                 pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1302:FreeRTOS/queue.c ****             }
1303:FreeRTOS/queue.c **** 
1304:FreeRTOS/queue.c ****             xReturn = pdPASS;
1305:FreeRTOS/queue.c ****         }
1306:FreeRTOS/queue.c ****         else
1307:FreeRTOS/queue.c ****         {
1308:FreeRTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1309:FreeRTOS/queue.c ****             xReturn = errQUEUE_FULL;
1310:FreeRTOS/queue.c ****         }
1311:FreeRTOS/queue.c ****     }
1312:FreeRTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1313:FreeRTOS/queue.c **** 
1314:FreeRTOS/queue.c ****     return xReturn;
1315:FreeRTOS/queue.c **** }
1316:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1317:FreeRTOS/queue.c **** 
1318:FreeRTOS/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue,
1319:FreeRTOS/queue.c ****                           void * const pvBuffer,
1320:FreeRTOS/queue.c ****                           TickType_t xTicksToWait )
1321:FreeRTOS/queue.c **** {
1322:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
1323:FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
1324:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
1325:FreeRTOS/queue.c **** 
1326:FreeRTOS/queue.c ****     /* Check the pointer is not NULL. */
1327:FreeRTOS/queue.c ****     configASSERT( ( pxQueue ) );
1328:FreeRTOS/queue.c **** 
1329:FreeRTOS/queue.c ****     /* The buffer into which data is received can only be NULL if the data size
1330:FreeRTOS/queue.c ****      * is zero (so no data is copied into the buffer). */
1331:FreeRTOS/queue.c ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
1332:FreeRTOS/queue.c **** 
1333:FreeRTOS/queue.c ****     /* Cannot block if the scheduler is suspended. */
1334:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1335:FreeRTOS/queue.c ****         {
1336:FreeRTOS/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
1337:FreeRTOS/queue.c ****         }
1338:FreeRTOS/queue.c ****     #endif
1339:FreeRTOS/queue.c **** 
1340:FreeRTOS/queue.c ****     /*lint -save -e904  This function relaxes the coding standard somewhat to
1341:FreeRTOS/queue.c ****      * allow return statements within the function itself.  This is done in the
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 25


1342:FreeRTOS/queue.c ****      * interest of execution time efficiency. */
1343:FreeRTOS/queue.c ****     for( ; ; )
1344:FreeRTOS/queue.c ****     {
1345:FreeRTOS/queue.c ****         taskENTER_CRITICAL();
1346:FreeRTOS/queue.c ****         {
1347:FreeRTOS/queue.c ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1348:FreeRTOS/queue.c **** 
1349:FreeRTOS/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1350:FreeRTOS/queue.c ****              * must be the highest priority task wanting to access the queue. */
1351:FreeRTOS/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1352:FreeRTOS/queue.c ****             {
1353:FreeRTOS/queue.c ****                 /* Data available, remove one item. */
1354:FreeRTOS/queue.c ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
1355:FreeRTOS/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
1356:FreeRTOS/queue.c ****                 pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1357:FreeRTOS/queue.c **** 
1358:FreeRTOS/queue.c ****                 /* There is now space in the queue, were any tasks waiting to
1359:FreeRTOS/queue.c ****                  * post to the queue?  If so, unblock the highest priority waiting
1360:FreeRTOS/queue.c ****                  * task. */
1361:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1362:FreeRTOS/queue.c ****                 {
1363:FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1364:FreeRTOS/queue.c ****                     {
1365:FreeRTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1366:FreeRTOS/queue.c ****                     }
1367:FreeRTOS/queue.c ****                     else
1368:FreeRTOS/queue.c ****                     {
1369:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1370:FreeRTOS/queue.c ****                     }
1371:FreeRTOS/queue.c ****                 }
1372:FreeRTOS/queue.c ****                 else
1373:FreeRTOS/queue.c ****                 {
1374:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1375:FreeRTOS/queue.c ****                 }
1376:FreeRTOS/queue.c **** 
1377:FreeRTOS/queue.c ****                 taskEXIT_CRITICAL();
1378:FreeRTOS/queue.c ****                 return pdPASS;
1379:FreeRTOS/queue.c ****             }
1380:FreeRTOS/queue.c ****             else
1381:FreeRTOS/queue.c ****             {
1382:FreeRTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1383:FreeRTOS/queue.c ****                 {
1384:FreeRTOS/queue.c ****                     /* The queue was empty and no block time is specified (or
1385:FreeRTOS/queue.c ****                      * the block time has expired) so leave now. */
1386:FreeRTOS/queue.c ****                     taskEXIT_CRITICAL();
1387:FreeRTOS/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1388:FreeRTOS/queue.c ****                     return errQUEUE_EMPTY;
1389:FreeRTOS/queue.c ****                 }
1390:FreeRTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1391:FreeRTOS/queue.c ****                 {
1392:FreeRTOS/queue.c ****                     /* The queue was empty and a block time was specified so
1393:FreeRTOS/queue.c ****                      * configure the timeout structure. */
1394:FreeRTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1395:FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
1396:FreeRTOS/queue.c ****                 }
1397:FreeRTOS/queue.c ****                 else
1398:FreeRTOS/queue.c ****                 {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 26


1399:FreeRTOS/queue.c ****                     /* Entry time was already set. */
1400:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1401:FreeRTOS/queue.c ****                 }
1402:FreeRTOS/queue.c ****             }
1403:FreeRTOS/queue.c ****         }
1404:FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
1405:FreeRTOS/queue.c **** 
1406:FreeRTOS/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1407:FreeRTOS/queue.c ****          * now the critical section has been exited. */
1408:FreeRTOS/queue.c **** 
1409:FreeRTOS/queue.c ****         vTaskSuspendAll();
1410:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
1411:FreeRTOS/queue.c **** 
1412:FreeRTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1413:FreeRTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1414:FreeRTOS/queue.c ****         {
1415:FreeRTOS/queue.c ****             /* The timeout has not expired.  If the queue is still empty place
1416:FreeRTOS/queue.c ****              * the task on the list of tasks waiting to receive from the queue. */
1417:FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1418:FreeRTOS/queue.c ****             {
1419:FreeRTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1420:FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1421:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
1422:FreeRTOS/queue.c **** 
1423:FreeRTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1424:FreeRTOS/queue.c ****                 {
1425:FreeRTOS/queue.c ****                     portYIELD_WITHIN_API();
1426:FreeRTOS/queue.c ****                 }
1427:FreeRTOS/queue.c ****                 else
1428:FreeRTOS/queue.c ****                 {
1429:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1430:FreeRTOS/queue.c ****                 }
1431:FreeRTOS/queue.c ****             }
1432:FreeRTOS/queue.c ****             else
1433:FreeRTOS/queue.c ****             {
1434:FreeRTOS/queue.c ****                 /* The queue contains data again.  Loop back to try and read the
1435:FreeRTOS/queue.c ****                  * data. */
1436:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
1437:FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
1438:FreeRTOS/queue.c ****             }
1439:FreeRTOS/queue.c ****         }
1440:FreeRTOS/queue.c ****         else
1441:FreeRTOS/queue.c ****         {
1442:FreeRTOS/queue.c ****             /* Timed out.  If there is no data in the queue exit, otherwise loop
1443:FreeRTOS/queue.c ****              * back and attempt to read the data. */
1444:FreeRTOS/queue.c ****             prvUnlockQueue( pxQueue );
1445:FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
1446:FreeRTOS/queue.c **** 
1447:FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1448:FreeRTOS/queue.c ****             {
1449:FreeRTOS/queue.c ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1450:FreeRTOS/queue.c ****                 return errQUEUE_EMPTY;
1451:FreeRTOS/queue.c ****             }
1452:FreeRTOS/queue.c ****             else
1453:FreeRTOS/queue.c ****             {
1454:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1455:FreeRTOS/queue.c ****             }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 27


1456:FreeRTOS/queue.c ****         }
1457:FreeRTOS/queue.c ****     } /*lint -restore */
1458:FreeRTOS/queue.c **** }
1459:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1460:FreeRTOS/queue.c **** 
1461:FreeRTOS/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
1462:FreeRTOS/queue.c ****                                 TickType_t xTicksToWait )
1463:FreeRTOS/queue.c **** {
1464:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
1465:FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
1466:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
1467:FreeRTOS/queue.c **** 
1468:FreeRTOS/queue.c ****     #if ( configUSE_MUTEXES == 1 )
1469:FreeRTOS/queue.c ****         BaseType_t xInheritanceOccurred = pdFALSE;
1470:FreeRTOS/queue.c ****     #endif
1471:FreeRTOS/queue.c **** 
1472:FreeRTOS/queue.c ****     /* Check the queue pointer is not NULL. */
1473:FreeRTOS/queue.c ****     configASSERT( ( pxQueue ) );
1474:FreeRTOS/queue.c **** 
1475:FreeRTOS/queue.c ****     /* Check this really is a semaphore, in which case the item size will be
1476:FreeRTOS/queue.c ****      * 0. */
1477:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize == 0 );
1478:FreeRTOS/queue.c **** 
1479:FreeRTOS/queue.c ****     /* Cannot block if the scheduler is suspended. */
1480:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1481:FreeRTOS/queue.c ****         {
1482:FreeRTOS/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
1483:FreeRTOS/queue.c ****         }
1484:FreeRTOS/queue.c ****     #endif
1485:FreeRTOS/queue.c **** 
1486:FreeRTOS/queue.c ****     /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
1487:FreeRTOS/queue.c ****      * statements within the function itself.  This is done in the interest
1488:FreeRTOS/queue.c ****      * of execution time efficiency. */
1489:FreeRTOS/queue.c ****     for( ; ; )
1490:FreeRTOS/queue.c ****     {
1491:FreeRTOS/queue.c ****         taskENTER_CRITICAL();
1492:FreeRTOS/queue.c ****         {
1493:FreeRTOS/queue.c ****             /* Semaphores are queues with an item size of 0, and where the
1494:FreeRTOS/queue.c ****              * number of messages in the queue is the semaphore's count value. */
1495:FreeRTOS/queue.c ****             const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1496:FreeRTOS/queue.c **** 
1497:FreeRTOS/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1498:FreeRTOS/queue.c ****              * must be the highest priority task wanting to access the queue. */
1499:FreeRTOS/queue.c ****             if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1500:FreeRTOS/queue.c ****             {
1501:FreeRTOS/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
1502:FreeRTOS/queue.c **** 
1503:FreeRTOS/queue.c ****                 /* Semaphores are queues with a data size of zero and where the
1504:FreeRTOS/queue.c ****                  * messages waiting is the semaphore's count.  Reduce the count. */
1505:FreeRTOS/queue.c ****                 pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1506:FreeRTOS/queue.c **** 
1507:FreeRTOS/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1508:FreeRTOS/queue.c ****                     {
1509:FreeRTOS/queue.c ****                         if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1510:FreeRTOS/queue.c ****                         {
1511:FreeRTOS/queue.c ****                             /* Record the information required to implement
1512:FreeRTOS/queue.c ****                              * priority inheritance should it become necessary. */
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 28


1513:FreeRTOS/queue.c ****                             pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
1514:FreeRTOS/queue.c ****                         }
1515:FreeRTOS/queue.c ****                         else
1516:FreeRTOS/queue.c ****                         {
1517:FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1518:FreeRTOS/queue.c ****                         }
1519:FreeRTOS/queue.c ****                     }
1520:FreeRTOS/queue.c ****                 #endif /* configUSE_MUTEXES */
1521:FreeRTOS/queue.c **** 
1522:FreeRTOS/queue.c ****                 /* Check to see if other tasks are blocked waiting to give the
1523:FreeRTOS/queue.c ****                  * semaphore, and if so, unblock the highest priority such task. */
1524:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1525:FreeRTOS/queue.c ****                 {
1526:FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1527:FreeRTOS/queue.c ****                     {
1528:FreeRTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1529:FreeRTOS/queue.c ****                     }
1530:FreeRTOS/queue.c ****                     else
1531:FreeRTOS/queue.c ****                     {
1532:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1533:FreeRTOS/queue.c ****                     }
1534:FreeRTOS/queue.c ****                 }
1535:FreeRTOS/queue.c ****                 else
1536:FreeRTOS/queue.c ****                 {
1537:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1538:FreeRTOS/queue.c ****                 }
1539:FreeRTOS/queue.c **** 
1540:FreeRTOS/queue.c ****                 taskEXIT_CRITICAL();
1541:FreeRTOS/queue.c ****                 return pdPASS;
1542:FreeRTOS/queue.c ****             }
1543:FreeRTOS/queue.c ****             else
1544:FreeRTOS/queue.c ****             {
1545:FreeRTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1546:FreeRTOS/queue.c ****                 {
1547:FreeRTOS/queue.c ****                     /* For inheritance to have occurred there must have been an
1548:FreeRTOS/queue.c ****                      * initial timeout, and an adjusted timeout cannot become 0, as
1549:FreeRTOS/queue.c ****                      * if it were 0 the function would have exited. */
1550:FreeRTOS/queue.c ****                     #if ( configUSE_MUTEXES == 1 )
1551:FreeRTOS/queue.c ****                         {
1552:FreeRTOS/queue.c ****                             configASSERT( xInheritanceOccurred == pdFALSE );
1553:FreeRTOS/queue.c ****                         }
1554:FreeRTOS/queue.c ****                     #endif /* configUSE_MUTEXES */
1555:FreeRTOS/queue.c **** 
1556:FreeRTOS/queue.c ****                     /* The semaphore count was 0 and no block time is specified
1557:FreeRTOS/queue.c ****                      * (or the block time has expired) so exit now. */
1558:FreeRTOS/queue.c ****                     taskEXIT_CRITICAL();
1559:FreeRTOS/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1560:FreeRTOS/queue.c ****                     return errQUEUE_EMPTY;
1561:FreeRTOS/queue.c ****                 }
1562:FreeRTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1563:FreeRTOS/queue.c ****                 {
1564:FreeRTOS/queue.c ****                     /* The semaphore count was 0 and a block time was specified
1565:FreeRTOS/queue.c ****                      * so configure the timeout structure ready to block. */
1566:FreeRTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1567:FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
1568:FreeRTOS/queue.c ****                 }
1569:FreeRTOS/queue.c ****                 else
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 29


1570:FreeRTOS/queue.c ****                 {
1571:FreeRTOS/queue.c ****                     /* Entry time was already set. */
1572:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1573:FreeRTOS/queue.c ****                 }
1574:FreeRTOS/queue.c ****             }
1575:FreeRTOS/queue.c ****         }
1576:FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
1577:FreeRTOS/queue.c **** 
1578:FreeRTOS/queue.c ****         /* Interrupts and other tasks can give to and take from the semaphore
1579:FreeRTOS/queue.c ****          * now the critical section has been exited. */
1580:FreeRTOS/queue.c **** 
1581:FreeRTOS/queue.c ****         vTaskSuspendAll();
1582:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
1583:FreeRTOS/queue.c **** 
1584:FreeRTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1585:FreeRTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1586:FreeRTOS/queue.c ****         {
1587:FreeRTOS/queue.c ****             /* A block time is specified and not expired.  If the semaphore
1588:FreeRTOS/queue.c ****              * count is 0 then enter the Blocked state to wait for a semaphore to
1589:FreeRTOS/queue.c ****              * become available.  As semaphores are implemented with queues the
1590:FreeRTOS/queue.c ****              * queue being empty is equivalent to the semaphore count being 0. */
1591:FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1592:FreeRTOS/queue.c ****             {
1593:FreeRTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1594:FreeRTOS/queue.c **** 
1595:FreeRTOS/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1596:FreeRTOS/queue.c ****                     {
1597:FreeRTOS/queue.c ****                         if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1598:FreeRTOS/queue.c ****                         {
1599:FreeRTOS/queue.c ****                             taskENTER_CRITICAL();
1600:FreeRTOS/queue.c ****                             {
1601:FreeRTOS/queue.c ****                                 xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.
1602:FreeRTOS/queue.c ****                             }
1603:FreeRTOS/queue.c ****                             taskEXIT_CRITICAL();
1604:FreeRTOS/queue.c ****                         }
1605:FreeRTOS/queue.c ****                         else
1606:FreeRTOS/queue.c ****                         {
1607:FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1608:FreeRTOS/queue.c ****                         }
1609:FreeRTOS/queue.c ****                     }
1610:FreeRTOS/queue.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1611:FreeRTOS/queue.c **** 
1612:FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1613:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
1614:FreeRTOS/queue.c **** 
1615:FreeRTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1616:FreeRTOS/queue.c ****                 {
1617:FreeRTOS/queue.c ****                     portYIELD_WITHIN_API();
1618:FreeRTOS/queue.c ****                 }
1619:FreeRTOS/queue.c ****                 else
1620:FreeRTOS/queue.c ****                 {
1621:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1622:FreeRTOS/queue.c ****                 }
1623:FreeRTOS/queue.c ****             }
1624:FreeRTOS/queue.c ****             else
1625:FreeRTOS/queue.c ****             {
1626:FreeRTOS/queue.c ****                 /* There was no timeout and the semaphore count was not 0, so
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 30


1627:FreeRTOS/queue.c ****                  * attempt to take the semaphore again. */
1628:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
1629:FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
1630:FreeRTOS/queue.c ****             }
1631:FreeRTOS/queue.c ****         }
1632:FreeRTOS/queue.c ****         else
1633:FreeRTOS/queue.c ****         {
1634:FreeRTOS/queue.c ****             /* Timed out. */
1635:FreeRTOS/queue.c ****             prvUnlockQueue( pxQueue );
1636:FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
1637:FreeRTOS/queue.c **** 
1638:FreeRTOS/queue.c ****             /* If the semaphore count is 0 exit now as the timeout has
1639:FreeRTOS/queue.c ****              * expired.  Otherwise return to attempt to take the semaphore that is
1640:FreeRTOS/queue.c ****              * known to be available.  As semaphores are implemented by queues the
1641:FreeRTOS/queue.c ****              * queue being empty is equivalent to the semaphore count being 0. */
1642:FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1643:FreeRTOS/queue.c ****             {
1644:FreeRTOS/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1645:FreeRTOS/queue.c ****                     {
1646:FreeRTOS/queue.c ****                         /* xInheritanceOccurred could only have be set if
1647:FreeRTOS/queue.c ****                          * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1648:FreeRTOS/queue.c ****                          * test the mutex type again to check it is actually a mutex. */
1649:FreeRTOS/queue.c ****                         if( xInheritanceOccurred != pdFALSE )
1650:FreeRTOS/queue.c ****                         {
1651:FreeRTOS/queue.c ****                             taskENTER_CRITICAL();
1652:FreeRTOS/queue.c ****                             {
1653:FreeRTOS/queue.c ****                                 UBaseType_t uxHighestWaitingPriority;
1654:FreeRTOS/queue.c **** 
1655:FreeRTOS/queue.c ****                                 /* This task blocking on the mutex caused another
1656:FreeRTOS/queue.c ****                                  * task to inherit this task's priority.  Now this task
1657:FreeRTOS/queue.c ****                                  * has timed out the priority should be disinherited
1658:FreeRTOS/queue.c ****                                  * again, but only as low as the next highest priority
1659:FreeRTOS/queue.c ****                                  * task that is waiting for the same mutex. */
1660:FreeRTOS/queue.c ****                                 uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( px
1661:FreeRTOS/queue.c ****                                 vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHo
1662:FreeRTOS/queue.c ****                             }
1663:FreeRTOS/queue.c ****                             taskEXIT_CRITICAL();
1664:FreeRTOS/queue.c ****                         }
1665:FreeRTOS/queue.c ****                     }
1666:FreeRTOS/queue.c ****                 #endif /* configUSE_MUTEXES */
1667:FreeRTOS/queue.c **** 
1668:FreeRTOS/queue.c ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1669:FreeRTOS/queue.c ****                 return errQUEUE_EMPTY;
1670:FreeRTOS/queue.c ****             }
1671:FreeRTOS/queue.c ****             else
1672:FreeRTOS/queue.c ****             {
1673:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1674:FreeRTOS/queue.c ****             }
1675:FreeRTOS/queue.c ****         }
1676:FreeRTOS/queue.c ****     } /*lint -restore */
1677:FreeRTOS/queue.c **** }
1678:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1679:FreeRTOS/queue.c **** 
1680:FreeRTOS/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue,
1681:FreeRTOS/queue.c ****                        void * const pvBuffer,
1682:FreeRTOS/queue.c ****                        TickType_t xTicksToWait )
1683:FreeRTOS/queue.c **** {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 31


1684:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
1685:FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
1686:FreeRTOS/queue.c ****     int8_t * pcOriginalReadPosition;
1687:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
1688:FreeRTOS/queue.c **** 
1689:FreeRTOS/queue.c ****     /* Check the pointer is not NULL. */
1690:FreeRTOS/queue.c ****     configASSERT( ( pxQueue ) );
1691:FreeRTOS/queue.c **** 
1692:FreeRTOS/queue.c ****     /* The buffer into which data is received can only be NULL if the data size
1693:FreeRTOS/queue.c ****      * is zero (so no data is copied into the buffer. */
1694:FreeRTOS/queue.c ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
1695:FreeRTOS/queue.c **** 
1696:FreeRTOS/queue.c ****     /* Cannot block if the scheduler is suspended. */
1697:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1698:FreeRTOS/queue.c ****         {
1699:FreeRTOS/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
1700:FreeRTOS/queue.c ****         }
1701:FreeRTOS/queue.c ****     #endif
1702:FreeRTOS/queue.c **** 
1703:FreeRTOS/queue.c ****     /*lint -save -e904  This function relaxes the coding standard somewhat to
1704:FreeRTOS/queue.c ****      * allow return statements within the function itself.  This is done in the
1705:FreeRTOS/queue.c ****      * interest of execution time efficiency. */
1706:FreeRTOS/queue.c ****     for( ; ; )
1707:FreeRTOS/queue.c ****     {
1708:FreeRTOS/queue.c ****         taskENTER_CRITICAL();
1709:FreeRTOS/queue.c ****         {
1710:FreeRTOS/queue.c ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1711:FreeRTOS/queue.c **** 
1712:FreeRTOS/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1713:FreeRTOS/queue.c ****              * must be the highest priority task wanting to access the queue. */
1714:FreeRTOS/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1715:FreeRTOS/queue.c ****             {
1716:FreeRTOS/queue.c ****                 /* Remember the read position so it can be reset after the data
1717:FreeRTOS/queue.c ****                  * is read from the queue as this function is only peeking the
1718:FreeRTOS/queue.c ****                  * data, not removing it. */
1719:FreeRTOS/queue.c ****                 pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1720:FreeRTOS/queue.c **** 
1721:FreeRTOS/queue.c ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
1722:FreeRTOS/queue.c ****                 traceQUEUE_PEEK( pxQueue );
1723:FreeRTOS/queue.c **** 
1724:FreeRTOS/queue.c ****                 /* The data is not being removed, so reset the read pointer. */
1725:FreeRTOS/queue.c ****                 pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1726:FreeRTOS/queue.c **** 
1727:FreeRTOS/queue.c ****                 /* The data is being left in the queue, so see if there are
1728:FreeRTOS/queue.c ****                  * any other tasks waiting for the data. */
1729:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1730:FreeRTOS/queue.c ****                 {
1731:FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE
1732:FreeRTOS/queue.c ****                     {
1733:FreeRTOS/queue.c ****                         /* The task waiting has a higher priority than this task. */
1734:FreeRTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1735:FreeRTOS/queue.c ****                     }
1736:FreeRTOS/queue.c ****                     else
1737:FreeRTOS/queue.c ****                     {
1738:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1739:FreeRTOS/queue.c ****                     }
1740:FreeRTOS/queue.c ****                 }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 32


1741:FreeRTOS/queue.c ****                 else
1742:FreeRTOS/queue.c ****                 {
1743:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1744:FreeRTOS/queue.c ****                 }
1745:FreeRTOS/queue.c **** 
1746:FreeRTOS/queue.c ****                 taskEXIT_CRITICAL();
1747:FreeRTOS/queue.c ****                 return pdPASS;
1748:FreeRTOS/queue.c ****             }
1749:FreeRTOS/queue.c ****             else
1750:FreeRTOS/queue.c ****             {
1751:FreeRTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1752:FreeRTOS/queue.c ****                 {
1753:FreeRTOS/queue.c ****                     /* The queue was empty and no block time is specified (or
1754:FreeRTOS/queue.c ****                      * the block time has expired) so leave now. */
1755:FreeRTOS/queue.c ****                     taskEXIT_CRITICAL();
1756:FreeRTOS/queue.c ****                     traceQUEUE_PEEK_FAILED( pxQueue );
1757:FreeRTOS/queue.c ****                     return errQUEUE_EMPTY;
1758:FreeRTOS/queue.c ****                 }
1759:FreeRTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1760:FreeRTOS/queue.c ****                 {
1761:FreeRTOS/queue.c ****                     /* The queue was empty and a block time was specified so
1762:FreeRTOS/queue.c ****                      * configure the timeout structure ready to enter the blocked
1763:FreeRTOS/queue.c ****                      * state. */
1764:FreeRTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1765:FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
1766:FreeRTOS/queue.c ****                 }
1767:FreeRTOS/queue.c ****                 else
1768:FreeRTOS/queue.c ****                 {
1769:FreeRTOS/queue.c ****                     /* Entry time was already set. */
1770:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1771:FreeRTOS/queue.c ****                 }
1772:FreeRTOS/queue.c ****             }
1773:FreeRTOS/queue.c ****         }
1774:FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
1775:FreeRTOS/queue.c **** 
1776:FreeRTOS/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1777:FreeRTOS/queue.c ****          * now the critical section has been exited. */
1778:FreeRTOS/queue.c **** 
1779:FreeRTOS/queue.c ****         vTaskSuspendAll();
1780:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
1781:FreeRTOS/queue.c **** 
1782:FreeRTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1783:FreeRTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1784:FreeRTOS/queue.c ****         {
1785:FreeRTOS/queue.c ****             /* Timeout has not expired yet, check to see if there is data in the
1786:FreeRTOS/queue.c ****             * queue now, and if not enter the Blocked state to wait for data. */
1787:FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1788:FreeRTOS/queue.c ****             {
1789:FreeRTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1790:FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1791:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
1792:FreeRTOS/queue.c **** 
1793:FreeRTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1794:FreeRTOS/queue.c ****                 {
1795:FreeRTOS/queue.c ****                     portYIELD_WITHIN_API();
1796:FreeRTOS/queue.c ****                 }
1797:FreeRTOS/queue.c ****                 else
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 33


1798:FreeRTOS/queue.c ****                 {
1799:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1800:FreeRTOS/queue.c ****                 }
1801:FreeRTOS/queue.c ****             }
1802:FreeRTOS/queue.c ****             else
1803:FreeRTOS/queue.c ****             {
1804:FreeRTOS/queue.c ****                 /* There is data in the queue now, so don't enter the blocked
1805:FreeRTOS/queue.c ****                  * state, instead return to try and obtain the data. */
1806:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
1807:FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
1808:FreeRTOS/queue.c ****             }
1809:FreeRTOS/queue.c ****         }
1810:FreeRTOS/queue.c ****         else
1811:FreeRTOS/queue.c ****         {
1812:FreeRTOS/queue.c ****             /* The timeout has expired.  If there is still no data in the queue
1813:FreeRTOS/queue.c ****              * exit, otherwise go back and try to read the data again. */
1814:FreeRTOS/queue.c ****             prvUnlockQueue( pxQueue );
1815:FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
1816:FreeRTOS/queue.c **** 
1817:FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1818:FreeRTOS/queue.c ****             {
1819:FreeRTOS/queue.c ****                 traceQUEUE_PEEK_FAILED( pxQueue );
1820:FreeRTOS/queue.c ****                 return errQUEUE_EMPTY;
1821:FreeRTOS/queue.c ****             }
1822:FreeRTOS/queue.c ****             else
1823:FreeRTOS/queue.c ****             {
1824:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1825:FreeRTOS/queue.c ****             }
1826:FreeRTOS/queue.c ****         }
1827:FreeRTOS/queue.c ****     } /*lint -restore */
1828:FreeRTOS/queue.c **** }
1829:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1830:FreeRTOS/queue.c **** 
1831:FreeRTOS/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
1832:FreeRTOS/queue.c ****                                  void * const pvBuffer,
1833:FreeRTOS/queue.c ****                                  BaseType_t * const pxHigherPriorityTaskWoken )
1834:FreeRTOS/queue.c **** {
1835:FreeRTOS/queue.c ****     BaseType_t xReturn;
1836:FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1837:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
1838:FreeRTOS/queue.c **** 
1839:FreeRTOS/queue.c ****     configASSERT( pxQueue );
1840:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1841:FreeRTOS/queue.c **** 
1842:FreeRTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1843:FreeRTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1844:FreeRTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1845:FreeRTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1846:FreeRTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1847:FreeRTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1848:FreeRTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1849:FreeRTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1850:FreeRTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1851:FreeRTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1852:FreeRTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1853:FreeRTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1854:FreeRTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 34


1855:FreeRTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1856:FreeRTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1857:FreeRTOS/queue.c **** 
1858:FreeRTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1859:FreeRTOS/queue.c ****     {
1860:FreeRTOS/queue.c ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1861:FreeRTOS/queue.c **** 
1862:FreeRTOS/queue.c ****         /* Cannot block in an ISR, so check there is data available. */
1863:FreeRTOS/queue.c ****         if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1864:FreeRTOS/queue.c ****         {
1865:FreeRTOS/queue.c ****             const int8_t cRxLock = pxQueue->cRxLock;
1866:FreeRTOS/queue.c **** 
1867:FreeRTOS/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1868:FreeRTOS/queue.c **** 
1869:FreeRTOS/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
1870:FreeRTOS/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1871:FreeRTOS/queue.c **** 
1872:FreeRTOS/queue.c ****             /* If the queue is locked the event list will not be modified.
1873:FreeRTOS/queue.c ****              * Instead update the lock count so the task that unlocks the queue
1874:FreeRTOS/queue.c ****              * will know that an ISR has removed data while the queue was
1875:FreeRTOS/queue.c ****              * locked. */
1876:FreeRTOS/queue.c ****             if( cRxLock == queueUNLOCKED )
1877:FreeRTOS/queue.c ****             {
1878:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1879:FreeRTOS/queue.c ****                 {
1880:FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1881:FreeRTOS/queue.c ****                     {
1882:FreeRTOS/queue.c ****                         /* The task waiting has a higher priority than us so
1883:FreeRTOS/queue.c ****                          * force a context switch. */
1884:FreeRTOS/queue.c ****                         if( pxHigherPriorityTaskWoken != NULL )
1885:FreeRTOS/queue.c ****                         {
1886:FreeRTOS/queue.c ****                             *pxHigherPriorityTaskWoken = pdTRUE;
1887:FreeRTOS/queue.c ****                         }
1888:FreeRTOS/queue.c ****                         else
1889:FreeRTOS/queue.c ****                         {
1890:FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1891:FreeRTOS/queue.c ****                         }
1892:FreeRTOS/queue.c ****                     }
1893:FreeRTOS/queue.c ****                     else
1894:FreeRTOS/queue.c ****                     {
1895:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1896:FreeRTOS/queue.c ****                     }
1897:FreeRTOS/queue.c ****                 }
1898:FreeRTOS/queue.c ****                 else
1899:FreeRTOS/queue.c ****                 {
1900:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1901:FreeRTOS/queue.c ****                 }
1902:FreeRTOS/queue.c ****             }
1903:FreeRTOS/queue.c ****             else
1904:FreeRTOS/queue.c ****             {
1905:FreeRTOS/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1906:FreeRTOS/queue.c ****                  * knows that data was removed while it was locked. */
1907:FreeRTOS/queue.c ****                 configASSERT( cRxLock != queueINT8_MAX );
1908:FreeRTOS/queue.c **** 
1909:FreeRTOS/queue.c ****                 pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1910:FreeRTOS/queue.c ****             }
1911:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 35


1912:FreeRTOS/queue.c ****             xReturn = pdPASS;
1913:FreeRTOS/queue.c ****         }
1914:FreeRTOS/queue.c ****         else
1915:FreeRTOS/queue.c ****         {
1916:FreeRTOS/queue.c ****             xReturn = pdFAIL;
1917:FreeRTOS/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1918:FreeRTOS/queue.c ****         }
1919:FreeRTOS/queue.c ****     }
1920:FreeRTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1921:FreeRTOS/queue.c **** 
1922:FreeRTOS/queue.c ****     return xReturn;
1923:FreeRTOS/queue.c **** }
1924:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1925:FreeRTOS/queue.c **** 
1926:FreeRTOS/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
1927:FreeRTOS/queue.c ****                               void * const pvBuffer )
1928:FreeRTOS/queue.c **** {
1929:FreeRTOS/queue.c ****     BaseType_t xReturn;
1930:FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1931:FreeRTOS/queue.c ****     int8_t * pcOriginalReadPosition;
1932:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
1933:FreeRTOS/queue.c **** 
1934:FreeRTOS/queue.c ****     configASSERT( pxQueue );
1935:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1936:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1937:FreeRTOS/queue.c **** 
1938:FreeRTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1939:FreeRTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1940:FreeRTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1941:FreeRTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1942:FreeRTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1943:FreeRTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1944:FreeRTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1945:FreeRTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1946:FreeRTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1947:FreeRTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1948:FreeRTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1949:FreeRTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1950:FreeRTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1951:FreeRTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1952:FreeRTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1953:FreeRTOS/queue.c **** 
1954:FreeRTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1955:FreeRTOS/queue.c ****     {
1956:FreeRTOS/queue.c ****         /* Cannot block in an ISR, so check there is data available. */
1957:FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1958:FreeRTOS/queue.c ****         {
1959:FreeRTOS/queue.c ****             traceQUEUE_PEEK_FROM_ISR( pxQueue );
1960:FreeRTOS/queue.c **** 
1961:FreeRTOS/queue.c ****             /* Remember the read position so it can be reset as nothing is
1962:FreeRTOS/queue.c ****              * actually being removed from the queue. */
1963:FreeRTOS/queue.c ****             pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1964:FreeRTOS/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
1965:FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1966:FreeRTOS/queue.c **** 
1967:FreeRTOS/queue.c ****             xReturn = pdPASS;
1968:FreeRTOS/queue.c ****         }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 36


1969:FreeRTOS/queue.c ****         else
1970:FreeRTOS/queue.c ****         {
1971:FreeRTOS/queue.c ****             xReturn = pdFAIL;
1972:FreeRTOS/queue.c ****             traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1973:FreeRTOS/queue.c ****         }
1974:FreeRTOS/queue.c ****     }
1975:FreeRTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1976:FreeRTOS/queue.c **** 
1977:FreeRTOS/queue.c ****     return xReturn;
1978:FreeRTOS/queue.c **** }
1979:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1980:FreeRTOS/queue.c **** 
1981:FreeRTOS/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1982:FreeRTOS/queue.c **** {
1983:FreeRTOS/queue.c ****     UBaseType_t uxReturn;
1984:FreeRTOS/queue.c **** 
1985:FreeRTOS/queue.c ****     configASSERT( xQueue );
1986:FreeRTOS/queue.c **** 
1987:FreeRTOS/queue.c ****     taskENTER_CRITICAL();
1988:FreeRTOS/queue.c ****     {
1989:FreeRTOS/queue.c ****         uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1990:FreeRTOS/queue.c ****     }
1991:FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
1992:FreeRTOS/queue.c **** 
1993:FreeRTOS/queue.c ****     return uxReturn;
1994:FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1995:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1996:FreeRTOS/queue.c **** 
1997:FreeRTOS/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1998:FreeRTOS/queue.c **** {
1999:FreeRTOS/queue.c ****     UBaseType_t uxReturn;
2000:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
2001:FreeRTOS/queue.c **** 
2002:FreeRTOS/queue.c ****     configASSERT( pxQueue );
2003:FreeRTOS/queue.c **** 
2004:FreeRTOS/queue.c ****     taskENTER_CRITICAL();
2005:FreeRTOS/queue.c ****     {
2006:FreeRTOS/queue.c ****         uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
2007:FreeRTOS/queue.c ****     }
2008:FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
2009:FreeRTOS/queue.c **** 
2010:FreeRTOS/queue.c ****     return uxReturn;
2011:FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
2012:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2013:FreeRTOS/queue.c **** 
2014:FreeRTOS/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
2015:FreeRTOS/queue.c **** {
2016:FreeRTOS/queue.c ****     UBaseType_t uxReturn;
2017:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
2018:FreeRTOS/queue.c **** 
2019:FreeRTOS/queue.c ****     configASSERT( pxQueue );
2020:FreeRTOS/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
2021:FreeRTOS/queue.c **** 
2022:FreeRTOS/queue.c ****     return uxReturn;
2023:FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
2024:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2025:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 37


2026:FreeRTOS/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
2027:FreeRTOS/queue.c **** {
2028:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
2029:FreeRTOS/queue.c **** 
2030:FreeRTOS/queue.c ****     configASSERT( pxQueue );
2031:FreeRTOS/queue.c ****     traceQUEUE_DELETE( pxQueue );
2032:FreeRTOS/queue.c **** 
2033:FreeRTOS/queue.c ****     #if ( configQUEUE_REGISTRY_SIZE > 0 )
2034:FreeRTOS/queue.c ****         {
2035:FreeRTOS/queue.c ****             vQueueUnregisterQueue( pxQueue );
2036:FreeRTOS/queue.c ****         }
2037:FreeRTOS/queue.c ****     #endif
2038:FreeRTOS/queue.c **** 
2039:FreeRTOS/queue.c ****     #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
2040:FreeRTOS/queue.c ****         {
2041:FreeRTOS/queue.c ****             /* The queue can only have been allocated dynamically - free it
2042:FreeRTOS/queue.c ****              * again. */
2043:FreeRTOS/queue.c ****             vPortFree( pxQueue );
2044:FreeRTOS/queue.c ****         }
2045:FreeRTOS/queue.c ****     #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
2046:FreeRTOS/queue.c ****         {
2047:FreeRTOS/queue.c ****             /* The queue could have been allocated statically or dynamically, so
2048:FreeRTOS/queue.c ****              * check before attempting to free the memory. */
2049:FreeRTOS/queue.c ****             if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
2050:FreeRTOS/queue.c ****             {
2051:FreeRTOS/queue.c ****                 vPortFree( pxQueue );
2052:FreeRTOS/queue.c ****             }
2053:FreeRTOS/queue.c ****             else
2054:FreeRTOS/queue.c ****             {
2055:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2056:FreeRTOS/queue.c ****             }
2057:FreeRTOS/queue.c ****         }
2058:FreeRTOS/queue.c ****     #else /* if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION ==
2059:FreeRTOS/queue.c ****         {
2060:FreeRTOS/queue.c ****             /* The queue must have been statically allocated, so is not going to be
2061:FreeRTOS/queue.c ****              * deleted.  Avoid compiler warnings about the unused parameter. */
2062:FreeRTOS/queue.c ****             ( void ) pxQueue;
2063:FreeRTOS/queue.c ****         }
2064:FreeRTOS/queue.c ****     #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2065:FreeRTOS/queue.c **** }
2066:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2067:FreeRTOS/queue.c **** 
2068:FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2069:FreeRTOS/queue.c **** 
2070:FreeRTOS/queue.c ****     UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2071:FreeRTOS/queue.c ****     {
2072:FreeRTOS/queue.c ****         return ( ( Queue_t * ) xQueue )->uxQueueNumber;
2073:FreeRTOS/queue.c ****     }
2074:FreeRTOS/queue.c **** 
2075:FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2076:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2077:FreeRTOS/queue.c **** 
2078:FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2079:FreeRTOS/queue.c **** 
2080:FreeRTOS/queue.c ****     void vQueueSetQueueNumber( QueueHandle_t xQueue,
2081:FreeRTOS/queue.c ****                                UBaseType_t uxQueueNumber )
2082:FreeRTOS/queue.c ****     {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 38


2083:FreeRTOS/queue.c ****         ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
2084:FreeRTOS/queue.c ****     }
2085:FreeRTOS/queue.c **** 
2086:FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2087:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2088:FreeRTOS/queue.c **** 
2089:FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2090:FreeRTOS/queue.c **** 
2091:FreeRTOS/queue.c ****     uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2092:FreeRTOS/queue.c ****     {
2093:FreeRTOS/queue.c ****         return ( ( Queue_t * ) xQueue )->ucQueueType;
2094:FreeRTOS/queue.c ****     }
2095:FreeRTOS/queue.c **** 
2096:FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2097:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2098:FreeRTOS/queue.c **** 
2099:FreeRTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
2100:FreeRTOS/queue.c **** 
2101:FreeRTOS/queue.c ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2102:FreeRTOS/queue.c ****     {
2103:FreeRTOS/queue.c ****         UBaseType_t uxHighestPriorityOfWaitingTasks;
2104:FreeRTOS/queue.c **** 
2105:FreeRTOS/queue.c ****         /* If a task waiting for a mutex causes the mutex holder to inherit a
2106:FreeRTOS/queue.c ****          * priority, but the waiting task times out, then the holder should
2107:FreeRTOS/queue.c ****          * disinherit the priority - but only down to the highest priority of any
2108:FreeRTOS/queue.c ****          * other tasks that are waiting for the same mutex.  For this purpose,
2109:FreeRTOS/queue.c ****          * return the priority of the highest priority task that is waiting for the
2110:FreeRTOS/queue.c ****          * mutex. */
2111:FreeRTOS/queue.c ****         if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
2112:FreeRTOS/queue.c ****         {
2113:FreeRTOS/queue.c ****             uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t 
2114:FreeRTOS/queue.c ****         }
2115:FreeRTOS/queue.c ****         else
2116:FreeRTOS/queue.c ****         {
2117:FreeRTOS/queue.c ****             uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
2118:FreeRTOS/queue.c ****         }
2119:FreeRTOS/queue.c **** 
2120:FreeRTOS/queue.c ****         return uxHighestPriorityOfWaitingTasks;
2121:FreeRTOS/queue.c ****     }
2122:FreeRTOS/queue.c **** 
2123:FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
2124:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2125:FreeRTOS/queue.c **** 
2126:FreeRTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
2127:FreeRTOS/queue.c ****                                       const void * pvItemToQueue,
2128:FreeRTOS/queue.c ****                                       const BaseType_t xPosition )
2129:FreeRTOS/queue.c **** {
2130:FreeRTOS/queue.c ****     BaseType_t xReturn = pdFALSE;
2131:FreeRTOS/queue.c ****     UBaseType_t uxMessagesWaiting;
2132:FreeRTOS/queue.c **** 
2133:FreeRTOS/queue.c ****     /* This function is called from a critical section. */
2134:FreeRTOS/queue.c **** 
2135:FreeRTOS/queue.c ****     uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2136:FreeRTOS/queue.c **** 
2137:FreeRTOS/queue.c ****     if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2138:FreeRTOS/queue.c ****     {
2139:FreeRTOS/queue.c ****         #if ( configUSE_MUTEXES == 1 )
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 39


2140:FreeRTOS/queue.c ****             {
2141:FreeRTOS/queue.c ****                 if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2142:FreeRTOS/queue.c ****                 {
2143:FreeRTOS/queue.c ****                     /* The mutex is no longer being held. */
2144:FreeRTOS/queue.c ****                     xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
2145:FreeRTOS/queue.c ****                     pxQueue->u.xSemaphore.xMutexHolder = NULL;
2146:FreeRTOS/queue.c ****                 }
2147:FreeRTOS/queue.c ****                 else
2148:FreeRTOS/queue.c ****                 {
2149:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2150:FreeRTOS/queue.c ****                 }
2151:FreeRTOS/queue.c ****             }
2152:FreeRTOS/queue.c ****         #endif /* configUSE_MUTEXES */
2153:FreeRTOS/queue.c ****     }
2154:FreeRTOS/queue.c ****     else if( xPosition == queueSEND_TO_BACK )
2155:FreeRTOS/queue.c ****     {
2156:FreeRTOS/queue.c ****         ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSi
2157:FreeRTOS/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                 
2158:FreeRTOS/queue.c **** 
2159:FreeRTOS/queue.c ****         if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                       
2160:FreeRTOS/queue.c ****         {
2161:FreeRTOS/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
2162:FreeRTOS/queue.c ****         }
2163:FreeRTOS/queue.c ****         else
2164:FreeRTOS/queue.c ****         {
2165:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2166:FreeRTOS/queue.c ****         }
2167:FreeRTOS/queue.c ****     }
2168:FreeRTOS/queue.c ****     else
2169:FreeRTOS/queue.c ****     {
2170:FreeRTOS/queue.c ****         ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue
2171:FreeRTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
2172:FreeRTOS/queue.c **** 
2173:FreeRTOS/queue.c ****         if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified
2174:FreeRTOS/queue.c ****         {
2175:FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
2176:FreeRTOS/queue.c ****         }
2177:FreeRTOS/queue.c ****         else
2178:FreeRTOS/queue.c ****         {
2179:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2180:FreeRTOS/queue.c ****         }
2181:FreeRTOS/queue.c **** 
2182:FreeRTOS/queue.c ****         if( xPosition == queueOVERWRITE )
2183:FreeRTOS/queue.c ****         {
2184:FreeRTOS/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2185:FreeRTOS/queue.c ****             {
2186:FreeRTOS/queue.c ****                 /* An item is not being added but overwritten, so subtract
2187:FreeRTOS/queue.c ****                  * one from the recorded number of items in the queue so when
2188:FreeRTOS/queue.c ****                  * one is added again below the number of recorded items remains
2189:FreeRTOS/queue.c ****                  * correct. */
2190:FreeRTOS/queue.c ****                 --uxMessagesWaiting;
2191:FreeRTOS/queue.c ****             }
2192:FreeRTOS/queue.c ****             else
2193:FreeRTOS/queue.c ****             {
2194:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2195:FreeRTOS/queue.c ****             }
2196:FreeRTOS/queue.c ****         }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 40


2197:FreeRTOS/queue.c ****         else
2198:FreeRTOS/queue.c ****         {
2199:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2200:FreeRTOS/queue.c ****         }
2201:FreeRTOS/queue.c ****     }
2202:FreeRTOS/queue.c **** 
2203:FreeRTOS/queue.c ****     pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2204:FreeRTOS/queue.c **** 
2205:FreeRTOS/queue.c ****     return xReturn;
2206:FreeRTOS/queue.c **** }
2207:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2208:FreeRTOS/queue.c **** 
2209:FreeRTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
2210:FreeRTOS/queue.c ****                                   void * const pvBuffer )
2211:FreeRTOS/queue.c **** {
2212:FreeRTOS/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2213:FreeRTOS/queue.c ****     {
2214:FreeRTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithm
2215:FreeRTOS/queue.c **** 
2216:FreeRTOS/queue.c ****         if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception
2217:FreeRTOS/queue.c ****         {
2218:FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2219:FreeRTOS/queue.c ****         }
2220:FreeRTOS/queue.c ****         else
2221:FreeRTOS/queue.c ****         {
2222:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2223:FreeRTOS/queue.c ****         }
2224:FreeRTOS/queue.c **** 
2225:FreeRTOS/queue.c ****         ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) p
2226:FreeRTOS/queue.c ****     }
2227:FreeRTOS/queue.c **** }
2228:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2229:FreeRTOS/queue.c **** 
2230:FreeRTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2231:FreeRTOS/queue.c **** {
2232:FreeRTOS/queue.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2233:FreeRTOS/queue.c **** 
2234:FreeRTOS/queue.c ****     /* The lock counts contains the number of extra data items placed or
2235:FreeRTOS/queue.c ****      * removed from the queue while the queue was locked.  When a queue is
2236:FreeRTOS/queue.c ****      * locked items can be added or removed, but the event lists cannot be
2237:FreeRTOS/queue.c ****      * updated. */
2238:FreeRTOS/queue.c ****     taskENTER_CRITICAL();
2239:FreeRTOS/queue.c ****     {
2240:FreeRTOS/queue.c ****         int8_t cTxLock = pxQueue->cTxLock;
2241:FreeRTOS/queue.c **** 
2242:FreeRTOS/queue.c ****         /* See if data was added to the queue while it was locked. */
2243:FreeRTOS/queue.c ****         while( cTxLock > queueLOCKED_UNMODIFIED )
2244:FreeRTOS/queue.c ****         {
2245:FreeRTOS/queue.c ****             /* Data was posted while the queue was locked.  Are any tasks
2246:FreeRTOS/queue.c ****              * blocked waiting for data to become available? */
2247:FreeRTOS/queue.c ****             #if ( configUSE_QUEUE_SETS == 1 )
2248:FreeRTOS/queue.c ****                 {
2249:FreeRTOS/queue.c ****                     if( pxQueue->pxQueueSetContainer != NULL )
2250:FreeRTOS/queue.c ****                     {
2251:FreeRTOS/queue.c ****                         if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
2252:FreeRTOS/queue.c ****                         {
2253:FreeRTOS/queue.c ****                             /* The queue is a member of a queue set, and posting to
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 41


2254:FreeRTOS/queue.c ****                              * the queue set caused a higher priority task to unblock.
2255:FreeRTOS/queue.c ****                              * A context switch is required. */
2256:FreeRTOS/queue.c ****                             vTaskMissedYield();
2257:FreeRTOS/queue.c ****                         }
2258:FreeRTOS/queue.c ****                         else
2259:FreeRTOS/queue.c ****                         {
2260:FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
2261:FreeRTOS/queue.c ****                         }
2262:FreeRTOS/queue.c ****                     }
2263:FreeRTOS/queue.c ****                     else
2264:FreeRTOS/queue.c ****                     {
2265:FreeRTOS/queue.c ****                         /* Tasks that are removed from the event list will get
2266:FreeRTOS/queue.c ****                          * added to the pending ready list as the scheduler is still
2267:FreeRTOS/queue.c ****                          * suspended. */
2268:FreeRTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2269:FreeRTOS/queue.c ****                         {
2270:FreeRTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
2271:FreeRTOS/queue.c ****                             {
2272:FreeRTOS/queue.c ****                                 /* The task waiting has a higher priority so record that a
2273:FreeRTOS/queue.c ****                                  * context switch is required. */
2274:FreeRTOS/queue.c ****                                 vTaskMissedYield();
2275:FreeRTOS/queue.c ****                             }
2276:FreeRTOS/queue.c ****                             else
2277:FreeRTOS/queue.c ****                             {
2278:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
2279:FreeRTOS/queue.c ****                             }
2280:FreeRTOS/queue.c ****                         }
2281:FreeRTOS/queue.c ****                         else
2282:FreeRTOS/queue.c ****                         {
2283:FreeRTOS/queue.c ****                             break;
2284:FreeRTOS/queue.c ****                         }
2285:FreeRTOS/queue.c ****                     }
2286:FreeRTOS/queue.c ****                 }
2287:FreeRTOS/queue.c ****             #else /* configUSE_QUEUE_SETS */
2288:FreeRTOS/queue.c ****                 {
2289:FreeRTOS/queue.c ****                     /* Tasks that are removed from the event list will get added to
2290:FreeRTOS/queue.c ****                      * the pending ready list as the scheduler is still suspended. */
2291:FreeRTOS/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2292:FreeRTOS/queue.c ****                     {
2293:FreeRTOS/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
2294:FreeRTOS/queue.c ****                         {
2295:FreeRTOS/queue.c ****                             /* The task waiting has a higher priority so record that
2296:FreeRTOS/queue.c ****                              * a context switch is required. */
2297:FreeRTOS/queue.c ****                             vTaskMissedYield();
2298:FreeRTOS/queue.c ****                         }
2299:FreeRTOS/queue.c ****                         else
2300:FreeRTOS/queue.c ****                         {
2301:FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
2302:FreeRTOS/queue.c ****                         }
2303:FreeRTOS/queue.c ****                     }
2304:FreeRTOS/queue.c ****                     else
2305:FreeRTOS/queue.c ****                     {
2306:FreeRTOS/queue.c ****                         break;
2307:FreeRTOS/queue.c ****                     }
2308:FreeRTOS/queue.c ****                 }
2309:FreeRTOS/queue.c ****             #endif /* configUSE_QUEUE_SETS */
2310:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 42


2311:FreeRTOS/queue.c ****             --cTxLock;
2312:FreeRTOS/queue.c ****         }
2313:FreeRTOS/queue.c **** 
2314:FreeRTOS/queue.c ****         pxQueue->cTxLock = queueUNLOCKED;
2315:FreeRTOS/queue.c ****     }
2316:FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
2317:FreeRTOS/queue.c **** 
2318:FreeRTOS/queue.c ****     /* Do the same for the Rx lock. */
2319:FreeRTOS/queue.c ****     taskENTER_CRITICAL();
2320:FreeRTOS/queue.c ****     {
2321:FreeRTOS/queue.c ****         int8_t cRxLock = pxQueue->cRxLock;
2322:FreeRTOS/queue.c **** 
2323:FreeRTOS/queue.c ****         while( cRxLock > queueLOCKED_UNMODIFIED )
2324:FreeRTOS/queue.c ****         {
2325:FreeRTOS/queue.c ****             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2326:FreeRTOS/queue.c ****             {
2327:FreeRTOS/queue.c ****                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2328:FreeRTOS/queue.c ****                 {
2329:FreeRTOS/queue.c ****                     vTaskMissedYield();
2330:FreeRTOS/queue.c ****                 }
2331:FreeRTOS/queue.c ****                 else
2332:FreeRTOS/queue.c ****                 {
2333:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2334:FreeRTOS/queue.c ****                 }
2335:FreeRTOS/queue.c **** 
2336:FreeRTOS/queue.c ****                 --cRxLock;
2337:FreeRTOS/queue.c ****             }
2338:FreeRTOS/queue.c ****             else
2339:FreeRTOS/queue.c ****             {
2340:FreeRTOS/queue.c ****                 break;
2341:FreeRTOS/queue.c ****             }
2342:FreeRTOS/queue.c ****         }
2343:FreeRTOS/queue.c **** 
2344:FreeRTOS/queue.c ****         pxQueue->cRxLock = queueUNLOCKED;
2345:FreeRTOS/queue.c ****     }
2346:FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
2347:FreeRTOS/queue.c **** }
2348:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2349:FreeRTOS/queue.c **** 
2350:FreeRTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
2351:FreeRTOS/queue.c **** {
2352:FreeRTOS/queue.c ****     BaseType_t xReturn;
2353:FreeRTOS/queue.c **** 
2354:FreeRTOS/queue.c ****     taskENTER_CRITICAL();
2355:FreeRTOS/queue.c ****     {
2356:FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2357:FreeRTOS/queue.c ****         {
2358:FreeRTOS/queue.c ****             xReturn = pdTRUE;
2359:FreeRTOS/queue.c ****         }
2360:FreeRTOS/queue.c ****         else
2361:FreeRTOS/queue.c ****         {
2362:FreeRTOS/queue.c ****             xReturn = pdFALSE;
2363:FreeRTOS/queue.c ****         }
2364:FreeRTOS/queue.c ****     }
2365:FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
2366:FreeRTOS/queue.c **** 
2367:FreeRTOS/queue.c ****     return xReturn;
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 43


2368:FreeRTOS/queue.c **** }
2369:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2370:FreeRTOS/queue.c **** 
2371:FreeRTOS/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2372:FreeRTOS/queue.c **** {
2373:FreeRTOS/queue.c ****     BaseType_t xReturn;
2374:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
2375:FreeRTOS/queue.c **** 
2376:FreeRTOS/queue.c ****     configASSERT( pxQueue );
2377:FreeRTOS/queue.c **** 
2378:FreeRTOS/queue.c ****     if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2379:FreeRTOS/queue.c ****     {
2380:FreeRTOS/queue.c ****         xReturn = pdTRUE;
2381:FreeRTOS/queue.c ****     }
2382:FreeRTOS/queue.c ****     else
2383:FreeRTOS/queue.c ****     {
2384:FreeRTOS/queue.c ****         xReturn = pdFALSE;
2385:FreeRTOS/queue.c ****     }
2386:FreeRTOS/queue.c **** 
2387:FreeRTOS/queue.c ****     return xReturn;
2388:FreeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2389:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2390:FreeRTOS/queue.c **** 
2391:FreeRTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
2392:FreeRTOS/queue.c **** {
  29              		.loc 1 2392 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		.loc 1 2392 1 is_stmt 0 view .LVU1
  34 0000 10B5     		push	{r4, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 4, -8
  38              		.cfi_offset 14, -4
  39 0002 0446     		mov	r4, r0
2393:FreeRTOS/queue.c ****     BaseType_t xReturn;
  40              		.loc 1 2393 5 is_stmt 1 view .LVU2
2394:FreeRTOS/queue.c **** 
2395:FreeRTOS/queue.c ****     taskENTER_CRITICAL();
  41              		.loc 1 2395 5 view .LVU3
  42 0004 FFF7FEFF 		bl	vPortEnterCritical
  43              	.LVL1:
2396:FreeRTOS/queue.c ****     {
2397:FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  44              		.loc 1 2397 9 view .LVU4
  45              		.loc 1 2397 20 is_stmt 0 view .LVU5
  46 0008 A26B     		ldr	r2, [r4, #56]
  47              		.loc 1 2397 50 view .LVU6
  48 000a E36B     		ldr	r3, [r4, #60]
  49              		.loc 1 2397 11 view .LVU7
  50 000c 9A42     		cmp	r2, r3
  51 000e 04D0     		beq	.L5
2398:FreeRTOS/queue.c ****         {
2399:FreeRTOS/queue.c ****             xReturn = pdTRUE;
2400:FreeRTOS/queue.c ****         }
2401:FreeRTOS/queue.c ****         else
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 44


2402:FreeRTOS/queue.c ****         {
2403:FreeRTOS/queue.c ****             xReturn = pdFALSE;
  52              		.loc 1 2403 21 view .LVU8
  53 0010 0024     		movs	r4, #0
  54              	.LVL2:
  55              	.L2:
2404:FreeRTOS/queue.c ****         }
2405:FreeRTOS/queue.c ****     }
2406:FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
  56              		.loc 1 2406 5 is_stmt 1 view .LVU9
  57 0012 FFF7FEFF 		bl	vPortExitCritical
  58              	.LVL3:
2407:FreeRTOS/queue.c **** 
2408:FreeRTOS/queue.c ****     return xReturn;
  59              		.loc 1 2408 5 view .LVU10
2409:FreeRTOS/queue.c **** }
  60              		.loc 1 2409 1 is_stmt 0 view .LVU11
  61 0016 2046     		mov	r0, r4
  62 0018 10BD     		pop	{r4, pc}
  63              	.LVL4:
  64              	.L5:
2399:FreeRTOS/queue.c ****         }
  65              		.loc 1 2399 21 view .LVU12
  66 001a 0124     		movs	r4, #1
  67              	.LVL5:
2399:FreeRTOS/queue.c ****         }
  68              		.loc 1 2399 21 view .LVU13
  69 001c F9E7     		b	.L2
  70              		.cfi_endproc
  71              	.LFE28:
  73              		.section	.text.prvIsQueueEmpty,"ax",%progbits
  74              		.align	1
  75              		.syntax unified
  76              		.thumb
  77              		.thumb_func
  79              	prvIsQueueEmpty:
  80              	.LVL6:
  81              	.LFB26:
2351:FreeRTOS/queue.c ****     BaseType_t xReturn;
  82              		.loc 1 2351 1 is_stmt 1 view -0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 0
  85              		@ frame_needed = 0, uses_anonymous_args = 0
2351:FreeRTOS/queue.c ****     BaseType_t xReturn;
  86              		.loc 1 2351 1 is_stmt 0 view .LVU15
  87 0000 10B5     		push	{r4, lr}
  88              	.LCFI1:
  89              		.cfi_def_cfa_offset 8
  90              		.cfi_offset 4, -8
  91              		.cfi_offset 14, -4
  92 0002 0446     		mov	r4, r0
2352:FreeRTOS/queue.c **** 
  93              		.loc 1 2352 5 is_stmt 1 view .LVU16
2354:FreeRTOS/queue.c ****     {
  94              		.loc 1 2354 5 view .LVU17
  95 0004 FFF7FEFF 		bl	vPortEnterCritical
  96              	.LVL7:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 45


2356:FreeRTOS/queue.c ****         {
  97              		.loc 1 2356 9 view .LVU18
2356:FreeRTOS/queue.c ****         {
  98              		.loc 1 2356 20 is_stmt 0 view .LVU19
  99 0008 A36B     		ldr	r3, [r4, #56]
2356:FreeRTOS/queue.c ****         {
 100              		.loc 1 2356 11 view .LVU20
 101 000a 23B9     		cbnz	r3, .L8
2358:FreeRTOS/queue.c ****         }
 102              		.loc 1 2358 21 view .LVU21
 103 000c 0124     		movs	r4, #1
 104              	.LVL8:
 105              	.L7:
2365:FreeRTOS/queue.c **** 
 106              		.loc 1 2365 5 is_stmt 1 view .LVU22
 107 000e FFF7FEFF 		bl	vPortExitCritical
 108              	.LVL9:
2367:FreeRTOS/queue.c **** }
 109              		.loc 1 2367 5 view .LVU23
2368:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 110              		.loc 1 2368 1 is_stmt 0 view .LVU24
 111 0012 2046     		mov	r0, r4
 112 0014 10BD     		pop	{r4, pc}
 113              	.LVL10:
 114              	.L8:
2362:FreeRTOS/queue.c ****         }
 115              		.loc 1 2362 21 view .LVU25
 116 0016 0024     		movs	r4, #0
 117              	.LVL11:
2362:FreeRTOS/queue.c ****         }
 118              		.loc 1 2362 21 view .LVU26
 119 0018 F9E7     		b	.L7
 120              		.cfi_endproc
 121              	.LFE26:
 123              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 124              		.align	1
 125              		.syntax unified
 126              		.thumb
 127              		.thumb_func
 129              	prvCopyDataToQueue:
 130              	.LVL12:
 131              	.LFB23:
2129:FreeRTOS/queue.c ****     BaseType_t xReturn = pdFALSE;
 132              		.loc 1 2129 1 is_stmt 1 view -0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
2129:FreeRTOS/queue.c ****     BaseType_t xReturn = pdFALSE;
 136              		.loc 1 2129 1 is_stmt 0 view .LVU28
 137 0000 70B5     		push	{r4, r5, r6, lr}
 138              	.LCFI2:
 139              		.cfi_def_cfa_offset 16
 140              		.cfi_offset 4, -16
 141              		.cfi_offset 5, -12
 142              		.cfi_offset 6, -8
 143              		.cfi_offset 14, -4
 144 0002 0446     		mov	r4, r0
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 46


 145 0004 1646     		mov	r6, r2
2130:FreeRTOS/queue.c ****     UBaseType_t uxMessagesWaiting;
 146              		.loc 1 2130 5 is_stmt 1 view .LVU29
 147              	.LVL13:
2131:FreeRTOS/queue.c **** 
 148              		.loc 1 2131 5 view .LVU30
2135:FreeRTOS/queue.c **** 
 149              		.loc 1 2135 5 view .LVU31
2135:FreeRTOS/queue.c **** 
 150              		.loc 1 2135 23 is_stmt 0 view .LVU32
 151 0006 856B     		ldr	r5, [r0, #56]
 152              	.LVL14:
2137:FreeRTOS/queue.c ****     {
 153              		.loc 1 2137 5 is_stmt 1 view .LVU33
2137:FreeRTOS/queue.c ****     {
 154              		.loc 1 2137 16 is_stmt 0 view .LVU34
 155 0008 026C     		ldr	r2, [r0, #64]
 156              	.LVL15:
2137:FreeRTOS/queue.c ****     {
 157              		.loc 1 2137 7 view .LVU35
 158 000a EAB1     		cbz	r2, .L11
2154:FreeRTOS/queue.c ****     {
 159              		.loc 1 2154 10 is_stmt 1 view .LVU36
2154:FreeRTOS/queue.c ****     {
 160              		.loc 1 2154 12 is_stmt 0 view .LVU37
 161 000c 66B9     		cbnz	r6, .L12
2156:FreeRTOS/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                 
 162              		.loc 1 2156 9 is_stmt 1 view .LVU38
2156:FreeRTOS/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                 
 163              		.loc 1 2156 18 is_stmt 0 view .LVU39
 164 000e 4068     		ldr	r0, [r0, #4]
 165              	.LVL16:
2156:FreeRTOS/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                 
 166              		.loc 1 2156 18 view .LVU40
 167 0010 FFF7FEFF 		bl	memcpy
 168              	.LVL17:
2157:FreeRTOS/queue.c **** 
 169              		.loc 1 2157 9 is_stmt 1 view .LVU41
2157:FreeRTOS/queue.c **** 
 170              		.loc 1 2157 38 is_stmt 0 view .LVU42
 171 0014 226C     		ldr	r2, [r4, #64]
2157:FreeRTOS/queue.c **** 
 172              		.loc 1 2157 28 view .LVU43
 173 0016 6368     		ldr	r3, [r4, #4]
 174 0018 1344     		add	r3, r3, r2
 175 001a 6360     		str	r3, [r4, #4]
2159:FreeRTOS/queue.c ****         {
 176              		.loc 1 2159 9 is_stmt 1 view .LVU44
2159:FreeRTOS/queue.c ****         {
 177              		.loc 1 2159 52 is_stmt 0 view .LVU45
 178 001c A268     		ldr	r2, [r4, #8]
2159:FreeRTOS/queue.c ****         {
 179              		.loc 1 2159 11 view .LVU46
 180 001e 9342     		cmp	r3, r2
 181 0020 12D3     		bcc	.L11
2161:FreeRTOS/queue.c ****         }
 182              		.loc 1 2161 13 is_stmt 1 view .LVU47
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 47


2161:FreeRTOS/queue.c ****         }
 183              		.loc 1 2161 41 is_stmt 0 view .LVU48
 184 0022 2368     		ldr	r3, [r4]
2161:FreeRTOS/queue.c ****         }
 185              		.loc 1 2161 32 view .LVU49
 186 0024 6360     		str	r3, [r4, #4]
 187 0026 0FE0     		b	.L11
 188              	.LVL18:
 189              	.L12:
2170:FreeRTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 190              		.loc 1 2170 9 is_stmt 1 view .LVU50
2170:FreeRTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 191              		.loc 1 2170 18 is_stmt 0 view .LVU51
 192 0028 C068     		ldr	r0, [r0, #12]
 193              	.LVL19:
2170:FreeRTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 194              		.loc 1 2170 18 view .LVU52
 195 002a FFF7FEFF 		bl	memcpy
 196              	.LVL20:
2171:FreeRTOS/queue.c **** 
 197              		.loc 1 2171 9 is_stmt 1 view .LVU53
2171:FreeRTOS/queue.c **** 
 198              		.loc 1 2171 48 is_stmt 0 view .LVU54
 199 002e 226C     		ldr	r2, [r4, #64]
2171:FreeRTOS/queue.c **** 
 200              		.loc 1 2171 38 view .LVU55
 201 0030 5142     		rsbs	r1, r2, #0
 202 0032 E368     		ldr	r3, [r4, #12]
 203 0034 9B1A     		subs	r3, r3, r2
 204 0036 E360     		str	r3, [r4, #12]
2173:FreeRTOS/queue.c ****         {
 205              		.loc 1 2173 9 is_stmt 1 view .LVU56
2173:FreeRTOS/queue.c ****         {
 206              		.loc 1 2173 51 is_stmt 0 view .LVU57
 207 0038 2268     		ldr	r2, [r4]
2173:FreeRTOS/queue.c ****         {
 208              		.loc 1 2173 11 view .LVU58
 209 003a 9342     		cmp	r3, r2
 210 003c 02D2     		bcs	.L13
2175:FreeRTOS/queue.c ****         }
 211              		.loc 1 2175 13 is_stmt 1 view .LVU59
2175:FreeRTOS/queue.c ****         }
 212              		.loc 1 2175 63 is_stmt 0 view .LVU60
 213 003e A368     		ldr	r3, [r4, #8]
2175:FreeRTOS/queue.c ****         }
 214              		.loc 1 2175 71 view .LVU61
 215 0040 0B44     		add	r3, r3, r1
2175:FreeRTOS/queue.c ****         }
 216              		.loc 1 2175 42 view .LVU62
 217 0042 E360     		str	r3, [r4, #12]
 218              	.L13:
2179:FreeRTOS/queue.c ****         }
 219              		.loc 1 2179 37 is_stmt 1 view .LVU63
2182:FreeRTOS/queue.c ****         {
 220              		.loc 1 2182 9 view .LVU64
2182:FreeRTOS/queue.c ****         {
 221              		.loc 1 2182 11 is_stmt 0 view .LVU65
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 48


 222 0044 022E     		cmp	r6, #2
 223 0046 03D0     		beq	.L15
 224              	.L11:
2199:FreeRTOS/queue.c ****         }
 225              		.loc 1 2199 37 is_stmt 1 view .LVU66
2203:FreeRTOS/queue.c **** 
 226              		.loc 1 2203 5 view .LVU67
2203:FreeRTOS/queue.c **** 
 227              		.loc 1 2203 52 is_stmt 0 view .LVU68
 228 0048 0135     		adds	r5, r5, #1
 229              	.LVL21:
2203:FreeRTOS/queue.c **** 
 230              		.loc 1 2203 32 view .LVU69
 231 004a A563     		str	r5, [r4, #56]
2205:FreeRTOS/queue.c **** }
 232              		.loc 1 2205 5 is_stmt 1 view .LVU70
2206:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 233              		.loc 1 2206 1 is_stmt 0 view .LVU71
 234 004c 0020     		movs	r0, #0
 235 004e 70BD     		pop	{r4, r5, r6, pc}
 236              	.LVL22:
 237              	.L15:
2184:FreeRTOS/queue.c ****             {
 238              		.loc 1 2184 13 is_stmt 1 view .LVU72
2184:FreeRTOS/queue.c ****             {
 239              		.loc 1 2184 15 is_stmt 0 view .LVU73
 240 0050 002D     		cmp	r5, #0
 241 0052 F9D0     		beq	.L11
2190:FreeRTOS/queue.c ****             }
 242              		.loc 1 2190 17 is_stmt 1 view .LVU74
 243 0054 013D     		subs	r5, r5, #1
 244              	.LVL23:
2190:FreeRTOS/queue.c ****             }
 245              		.loc 1 2190 17 is_stmt 0 view .LVU75
 246 0056 F7E7     		b	.L11
 247              		.cfi_endproc
 248              	.LFE23:
 250              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 251              		.align	1
 252              		.syntax unified
 253              		.thumb
 254              		.thumb_func
 256              	prvCopyDataFromQueue:
 257              	.LVL24:
 258              	.LFB24:
2211:FreeRTOS/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 259              		.loc 1 2211 1 is_stmt 1 view -0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
2211:FreeRTOS/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 263              		.loc 1 2211 1 is_stmt 0 view .LVU77
 264 0000 0346     		mov	r3, r0
2212:FreeRTOS/queue.c ****     {
 265              		.loc 1 2212 5 is_stmt 1 view .LVU78
2212:FreeRTOS/queue.c ****     {
 266              		.loc 1 2212 16 is_stmt 0 view .LVU79
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 49


 267 0002 026C     		ldr	r2, [r0, #64]
2212:FreeRTOS/queue.c ****     {
 268              		.loc 1 2212 7 view .LVU80
 269 0004 6AB1     		cbz	r2, .L20
2211:FreeRTOS/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 270              		.loc 1 2211 1 view .LVU81
 271 0006 10B5     		push	{r4, lr}
 272              	.LCFI3:
 273              		.cfi_def_cfa_offset 8
 274              		.cfi_offset 4, -8
 275              		.cfi_offset 14, -4
 276 0008 0846     		mov	r0, r1
 277              	.LVL25:
2214:FreeRTOS/queue.c **** 
 278              		.loc 1 2214 9 is_stmt 1 view .LVU82
2214:FreeRTOS/queue.c **** 
 279              		.loc 1 2214 38 is_stmt 0 view .LVU83
 280 000a D968     		ldr	r1, [r3, #12]
 281              	.LVL26:
2214:FreeRTOS/queue.c **** 
 282              		.loc 1 2214 38 view .LVU84
 283 000c 1144     		add	r1, r1, r2
 284 000e D960     		str	r1, [r3, #12]
2216:FreeRTOS/queue.c ****         {
 285              		.loc 1 2216 9 is_stmt 1 view .LVU85
2216:FreeRTOS/queue.c ****         {
 286              		.loc 1 2216 11 is_stmt 0 view .LVU86
 287 0010 9C68     		ldr	r4, [r3, #8]
 288 0012 A142     		cmp	r1, r4
 289 0014 01D3     		bcc	.L18
2218:FreeRTOS/queue.c ****         }
 290              		.loc 1 2218 13 is_stmt 1 view .LVU87
2218:FreeRTOS/queue.c ****         }
 291              		.loc 1 2218 51 is_stmt 0 view .LVU88
 292 0016 1968     		ldr	r1, [r3]
2218:FreeRTOS/queue.c ****         }
 293              		.loc 1 2218 42 view .LVU89
 294 0018 D960     		str	r1, [r3, #12]
 295              	.L18:
2222:FreeRTOS/queue.c ****         }
 296              		.loc 1 2222 37 is_stmt 1 view .LVU90
2225:FreeRTOS/queue.c ****     }
 297              		.loc 1 2225 9 view .LVU91
2225:FreeRTOS/queue.c ****     }
 298              		.loc 1 2225 18 is_stmt 0 view .LVU92
 299 001a D968     		ldr	r1, [r3, #12]
 300 001c FFF7FEFF 		bl	memcpy
 301              	.LVL27:
2227:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 302              		.loc 1 2227 1 view .LVU93
 303 0020 10BD     		pop	{r4, pc}
 304              	.LVL28:
 305              	.L20:
 306              	.LCFI4:
 307              		.cfi_def_cfa_offset 0
 308              		.cfi_restore 4
 309              		.cfi_restore 14
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 50


2227:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 310              		.loc 1 2227 1 view .LVU94
 311 0022 7047     		bx	lr
 312              		.cfi_endproc
 313              	.LFE24:
 315              		.section	.text.prvUnlockQueue,"ax",%progbits
 316              		.align	1
 317              		.syntax unified
 318              		.thumb
 319              		.thumb_func
 321              	prvUnlockQueue:
 322              	.LVL29:
 323              	.LFB25:
2231:FreeRTOS/queue.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 324              		.loc 1 2231 1 is_stmt 1 view -0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 0
 327              		@ frame_needed = 0, uses_anonymous_args = 0
2231:FreeRTOS/queue.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 328              		.loc 1 2231 1 is_stmt 0 view .LVU96
 329 0000 38B5     		push	{r3, r4, r5, lr}
 330              	.LCFI5:
 331              		.cfi_def_cfa_offset 16
 332              		.cfi_offset 3, -16
 333              		.cfi_offset 4, -12
 334              		.cfi_offset 5, -8
 335              		.cfi_offset 14, -4
 336 0002 0546     		mov	r5, r0
2238:FreeRTOS/queue.c ****     {
 337              		.loc 1 2238 5 is_stmt 1 view .LVU97
 338 0004 FFF7FEFF 		bl	vPortEnterCritical
 339              	.LVL30:
 340              	.LBB92:
2240:FreeRTOS/queue.c **** 
 341              		.loc 1 2240 9 view .LVU98
2240:FreeRTOS/queue.c **** 
 342              		.loc 1 2240 16 is_stmt 0 view .LVU99
 343 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 344 000c 64B2     		sxtb	r4, r4
 345              	.LVL31:
2243:FreeRTOS/queue.c ****         {
 346              		.loc 1 2243 9 is_stmt 1 view .LVU100
2243:FreeRTOS/queue.c ****         {
 347              		.loc 1 2243 14 is_stmt 0 view .LVU101
 348 000e 01E0     		b	.L24
 349              	.L26:
2301:FreeRTOS/queue.c ****                         }
 350              		.loc 1 2301 53 is_stmt 1 view .LVU102
2311:FreeRTOS/queue.c ****         }
 351              		.loc 1 2311 13 view .LVU103
 352 0010 013C     		subs	r4, r4, #1
 353              	.LVL32:
2311:FreeRTOS/queue.c ****         }
 354              		.loc 1 2311 13 is_stmt 0 view .LVU104
 355 0012 64B2     		sxtb	r4, r4
 356              	.LVL33:
 357              	.L24:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 51


2243:FreeRTOS/queue.c ****         {
 358              		.loc 1 2243 14 is_stmt 1 view .LVU105
 359 0014 002C     		cmp	r4, #0
 360 0016 0ADD     		ble	.L25
2291:FreeRTOS/queue.c ****                     {
 361              		.loc 1 2291 21 view .LVU106
2291:FreeRTOS/queue.c ****                     {
 362              		.loc 1 2291 25 is_stmt 0 view .LVU107
 363 0018 6B6A     		ldr	r3, [r5, #36]
2291:FreeRTOS/queue.c ****                     {
 364              		.loc 1 2291 23 view .LVU108
 365 001a 43B1     		cbz	r3, .L25
2293:FreeRTOS/queue.c ****                         {
 366              		.loc 1 2293 25 is_stmt 1 view .LVU109
2293:FreeRTOS/queue.c ****                         {
 367              		.loc 1 2293 29 is_stmt 0 view .LVU110
 368 001c 05F12400 		add	r0, r5, #36
 369 0020 FFF7FEFF 		bl	xTaskRemoveFromEventList
 370              	.LVL34:
2293:FreeRTOS/queue.c ****                         {
 371              		.loc 1 2293 27 view .LVU111
 372 0024 0028     		cmp	r0, #0
 373 0026 F3D0     		beq	.L26
2297:FreeRTOS/queue.c ****                         }
 374              		.loc 1 2297 29 is_stmt 1 view .LVU112
 375 0028 FFF7FEFF 		bl	vTaskMissedYield
 376              	.LVL35:
 377 002c F0E7     		b	.L26
 378              	.L25:
2314:FreeRTOS/queue.c ****     }
 379              		.loc 1 2314 9 view .LVU113
2314:FreeRTOS/queue.c ****     }
 380              		.loc 1 2314 26 is_stmt 0 view .LVU114
 381 002e FF23     		movs	r3, #255
 382 0030 85F84530 		strb	r3, [r5, #69]
 383              	.LBE92:
2316:FreeRTOS/queue.c **** 
 384              		.loc 1 2316 5 is_stmt 1 view .LVU115
 385 0034 FFF7FEFF 		bl	vPortExitCritical
 386              	.LVL36:
2319:FreeRTOS/queue.c ****     {
 387              		.loc 1 2319 5 view .LVU116
 388 0038 FFF7FEFF 		bl	vPortEnterCritical
 389              	.LVL37:
 390              	.LBB93:
2321:FreeRTOS/queue.c **** 
 391              		.loc 1 2321 9 view .LVU117
2321:FreeRTOS/queue.c **** 
 392              		.loc 1 2321 16 is_stmt 0 view .LVU118
 393 003c 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 394              	.LVL38:
2321:FreeRTOS/queue.c **** 
 395              		.loc 1 2321 16 view .LVU119
 396 0040 64B2     		sxtb	r4, r4
 397              	.LVL39:
2323:FreeRTOS/queue.c ****         {
 398              		.loc 1 2323 9 is_stmt 1 view .LVU120
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 52


2323:FreeRTOS/queue.c ****         {
 399              		.loc 1 2323 14 is_stmt 0 view .LVU121
 400 0042 01E0     		b	.L28
 401              	.L30:
2333:FreeRTOS/queue.c ****                 }
 402              		.loc 1 2333 45 is_stmt 1 view .LVU122
2336:FreeRTOS/queue.c ****             }
 403              		.loc 1 2336 17 view .LVU123
 404 0044 013C     		subs	r4, r4, #1
 405              	.LVL40:
2336:FreeRTOS/queue.c ****             }
 406              		.loc 1 2336 17 is_stmt 0 view .LVU124
 407 0046 64B2     		sxtb	r4, r4
 408              	.LVL41:
 409              	.L28:
2323:FreeRTOS/queue.c ****         {
 410              		.loc 1 2323 14 is_stmt 1 view .LVU125
 411 0048 002C     		cmp	r4, #0
 412 004a 0ADD     		ble	.L29
2325:FreeRTOS/queue.c ****             {
 413              		.loc 1 2325 13 view .LVU126
2325:FreeRTOS/queue.c ****             {
 414              		.loc 1 2325 17 is_stmt 0 view .LVU127
 415 004c 2B69     		ldr	r3, [r5, #16]
2325:FreeRTOS/queue.c ****             {
 416              		.loc 1 2325 15 view .LVU128
 417 004e 43B1     		cbz	r3, .L29
2327:FreeRTOS/queue.c ****                 {
 418              		.loc 1 2327 17 is_stmt 1 view .LVU129
2327:FreeRTOS/queue.c ****                 {
 419              		.loc 1 2327 21 is_stmt 0 view .LVU130
 420 0050 05F11000 		add	r0, r5, #16
 421 0054 FFF7FEFF 		bl	xTaskRemoveFromEventList
 422              	.LVL42:
2327:FreeRTOS/queue.c ****                 {
 423              		.loc 1 2327 19 view .LVU131
 424 0058 0028     		cmp	r0, #0
 425 005a F3D0     		beq	.L30
2329:FreeRTOS/queue.c ****                 }
 426              		.loc 1 2329 21 is_stmt 1 view .LVU132
 427 005c FFF7FEFF 		bl	vTaskMissedYield
 428              	.LVL43:
 429 0060 F0E7     		b	.L30
 430              	.L29:
2344:FreeRTOS/queue.c ****     }
 431              		.loc 1 2344 9 view .LVU133
2344:FreeRTOS/queue.c ****     }
 432              		.loc 1 2344 26 is_stmt 0 view .LVU134
 433 0062 FF23     		movs	r3, #255
 434 0064 85F84430 		strb	r3, [r5, #68]
 435              	.LBE93:
2346:FreeRTOS/queue.c **** }
 436              		.loc 1 2346 5 is_stmt 1 view .LVU135
 437 0068 FFF7FEFF 		bl	vPortExitCritical
 438              	.LVL44:
2347:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 439              		.loc 1 2347 1 is_stmt 0 view .LVU136
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 53


 440 006c 38BD     		pop	{r3, r4, r5, pc}
2347:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 441              		.loc 1 2347 1 view .LVU137
 442              		.cfi_endproc
 443              	.LFE25:
 445              		.section	.text.xQueueGenericReset,"ax",%progbits
 446              		.align	1
 447              		.global	xQueueGenericReset
 448              		.syntax unified
 449              		.thumb
 450              		.thumb_func
 452              	xQueueGenericReset:
 453              	.LVL45:
 454              	.LFB5:
 266:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 455              		.loc 1 266 1 is_stmt 1 view -0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 0
 458              		@ frame_needed = 0, uses_anonymous_args = 0
 266:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 459              		.loc 1 266 1 is_stmt 0 view .LVU139
 460 0000 38B5     		push	{r3, r4, r5, lr}
 461              	.LCFI6:
 462              		.cfi_def_cfa_offset 16
 463              		.cfi_offset 3, -16
 464              		.cfi_offset 4, -12
 465              		.cfi_offset 5, -8
 466              		.cfi_offset 14, -4
 267:FreeRTOS/queue.c **** 
 467              		.loc 1 267 5 is_stmt 1 view .LVU140
 468              	.LVL46:
 269:FreeRTOS/queue.c **** 
 469              		.loc 1 269 5 view .LVU141
 470 0002 E0B1     		cbz	r0, .L39
 471 0004 0D46     		mov	r5, r1
 472 0006 0446     		mov	r4, r0
 269:FreeRTOS/queue.c **** 
 473              		.loc 1 269 28 discriminator 2 view .LVU142
 271:FreeRTOS/queue.c ****     {
 474              		.loc 1 271 5 discriminator 2 view .LVU143
 475 0008 FFF7FEFF 		bl	vPortEnterCritical
 476              	.LVL47:
 273:FreeRTOS/queue.c ****         pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 477              		.loc 1 273 9 discriminator 2 view .LVU144
 273:FreeRTOS/queue.c ****         pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 478              		.loc 1 273 43 is_stmt 0 discriminator 2 view .LVU145
 479 000c 2368     		ldr	r3, [r4]
 273:FreeRTOS/queue.c ****         pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 480              		.loc 1 273 63 discriminator 2 view .LVU146
 481 000e E26B     		ldr	r2, [r4, #60]
 273:FreeRTOS/queue.c ****         pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 482              		.loc 1 273 83 discriminator 2 view .LVU147
 483 0010 216C     		ldr	r1, [r4, #64]
 273:FreeRTOS/queue.c ****         pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 484              		.loc 1 273 52 discriminator 2 view .LVU148
 485 0012 01FB0230 		mla	r0, r1, r2, r3
 273:FreeRTOS/queue.c ****         pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 54


 486              		.loc 1 273 34 discriminator 2 view .LVU149
 487 0016 A060     		str	r0, [r4, #8]
 274:FreeRTOS/queue.c ****         pxQueue->pcWriteTo = pxQueue->pcHead;
 488              		.loc 1 274 9 is_stmt 1 discriminator 2 view .LVU150
 274:FreeRTOS/queue.c ****         pxQueue->pcWriteTo = pxQueue->pcHead;
 489              		.loc 1 274 36 is_stmt 0 discriminator 2 view .LVU151
 490 0018 0020     		movs	r0, #0
 491 001a A063     		str	r0, [r4, #56]
 275:FreeRTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->ux
 492              		.loc 1 275 9 is_stmt 1 discriminator 2 view .LVU152
 275:FreeRTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->ux
 493              		.loc 1 275 28 is_stmt 0 discriminator 2 view .LVU153
 494 001c 6360     		str	r3, [r4, #4]
 276:FreeRTOS/queue.c ****         pxQueue->cRxLock = queueUNLOCKED;
 495              		.loc 1 276 9 is_stmt 1 discriminator 2 view .LVU154
 276:FreeRTOS/queue.c ****         pxQueue->cRxLock = queueUNLOCKED;
 496              		.loc 1 276 80 is_stmt 0 discriminator 2 view .LVU155
 497 001e 013A     		subs	r2, r2, #1
 276:FreeRTOS/queue.c ****         pxQueue->cRxLock = queueUNLOCKED;
 498              		.loc 1 276 56 discriminator 2 view .LVU156
 499 0020 02FB0133 		mla	r3, r2, r1, r3
 276:FreeRTOS/queue.c ****         pxQueue->cRxLock = queueUNLOCKED;
 500              		.loc 1 276 38 discriminator 2 view .LVU157
 501 0024 E360     		str	r3, [r4, #12]
 277:FreeRTOS/queue.c ****         pxQueue->cTxLock = queueUNLOCKED;
 502              		.loc 1 277 9 is_stmt 1 discriminator 2 view .LVU158
 277:FreeRTOS/queue.c ****         pxQueue->cTxLock = queueUNLOCKED;
 503              		.loc 1 277 26 is_stmt 0 discriminator 2 view .LVU159
 504 0026 FF23     		movs	r3, #255
 505 0028 84F84430 		strb	r3, [r4, #68]
 278:FreeRTOS/queue.c **** 
 506              		.loc 1 278 9 is_stmt 1 discriminator 2 view .LVU160
 278:FreeRTOS/queue.c **** 
 507              		.loc 1 278 26 is_stmt 0 discriminator 2 view .LVU161
 508 002c 84F84530 		strb	r3, [r4, #69]
 280:FreeRTOS/queue.c ****         {
 509              		.loc 1 280 9 is_stmt 1 discriminator 2 view .LVU162
 280:FreeRTOS/queue.c ****         {
 510              		.loc 1 280 11 is_stmt 0 discriminator 2 view .LVU163
 511 0030 FDB9     		cbnz	r5, .L36
 287:FreeRTOS/queue.c ****             {
 512              		.loc 1 287 13 is_stmt 1 view .LVU164
 287:FreeRTOS/queue.c ****             {
 513              		.loc 1 287 17 is_stmt 0 view .LVU165
 514 0032 2369     		ldr	r3, [r4, #16]
 287:FreeRTOS/queue.c ****             {
 515              		.loc 1 287 15 view .LVU166
 516 0034 63B9     		cbnz	r3, .L40
 517              	.L37:
 310:FreeRTOS/queue.c **** 
 518              		.loc 1 310 5 is_stmt 1 view .LVU167
 519 0036 FFF7FEFF 		bl	vPortExitCritical
 520              	.LVL48:
 314:FreeRTOS/queue.c **** }
 521              		.loc 1 314 5 view .LVU168
 315:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 522              		.loc 1 315 1 is_stmt 0 view .LVU169
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 55


 523 003a 0120     		movs	r0, #1
 524 003c 38BD     		pop	{r3, r4, r5, pc}
 525              	.LVL49:
 526              	.L39:
 269:FreeRTOS/queue.c **** 
 527              		.loc 1 269 5 is_stmt 1 view .LVU170
 528              	.LBB94:
 529              	.LBI94:
 530              		.file 2 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h"
   1:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.4.3
   3:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://www.FreeRTOS.org
  23:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://github.com/FreeRTOS
  24:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define PORTMACRO_H
  31:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifdef __cplusplus
  33:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         extern "C" {
  34:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
  35:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portCHAR          char
  48:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portFLOAT         float
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 56


  49:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDOUBLE        double
  50:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portLONG          long
  51:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSHORT         short
  52:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  53:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portBASE_TYPE     long
  54:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  56:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef long             BaseType_t;
  57:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef unsigned long    UBaseType_t;
  58:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  60:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         typedef uint16_t     TickType_t;
  61:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  62:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #else
  63:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         typedef uint32_t     TickType_t;
  64:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  65:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not need to be guarded with a critical section. */
  68:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  69:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
  70:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  74:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  76:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  77:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  78:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  79:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  80:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portYIELD()                                 \
  81:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {                                                   \
  82:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  83:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  84:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****                                                         \
  85:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  86:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  87:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  88:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "isb" );                                  \
  89:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
  90:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  91:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  92:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  93:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired ) { if( xSwitchRequired != pdFALSE ) { traceISR_
  94:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  95:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  96:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  98:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortEnterCritical( void );
  99:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortExitCritical( void );
 100:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 101:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 102:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 103:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 104:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 105:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 57


 106:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 107:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 108:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 109:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 110:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 111:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * (which build with all the ports) will build. */
 112:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 113:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 114:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 115:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 116:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 117:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 118:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 119:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 120:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 121:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 122:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 123:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 124:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 125:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 126:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 127:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 128:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 129:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 130:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Generic helper function. */
 131:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 132:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 133:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             uint8_t ucReturn;
 134:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 135:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 136:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 137:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             return ucReturn;
 138:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 139:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 140:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Check the configuration. */
 141:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 142:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 143:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #endif
 144:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 145:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 146:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 147:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 148:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 150:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 152:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 154:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifdef configASSERT
 158:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         void vPortValidateInterruptPriority( void );
 159:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 160:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 161:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 162:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 58


 163:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNOP()
 164:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portINLINE              __inline
 166:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 167:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef portFORCE_INLINE
 168:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 169:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 170:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 173:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulCurrentInterrupt;
 174:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         BaseType_t xReturn;
 175:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 177:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 178:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 179:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 180:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 181:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             xReturn = pdFALSE;
 182:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 183:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         else
 184:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 185:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             xReturn = pdTRUE;
 186:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 187:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 188:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         return xReturn;
 189:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 190:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 192:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 531              		.loc 2 193 34 view .LVU171
 532              	.LBB95:
 194:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulNewBASEPRI;
 533              		.loc 2 195 9 view .LVU172
 196:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
 534              		.loc 2 197 9 view .LVU173
 535              		.syntax unified
 536              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 537 003e 4FF05003 			mov r3, #80												
 538 0042 83F31188 		msr basepri, r3											
 539 0046 BFF36F8F 		isb														
 540 004a BFF34F8F 		dsb														
 541              	
 542              	@ 0 "" 2
 543              	.LVL50:
 544              		.thumb
 545              		.syntax unified
 546              	.L35:
 547              		.loc 2 197 9 is_stmt 0 view .LVU174
 548              	.LBE95:
 549              	.LBE94:
 269:FreeRTOS/queue.c **** 
 550              		.loc 1 269 5 is_stmt 1 discriminator 1 view .LVU175
 269:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 59


 551              		.loc 1 269 5 discriminator 1 view .LVU176
 269:FreeRTOS/queue.c **** 
 552              		.loc 1 269 5 discriminator 1 view .LVU177
 553 004e FEE7     		b	.L35
 554              	.LVL51:
 555              	.L40:
 289:FreeRTOS/queue.c ****                 {
 556              		.loc 1 289 17 view .LVU178
 289:FreeRTOS/queue.c ****                 {
 557              		.loc 1 289 21 is_stmt 0 view .LVU179
 558 0050 04F11000 		add	r0, r4, #16
 559 0054 FFF7FEFF 		bl	xTaskRemoveFromEventList
 560              	.LVL52:
 289:FreeRTOS/queue.c ****                 {
 561              		.loc 1 289 19 view .LVU180
 562 0058 0028     		cmp	r0, #0
 563 005a ECD0     		beq	.L37
 291:FreeRTOS/queue.c ****                 }
 564              		.loc 1 291 21 is_stmt 1 view .LVU181
 565 005c 4FF0E023 		mov	r3, #-536813568
 566 0060 4FF08052 		mov	r2, #268435456
 567 0064 C3F8042D 		str	r2, [r3, #3332]
 291:FreeRTOS/queue.c ****                 }
 568              		.loc 1 291 21 view .LVU182
 569              		.syntax unified
 570              	@ 291 "FreeRTOS/queue.c" 1
 571 0068 BFF34F8F 		dsb
 572              	@ 0 "" 2
 291:FreeRTOS/queue.c ****                 }
 573              		.loc 1 291 21 view .LVU183
 574              	@ 291 "FreeRTOS/queue.c" 1
 575 006c BFF36F8F 		isb
 576              	@ 0 "" 2
 291:FreeRTOS/queue.c ****                 }
 577              		.loc 1 291 53 view .LVU184
 578              		.thumb
 579              		.syntax unified
 580 0070 E1E7     		b	.L37
 581              	.L36:
 306:FreeRTOS/queue.c ****             vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 582              		.loc 1 306 13 view .LVU185
 583 0072 04F11000 		add	r0, r4, #16
 584 0076 FFF7FEFF 		bl	vListInitialise
 585              	.LVL53:
 307:FreeRTOS/queue.c ****         }
 586              		.loc 1 307 13 view .LVU186
 587 007a 04F12400 		add	r0, r4, #36
 588 007e FFF7FEFF 		bl	vListInitialise
 589              	.LVL54:
 590 0082 D8E7     		b	.L37
 591              		.cfi_endproc
 592              	.LFE5:
 594              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 595              		.align	1
 596              		.syntax unified
 597              		.thumb
 598              		.thumb_func
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 60


 600              	prvInitialiseNewQueue:
 601              	.LVL55:
 602              	.LFB7:
 449:FreeRTOS/queue.c ****     /* Remove compiler warnings about unused parameters should
 603              		.loc 1 449 1 view -0
 604              		.cfi_startproc
 605              		@ args = 4, pretend = 0, frame = 0
 606              		@ frame_needed = 0, uses_anonymous_args = 0
 449:FreeRTOS/queue.c ****     /* Remove compiler warnings about unused parameters should
 607              		.loc 1 449 1 is_stmt 0 view .LVU188
 608 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 609              	.LCFI7:
 610              		.cfi_def_cfa_offset 24
 611              		.cfi_offset 3, -24
 612              		.cfi_offset 4, -20
 613              		.cfi_offset 5, -16
 614              		.cfi_offset 6, -12
 615              		.cfi_offset 7, -8
 616              		.cfi_offset 14, -4
 617 0002 0546     		mov	r5, r0
 618 0004 1E46     		mov	r6, r3
 619 0006 069C     		ldr	r4, [sp, #24]
 452:FreeRTOS/queue.c **** 
 620              		.loc 1 452 5 is_stmt 1 view .LVU189
 454:FreeRTOS/queue.c ****     {
 621              		.loc 1 454 5 view .LVU190
 454:FreeRTOS/queue.c ****     {
 622              		.loc 1 454 7 is_stmt 0 view .LVU191
 623 0008 0F46     		mov	r7, r1
 624 000a 79B9     		cbnz	r1, .L42
 460:FreeRTOS/queue.c ****     }
 625              		.loc 1 460 9 is_stmt 1 view .LVU192
 460:FreeRTOS/queue.c ****     }
 626              		.loc 1 460 28 is_stmt 0 view .LVU193
 627 000c 2460     		str	r4, [r4]
 628              	.L43:
 470:FreeRTOS/queue.c ****     pxNewQueue->uxItemSize = uxItemSize;
 629              		.loc 1 470 5 is_stmt 1 view .LVU194
 470:FreeRTOS/queue.c ****     pxNewQueue->uxItemSize = uxItemSize;
 630              		.loc 1 470 26 is_stmt 0 view .LVU195
 631 000e E563     		str	r5, [r4, #60]
 471:FreeRTOS/queue.c ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 632              		.loc 1 471 5 is_stmt 1 view .LVU196
 471:FreeRTOS/queue.c ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 633              		.loc 1 471 28 is_stmt 0 view .LVU197
 634 0010 2764     		str	r7, [r4, #64]
 472:FreeRTOS/queue.c **** 
 635              		.loc 1 472 5 is_stmt 1 view .LVU198
 472:FreeRTOS/queue.c **** 
 636              		.loc 1 472 14 is_stmt 0 view .LVU199
 637 0012 0121     		movs	r1, #1
 638              	.LVL56:
 472:FreeRTOS/queue.c **** 
 639              		.loc 1 472 14 view .LVU200
 640 0014 2046     		mov	r0, r4
 641              	.LVL57:
 472:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 61


 642              		.loc 1 472 14 view .LVU201
 643 0016 FFF7FEFF 		bl	xQueueGenericReset
 644              	.LVL58:
 476:FreeRTOS/queue.c ****         }
 645              		.loc 1 476 13 is_stmt 1 view .LVU202
 476:FreeRTOS/queue.c ****         }
 646              		.loc 1 476 37 is_stmt 0 view .LVU203
 647 001a 84F84C60 		strb	r6, [r4, #76]
 486:FreeRTOS/queue.c **** }
 648              		.loc 1 486 5 is_stmt 1 view .LVU204
 649 001e 3346     		mov	r3, r6
 650 0020 3A46     		mov	r2, r7
 651 0022 2946     		mov	r1, r5
 652 0024 7320     		movs	r0, #115
 653 0026 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x3
 654              	.LVL59:
 487:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 655              		.loc 1 487 1 is_stmt 0 view .LVU205
 656 002a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 657              	.LVL60:
 658              	.L42:
 465:FreeRTOS/queue.c ****     }
 659              		.loc 1 465 9 is_stmt 1 view .LVU206
 465:FreeRTOS/queue.c ****     }
 660              		.loc 1 465 28 is_stmt 0 view .LVU207
 661 002c 2260     		str	r2, [r4]
 662 002e EEE7     		b	.L43
 663              		.cfi_endproc
 664              	.LFE7:
 666              		.section	.text.xQueueGenericCreate,"ax",%progbits
 667              		.align	1
 668              		.global	xQueueGenericCreate
 669              		.syntax unified
 670              		.thumb
 671              		.thumb_func
 673              	xQueueGenericCreate:
 674              	.LVL61:
 675              	.LFB6:
 385:FreeRTOS/queue.c ****         Queue_t * pxNewQueue;
 676              		.loc 1 385 5 is_stmt 1 view -0
 677              		.cfi_startproc
 678              		@ args = 0, pretend = 0, frame = 0
 679              		@ frame_needed = 0, uses_anonymous_args = 0
 386:FreeRTOS/queue.c ****         size_t xQueueSizeInBytes;
 680              		.loc 1 386 9 view .LVU209
 387:FreeRTOS/queue.c ****         uint8_t * pucQueueStorage;
 681              		.loc 1 387 9 view .LVU210
 388:FreeRTOS/queue.c **** 
 682              		.loc 1 388 9 view .LVU211
 390:FreeRTOS/queue.c **** 
 683              		.loc 1 390 9 view .LVU212
 684 0000 40B9     		cbnz	r0, .L46
 390:FreeRTOS/queue.c **** 
 685              		.loc 1 390 9 view .LVU213
 686              	.LBB96:
 687              	.LBI96:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 62


 688              		.loc 2 193 34 view .LVU214
 689              	.LBB97:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 690              		.loc 2 195 9 view .LVU215
 691              		.loc 2 197 9 view .LVU216
 692              		.syntax unified
 693              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 694 0002 4FF05003 			mov r3, #80												
 695 0006 83F31188 		msr basepri, r3											
 696 000a BFF36F8F 		isb														
 697 000e BFF34F8F 		dsb														
 698              	
 699              	@ 0 "" 2
 700              	.LVL62:
 701              		.thumb
 702              		.syntax unified
 703              	.L47:
 704              		.loc 2 197 9 is_stmt 0 view .LVU217
 705              	.LBE97:
 706              	.LBE96:
 390:FreeRTOS/queue.c **** 
 707              		.loc 1 390 9 is_stmt 1 discriminator 1 view .LVU218
 390:FreeRTOS/queue.c **** 
 708              		.loc 1 390 9 discriminator 1 view .LVU219
 390:FreeRTOS/queue.c **** 
 709              		.loc 1 390 9 discriminator 1 view .LVU220
 710 0012 FEE7     		b	.L47
 711              	.L46:
 385:FreeRTOS/queue.c ****         Queue_t * pxNewQueue;
 712              		.loc 1 385 5 is_stmt 0 discriminator 2 view .LVU221
 713 0014 F0B5     		push	{r4, r5, r6, r7, lr}
 714              	.LCFI8:
 715              		.cfi_def_cfa_offset 20
 716              		.cfi_offset 4, -20
 717              		.cfi_offset 5, -16
 718              		.cfi_offset 6, -12
 719              		.cfi_offset 7, -8
 720              		.cfi_offset 14, -4
 721 0016 83B0     		sub	sp, sp, #12
 722              	.LCFI9:
 723              		.cfi_def_cfa_offset 32
 724 0018 0C46     		mov	r4, r1
 725 001a 1546     		mov	r5, r2
 726 001c 0646     		mov	r6, r0
 390:FreeRTOS/queue.c **** 
 727              		.loc 1 390 58 is_stmt 1 discriminator 2 view .LVU222
 395:FreeRTOS/queue.c **** 
 728              		.loc 1 395 9 discriminator 2 view .LVU223
 395:FreeRTOS/queue.c **** 
 729              		.loc 1 395 27 is_stmt 0 discriminator 2 view .LVU224
 730 001e 01FB00F0 		mul	r0, r1, r0
 731              	.LVL63:
 398:FreeRTOS/queue.c **** 
 732              		.loc 1 398 9 is_stmt 1 discriminator 2 view .LVU225
 733 0022 61B1     		cbz	r1, .L48
 398:FreeRTOS/queue.c **** 
 734              		.loc 1 398 9 is_stmt 0 discriminator 2 view .LVU226
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 63


 735 0024 B0FBF1F3 		udiv	r3, r0, r1
 736 0028 B342     		cmp	r3, r6
 737 002a 08D0     		beq	.L48
 398:FreeRTOS/queue.c **** 
 738              		.loc 1 398 9 is_stmt 1 view .LVU227
 739              	.LBB98:
 740              	.LBI98:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 741              		.loc 2 193 34 view .LVU228
 742              	.LBB99:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 743              		.loc 2 195 9 view .LVU229
 744              		.loc 2 197 9 view .LVU230
 745              		.syntax unified
 746              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 747 002c 4FF05003 			mov r3, #80												
 748 0030 83F31188 		msr basepri, r3											
 749 0034 BFF36F8F 		isb														
 750 0038 BFF34F8F 		dsb														
 751              	
 752              	@ 0 "" 2
 753              	.LVL64:
 754              		.thumb
 755              		.syntax unified
 756              	.L49:
 757              		.loc 2 197 9 is_stmt 0 view .LVU231
 758              	.LBE99:
 759              	.LBE98:
 398:FreeRTOS/queue.c **** 
 760              		.loc 1 398 9 is_stmt 1 discriminator 2 view .LVU232
 398:FreeRTOS/queue.c **** 
 761              		.loc 1 398 9 discriminator 2 view .LVU233
 398:FreeRTOS/queue.c **** 
 762              		.loc 1 398 9 discriminator 2 view .LVU234
 763 003c FEE7     		b	.L49
 764              	.L48:
 398:FreeRTOS/queue.c **** 
 765              		.loc 1 398 103 discriminator 8 view .LVU235
 401:FreeRTOS/queue.c **** 
 766              		.loc 1 401 9 discriminator 8 view .LVU236
 767 003e 10F1510F 		cmn	r0, #81
 768 0042 08D9     		bls	.L50
 401:FreeRTOS/queue.c **** 
 769              		.loc 1 401 9 view .LVU237
 770              	.LBB100:
 771              	.LBI100:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 772              		.loc 2 193 34 view .LVU238
 773              	.LBB101:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 774              		.loc 2 195 9 view .LVU239
 775              		.loc 2 197 9 view .LVU240
 776              		.syntax unified
 777              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 778 0044 4FF05003 			mov r3, #80												
 779 0048 83F31188 		msr basepri, r3											
 780 004c BFF36F8F 		isb														
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 64


 781 0050 BFF34F8F 		dsb														
 782              	
 783              	@ 0 "" 2
 784              	.LVL65:
 785              		.thumb
 786              		.syntax unified
 787              	.L51:
 788              		.loc 2 197 9 is_stmt 0 view .LVU241
 789              	.LBE101:
 790              	.LBE100:
 401:FreeRTOS/queue.c **** 
 791              		.loc 1 401 9 is_stmt 1 discriminator 3 view .LVU242
 401:FreeRTOS/queue.c **** 
 792              		.loc 1 401 9 discriminator 3 view .LVU243
 401:FreeRTOS/queue.c **** 
 793              		.loc 1 401 9 discriminator 3 view .LVU244
 794 0054 FEE7     		b	.L51
 795              	.L50:
 401:FreeRTOS/queue.c **** 
 796              		.loc 1 401 87 discriminator 2 view .LVU245
 412:FreeRTOS/queue.c **** 
 797              		.loc 1 412 9 discriminator 2 view .LVU246
 412:FreeRTOS/queue.c **** 
 798              		.loc 1 412 36 is_stmt 0 discriminator 2 view .LVU247
 799 0056 5030     		adds	r0, r0, #80
 800              	.LVL66:
 412:FreeRTOS/queue.c **** 
 801              		.loc 1 412 36 discriminator 2 view .LVU248
 802 0058 FFF7FEFF 		bl	pvPortMalloc
 803              	.LVL67:
 414:FreeRTOS/queue.c ****         {
 804              		.loc 1 414 9 is_stmt 1 discriminator 2 view .LVU249
 414:FreeRTOS/queue.c ****         {
 805              		.loc 1 414 11 is_stmt 0 discriminator 2 view .LVU250
 806 005c 0746     		mov	r7, r0
 807 005e 38B1     		cbz	r0, .L45
 418:FreeRTOS/queue.c ****             pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char 
 808              		.loc 1 418 13 is_stmt 1 view .LVU251
 809              	.LVL68:
 419:FreeRTOS/queue.c **** 
 810              		.loc 1 419 13 view .LVU252
 430:FreeRTOS/queue.c ****         }
 811              		.loc 1 430 13 view .LVU253
 812 0060 0090     		str	r0, [sp]
 813 0062 2B46     		mov	r3, r5
 814 0064 00F15002 		add	r2, r0, #80
 815              	.LVL69:
 430:FreeRTOS/queue.c ****         }
 816              		.loc 1 430 13 is_stmt 0 view .LVU254
 817 0068 2146     		mov	r1, r4
 818 006a 3046     		mov	r0, r6
 819              	.LVL70:
 430:FreeRTOS/queue.c ****         }
 820              		.loc 1 430 13 view .LVU255
 821 006c FFF7FEFF 		bl	prvInitialiseNewQueue
 822              	.LVL71:
 434:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 65


 823              		.loc 1 434 52 is_stmt 1 view .LVU256
 435:FreeRTOS/queue.c ****         }
 824              		.loc 1 435 37 view .LVU257
 438:FreeRTOS/queue.c ****     }
 825              		.loc 1 438 9 view .LVU258
 826              	.L45:
 439:FreeRTOS/queue.c **** 
 827              		.loc 1 439 5 is_stmt 0 view .LVU259
 828 0070 3846     		mov	r0, r7
 829 0072 03B0     		add	sp, sp, #12
 830              	.LCFI10:
 831              		.cfi_def_cfa_offset 20
 832              		@ sp needed
 833 0074 F0BD     		pop	{r4, r5, r6, r7, pc}
 439:FreeRTOS/queue.c **** 
 834              		.loc 1 439 5 view .LVU260
 835              		.cfi_endproc
 836              	.LFE6:
 838              		.section	.text.xQueueGenericSend,"ax",%progbits
 839              		.align	1
 840              		.global	xQueueGenericSend
 841              		.syntax unified
 842              		.thumb
 843              		.thumb_func
 845              	xQueueGenericSend:
 846              	.LVL72:
 847              	.LFB8:
 775:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 848              		.loc 1 775 1 is_stmt 1 view -0
 849              		.cfi_startproc
 850              		@ args = 0, pretend = 0, frame = 16
 851              		@ frame_needed = 0, uses_anonymous_args = 0
 775:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 852              		.loc 1 775 1 is_stmt 0 view .LVU262
 853 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 854              	.LCFI11:
 855              		.cfi_def_cfa_offset 20
 856              		.cfi_offset 4, -20
 857              		.cfi_offset 5, -16
 858              		.cfi_offset 6, -12
 859              		.cfi_offset 7, -8
 860              		.cfi_offset 14, -4
 861 0002 87B0     		sub	sp, sp, #28
 862              	.LCFI12:
 863              		.cfi_def_cfa_offset 48
 864 0004 0392     		str	r2, [sp, #12]
 776:FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
 865              		.loc 1 776 5 is_stmt 1 view .LVU263
 866              	.LVL73:
 777:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 867              		.loc 1 777 5 view .LVU264
 778:FreeRTOS/queue.c **** 
 868              		.loc 1 778 5 view .LVU265
 780:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 869              		.loc 1 780 5 view .LVU266
 870 0006 38B1     		cbz	r0, .L78
 871 0008 0F46     		mov	r7, r1
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 66


 872 000a 1D46     		mov	r5, r3
 873 000c 0446     		mov	r4, r0
 780:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 874              		.loc 1 780 28 discriminator 2 view .LVU267
 781:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 875              		.loc 1 781 5 discriminator 2 view .LVU268
 876 000e 61B1     		cbz	r1, .L79
 877              	.LVL74:
 878              	.L58:
 781:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 879              		.loc 1 781 100 discriminator 8 view .LVU269
 782:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 880              		.loc 1 782 5 discriminator 8 view .LVU270
 881 0010 022D     		cmp	r5, #2
 882 0012 16D0     		beq	.L80
 883 0014 0026     		movs	r6, #0
 884 0016 74E0     		b	.L62
 885              	.LVL75:
 886              	.L78:
 780:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 887              		.loc 1 780 5 view .LVU271
 888              	.LBB102:
 889              	.LBI102:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 890              		.loc 2 193 34 view .LVU272
 891              	.LBB103:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 892              		.loc 2 195 9 view .LVU273
 893              		.loc 2 197 9 view .LVU274
 894              		.syntax unified
 895              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 896 0018 4FF05003 			mov r3, #80												
 897 001c 83F31188 		msr basepri, r3											
 898 0020 BFF36F8F 		isb														
 899 0024 BFF34F8F 		dsb														
 900              	
 901              	@ 0 "" 2
 902              	.LVL76:
 903              		.thumb
 904              		.syntax unified
 905              	.L57:
 906              		.loc 2 197 9 is_stmt 0 view .LVU275
 907              	.LBE103:
 908              	.LBE102:
 780:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 909              		.loc 1 780 5 is_stmt 1 discriminator 1 view .LVU276
 780:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 910              		.loc 1 780 5 discriminator 1 view .LVU277
 780:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 911              		.loc 1 780 5 discriminator 1 view .LVU278
 912 0028 FEE7     		b	.L57
 913              	.LVL77:
 914              	.L79:
 781:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 915              		.loc 1 781 5 is_stmt 0 discriminator 2 view .LVU279
 916 002a 036C     		ldr	r3, [r0, #64]
 917              	.LVL78:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 67


 781:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 918              		.loc 1 781 5 discriminator 2 view .LVU280
 919 002c 002B     		cmp	r3, #0
 920 002e EFD0     		beq	.L58
 781:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 921              		.loc 1 781 5 is_stmt 1 view .LVU281
 922              	.LBB104:
 923              	.LBI104:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 924              		.loc 2 193 34 view .LVU282
 925              	.LBB105:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 926              		.loc 2 195 9 view .LVU283
 927              		.loc 2 197 9 view .LVU284
 928              		.syntax unified
 929              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 930 0030 4FF05003 			mov r3, #80												
 931 0034 83F31188 		msr basepri, r3											
 932 0038 BFF36F8F 		isb														
 933 003c BFF34F8F 		dsb														
 934              	
 935              	@ 0 "" 2
 936              	.LVL79:
 937              		.thumb
 938              		.syntax unified
 939              	.L59:
 940              		.loc 2 197 9 is_stmt 0 view .LVU285
 941              	.LBE105:
 942              	.LBE104:
 781:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 943              		.loc 1 781 5 is_stmt 1 discriminator 2 view .LVU286
 781:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 944              		.loc 1 781 5 discriminator 2 view .LVU287
 781:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 945              		.loc 1 781 5 discriminator 2 view .LVU288
 946 0040 FEE7     		b	.L59
 947              	.L80:
 782:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 948              		.loc 1 782 5 is_stmt 0 discriminator 2 view .LVU289
 949 0042 E36B     		ldr	r3, [r4, #60]
 950 0044 012B     		cmp	r3, #1
 951 0046 08D0     		beq	.L76
 782:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 952              		.loc 1 782 5 is_stmt 1 view .LVU290
 953              	.LBB106:
 954              	.LBI106:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 955              		.loc 2 193 34 view .LVU291
 956              	.LBB107:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 957              		.loc 2 195 9 view .LVU292
 958              		.loc 2 197 9 view .LVU293
 959              		.syntax unified
 960              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 961 0048 4FF05003 			mov r3, #80												
 962 004c 83F31188 		msr basepri, r3											
 963 0050 BFF36F8F 		isb														
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 68


 964 0054 BFF34F8F 		dsb														
 965              	
 966              	@ 0 "" 2
 967              	.LVL80:
 968              		.thumb
 969              		.syntax unified
 970              	.L61:
 971              		.loc 2 197 9 is_stmt 0 view .LVU294
 972              	.LBE107:
 973              	.LBE106:
 782:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 974              		.loc 1 782 5 is_stmt 1 discriminator 3 view .LVU295
 782:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 975              		.loc 1 782 5 discriminator 3 view .LVU296
 782:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 976              		.loc 1 782 5 discriminator 3 view .LVU297
 977 0058 FEE7     		b	.L61
 978              	.L76:
 979 005a 0026     		movs	r6, #0
 980 005c 51E0     		b	.L62
 981              	.LVL81:
 982              	.L63:
 802:FreeRTOS/queue.c **** 
 983              		.loc 1 802 17 view .LVU298
 984 005e 2046     		mov	r0, r4
 985 0060 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 986              	.LVL82:
 987 0064 0146     		mov	r1, r0
 988 0066 0095     		str	r5, [sp]
 989 0068 039B     		ldr	r3, [sp, #12]
 990 006a 3A46     		mov	r2, r7
 991 006c 5A20     		movs	r0, #90
 992 006e FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x4
 993              	.LVL83:
 866:FreeRTOS/queue.c **** 
 994              		.loc 1 866 25 view .LVU299
 866:FreeRTOS/queue.c **** 
 995              		.loc 1 866 42 is_stmt 0 view .LVU300
 996 0072 2A46     		mov	r2, r5
 997 0074 3946     		mov	r1, r7
 998 0076 2046     		mov	r0, r4
 999 0078 FFF7FEFF 		bl	prvCopyDataToQueue
 1000              	.LVL84:
 870:FreeRTOS/queue.c ****                         {
 1001              		.loc 1 870 25 is_stmt 1 view .LVU301
 870:FreeRTOS/queue.c ****                         {
 1002              		.loc 1 870 29 is_stmt 0 view .LVU302
 1003 007c 636A     		ldr	r3, [r4, #36]
 870:FreeRTOS/queue.c ****                         {
 1004              		.loc 1 870 27 view .LVU303
 1005 007e 7BB9     		cbnz	r3, .L81
 885:FreeRTOS/queue.c ****                         {
 1006              		.loc 1 885 30 is_stmt 1 view .LVU304
 885:FreeRTOS/queue.c ****                         {
 1007              		.loc 1 885 32 is_stmt 0 view .LVU305
 1008 0080 48B1     		cbz	r0, .L66
 891:FreeRTOS/queue.c ****                         }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 69


 1009              		.loc 1 891 29 is_stmt 1 view .LVU306
 1010 0082 4FF0E023 		mov	r3, #-536813568
 1011 0086 4FF08052 		mov	r2, #268435456
 1012 008a C3F8042D 		str	r2, [r3, #3332]
 891:FreeRTOS/queue.c ****                         }
 1013              		.loc 1 891 29 view .LVU307
 1014              		.syntax unified
 1015              	@ 891 "FreeRTOS/queue.c" 1
 1016 008e BFF34F8F 		dsb
 1017              	@ 0 "" 2
 891:FreeRTOS/queue.c ****                         }
 1018              		.loc 1 891 29 view .LVU308
 1019              	@ 891 "FreeRTOS/queue.c" 1
 1020 0092 BFF36F8F 		isb
 1021              	@ 0 "" 2
 891:FreeRTOS/queue.c ****                         }
 1022              		.loc 1 891 61 view .LVU309
 1023              	.LVL85:
 1024              		.thumb
 1025              		.syntax unified
 1026              	.L66:
 895:FreeRTOS/queue.c ****                         }
 1027              		.loc 1 895 53 view .LVU310
 900:FreeRTOS/queue.c ****                 return pdPASS;
 1028              		.loc 1 900 17 view .LVU311
 1029 0096 FFF7FEFF 		bl	vPortExitCritical
 1030              	.LVL86:
 901:FreeRTOS/queue.c ****             }
 1031              		.loc 1 901 17 view .LVU312
 901:FreeRTOS/queue.c ****             }
 1032              		.loc 1 901 24 is_stmt 0 view .LVU313
 1033 009a 0120     		movs	r0, #1
 1034              	.L55:
 980:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1035              		.loc 1 980 1 view .LVU314
 1036 009c 07B0     		add	sp, sp, #28
 1037              	.LCFI13:
 1038              		.cfi_remember_state
 1039              		.cfi_def_cfa_offset 20
 1040              		@ sp needed
 1041 009e F0BD     		pop	{r4, r5, r6, r7, pc}
 1042              	.LVL87:
 1043              	.L81:
 1044              	.LCFI14:
 1045              		.cfi_restore_state
 872:FreeRTOS/queue.c ****                             {
 1046              		.loc 1 872 29 is_stmt 1 view .LVU315
 872:FreeRTOS/queue.c ****                             {
 1047              		.loc 1 872 33 is_stmt 0 view .LVU316
 1048 00a0 04F12400 		add	r0, r4, #36
 1049              	.LVL88:
 872:FreeRTOS/queue.c ****                             {
 1050              		.loc 1 872 33 view .LVU317
 1051 00a4 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1052              	.LVL89:
 872:FreeRTOS/queue.c ****                             {
 1053              		.loc 1 872 31 view .LVU318
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 70


 1054 00a8 0028     		cmp	r0, #0
 1055 00aa F4D0     		beq	.L66
 878:FreeRTOS/queue.c ****                             }
 1056              		.loc 1 878 33 is_stmt 1 view .LVU319
 1057 00ac 4FF0E023 		mov	r3, #-536813568
 1058 00b0 4FF08052 		mov	r2, #268435456
 1059 00b4 C3F8042D 		str	r2, [r3, #3332]
 878:FreeRTOS/queue.c ****                             }
 1060              		.loc 1 878 33 view .LVU320
 1061              		.syntax unified
 1062              	@ 878 "FreeRTOS/queue.c" 1
 1063 00b8 BFF34F8F 		dsb
 1064              	@ 0 "" 2
 878:FreeRTOS/queue.c ****                             }
 1065              		.loc 1 878 33 view .LVU321
 1066              	@ 878 "FreeRTOS/queue.c" 1
 1067 00bc BFF36F8F 		isb
 1068              	@ 0 "" 2
 878:FreeRTOS/queue.c ****                             }
 1069              		.loc 1 878 65 view .LVU322
 1070              		.thumb
 1071              		.syntax unified
 1072 00c0 E9E7     		b	.L66
 1073              	.L82:
 909:FreeRTOS/queue.c **** 
 1074              		.loc 1 909 21 view .LVU323
 1075 00c2 FFF7FEFF 		bl	vPortExitCritical
 1076              	.LVL90:
 913:FreeRTOS/queue.c ****                     return errQUEUE_FULL;
 1077              		.loc 1 913 21 view .LVU324
 1078 00c6 2046     		mov	r0, r4
 1079 00c8 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1080              	.LVL91:
 1081 00cc 0146     		mov	r1, r0
 1082 00ce 0095     		str	r5, [sp]
 1083 00d0 039B     		ldr	r3, [sp, #12]
 1084 00d2 3A46     		mov	r2, r7
 1085 00d4 5A20     		movs	r0, #90
 1086 00d6 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x4
 1087              	.LVL92:
 914:FreeRTOS/queue.c ****                 }
 1088              		.loc 1 914 21 view .LVU325
 914:FreeRTOS/queue.c ****                 }
 1089              		.loc 1 914 28 is_stmt 0 view .LVU326
 1090 00da 0020     		movs	r0, #0
 1091 00dc DEE7     		b	.L55
 1092              	.L83:
 920:FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 1093              		.loc 1 920 21 is_stmt 1 view .LVU327
 1094 00de 04A8     		add	r0, sp, #16
 1095 00e0 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1096              	.LVL93:
 921:FreeRTOS/queue.c ****                 }
 1097              		.loc 1 921 21 view .LVU328
 921:FreeRTOS/queue.c ****                 }
 1098              		.loc 1 921 35 is_stmt 0 view .LVU329
 1099 00e4 0126     		movs	r6, #1
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 71


 1100 00e6 19E0     		b	.L69
 1101              	.LVL94:
 1102              	.L84:
 936:FreeRTOS/queue.c **** 
 1103              		.loc 1 936 9 is_stmt 1 discriminator 1 view .LVU330
 1104 00e8 0023     		movs	r3, #0
 1105 00ea 84F84430 		strb	r3, [r4, #68]
 1106 00ee 21E0     		b	.L70
 1107              	.L85:
 936:FreeRTOS/queue.c **** 
 1108              		.loc 1 936 9 discriminator 4 view .LVU331
 1109 00f0 0023     		movs	r3, #0
 1110 00f2 84F84530 		strb	r3, [r4, #69]
 1111 00f6 23E0     		b	.L71
 1112              	.L73:
 966:FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
 1113              		.loc 1 966 17 view .LVU332
 1114 00f8 2046     		mov	r0, r4
 1115 00fa FFF7FEFF 		bl	prvUnlockQueue
 1116              	.LVL95:
 967:FreeRTOS/queue.c ****             }
 1117              		.loc 1 967 17 view .LVU333
 967:FreeRTOS/queue.c ****             }
 1118              		.loc 1 967 26 is_stmt 0 view .LVU334
 1119 00fe FFF7FEFF 		bl	xTaskResumeAll
 1120              	.LVL96:
 1121              	.L62:
 782:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1122              		.loc 1 782 91 is_stmt 1 discriminator 8 view .LVU335
 792:FreeRTOS/queue.c ****     {
 1123              		.loc 1 792 5 discriminator 8 view .LVU336
 794:FreeRTOS/queue.c ****         {
 1124              		.loc 1 794 9 discriminator 8 view .LVU337
 1125 0102 FFF7FEFF 		bl	vPortEnterCritical
 1126              	.LVL97:
 800:FreeRTOS/queue.c ****             {
 1127              		.loc 1 800 13 discriminator 8 view .LVU338
 800:FreeRTOS/queue.c ****             {
 1128              		.loc 1 800 26 is_stmt 0 discriminator 8 view .LVU339
 1129 0106 A26B     		ldr	r2, [r4, #56]
 800:FreeRTOS/queue.c ****             {
 1130              		.loc 1 800 55 discriminator 8 view .LVU340
 1131 0108 E36B     		ldr	r3, [r4, #60]
 800:FreeRTOS/queue.c ****             {
 1132              		.loc 1 800 15 discriminator 8 view .LVU341
 1133 010a 9A42     		cmp	r2, r3
 1134 010c A7D3     		bcc	.L63
 800:FreeRTOS/queue.c ****             {
 1135              		.loc 1 800 68 discriminator 1 view .LVU342
 1136 010e 022D     		cmp	r5, #2
 1137 0110 A5D0     		beq	.L63
 905:FreeRTOS/queue.c ****                 {
 1138              		.loc 1 905 17 is_stmt 1 view .LVU343
 905:FreeRTOS/queue.c ****                 {
 1139              		.loc 1 905 34 is_stmt 0 view .LVU344
 1140 0112 039B     		ldr	r3, [sp, #12]
 905:FreeRTOS/queue.c ****                 {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 72


 1141              		.loc 1 905 19 view .LVU345
 1142 0114 002B     		cmp	r3, #0
 1143 0116 D4D0     		beq	.L82
 916:FreeRTOS/queue.c ****                 {
 1144              		.loc 1 916 22 is_stmt 1 view .LVU346
 916:FreeRTOS/queue.c ****                 {
 1145              		.loc 1 916 24 is_stmt 0 view .LVU347
 1146 0118 002E     		cmp	r6, #0
 1147 011a E0D0     		beq	.L83
 1148              	.LVL98:
 1149              	.L69:
 926:FreeRTOS/queue.c ****                 }
 1150              		.loc 1 926 45 is_stmt 1 view .LVU348
 930:FreeRTOS/queue.c **** 
 1151              		.loc 1 930 9 view .LVU349
 1152 011c FFF7FEFF 		bl	vPortExitCritical
 1153              	.LVL99:
 935:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 1154              		.loc 1 935 9 view .LVU350
 1155 0120 FFF7FEFF 		bl	vTaskSuspendAll
 1156              	.LVL100:
 936:FreeRTOS/queue.c **** 
 1157              		.loc 1 936 9 view .LVU351
 1158 0124 FFF7FEFF 		bl	vPortEnterCritical
 1159              	.LVL101:
 936:FreeRTOS/queue.c **** 
 1160              		.loc 1 936 9 view .LVU352
 1161 0128 94F84400 		ldrb	r0, [r4, #68]	@ zero_extendqisi2
 1162 012c 40B2     		sxtb	r0, r0
 1163 012e B0F1FF3F 		cmp	r0, #-1
 1164 0132 D9D0     		beq	.L84
 1165              	.L70:
 936:FreeRTOS/queue.c **** 
 1166              		.loc 1 936 9 discriminator 3 view .LVU353
 1167 0134 94F84500 		ldrb	r0, [r4, #69]	@ zero_extendqisi2
 1168 0138 40B2     		sxtb	r0, r0
 1169 013a B0F1FF3F 		cmp	r0, #-1
 1170 013e D7D0     		beq	.L85
 1171              	.L71:
 936:FreeRTOS/queue.c **** 
 1172              		.loc 1 936 9 discriminator 6 view .LVU354
 1173 0140 FFF7FEFF 		bl	vPortExitCritical
 1174              	.LVL102:
 939:FreeRTOS/queue.c ****         {
 1175              		.loc 1 939 9 discriminator 6 view .LVU355
 939:FreeRTOS/queue.c ****         {
 1176              		.loc 1 939 13 is_stmt 0 discriminator 6 view .LVU356
 1177 0144 03A9     		add	r1, sp, #12
 1178 0146 04A8     		add	r0, sp, #16
 1179 0148 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1180              	.LVL103:
 939:FreeRTOS/queue.c ****         {
 1181              		.loc 1 939 11 discriminator 6 view .LVU357
 1182 014c D8B9     		cbnz	r0, .L72
 941:FreeRTOS/queue.c ****             {
 1183              		.loc 1 941 13 is_stmt 1 view .LVU358
 941:FreeRTOS/queue.c ****             {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 73


 1184              		.loc 1 941 17 is_stmt 0 view .LVU359
 1185 014e 2046     		mov	r0, r4
 1186 0150 FFF7FEFF 		bl	prvIsQueueFull
 1187              	.LVL104:
 941:FreeRTOS/queue.c ****             {
 1188              		.loc 1 941 15 view .LVU360
 1189 0154 0028     		cmp	r0, #0
 1190 0156 CFD0     		beq	.L73
 943:FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 1191              		.loc 1 943 55 is_stmt 1 view .LVU361
 944:FreeRTOS/queue.c **** 
 1192              		.loc 1 944 17 view .LVU362
 1193 0158 0399     		ldr	r1, [sp, #12]
 1194 015a 04F11000 		add	r0, r4, #16
 1195 015e FFF7FEFF 		bl	vTaskPlaceOnEventList
 1196              	.LVL105:
 951:FreeRTOS/queue.c **** 
 1197              		.loc 1 951 17 view .LVU363
 1198 0162 2046     		mov	r0, r4
 1199 0164 FFF7FEFF 		bl	prvUnlockQueue
 1200              	.LVL106:
 958:FreeRTOS/queue.c ****                 {
 1201              		.loc 1 958 17 view .LVU364
 958:FreeRTOS/queue.c ****                 {
 1202              		.loc 1 958 21 is_stmt 0 view .LVU365
 1203 0168 FFF7FEFF 		bl	xTaskResumeAll
 1204              	.LVL107:
 958:FreeRTOS/queue.c ****                 {
 1205              		.loc 1 958 19 view .LVU366
 1206 016c 0028     		cmp	r0, #0
 1207 016e C8D1     		bne	.L62
 960:FreeRTOS/queue.c ****                 }
 1208              		.loc 1 960 21 is_stmt 1 view .LVU367
 1209 0170 4FF0E023 		mov	r3, #-536813568
 1210 0174 4FF08052 		mov	r2, #268435456
 1211 0178 C3F8042D 		str	r2, [r3, #3332]
 960:FreeRTOS/queue.c ****                 }
 1212              		.loc 1 960 21 view .LVU368
 1213              		.syntax unified
 1214              	@ 960 "FreeRTOS/queue.c" 1
 1215 017c BFF34F8F 		dsb
 1216              	@ 0 "" 2
 960:FreeRTOS/queue.c ****                 }
 1217              		.loc 1 960 21 view .LVU369
 1218              	@ 960 "FreeRTOS/queue.c" 1
 1219 0180 BFF36F8F 		isb
 1220              	@ 0 "" 2
 1221              		.thumb
 1222              		.syntax unified
 1223 0184 BDE7     		b	.L62
 1224              	.L72:
 973:FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
 1225              		.loc 1 973 13 view .LVU370
 1226 0186 2046     		mov	r0, r4
 1227 0188 FFF7FEFF 		bl	prvUnlockQueue
 1228              	.LVL108:
 974:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 74


 1229              		.loc 1 974 13 view .LVU371
 974:FreeRTOS/queue.c **** 
 1230              		.loc 1 974 22 is_stmt 0 view .LVU372
 1231 018c FFF7FEFF 		bl	xTaskResumeAll
 1232              	.LVL109:
 976:FreeRTOS/queue.c ****             return errQUEUE_FULL;
 1233              		.loc 1 976 13 is_stmt 1 view .LVU373
 1234 0190 2046     		mov	r0, r4
 1235 0192 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1236              	.LVL110:
 1237 0196 0146     		mov	r1, r0
 1238 0198 0095     		str	r5, [sp]
 1239 019a 039B     		ldr	r3, [sp, #12]
 1240 019c 3A46     		mov	r2, r7
 1241 019e 5A20     		movs	r0, #90
 1242 01a0 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x4
 1243              	.LVL111:
 977:FreeRTOS/queue.c ****         }
 1244              		.loc 1 977 13 view .LVU374
 977:FreeRTOS/queue.c ****         }
 1245              		.loc 1 977 20 is_stmt 0 view .LVU375
 1246 01a4 0020     		movs	r0, #0
 1247 01a6 79E7     		b	.L55
 1248              		.cfi_endproc
 1249              	.LFE8:
 1251              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1252              		.align	1
 1253              		.global	xQueueGenericSendFromISR
 1254              		.syntax unified
 1255              		.thumb
 1256              		.thumb_func
 1258              	xQueueGenericSendFromISR:
 1259              	.LVL112:
 1260              	.LFB9:
 987:FreeRTOS/queue.c ****     BaseType_t xReturn;
 1261              		.loc 1 987 1 is_stmt 1 view -0
 1262              		.cfi_startproc
 1263              		@ args = 0, pretend = 0, frame = 0
 1264              		@ frame_needed = 0, uses_anonymous_args = 0
 987:FreeRTOS/queue.c ****     BaseType_t xReturn;
 1265              		.loc 1 987 1 is_stmt 0 view .LVU377
 1266 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1267              	.LCFI15:
 1268              		.cfi_def_cfa_offset 32
 1269              		.cfi_offset 3, -32
 1270              		.cfi_offset 4, -28
 1271              		.cfi_offset 5, -24
 1272              		.cfi_offset 6, -20
 1273              		.cfi_offset 7, -16
 1274              		.cfi_offset 8, -12
 1275              		.cfi_offset 9, -8
 1276              		.cfi_offset 14, -4
 988:FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
 1277              		.loc 1 988 5 is_stmt 1 view .LVU378
 989:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 1278              		.loc 1 989 5 view .LVU379
 990:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 75


 1279              		.loc 1 990 5 view .LVU380
 1280              	.LVL113:
 992:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1281              		.loc 1 992 5 view .LVU381
 1282 0004 90B1     		cbz	r0, .L103
 1283 0006 0F46     		mov	r7, r1
 1284 0008 1646     		mov	r6, r2
 1285 000a 1C46     		mov	r4, r3
 1286 000c 0546     		mov	r5, r0
 992:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1287              		.loc 1 992 28 discriminator 2 view .LVU382
 993:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1288              		.loc 1 993 5 discriminator 2 view .LVU383
 1289 000e B1B1     		cbz	r1, .L104
 1290              	.LVL114:
 1291              	.L89:
 993:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1292              		.loc 1 993 100 discriminator 8 view .LVU384
 994:FreeRTOS/queue.c **** 
 1293              		.loc 1 994 5 discriminator 8 view .LVU385
 1294 0010 022C     		cmp	r4, #2
 1295 0012 20D1     		bne	.L91
 994:FreeRTOS/queue.c **** 
 1296              		.loc 1 994 5 is_stmt 0 discriminator 2 view .LVU386
 1297 0014 EB6B     		ldr	r3, [r5, #60]
 1298 0016 012B     		cmp	r3, #1
 1299 0018 1DD0     		beq	.L91
 994:FreeRTOS/queue.c **** 
 1300              		.loc 1 994 5 is_stmt 1 view .LVU387
 1301              	.LBB108:
 1302              	.LBI108:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 1303              		.loc 2 193 34 view .LVU388
 1304              	.LBB109:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1305              		.loc 2 195 9 view .LVU389
 1306              		.loc 2 197 9 view .LVU390
 1307              		.syntax unified
 1308              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1309 001a 4FF05003 			mov r3, #80												
 1310 001e 83F31188 		msr basepri, r3											
 1311 0022 BFF36F8F 		isb														
 1312 0026 BFF34F8F 		dsb														
 1313              	
 1314              	@ 0 "" 2
 1315              	.LVL115:
 1316              		.thumb
 1317              		.syntax unified
 1318              	.L92:
 1319              		.loc 2 197 9 is_stmt 0 view .LVU391
 1320              	.LBE109:
 1321              	.LBE108:
 994:FreeRTOS/queue.c **** 
 1322              		.loc 1 994 5 is_stmt 1 discriminator 3 view .LVU392
 994:FreeRTOS/queue.c **** 
 1323              		.loc 1 994 5 discriminator 3 view .LVU393
 994:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 76


 1324              		.loc 1 994 5 discriminator 3 view .LVU394
 1325 002a FEE7     		b	.L92
 1326              	.LVL116:
 1327              	.L103:
 992:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1328              		.loc 1 992 5 view .LVU395
 1329              	.LBB110:
 1330              	.LBI110:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 1331              		.loc 2 193 34 view .LVU396
 1332              	.LBB111:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1333              		.loc 2 195 9 view .LVU397
 1334              		.loc 2 197 9 view .LVU398
 1335              		.syntax unified
 1336              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1337 002c 4FF05003 			mov r3, #80												
 1338 0030 83F31188 		msr basepri, r3											
 1339 0034 BFF36F8F 		isb														
 1340 0038 BFF34F8F 		dsb														
 1341              	
 1342              	@ 0 "" 2
 1343              	.LVL117:
 1344              		.thumb
 1345              		.syntax unified
 1346              	.L88:
 1347              		.loc 2 197 9 is_stmt 0 view .LVU399
 1348              	.LBE111:
 1349              	.LBE110:
 992:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1350              		.loc 1 992 5 is_stmt 1 discriminator 1 view .LVU400
 992:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1351              		.loc 1 992 5 discriminator 1 view .LVU401
 992:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1352              		.loc 1 992 5 discriminator 1 view .LVU402
 1353 003c FEE7     		b	.L88
 1354              	.LVL118:
 1355              	.L104:
 993:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1356              		.loc 1 993 5 is_stmt 0 discriminator 2 view .LVU403
 1357 003e 036C     		ldr	r3, [r0, #64]
 1358              	.LVL119:
 993:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1359              		.loc 1 993 5 discriminator 2 view .LVU404
 1360 0040 002B     		cmp	r3, #0
 1361 0042 E5D0     		beq	.L89
 993:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1362              		.loc 1 993 5 is_stmt 1 view .LVU405
 1363              	.LBB112:
 1364              	.LBI112:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 1365              		.loc 2 193 34 view .LVU406
 1366              	.LBB113:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1367              		.loc 2 195 9 view .LVU407
 1368              		.loc 2 197 9 view .LVU408
 1369              		.syntax unified
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 77


 1370              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1371 0044 4FF05003 			mov r3, #80												
 1372 0048 83F31188 		msr basepri, r3											
 1373 004c BFF36F8F 		isb														
 1374 0050 BFF34F8F 		dsb														
 1375              	
 1376              	@ 0 "" 2
 1377              	.LVL120:
 1378              		.thumb
 1379              		.syntax unified
 1380              	.L90:
 1381              		.loc 2 197 9 is_stmt 0 view .LVU409
 1382              	.LBE113:
 1383              	.LBE112:
 993:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1384              		.loc 1 993 5 is_stmt 1 discriminator 2 view .LVU410
 993:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1385              		.loc 1 993 5 discriminator 2 view .LVU411
 993:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1386              		.loc 1 993 5 discriminator 2 view .LVU412
 1387 0054 FEE7     		b	.L90
 1388              	.L91:
 994:FreeRTOS/queue.c **** 
 1389              		.loc 1 994 91 discriminator 8 view .LVU413
1010:FreeRTOS/queue.c **** 
 1390              		.loc 1 1010 5 discriminator 8 view .LVU414
 1391 0056 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1392              	.LVL121:
1017:FreeRTOS/queue.c ****     {
 1393              		.loc 1 1017 5 discriminator 8 view .LVU415
 1394              	.LBB114:
 1395              	.LBI114:
 198:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 199:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	mov %0, %1												\n"\
 200:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	msr basepri, %0											\n"\
 201:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	isb														\n"\
 202:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	dsb														\n"\
 203:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         );
 205:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 206:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 208:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 209:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1396              		.loc 2 209 38 discriminator 8 view .LVU416
 1397              	.LBB115:
 210:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 211:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1398              		.loc 2 211 9 discriminator 8 view .LVU417
 212:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 213:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
 1399              		.loc 2 213 9 discriminator 8 view .LVU418
 1400              		.syntax unified
 1401              	@ 213 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1402 005a EFF31189 			mrs r9, basepri											
 1403 005e 4FF05003 		mov r3, #80												
 1404 0062 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 78


 1405 0066 BFF36F8F 		isb														
 1406 006a BFF34F8F 		dsb														
 1407              	
 1408              	@ 0 "" 2
 1409              	.LVL122:
 214:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 215:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	mrs %0, basepri											\n"\
 216:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	mov %1, %2												\n"\
 217:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	msr basepri, %1											\n"\
 218:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	isb														\n"\
 219:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	dsb														\n"\
 220:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 221:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         );
 222:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 223:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 224:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****          * warnings. */
 225:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         return ulOriginalBASEPRI;
 1410              		.loc 2 225 9 discriminator 8 view .LVU419
 1411              		.loc 2 225 9 is_stmt 0 discriminator 8 view .LVU420
 1412              		.thumb
 1413              		.syntax unified
 1414              	.LBE115:
 1415              	.LBE114:
1019:FreeRTOS/queue.c ****         {
 1416              		.loc 1 1019 9 is_stmt 1 discriminator 8 view .LVU421
1019:FreeRTOS/queue.c ****         {
 1417              		.loc 1 1019 22 is_stmt 0 discriminator 8 view .LVU422
 1418 006e AA6B     		ldr	r2, [r5, #56]
1019:FreeRTOS/queue.c ****         {
 1419              		.loc 1 1019 51 discriminator 8 view .LVU423
 1420 0070 EB6B     		ldr	r3, [r5, #60]
1019:FreeRTOS/queue.c ****         {
 1421              		.loc 1 1019 11 discriminator 8 view .LVU424
 1422 0072 9A42     		cmp	r2, r3
 1423 0074 01D3     		bcc	.L93
1019:FreeRTOS/queue.c ****         {
 1424              		.loc 1 1019 64 discriminator 1 view .LVU425
 1425 0076 022C     		cmp	r4, #2
 1426 0078 34D1     		bne	.L94
 1427              	.L93:
 1428              	.LBB116:
1021:FreeRTOS/queue.c ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 1429              		.loc 1 1021 13 is_stmt 1 view .LVU426
1021:FreeRTOS/queue.c ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 1430              		.loc 1 1021 26 is_stmt 0 view .LVU427
 1431 007a 95F84580 		ldrb	r8, [r5, #69]	@ zero_extendqisi2
 1432 007e 4FFA88F8 		sxtb	r8, r8
 1433              	.LVL123:
1022:FreeRTOS/queue.c **** 
 1434              		.loc 1 1022 13 is_stmt 1 view .LVU428
1022:FreeRTOS/queue.c **** 
 1435              		.loc 1 1022 31 is_stmt 0 view .LVU429
 1436 0082 AB6B     		ldr	r3, [r5, #56]
1024:FreeRTOS/queue.c **** 
 1437              		.loc 1 1024 13 is_stmt 1 view .LVU430
 1438 0084 2846     		mov	r0, r5
 1439 0086 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 79


 1440              	.LVL124:
 1441 008a 0146     		mov	r1, r0
 1442 008c 3246     		mov	r2, r6
 1443 008e 6020     		movs	r0, #96
 1444 0090 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
 1445              	.LVL125:
1031:FreeRTOS/queue.c **** 
 1446              		.loc 1 1031 13 view .LVU431
1031:FreeRTOS/queue.c **** 
 1447              		.loc 1 1031 22 is_stmt 0 view .LVU432
 1448 0094 2246     		mov	r2, r4
 1449 0096 3946     		mov	r1, r7
 1450 0098 2846     		mov	r0, r5
 1451 009a FFF7FEFF 		bl	prvCopyDataToQueue
 1452              	.LVL126:
1035:FreeRTOS/queue.c ****             {
 1453              		.loc 1 1035 13 is_stmt 1 view .LVU433
1035:FreeRTOS/queue.c ****             {
 1454              		.loc 1 1035 15 is_stmt 0 view .LVU434
 1455 009e B8F1FF3F 		cmp	r8, #-1
 1456 00a2 09D0     		beq	.L105
1131:FreeRTOS/queue.c **** 
 1457              		.loc 1 1131 17 is_stmt 1 view .LVU435
 1458 00a4 B8F17F0F 		cmp	r8, #127
 1459 00a8 13D0     		beq	.L106
1131:FreeRTOS/queue.c **** 
 1460              		.loc 1 1131 57 discriminator 2 view .LVU436
1133:FreeRTOS/queue.c ****             }
 1461              		.loc 1 1133 17 discriminator 2 view .LVU437
1133:FreeRTOS/queue.c ****             }
 1462              		.loc 1 1133 57 is_stmt 0 discriminator 2 view .LVU438
 1463 00aa 08F10103 		add	r3, r8, #1
1133:FreeRTOS/queue.c ****             }
 1464              		.loc 1 1133 36 discriminator 2 view .LVU439
 1465 00ae 5BB2     		sxtb	r3, r3
1133:FreeRTOS/queue.c ****             }
 1466              		.loc 1 1133 34 discriminator 2 view .LVU440
 1467 00b0 85F84530 		strb	r3, [r5, #69]
1136:FreeRTOS/queue.c ****         }
 1468              		.loc 1 1136 21 discriminator 2 view .LVU441
 1469 00b4 0120     		movs	r0, #1
 1470 00b6 1EE0     		b	.L96
 1471              	.L105:
1097:FreeRTOS/queue.c ****                         {
 1472              		.loc 1 1097 25 is_stmt 1 view .LVU442
1097:FreeRTOS/queue.c ****                         {
 1473              		.loc 1 1097 29 is_stmt 0 view .LVU443
 1474 00b8 6B6A     		ldr	r3, [r5, #36]
1097:FreeRTOS/queue.c ****                         {
 1475              		.loc 1 1097 27 view .LVU444
 1476 00ba 0BB9     		cbnz	r3, .L107
1136:FreeRTOS/queue.c ****         }
 1477              		.loc 1 1136 21 view .LVU445
 1478 00bc 0120     		movs	r0, #1
 1479 00be 1AE0     		b	.L96
 1480              	.L107:
1099:FreeRTOS/queue.c ****                             {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 80


 1481              		.loc 1 1099 29 is_stmt 1 view .LVU446
1099:FreeRTOS/queue.c ****                             {
 1482              		.loc 1 1099 33 is_stmt 0 view .LVU447
 1483 00c0 05F12400 		add	r0, r5, #36
 1484 00c4 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1485              	.LVL127:
1099:FreeRTOS/queue.c ****                             {
 1486              		.loc 1 1099 31 view .LVU448
 1487 00c8 C8B1     		cbz	r0, .L100
1103:FreeRTOS/queue.c ****                                 {
 1488              		.loc 1 1103 33 is_stmt 1 view .LVU449
1103:FreeRTOS/queue.c ****                                 {
 1489              		.loc 1 1103 35 is_stmt 0 view .LVU450
 1490 00ca D6B1     		cbz	r6, .L101
1105:FreeRTOS/queue.c ****                                 }
 1491              		.loc 1 1105 37 is_stmt 1 view .LVU451
1105:FreeRTOS/queue.c ****                                 }
 1492              		.loc 1 1105 64 is_stmt 0 view .LVU452
 1493 00cc 0120     		movs	r0, #1
 1494 00ce 3060     		str	r0, [r6]
 1495 00d0 11E0     		b	.L96
 1496              	.L106:
1131:FreeRTOS/queue.c **** 
 1497              		.loc 1 1131 17 is_stmt 1 view .LVU453
 1498              	.LBB117:
 1499              	.LBI117:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 1500              		.loc 2 193 34 view .LVU454
 1501              	.LBB118:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1502              		.loc 2 195 9 view .LVU455
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1503              		.loc 2 197 9 view .LVU456
 1504              		.syntax unified
 1505              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1506 00d2 4FF05003 			mov r3, #80												
 1507 00d6 83F31188 		msr basepri, r3											
 1508 00da BFF36F8F 		isb														
 1509 00de BFF34F8F 		dsb														
 1510              	
 1511              	@ 0 "" 2
 1512              	.LVL128:
 1513              		.thumb
 1514              		.syntax unified
 1515              	.L98:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1516              		.loc 2 197 9 is_stmt 0 view .LVU457
 1517              	.LBE118:
 1518              	.LBE117:
1131:FreeRTOS/queue.c **** 
 1519              		.loc 1 1131 17 is_stmt 1 discriminator 6 view .LVU458
1131:FreeRTOS/queue.c **** 
 1520              		.loc 1 1131 17 discriminator 6 view .LVU459
1131:FreeRTOS/queue.c **** 
 1521              		.loc 1 1131 17 discriminator 6 view .LVU460
 1522 00e2 FEE7     		b	.L98
 1523              	.LVL129:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 81


 1524              	.L94:
1131:FreeRTOS/queue.c **** 
 1525              		.loc 1 1131 17 is_stmt 0 discriminator 6 view .LVU461
 1526              	.LBE116:
1140:FreeRTOS/queue.c ****             xReturn = errQUEUE_FULL;
 1527              		.loc 1 1140 13 is_stmt 1 view .LVU462
 1528 00e4 2846     		mov	r0, r5
 1529 00e6 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1530              	.LVL130:
 1531 00ea 0146     		mov	r1, r0
 1532 00ec 3246     		mov	r2, r6
 1533 00ee 6020     		movs	r0, #96
 1534 00f0 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
 1535              	.LVL131:
1141:FreeRTOS/queue.c ****         }
 1536              		.loc 1 1141 13 view .LVU463
1141:FreeRTOS/queue.c ****         }
 1537              		.loc 1 1141 21 is_stmt 0 view .LVU464
 1538 00f4 0020     		movs	r0, #0
 1539              	.LVL132:
 1540              	.L96:
1144:FreeRTOS/queue.c **** 
 1541              		.loc 1 1144 5 is_stmt 1 view .LVU465
 1542              	.LBB119:
 1543              	.LBI119:
 226:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 227:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 228:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 229:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1544              		.loc 2 229 34 view .LVU466
 1545              	.LBB120:
 230:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 231:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
 1546              		.loc 2 231 9 view .LVU467
 1547              		.syntax unified
 1548              	@ 231 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1549 00f6 89F31188 			msr basepri, r9	
 1550              	@ 0 "" 2
 1551              	.LVL133:
 1552              		.loc 2 231 9 is_stmt 0 view .LVU468
 1553              		.thumb
 1554              		.syntax unified
 1555              	.LBE120:
 1556              	.LBE119:
1146:FreeRTOS/queue.c **** }
 1557              		.loc 1 1146 5 is_stmt 1 view .LVU469
1147:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1558              		.loc 1 1147 1 is_stmt 0 view .LVU470
 1559 00fa BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1560              	.LVL134:
 1561              	.L100:
 1562              	.LBB121:
1136:FreeRTOS/queue.c ****         }
 1563              		.loc 1 1136 21 view .LVU471
 1564 00fe 0120     		movs	r0, #1
 1565 0100 F9E7     		b	.L96
 1566              	.L101:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 82


 1567 0102 0120     		movs	r0, #1
 1568 0104 F7E7     		b	.L96
 1569              	.LBE121:
 1570              		.cfi_endproc
 1571              	.LFE9:
 1573              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1574              		.align	1
 1575              		.global	xQueueGiveFromISR
 1576              		.syntax unified
 1577              		.thumb
 1578              		.thumb_func
 1580              	xQueueGiveFromISR:
 1581              	.LVL135:
 1582              	.LFB10:
1152:FreeRTOS/queue.c ****     BaseType_t xReturn;
 1583              		.loc 1 1152 1 is_stmt 1 view -0
 1584              		.cfi_startproc
 1585              		@ args = 0, pretend = 0, frame = 0
 1586              		@ frame_needed = 0, uses_anonymous_args = 0
1153:FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
 1587              		.loc 1 1153 5 view .LVU473
1154:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 1588              		.loc 1 1154 5 view .LVU474
1155:FreeRTOS/queue.c **** 
 1589              		.loc 1 1155 5 view .LVU475
1163:FreeRTOS/queue.c **** 
 1590              		.loc 1 1163 5 view .LVU476
 1591 0000 70B1     		cbz	r0, .L125
1152:FreeRTOS/queue.c ****     BaseType_t xReturn;
 1592              		.loc 1 1152 1 is_stmt 0 discriminator 2 view .LVU477
 1593 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1594              	.LCFI16:
 1595              		.cfi_def_cfa_offset 24
 1596              		.cfi_offset 4, -24
 1597              		.cfi_offset 5, -20
 1598              		.cfi_offset 6, -16
 1599              		.cfi_offset 7, -12
 1600              		.cfi_offset 8, -8
 1601              		.cfi_offset 14, -4
 1602 0006 0C46     		mov	r4, r1
 1603 0008 0546     		mov	r5, r0
1163:FreeRTOS/queue.c **** 
 1604              		.loc 1 1163 28 is_stmt 1 discriminator 2 view .LVU478
1167:FreeRTOS/queue.c **** 
 1605              		.loc 1 1167 5 discriminator 2 view .LVU479
 1606 000a 036C     		ldr	r3, [r0, #64]
 1607 000c 8BB1     		cbz	r3, .L111
1167:FreeRTOS/queue.c **** 
 1608              		.loc 1 1167 5 view .LVU480
 1609              	.LBB122:
 1610              	.LBI122:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 1611              		.loc 2 193 34 view .LVU481
 1612              	.LBB123:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1613              		.loc 2 195 9 view .LVU482
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 83


 1614              		.loc 2 197 9 view .LVU483
 1615              		.syntax unified
 1616              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1617 000e 4FF05003 			mov r3, #80												
 1618 0012 83F31188 		msr basepri, r3											
 1619 0016 BFF36F8F 		isb														
 1620 001a BFF34F8F 		dsb														
 1621              	
 1622              	@ 0 "" 2
 1623              	.LVL136:
 1624              		.thumb
 1625              		.syntax unified
 1626              	.L112:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1627              		.loc 2 197 9 is_stmt 0 view .LVU484
 1628              	.LBE123:
 1629              	.LBE122:
1167:FreeRTOS/queue.c **** 
 1630              		.loc 1 1167 5 is_stmt 1 discriminator 2 view .LVU485
1167:FreeRTOS/queue.c **** 
 1631              		.loc 1 1167 5 discriminator 2 view .LVU486
1167:FreeRTOS/queue.c **** 
 1632              		.loc 1 1167 5 discriminator 2 view .LVU487
 1633 001e FEE7     		b	.L112
 1634              	.L125:
 1635              	.LCFI17:
 1636              		.cfi_def_cfa_offset 0
 1637              		.cfi_restore 4
 1638              		.cfi_restore 5
 1639              		.cfi_restore 6
 1640              		.cfi_restore 7
 1641              		.cfi_restore 8
 1642              		.cfi_restore 14
1163:FreeRTOS/queue.c **** 
 1643              		.loc 1 1163 5 view .LVU488
 1644              	.LBB124:
 1645              	.LBI124:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 1646              		.loc 2 193 34 view .LVU489
 1647              	.LBB125:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1648              		.loc 2 195 9 view .LVU490
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1649              		.loc 2 197 9 view .LVU491
 1650              		.syntax unified
 1651              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1652 0020 4FF05003 			mov r3, #80												
 1653 0024 83F31188 		msr basepri, r3											
 1654 0028 BFF36F8F 		isb														
 1655 002c BFF34F8F 		dsb														
 1656              	
 1657              	@ 0 "" 2
 1658              	.LVL137:
 1659              		.thumb
 1660              		.syntax unified
 1661              	.L110:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 84


 1662              		.loc 2 197 9 is_stmt 0 view .LVU492
 1663              	.LBE125:
 1664              	.LBE124:
1163:FreeRTOS/queue.c **** 
 1665              		.loc 1 1163 5 is_stmt 1 discriminator 1 view .LVU493
1163:FreeRTOS/queue.c **** 
 1666              		.loc 1 1163 5 discriminator 1 view .LVU494
1163:FreeRTOS/queue.c **** 
 1667              		.loc 1 1163 5 discriminator 1 view .LVU495
 1668 0030 FEE7     		b	.L110
 1669              	.L111:
 1670              	.LCFI18:
 1671              		.cfi_def_cfa_offset 24
 1672              		.cfi_offset 4, -24
 1673              		.cfi_offset 5, -20
 1674              		.cfi_offset 6, -16
 1675              		.cfi_offset 7, -12
 1676              		.cfi_offset 8, -8
 1677              		.cfi_offset 14, -4
1167:FreeRTOS/queue.c **** 
 1678              		.loc 1 1167 45 discriminator 2 view .LVU496
1172:FreeRTOS/queue.c **** 
 1679              		.loc 1 1172 5 discriminator 2 view .LVU497
 1680 0032 0368     		ldr	r3, [r0]
 1681 0034 3BB3     		cbz	r3, .L126
 1682              	.L113:
1172:FreeRTOS/queue.c **** 
 1683              		.loc 1 1172 123 discriminator 8 view .LVU498
1188:FreeRTOS/queue.c **** 
 1684              		.loc 1 1188 5 discriminator 8 view .LVU499
 1685 0036 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1686              	.LVL138:
1190:FreeRTOS/queue.c ****     {
 1687              		.loc 1 1190 5 discriminator 8 view .LVU500
 1688              	.LBB126:
 1689              	.LBI126:
 209:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 1690              		.loc 2 209 38 discriminator 8 view .LVU501
 1691              	.LBB127:
 211:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1692              		.loc 2 211 9 discriminator 8 view .LVU502
 213:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1693              		.loc 2 213 9 discriminator 8 view .LVU503
 1694              		.syntax unified
 1695              	@ 213 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1696 003a EFF31188 			mrs r8, basepri											
 1697 003e 4FF05003 		mov r3, #80												
 1698 0042 83F31188 		msr basepri, r3											
 1699 0046 BFF36F8F 		isb														
 1700 004a BFF34F8F 		dsb														
 1701              	
 1702              	@ 0 "" 2
 1703              	.LVL139:
 225:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 1704              		.loc 2 225 9 discriminator 8 view .LVU504
 225:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 1705              		.loc 2 225 9 is_stmt 0 discriminator 8 view .LVU505
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 85


 1706              		.thumb
 1707              		.syntax unified
 1708              	.LBE127:
 1709              	.LBE126:
 1710              	.LBB128:
1192:FreeRTOS/queue.c **** 
 1711              		.loc 1 1192 9 is_stmt 1 discriminator 8 view .LVU506
1192:FreeRTOS/queue.c **** 
 1712              		.loc 1 1192 27 is_stmt 0 discriminator 8 view .LVU507
 1713 004e AE6B     		ldr	r6, [r5, #56]
 1714              	.LVL140:
1197:FreeRTOS/queue.c ****         {
 1715              		.loc 1 1197 9 is_stmt 1 discriminator 8 view .LVU508
1197:FreeRTOS/queue.c ****         {
 1716              		.loc 1 1197 40 is_stmt 0 discriminator 8 view .LVU509
 1717 0050 EB6B     		ldr	r3, [r5, #60]
1197:FreeRTOS/queue.c ****         {
 1718              		.loc 1 1197 11 discriminator 8 view .LVU510
 1719 0052 B342     		cmp	r3, r6
 1720 0054 39D9     		bls	.L115
 1721              	.LBB129:
1199:FreeRTOS/queue.c **** 
 1722              		.loc 1 1199 13 is_stmt 1 view .LVU511
1199:FreeRTOS/queue.c **** 
 1723              		.loc 1 1199 26 is_stmt 0 view .LVU512
 1724 0056 95F84570 		ldrb	r7, [r5, #69]	@ zero_extendqisi2
 1725 005a 7FB2     		sxtb	r7, r7
 1726              	.LVL141:
1201:FreeRTOS/queue.c **** 
 1727              		.loc 1 1201 13 is_stmt 1 view .LVU513
 1728 005c 2846     		mov	r0, r5
 1729 005e FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1730              	.LVL142:
 1731 0062 0146     		mov	r1, r0
 1732 0064 2246     		mov	r2, r4
 1733 0066 6020     		movs	r0, #96
 1734 0068 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
 1735              	.LVL143:
1209:FreeRTOS/queue.c **** 
 1736              		.loc 1 1209 13 view .LVU514
1209:FreeRTOS/queue.c **** 
 1737              		.loc 1 1209 60 is_stmt 0 view .LVU515
 1738 006c 0136     		adds	r6, r6, #1
 1739              	.LVL144:
1209:FreeRTOS/queue.c **** 
 1740              		.loc 1 1209 40 view .LVU516
 1741 006e AE63     		str	r6, [r5, #56]
1213:FreeRTOS/queue.c ****             {
 1742              		.loc 1 1213 13 is_stmt 1 view .LVU517
1213:FreeRTOS/queue.c ****             {
 1743              		.loc 1 1213 15 is_stmt 0 view .LVU518
 1744 0070 B7F1FF3F 		cmp	r7, #-1
 1745 0074 13D0     		beq	.L127
1299:FreeRTOS/queue.c **** 
 1746              		.loc 1 1299 17 is_stmt 1 view .LVU519
 1747 0076 7F2F     		cmp	r7, #127
 1748 0078 1ED0     		beq	.L128
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 86


1299:FreeRTOS/queue.c **** 
 1749              		.loc 1 1299 57 discriminator 2 view .LVU520
1301:FreeRTOS/queue.c ****             }
 1750              		.loc 1 1301 17 discriminator 2 view .LVU521
1301:FreeRTOS/queue.c ****             }
 1751              		.loc 1 1301 57 is_stmt 0 discriminator 2 view .LVU522
 1752 007a 7B1C     		adds	r3, r7, #1
1301:FreeRTOS/queue.c ****             }
 1753              		.loc 1 1301 36 discriminator 2 view .LVU523
 1754 007c 5BB2     		sxtb	r3, r3
1301:FreeRTOS/queue.c ****             }
 1755              		.loc 1 1301 34 discriminator 2 view .LVU524
 1756 007e 85F84530 		strb	r3, [r5, #69]
1304:FreeRTOS/queue.c ****         }
 1757              		.loc 1 1304 21 discriminator 2 view .LVU525
 1758 0082 0120     		movs	r0, #1
 1759 0084 2AE0     		b	.L117
 1760              	.LVL145:
 1761              	.L126:
1304:FreeRTOS/queue.c ****         }
 1762              		.loc 1 1304 21 discriminator 2 view .LVU526
 1763              	.LBE129:
 1764              	.LBE128:
1172:FreeRTOS/queue.c **** 
 1765              		.loc 1 1172 5 discriminator 2 view .LVU527
 1766 0086 8368     		ldr	r3, [r0, #8]
 1767 0088 002B     		cmp	r3, #0
 1768 008a D4D0     		beq	.L113
1172:FreeRTOS/queue.c **** 
 1769              		.loc 1 1172 5 is_stmt 1 view .LVU528
 1770              	.LBB134:
 1771              	.LBI134:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 1772              		.loc 2 193 34 view .LVU529
 1773              	.LBB135:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1774              		.loc 2 195 9 view .LVU530
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1775              		.loc 2 197 9 view .LVU531
 1776              		.syntax unified
 1777              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1778 008c 4FF05003 			mov r3, #80												
 1779 0090 83F31188 		msr basepri, r3											
 1780 0094 BFF36F8F 		isb														
 1781 0098 BFF34F8F 		dsb														
 1782              	
 1783              	@ 0 "" 2
 1784              	.LVL146:
 1785              		.thumb
 1786              		.syntax unified
 1787              	.L114:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1788              		.loc 2 197 9 is_stmt 0 view .LVU532
 1789              	.LBE135:
 1790              	.LBE134:
1172:FreeRTOS/queue.c **** 
 1791              		.loc 1 1172 5 is_stmt 1 discriminator 3 view .LVU533
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 87


1172:FreeRTOS/queue.c **** 
 1792              		.loc 1 1172 5 discriminator 3 view .LVU534
1172:FreeRTOS/queue.c **** 
 1793              		.loc 1 1172 5 discriminator 3 view .LVU535
 1794 009c FEE7     		b	.L114
 1795              	.LVL147:
 1796              	.L127:
 1797              	.LBB136:
 1798              	.LBB132:
1268:FreeRTOS/queue.c ****                         {
 1799              		.loc 1 1268 25 view .LVU536
1268:FreeRTOS/queue.c ****                         {
 1800              		.loc 1 1268 29 is_stmt 0 view .LVU537
 1801 009e 6B6A     		ldr	r3, [r5, #36]
1268:FreeRTOS/queue.c ****                         {
 1802              		.loc 1 1268 27 view .LVU538
 1803 00a0 0BB9     		cbnz	r3, .L129
1304:FreeRTOS/queue.c ****         }
 1804              		.loc 1 1304 21 view .LVU539
 1805 00a2 0120     		movs	r0, #1
 1806 00a4 1AE0     		b	.L117
 1807              	.L129:
1270:FreeRTOS/queue.c ****                             {
 1808              		.loc 1 1270 29 is_stmt 1 view .LVU540
1270:FreeRTOS/queue.c ****                             {
 1809              		.loc 1 1270 33 is_stmt 0 view .LVU541
 1810 00a6 05F12400 		add	r0, r5, #36
 1811 00aa FFF7FEFF 		bl	xTaskRemoveFromEventList
 1812              	.LVL148:
1270:FreeRTOS/queue.c ****                             {
 1813              		.loc 1 1270 31 view .LVU542
 1814 00ae C8B1     		cbz	r0, .L121
1274:FreeRTOS/queue.c ****                                 {
 1815              		.loc 1 1274 33 is_stmt 1 view .LVU543
1274:FreeRTOS/queue.c ****                                 {
 1816              		.loc 1 1274 35 is_stmt 0 view .LVU544
 1817 00b0 D4B1     		cbz	r4, .L122
1276:FreeRTOS/queue.c ****                                 }
 1818              		.loc 1 1276 37 is_stmt 1 view .LVU545
1276:FreeRTOS/queue.c ****                                 }
 1819              		.loc 1 1276 64 is_stmt 0 view .LVU546
 1820 00b2 0120     		movs	r0, #1
 1821 00b4 2060     		str	r0, [r4]
 1822 00b6 11E0     		b	.L117
 1823              	.L128:
1299:FreeRTOS/queue.c **** 
 1824              		.loc 1 1299 17 is_stmt 1 view .LVU547
 1825              	.LBB130:
 1826              	.LBI130:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 1827              		.loc 2 193 34 view .LVU548
 1828              	.LBB131:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1829              		.loc 2 195 9 view .LVU549
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1830              		.loc 2 197 9 view .LVU550
 1831              		.syntax unified
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 88


 1832              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1833 00b8 4FF05003 			mov r3, #80												
 1834 00bc 83F31188 		msr basepri, r3											
 1835 00c0 BFF36F8F 		isb														
 1836 00c4 BFF34F8F 		dsb														
 1837              	
 1838              	@ 0 "" 2
 1839              	.LVL149:
 1840              		.thumb
 1841              		.syntax unified
 1842              	.L119:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1843              		.loc 2 197 9 is_stmt 0 view .LVU551
 1844              	.LBE131:
 1845              	.LBE130:
1299:FreeRTOS/queue.c **** 
 1846              		.loc 1 1299 17 is_stmt 1 discriminator 6 view .LVU552
1299:FreeRTOS/queue.c **** 
 1847              		.loc 1 1299 17 discriminator 6 view .LVU553
1299:FreeRTOS/queue.c **** 
 1848              		.loc 1 1299 17 discriminator 6 view .LVU554
 1849 00c8 FEE7     		b	.L119
 1850              	.LVL150:
 1851              	.L115:
1299:FreeRTOS/queue.c **** 
 1852              		.loc 1 1299 17 is_stmt 0 discriminator 6 view .LVU555
 1853              	.LBE132:
1308:FreeRTOS/queue.c ****             xReturn = errQUEUE_FULL;
 1854              		.loc 1 1308 13 is_stmt 1 view .LVU556
 1855 00ca 2846     		mov	r0, r5
 1856 00cc FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1857              	.LVL151:
 1858 00d0 0146     		mov	r1, r0
 1859 00d2 2246     		mov	r2, r4
 1860 00d4 6020     		movs	r0, #96
 1861 00d6 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
 1862              	.LVL152:
1309:FreeRTOS/queue.c ****         }
 1863              		.loc 1 1309 13 view .LVU557
1309:FreeRTOS/queue.c ****         }
 1864              		.loc 1 1309 21 is_stmt 0 view .LVU558
 1865 00da 0020     		movs	r0, #0
 1866              	.LVL153:
 1867              	.L117:
1309:FreeRTOS/queue.c ****         }
 1868              		.loc 1 1309 21 view .LVU559
 1869              	.LBE136:
1312:FreeRTOS/queue.c **** 
 1870              		.loc 1 1312 5 is_stmt 1 view .LVU560
 1871              	.LBB137:
 1872              	.LBI137:
 229:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 1873              		.loc 2 229 34 view .LVU561
 1874              	.LBB138:
 1875              		.loc 2 231 9 view .LVU562
 1876              		.syntax unified
 1877              	@ 231 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 89


 1878 00dc 88F31188 			msr basepri, r8	
 1879              	@ 0 "" 2
 1880              	.LVL154:
 1881              		.loc 2 231 9 is_stmt 0 view .LVU563
 1882              		.thumb
 1883              		.syntax unified
 1884              	.LBE138:
 1885              	.LBE137:
1314:FreeRTOS/queue.c **** }
 1886              		.loc 1 1314 5 is_stmt 1 view .LVU564
1315:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1887              		.loc 1 1315 1 is_stmt 0 view .LVU565
 1888 00e0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1889              	.LVL155:
 1890              	.L121:
 1891              	.LBB139:
 1892              	.LBB133:
1304:FreeRTOS/queue.c ****         }
 1893              		.loc 1 1304 21 view .LVU566
 1894 00e4 0120     		movs	r0, #1
 1895 00e6 F9E7     		b	.L117
 1896              	.L122:
 1897 00e8 0120     		movs	r0, #1
 1898 00ea F7E7     		b	.L117
 1899              	.LBE133:
 1900              	.LBE139:
 1901              		.cfi_endproc
 1902              	.LFE10:
 1904              		.section	.text.xQueueReceive,"ax",%progbits
 1905              		.align	1
 1906              		.global	xQueueReceive
 1907              		.syntax unified
 1908              		.thumb
 1909              		.thumb_func
 1911              	xQueueReceive:
 1912              	.LVL156:
 1913              	.LFB11:
1321:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 1914              		.loc 1 1321 1 is_stmt 1 view -0
 1915              		.cfi_startproc
 1916              		@ args = 0, pretend = 0, frame = 16
 1917              		@ frame_needed = 0, uses_anonymous_args = 0
1321:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 1918              		.loc 1 1321 1 is_stmt 0 view .LVU568
 1919 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1920              	.LCFI19:
 1921              		.cfi_def_cfa_offset 20
 1922              		.cfi_offset 4, -20
 1923              		.cfi_offset 5, -16
 1924              		.cfi_offset 6, -12
 1925              		.cfi_offset 7, -8
 1926              		.cfi_offset 14, -4
 1927 0002 87B0     		sub	sp, sp, #28
 1928              	.LCFI20:
 1929              		.cfi_def_cfa_offset 48
 1930 0004 0392     		str	r2, [sp, #12]
1322:FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 90


 1931              		.loc 1 1322 5 is_stmt 1 view .LVU569
 1932              	.LVL157:
1323:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 1933              		.loc 1 1323 5 view .LVU570
1324:FreeRTOS/queue.c **** 
 1934              		.loc 1 1324 5 view .LVU571
1327:FreeRTOS/queue.c **** 
 1935              		.loc 1 1327 5 view .LVU572
 1936 0006 20B1     		cbz	r0, .L149
 1937 0008 0F46     		mov	r7, r1
 1938 000a 0446     		mov	r4, r0
1327:FreeRTOS/queue.c **** 
 1939              		.loc 1 1327 32 discriminator 2 view .LVU573
1331:FreeRTOS/queue.c **** 
 1940              		.loc 1 1331 5 discriminator 2 view .LVU574
 1941 000c 51B1     		cbz	r1, .L150
 1942 000e 0026     		movs	r6, #0
 1943 0010 72E0     		b	.L135
 1944              	.L149:
1327:FreeRTOS/queue.c **** 
 1945              		.loc 1 1327 5 view .LVU575
 1946              	.LBB140:
 1947              	.LBI140:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 1948              		.loc 2 193 34 view .LVU576
 1949              	.LBB141:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1950              		.loc 2 195 9 view .LVU577
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1951              		.loc 2 197 9 view .LVU578
 1952              		.syntax unified
 1953              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1954 0012 4FF05003 			mov r3, #80												
 1955 0016 83F31188 		msr basepri, r3											
 1956 001a BFF36F8F 		isb														
 1957 001e BFF34F8F 		dsb														
 1958              	
 1959              	@ 0 "" 2
 1960              	.LVL158:
 1961              		.thumb
 1962              		.syntax unified
 1963              	.L132:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1964              		.loc 2 197 9 is_stmt 0 view .LVU579
 1965              	.LBE141:
 1966              	.LBE140:
1327:FreeRTOS/queue.c **** 
 1967              		.loc 1 1327 5 is_stmt 1 discriminator 1 view .LVU580
1327:FreeRTOS/queue.c **** 
 1968              		.loc 1 1327 5 discriminator 1 view .LVU581
1327:FreeRTOS/queue.c **** 
 1969              		.loc 1 1327 5 discriminator 1 view .LVU582
 1970 0022 FEE7     		b	.L132
 1971              	.L150:
1331:FreeRTOS/queue.c **** 
 1972              		.loc 1 1331 5 is_stmt 0 discriminator 2 view .LVU583
 1973 0024 036C     		ldr	r3, [r0, #64]
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 91


 1974 0026 43B1     		cbz	r3, .L147
1331:FreeRTOS/queue.c **** 
 1975              		.loc 1 1331 5 is_stmt 1 view .LVU584
 1976              	.LBB142:
 1977              	.LBI142:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 1978              		.loc 2 193 34 view .LVU585
 1979              	.LBB143:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1980              		.loc 2 195 9 view .LVU586
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1981              		.loc 2 197 9 view .LVU587
 1982              		.syntax unified
 1983              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1984 0028 4FF05003 			mov r3, #80												
 1985 002c 83F31188 		msr basepri, r3											
 1986 0030 BFF36F8F 		isb														
 1987 0034 BFF34F8F 		dsb														
 1988              	
 1989              	@ 0 "" 2
 1990              	.LVL159:
 1991              		.thumb
 1992              		.syntax unified
 1993              	.L134:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1994              		.loc 2 197 9 is_stmt 0 view .LVU588
 1995              	.LBE143:
 1996              	.LBE142:
1331:FreeRTOS/queue.c **** 
 1997              		.loc 1 1331 5 is_stmt 1 discriminator 2 view .LVU589
1331:FreeRTOS/queue.c **** 
 1998              		.loc 1 1331 5 discriminator 2 view .LVU590
1331:FreeRTOS/queue.c **** 
 1999              		.loc 1 1331 5 discriminator 2 view .LVU591
 2000 0038 FEE7     		b	.L134
 2001              	.L147:
 2002 003a 0026     		movs	r6, #0
 2003 003c 5CE0     		b	.L135
 2004              	.LVL160:
 2005              	.L153:
 2006              	.LBB144:
1354:FreeRTOS/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
 2007              		.loc 1 1354 17 view .LVU592
 2008 003e 3946     		mov	r1, r7
 2009 0040 2046     		mov	r0, r4
 2010 0042 FFF7FEFF 		bl	prvCopyDataFromQueue
 2011              	.LVL161:
1355:FreeRTOS/queue.c ****                 pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2012              		.loc 1 1355 17 view .LVU593
 2013 0046 2046     		mov	r0, r4
 2014 0048 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2015              	.LVL162:
 2016 004c 0646     		mov	r6, r0
 2017              	.LVL163:
1355:FreeRTOS/queue.c ****                 pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2018              		.loc 1 1355 17 is_stmt 0 view .LVU594
 2019 004e 0020     		movs	r0, #0
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 92


 2020 0050 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2021              	.LVL164:
 2022 0054 0246     		mov	r2, r0
 2023 0056 0123     		movs	r3, #1
 2024 0058 0093     		str	r3, [sp]
 2025 005a 039B     		ldr	r3, [sp, #12]
 2026 005c 3146     		mov	r1, r6
 2027 005e 5C20     		movs	r0, #92
 2028 0060 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x4
 2029              	.LVL165:
1356:FreeRTOS/queue.c **** 
 2030              		.loc 1 1356 17 is_stmt 1 view .LVU595
1356:FreeRTOS/queue.c **** 
 2031              		.loc 1 1356 64 is_stmt 0 view .LVU596
 2032 0064 013D     		subs	r5, r5, #1
 2033              	.LVL166:
1356:FreeRTOS/queue.c **** 
 2034              		.loc 1 1356 44 view .LVU597
 2035 0066 A563     		str	r5, [r4, #56]
1361:FreeRTOS/queue.c ****                 {
 2036              		.loc 1 1361 17 is_stmt 1 view .LVU598
1361:FreeRTOS/queue.c ****                 {
 2037              		.loc 1 1361 21 is_stmt 0 view .LVU599
 2038 0068 2369     		ldr	r3, [r4, #16]
1361:FreeRTOS/queue.c ****                 {
 2039              		.loc 1 1361 19 view .LVU600
 2040 006a 23B9     		cbnz	r3, .L151
 2041              	.L137:
1374:FreeRTOS/queue.c ****                 }
 2042              		.loc 1 1374 45 is_stmt 1 view .LVU601
1377:FreeRTOS/queue.c ****                 return pdPASS;
 2043              		.loc 1 1377 17 view .LVU602
 2044 006c FFF7FEFF 		bl	vPortExitCritical
 2045              	.LVL167:
1378:FreeRTOS/queue.c ****             }
 2046              		.loc 1 1378 17 view .LVU603
1378:FreeRTOS/queue.c ****             }
 2047              		.loc 1 1378 24 is_stmt 0 view .LVU604
 2048 0070 0120     		movs	r0, #1
 2049              	.LVL168:
 2050              	.L130:
1378:FreeRTOS/queue.c ****             }
 2051              		.loc 1 1378 24 view .LVU605
 2052              	.LBE144:
1458:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2053              		.loc 1 1458 1 view .LVU606
 2054 0072 07B0     		add	sp, sp, #28
 2055              	.LCFI21:
 2056              		.cfi_remember_state
 2057              		.cfi_def_cfa_offset 20
 2058              		@ sp needed
 2059 0074 F0BD     		pop	{r4, r5, r6, r7, pc}
 2060              	.LVL169:
 2061              	.L151:
 2062              	.LCFI22:
 2063              		.cfi_restore_state
 2064              	.LBB145:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 93


1363:FreeRTOS/queue.c ****                     {
 2065              		.loc 1 1363 21 is_stmt 1 view .LVU607
1363:FreeRTOS/queue.c ****                     {
 2066              		.loc 1 1363 25 is_stmt 0 view .LVU608
 2067 0076 04F11000 		add	r0, r4, #16
 2068 007a FFF7FEFF 		bl	xTaskRemoveFromEventList
 2069              	.LVL170:
1363:FreeRTOS/queue.c ****                     {
 2070              		.loc 1 1363 23 view .LVU609
 2071 007e 0028     		cmp	r0, #0
 2072 0080 F4D0     		beq	.L137
1365:FreeRTOS/queue.c ****                     }
 2073              		.loc 1 1365 25 is_stmt 1 view .LVU610
 2074 0082 4FF0E023 		mov	r3, #-536813568
 2075 0086 4FF08052 		mov	r2, #268435456
 2076 008a C3F8042D 		str	r2, [r3, #3332]
1365:FreeRTOS/queue.c ****                     }
 2077              		.loc 1 1365 25 view .LVU611
 2078              		.syntax unified
 2079              	@ 1365 "FreeRTOS/queue.c" 1
 2080 008e BFF34F8F 		dsb
 2081              	@ 0 "" 2
1365:FreeRTOS/queue.c ****                     }
 2082              		.loc 1 1365 25 view .LVU612
 2083              	@ 1365 "FreeRTOS/queue.c" 1
 2084 0092 BFF36F8F 		isb
 2085              	@ 0 "" 2
1365:FreeRTOS/queue.c ****                     }
 2086              		.loc 1 1365 57 view .LVU613
 2087              		.thumb
 2088              		.syntax unified
 2089 0096 E9E7     		b	.L137
 2090              	.LVL171:
 2091              	.L154:
1386:FreeRTOS/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
 2092              		.loc 1 1386 21 view .LVU614
 2093 0098 FFF7FEFF 		bl	vPortExitCritical
 2094              	.LVL172:
1387:FreeRTOS/queue.c ****                     return errQUEUE_EMPTY;
 2095              		.loc 1 1387 21 view .LVU615
 2096 009c 2046     		mov	r0, r4
 2097 009e FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2098              	.LVL173:
 2099 00a2 0446     		mov	r4, r0
 2100              	.LVL174:
1387:FreeRTOS/queue.c ****                     return errQUEUE_EMPTY;
 2101              		.loc 1 1387 21 is_stmt 0 view .LVU616
 2102 00a4 0020     		movs	r0, #0
 2103 00a6 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2104              	.LVL175:
 2105 00aa 0246     		mov	r2, r0
 2106 00ac 0123     		movs	r3, #1
 2107 00ae 0093     		str	r3, [sp]
 2108 00b0 039B     		ldr	r3, [sp, #12]
 2109 00b2 2146     		mov	r1, r4
 2110 00b4 5C20     		movs	r0, #92
 2111 00b6 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x4
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 94


 2112              	.LVL176:
1388:FreeRTOS/queue.c ****                 }
 2113              		.loc 1 1388 21 is_stmt 1 view .LVU617
1388:FreeRTOS/queue.c ****                 }
 2114              		.loc 1 1388 28 is_stmt 0 view .LVU618
 2115 00ba 0020     		movs	r0, #0
 2116 00bc D9E7     		b	.L130
 2117              	.LVL177:
 2118              	.L155:
1394:FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 2119              		.loc 1 1394 21 is_stmt 1 view .LVU619
 2120 00be 04A8     		add	r0, sp, #16
 2121 00c0 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2122              	.LVL178:
1395:FreeRTOS/queue.c ****                 }
 2123              		.loc 1 1395 21 view .LVU620
1395:FreeRTOS/queue.c ****                 }
 2124              		.loc 1 1395 35 is_stmt 0 view .LVU621
 2125 00c4 0126     		movs	r6, #1
 2126 00c6 21E0     		b	.L140
 2127              	.LVL179:
 2128              	.L156:
1395:FreeRTOS/queue.c ****                 }
 2129              		.loc 1 1395 35 view .LVU622
 2130              	.LBE145:
1410:FreeRTOS/queue.c **** 
 2131              		.loc 1 1410 9 is_stmt 1 discriminator 1 view .LVU623
 2132 00c8 0023     		movs	r3, #0
 2133 00ca 84F84430 		strb	r3, [r4, #68]
 2134 00ce 29E0     		b	.L141
 2135              	.L157:
1410:FreeRTOS/queue.c **** 
 2136              		.loc 1 1410 9 discriminator 4 view .LVU624
 2137 00d0 0023     		movs	r3, #0
 2138 00d2 84F84530 		strb	r3, [r4, #69]
 2139 00d6 2BE0     		b	.L142
 2140              	.L144:
1436:FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
 2141              		.loc 1 1436 17 view .LVU625
 2142 00d8 2046     		mov	r0, r4
 2143 00da FFF7FEFF 		bl	prvUnlockQueue
 2144              	.LVL180:
1437:FreeRTOS/queue.c ****             }
 2145              		.loc 1 1437 17 view .LVU626
1437:FreeRTOS/queue.c ****             }
 2146              		.loc 1 1437 26 is_stmt 0 view .LVU627
 2147 00de FFF7FEFF 		bl	xTaskResumeAll
 2148              	.LVL181:
 2149 00e2 09E0     		b	.L135
 2150              	.L143:
1444:FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
 2151              		.loc 1 1444 13 is_stmt 1 view .LVU628
 2152 00e4 2046     		mov	r0, r4
 2153 00e6 FFF7FEFF 		bl	prvUnlockQueue
 2154              	.LVL182:
1445:FreeRTOS/queue.c **** 
 2155              		.loc 1 1445 13 view .LVU629
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 95


1445:FreeRTOS/queue.c **** 
 2156              		.loc 1 1445 22 is_stmt 0 view .LVU630
 2157 00ea FFF7FEFF 		bl	xTaskResumeAll
 2158              	.LVL183:
1447:FreeRTOS/queue.c ****             {
 2159              		.loc 1 1447 13 is_stmt 1 view .LVU631
1447:FreeRTOS/queue.c ****             {
 2160              		.loc 1 1447 17 is_stmt 0 view .LVU632
 2161 00ee 2046     		mov	r0, r4
 2162 00f0 FFF7FEFF 		bl	prvIsQueueEmpty
 2163              	.LVL184:
1447:FreeRTOS/queue.c ****             {
 2164              		.loc 1 1447 15 view .LVU633
 2165 00f4 0028     		cmp	r0, #0
 2166 00f6 3FD1     		bne	.L152
 2167              	.LVL185:
 2168              	.L135:
1331:FreeRTOS/queue.c **** 
 2169              		.loc 1 1331 103 is_stmt 1 discriminator 8 view .LVU634
1343:FreeRTOS/queue.c ****     {
 2170              		.loc 1 1343 5 discriminator 8 view .LVU635
1345:FreeRTOS/queue.c ****         {
 2171              		.loc 1 1345 9 discriminator 8 view .LVU636
 2172 00f8 FFF7FEFF 		bl	vPortEnterCritical
 2173              	.LVL186:
 2174              	.LBB146:
1347:FreeRTOS/queue.c **** 
 2175              		.loc 1 1347 13 discriminator 8 view .LVU637
1347:FreeRTOS/queue.c **** 
 2176              		.loc 1 1347 31 is_stmt 0 discriminator 8 view .LVU638
 2177 00fc A56B     		ldr	r5, [r4, #56]
 2178              	.LVL187:
1351:FreeRTOS/queue.c ****             {
 2179              		.loc 1 1351 13 is_stmt 1 discriminator 8 view .LVU639
1351:FreeRTOS/queue.c ****             {
 2180              		.loc 1 1351 15 is_stmt 0 discriminator 8 view .LVU640
 2181 00fe 002D     		cmp	r5, #0
 2182 0100 9DD1     		bne	.L153
1382:FreeRTOS/queue.c ****                 {
 2183              		.loc 1 1382 17 is_stmt 1 view .LVU641
1382:FreeRTOS/queue.c ****                 {
 2184              		.loc 1 1382 34 is_stmt 0 view .LVU642
 2185 0102 039B     		ldr	r3, [sp, #12]
1382:FreeRTOS/queue.c ****                 {
 2186              		.loc 1 1382 19 view .LVU643
 2187 0104 002B     		cmp	r3, #0
 2188 0106 C7D0     		beq	.L154
1390:FreeRTOS/queue.c ****                 {
 2189              		.loc 1 1390 22 is_stmt 1 view .LVU644
1390:FreeRTOS/queue.c ****                 {
 2190              		.loc 1 1390 24 is_stmt 0 view .LVU645
 2191 0108 002E     		cmp	r6, #0
 2192 010a D8D0     		beq	.L155
 2193              	.LVL188:
 2194              	.L140:
1400:FreeRTOS/queue.c ****                 }
 2195              		.loc 1 1400 45 is_stmt 1 view .LVU646
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 96


 2196              	.LBE146:
1404:FreeRTOS/queue.c **** 
 2197              		.loc 1 1404 9 view .LVU647
 2198 010c FFF7FEFF 		bl	vPortExitCritical
 2199              	.LVL189:
1409:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 2200              		.loc 1 1409 9 view .LVU648
 2201 0110 FFF7FEFF 		bl	vTaskSuspendAll
 2202              	.LVL190:
1410:FreeRTOS/queue.c **** 
 2203              		.loc 1 1410 9 view .LVU649
 2204 0114 FFF7FEFF 		bl	vPortEnterCritical
 2205              	.LVL191:
1410:FreeRTOS/queue.c **** 
 2206              		.loc 1 1410 9 view .LVU650
 2207 0118 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2208 011c 5BB2     		sxtb	r3, r3
 2209 011e B3F1FF3F 		cmp	r3, #-1
 2210 0122 D1D0     		beq	.L156
 2211              	.L141:
1410:FreeRTOS/queue.c **** 
 2212              		.loc 1 1410 9 discriminator 3 view .LVU651
 2213 0124 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2214 0128 5BB2     		sxtb	r3, r3
 2215 012a B3F1FF3F 		cmp	r3, #-1
 2216 012e CFD0     		beq	.L157
 2217              	.L142:
1410:FreeRTOS/queue.c **** 
 2218              		.loc 1 1410 9 discriminator 6 view .LVU652
 2219 0130 FFF7FEFF 		bl	vPortExitCritical
 2220              	.LVL192:
1413:FreeRTOS/queue.c ****         {
 2221              		.loc 1 1413 9 discriminator 6 view .LVU653
1413:FreeRTOS/queue.c ****         {
 2222              		.loc 1 1413 13 is_stmt 0 discriminator 6 view .LVU654
 2223 0134 03A9     		add	r1, sp, #12
 2224 0136 04A8     		add	r0, sp, #16
 2225 0138 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2226              	.LVL193:
1413:FreeRTOS/queue.c ****         {
 2227              		.loc 1 1413 11 discriminator 6 view .LVU655
 2228 013c 0028     		cmp	r0, #0
 2229 013e D1D1     		bne	.L143
1417:FreeRTOS/queue.c ****             {
 2230              		.loc 1 1417 13 is_stmt 1 view .LVU656
1417:FreeRTOS/queue.c ****             {
 2231              		.loc 1 1417 17 is_stmt 0 view .LVU657
 2232 0140 2046     		mov	r0, r4
 2233 0142 FFF7FEFF 		bl	prvIsQueueEmpty
 2234              	.LVL194:
1417:FreeRTOS/queue.c ****             {
 2235              		.loc 1 1417 15 view .LVU658
 2236 0146 0028     		cmp	r0, #0
 2237 0148 C6D0     		beq	.L144
1419:FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2238              		.loc 1 1419 58 is_stmt 1 view .LVU659
1420:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 97


 2239              		.loc 1 1420 17 view .LVU660
 2240 014a 0399     		ldr	r1, [sp, #12]
 2241 014c 04F12400 		add	r0, r4, #36
 2242 0150 FFF7FEFF 		bl	vTaskPlaceOnEventList
 2243              	.LVL195:
1421:FreeRTOS/queue.c **** 
 2244              		.loc 1 1421 17 view .LVU661
 2245 0154 2046     		mov	r0, r4
 2246 0156 FFF7FEFF 		bl	prvUnlockQueue
 2247              	.LVL196:
1423:FreeRTOS/queue.c ****                 {
 2248              		.loc 1 1423 17 view .LVU662
1423:FreeRTOS/queue.c ****                 {
 2249              		.loc 1 1423 21 is_stmt 0 view .LVU663
 2250 015a FFF7FEFF 		bl	xTaskResumeAll
 2251              	.LVL197:
1423:FreeRTOS/queue.c ****                 {
 2252              		.loc 1 1423 19 view .LVU664
 2253 015e 0028     		cmp	r0, #0
 2254 0160 CAD1     		bne	.L135
1425:FreeRTOS/queue.c ****                 }
 2255              		.loc 1 1425 21 is_stmt 1 view .LVU665
 2256 0162 4FF0E023 		mov	r3, #-536813568
 2257 0166 4FF08052 		mov	r2, #268435456
 2258 016a C3F8042D 		str	r2, [r3, #3332]
1425:FreeRTOS/queue.c ****                 }
 2259              		.loc 1 1425 21 view .LVU666
 2260              		.syntax unified
 2261              	@ 1425 "FreeRTOS/queue.c" 1
 2262 016e BFF34F8F 		dsb
 2263              	@ 0 "" 2
1425:FreeRTOS/queue.c ****                 }
 2264              		.loc 1 1425 21 view .LVU667
 2265              	@ 1425 "FreeRTOS/queue.c" 1
 2266 0172 BFF36F8F 		isb
 2267              	@ 0 "" 2
1425:FreeRTOS/queue.c ****                 }
 2268              		.loc 1 1425 43 view .LVU668
 2269              		.thumb
 2270              		.syntax unified
 2271 0176 BFE7     		b	.L135
 2272              	.L152:
1449:FreeRTOS/queue.c ****                 return errQUEUE_EMPTY;
 2273              		.loc 1 1449 17 view .LVU669
 2274 0178 2046     		mov	r0, r4
 2275 017a FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2276              	.LVL198:
 2277 017e 0446     		mov	r4, r0
 2278              	.LVL199:
1449:FreeRTOS/queue.c ****                 return errQUEUE_EMPTY;
 2279              		.loc 1 1449 17 is_stmt 0 view .LVU670
 2280 0180 0020     		movs	r0, #0
 2281 0182 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2282              	.LVL200:
 2283 0186 0246     		mov	r2, r0
 2284 0188 0123     		movs	r3, #1
 2285 018a 0093     		str	r3, [sp]
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 98


 2286 018c 039B     		ldr	r3, [sp, #12]
 2287 018e 2146     		mov	r1, r4
 2288 0190 5C20     		movs	r0, #92
 2289 0192 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x4
 2290              	.LVL201:
1450:FreeRTOS/queue.c ****             }
 2291              		.loc 1 1450 17 is_stmt 1 view .LVU671
1450:FreeRTOS/queue.c ****             }
 2292              		.loc 1 1450 24 is_stmt 0 view .LVU672
 2293 0196 0020     		movs	r0, #0
 2294 0198 6BE7     		b	.L130
 2295              		.cfi_endproc
 2296              	.LFE11:
 2298              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 2299              		.align	1
 2300              		.global	xQueueSemaphoreTake
 2301              		.syntax unified
 2302              		.thumb
 2303              		.thumb_func
 2305              	xQueueSemaphoreTake:
 2306              	.LVL202:
 2307              	.LFB12:
1463:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 2308              		.loc 1 1463 1 is_stmt 1 view -0
 2309              		.cfi_startproc
 2310              		@ args = 0, pretend = 0, frame = 16
 2311              		@ frame_needed = 0, uses_anonymous_args = 0
1463:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 2312              		.loc 1 1463 1 is_stmt 0 view .LVU674
 2313 0000 70B5     		push	{r4, r5, r6, lr}
 2314              	.LCFI23:
 2315              		.cfi_def_cfa_offset 16
 2316              		.cfi_offset 4, -16
 2317              		.cfi_offset 5, -12
 2318              		.cfi_offset 6, -8
 2319              		.cfi_offset 14, -4
 2320 0002 86B0     		sub	sp, sp, #24
 2321              	.LCFI24:
 2322              		.cfi_def_cfa_offset 40
 2323 0004 0391     		str	r1, [sp, #12]
1464:FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
 2324              		.loc 1 1464 5 is_stmt 1 view .LVU675
 2325              	.LVL203:
1465:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 2326              		.loc 1 1465 5 view .LVU676
1466:FreeRTOS/queue.c **** 
 2327              		.loc 1 1466 5 view .LVU677
1473:FreeRTOS/queue.c **** 
 2328              		.loc 1 1473 5 view .LVU678
 2329 0006 58B1     		cbz	r0, .L175
 2330 0008 0446     		mov	r4, r0
1473:FreeRTOS/queue.c **** 
 2331              		.loc 1 1473 32 discriminator 2 view .LVU679
1477:FreeRTOS/queue.c **** 
 2332              		.loc 1 1477 5 discriminator 2 view .LVU680
 2333 000a 036C     		ldr	r3, [r0, #64]
 2334 000c 8BB1     		cbz	r3, .L173
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 99


1477:FreeRTOS/queue.c **** 
 2335              		.loc 1 1477 5 view .LVU681
 2336              	.LBB147:
 2337              	.LBI147:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 2338              		.loc 2 193 34 view .LVU682
 2339              	.LBB148:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2340              		.loc 2 195 9 view .LVU683
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2341              		.loc 2 197 9 view .LVU684
 2342              		.syntax unified
 2343              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2344 000e 4FF05003 			mov r3, #80												
 2345 0012 83F31188 		msr basepri, r3											
 2346 0016 BFF36F8F 		isb														
 2347 001a BFF34F8F 		dsb														
 2348              	
 2349              	@ 0 "" 2
 2350              	.LVL204:
 2351              		.thumb
 2352              		.syntax unified
 2353              	.L162:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2354              		.loc 2 197 9 is_stmt 0 view .LVU685
 2355              	.LBE148:
 2356              	.LBE147:
1477:FreeRTOS/queue.c **** 
 2357              		.loc 1 1477 5 is_stmt 1 discriminator 2 view .LVU686
1477:FreeRTOS/queue.c **** 
 2358              		.loc 1 1477 5 discriminator 2 view .LVU687
1477:FreeRTOS/queue.c **** 
 2359              		.loc 1 1477 5 discriminator 2 view .LVU688
 2360 001e FEE7     		b	.L162
 2361              	.L175:
1473:FreeRTOS/queue.c **** 
 2362              		.loc 1 1473 5 view .LVU689
 2363              	.LBB149:
 2364              	.LBI149:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 2365              		.loc 2 193 34 view .LVU690
 2366              	.LBB150:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2367              		.loc 2 195 9 view .LVU691
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2368              		.loc 2 197 9 view .LVU692
 2369              		.syntax unified
 2370              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2371 0020 4FF05003 			mov r3, #80												
 2372 0024 83F31188 		msr basepri, r3											
 2373 0028 BFF36F8F 		isb														
 2374 002c BFF34F8F 		dsb														
 2375              	
 2376              	@ 0 "" 2
 2377              	.LVL205:
 2378              		.thumb
 2379              		.syntax unified
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 100


 2380              	.L160:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2381              		.loc 2 197 9 is_stmt 0 view .LVU693
 2382              	.LBE150:
 2383              	.LBE149:
1473:FreeRTOS/queue.c **** 
 2384              		.loc 1 1473 5 is_stmt 1 discriminator 1 view .LVU694
1473:FreeRTOS/queue.c **** 
 2385              		.loc 1 1473 5 discriminator 1 view .LVU695
1473:FreeRTOS/queue.c **** 
 2386              		.loc 1 1473 5 discriminator 1 view .LVU696
 2387 0030 FEE7     		b	.L160
 2388              	.L173:
1464:FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
 2389              		.loc 1 1464 16 is_stmt 0 view .LVU697
 2390 0032 0026     		movs	r6, #0
 2391 0034 58E0     		b	.L161
 2392              	.LVL206:
 2393              	.L178:
 2394              	.LBB151:
1501:FreeRTOS/queue.c **** 
 2395              		.loc 1 1501 17 is_stmt 1 view .LVU698
 2396 0036 2046     		mov	r0, r4
 2397 0038 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2398              	.LVL207:
 2399 003c 0646     		mov	r6, r0
 2400              	.LVL208:
1501:FreeRTOS/queue.c **** 
 2401              		.loc 1 1501 17 is_stmt 0 view .LVU699
 2402 003e 0020     		movs	r0, #0
 2403 0040 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2404              	.LVL209:
 2405 0044 0246     		mov	r2, r0
 2406 0046 0123     		movs	r3, #1
 2407 0048 0093     		str	r3, [sp]
 2408 004a 039B     		ldr	r3, [sp, #12]
 2409 004c 3146     		mov	r1, r6
 2410 004e 5C20     		movs	r0, #92
 2411 0050 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x4
 2412              	.LVL210:
1505:FreeRTOS/queue.c **** 
 2413              		.loc 1 1505 17 is_stmt 1 view .LVU700
1505:FreeRTOS/queue.c **** 
 2414              		.loc 1 1505 63 is_stmt 0 view .LVU701
 2415 0054 013D     		subs	r5, r5, #1
 2416              	.LVL211:
1505:FreeRTOS/queue.c **** 
 2417              		.loc 1 1505 44 view .LVU702
 2418 0056 A563     		str	r5, [r4, #56]
1524:FreeRTOS/queue.c ****                 {
 2419              		.loc 1 1524 17 is_stmt 1 view .LVU703
1524:FreeRTOS/queue.c ****                 {
 2420              		.loc 1 1524 21 is_stmt 0 view .LVU704
 2421 0058 2369     		ldr	r3, [r4, #16]
1524:FreeRTOS/queue.c ****                 {
 2422              		.loc 1 1524 19 view .LVU705
 2423 005a 23B9     		cbnz	r3, .L176
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 101


 2424              	.L164:
1537:FreeRTOS/queue.c ****                 }
 2425              		.loc 1 1537 45 is_stmt 1 view .LVU706
1540:FreeRTOS/queue.c ****                 return pdPASS;
 2426              		.loc 1 1540 17 view .LVU707
 2427 005c FFF7FEFF 		bl	vPortExitCritical
 2428              	.LVL212:
1541:FreeRTOS/queue.c ****             }
 2429              		.loc 1 1541 17 view .LVU708
1541:FreeRTOS/queue.c ****             }
 2430              		.loc 1 1541 24 is_stmt 0 view .LVU709
 2431 0060 0120     		movs	r0, #1
 2432              	.LVL213:
 2433              	.L158:
1541:FreeRTOS/queue.c ****             }
 2434              		.loc 1 1541 24 view .LVU710
 2435              	.LBE151:
1677:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2436              		.loc 1 1677 1 view .LVU711
 2437 0062 06B0     		add	sp, sp, #24
 2438              	.LCFI25:
 2439              		.cfi_remember_state
 2440              		.cfi_def_cfa_offset 16
 2441              		@ sp needed
 2442 0064 70BD     		pop	{r4, r5, r6, pc}
 2443              	.LVL214:
 2444              	.L176:
 2445              	.LCFI26:
 2446              		.cfi_restore_state
 2447              	.LBB152:
1526:FreeRTOS/queue.c ****                     {
 2448              		.loc 1 1526 21 is_stmt 1 view .LVU712
1526:FreeRTOS/queue.c ****                     {
 2449              		.loc 1 1526 25 is_stmt 0 view .LVU713
 2450 0066 04F11000 		add	r0, r4, #16
 2451 006a FFF7FEFF 		bl	xTaskRemoveFromEventList
 2452              	.LVL215:
1526:FreeRTOS/queue.c ****                     {
 2453              		.loc 1 1526 23 view .LVU714
 2454 006e 0028     		cmp	r0, #0
 2455 0070 F4D0     		beq	.L164
1528:FreeRTOS/queue.c ****                     }
 2456              		.loc 1 1528 25 is_stmt 1 view .LVU715
 2457 0072 4FF0E023 		mov	r3, #-536813568
 2458 0076 4FF08052 		mov	r2, #268435456
 2459 007a C3F8042D 		str	r2, [r3, #3332]
1528:FreeRTOS/queue.c ****                     }
 2460              		.loc 1 1528 25 view .LVU716
 2461              		.syntax unified
 2462              	@ 1528 "FreeRTOS/queue.c" 1
 2463 007e BFF34F8F 		dsb
 2464              	@ 0 "" 2
1528:FreeRTOS/queue.c ****                     }
 2465              		.loc 1 1528 25 view .LVU717
 2466              	@ 1528 "FreeRTOS/queue.c" 1
 2467 0082 BFF36F8F 		isb
 2468              	@ 0 "" 2
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 102


1528:FreeRTOS/queue.c ****                     }
 2469              		.loc 1 1528 57 view .LVU718
 2470              		.thumb
 2471              		.syntax unified
 2472 0086 E9E7     		b	.L164
 2473              	.LVL216:
 2474              	.L179:
1558:FreeRTOS/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
 2475              		.loc 1 1558 21 view .LVU719
 2476 0088 FFF7FEFF 		bl	vPortExitCritical
 2477              	.LVL217:
1559:FreeRTOS/queue.c ****                     return errQUEUE_EMPTY;
 2478              		.loc 1 1559 21 view .LVU720
 2479 008c 2046     		mov	r0, r4
 2480 008e FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2481              	.LVL218:
 2482 0092 0446     		mov	r4, r0
 2483              	.LVL219:
1559:FreeRTOS/queue.c ****                     return errQUEUE_EMPTY;
 2484              		.loc 1 1559 21 is_stmt 0 view .LVU721
 2485 0094 0020     		movs	r0, #0
 2486 0096 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2487              	.LVL220:
 2488 009a 0246     		mov	r2, r0
 2489 009c 0123     		movs	r3, #1
 2490 009e 0093     		str	r3, [sp]
 2491 00a0 039B     		ldr	r3, [sp, #12]
 2492 00a2 2146     		mov	r1, r4
 2493 00a4 5C20     		movs	r0, #92
 2494 00a6 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x4
 2495              	.LVL221:
1560:FreeRTOS/queue.c ****                 }
 2496              		.loc 1 1560 21 is_stmt 1 view .LVU722
1560:FreeRTOS/queue.c ****                 }
 2497              		.loc 1 1560 28 is_stmt 0 view .LVU723
 2498 00aa 0020     		movs	r0, #0
 2499 00ac D9E7     		b	.L158
 2500              	.LVL222:
 2501              	.L180:
1566:FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 2502              		.loc 1 1566 21 is_stmt 1 view .LVU724
 2503 00ae 04A8     		add	r0, sp, #16
 2504 00b0 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2505              	.LVL223:
1567:FreeRTOS/queue.c ****                 }
 2506              		.loc 1 1567 21 view .LVU725
1567:FreeRTOS/queue.c ****                 }
 2507              		.loc 1 1567 35 is_stmt 0 view .LVU726
 2508 00b4 0126     		movs	r6, #1
 2509 00b6 21E0     		b	.L167
 2510              	.LVL224:
 2511              	.L181:
1567:FreeRTOS/queue.c ****                 }
 2512              		.loc 1 1567 35 view .LVU727
 2513              	.LBE152:
1582:FreeRTOS/queue.c **** 
 2514              		.loc 1 1582 9 is_stmt 1 discriminator 1 view .LVU728
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 103


 2515 00b8 0023     		movs	r3, #0
 2516 00ba 84F84430 		strb	r3, [r4, #68]
 2517 00be 29E0     		b	.L168
 2518              	.L182:
1582:FreeRTOS/queue.c **** 
 2519              		.loc 1 1582 9 discriminator 4 view .LVU729
 2520 00c0 0023     		movs	r3, #0
 2521 00c2 84F84530 		strb	r3, [r4, #69]
 2522 00c6 2BE0     		b	.L169
 2523              	.L171:
1628:FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
 2524              		.loc 1 1628 17 view .LVU730
 2525 00c8 2046     		mov	r0, r4
 2526 00ca FFF7FEFF 		bl	prvUnlockQueue
 2527              	.LVL225:
1629:FreeRTOS/queue.c ****             }
 2528              		.loc 1 1629 17 view .LVU731
1629:FreeRTOS/queue.c ****             }
 2529              		.loc 1 1629 26 is_stmt 0 view .LVU732
 2530 00ce FFF7FEFF 		bl	xTaskResumeAll
 2531              	.LVL226:
 2532 00d2 09E0     		b	.L161
 2533              	.L170:
1635:FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
 2534              		.loc 1 1635 13 is_stmt 1 view .LVU733
 2535 00d4 2046     		mov	r0, r4
 2536 00d6 FFF7FEFF 		bl	prvUnlockQueue
 2537              	.LVL227:
1636:FreeRTOS/queue.c **** 
 2538              		.loc 1 1636 13 view .LVU734
1636:FreeRTOS/queue.c **** 
 2539              		.loc 1 1636 22 is_stmt 0 view .LVU735
 2540 00da FFF7FEFF 		bl	xTaskResumeAll
 2541              	.LVL228:
1642:FreeRTOS/queue.c ****             {
 2542              		.loc 1 1642 13 is_stmt 1 view .LVU736
1642:FreeRTOS/queue.c ****             {
 2543              		.loc 1 1642 17 is_stmt 0 view .LVU737
 2544 00de 2046     		mov	r0, r4
 2545 00e0 FFF7FEFF 		bl	prvIsQueueEmpty
 2546              	.LVL229:
1642:FreeRTOS/queue.c ****             {
 2547              		.loc 1 1642 15 view .LVU738
 2548 00e4 0028     		cmp	r0, #0
 2549 00e6 3FD1     		bne	.L177
 2550              	.LVL230:
 2551              	.L161:
1477:FreeRTOS/queue.c **** 
 2552              		.loc 1 1477 45 is_stmt 1 discriminator 2 view .LVU739
1489:FreeRTOS/queue.c ****     {
 2553              		.loc 1 1489 5 discriminator 2 view .LVU740
1491:FreeRTOS/queue.c ****         {
 2554              		.loc 1 1491 9 discriminator 2 view .LVU741
 2555 00e8 FFF7FEFF 		bl	vPortEnterCritical
 2556              	.LVL231:
 2557              	.LBB153:
1495:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 104


 2558              		.loc 1 1495 13 discriminator 2 view .LVU742
1495:FreeRTOS/queue.c **** 
 2559              		.loc 1 1495 31 is_stmt 0 discriminator 2 view .LVU743
 2560 00ec A56B     		ldr	r5, [r4, #56]
 2561              	.LVL232:
1499:FreeRTOS/queue.c ****             {
 2562              		.loc 1 1499 13 is_stmt 1 discriminator 2 view .LVU744
1499:FreeRTOS/queue.c ****             {
 2563              		.loc 1 1499 15 is_stmt 0 discriminator 2 view .LVU745
 2564 00ee 002D     		cmp	r5, #0
 2565 00f0 A1D1     		bne	.L178
1545:FreeRTOS/queue.c ****                 {
 2566              		.loc 1 1545 17 is_stmt 1 view .LVU746
1545:FreeRTOS/queue.c ****                 {
 2567              		.loc 1 1545 34 is_stmt 0 view .LVU747
 2568 00f2 039B     		ldr	r3, [sp, #12]
1545:FreeRTOS/queue.c ****                 {
 2569              		.loc 1 1545 19 view .LVU748
 2570 00f4 002B     		cmp	r3, #0
 2571 00f6 C7D0     		beq	.L179
1562:FreeRTOS/queue.c ****                 {
 2572              		.loc 1 1562 22 is_stmt 1 view .LVU749
1562:FreeRTOS/queue.c ****                 {
 2573              		.loc 1 1562 24 is_stmt 0 view .LVU750
 2574 00f8 002E     		cmp	r6, #0
 2575 00fa D8D0     		beq	.L180
 2576              	.LVL233:
 2577              	.L167:
1572:FreeRTOS/queue.c ****                 }
 2578              		.loc 1 1572 45 is_stmt 1 view .LVU751
 2579              	.LBE153:
1576:FreeRTOS/queue.c **** 
 2580              		.loc 1 1576 9 view .LVU752
 2581 00fc FFF7FEFF 		bl	vPortExitCritical
 2582              	.LVL234:
1581:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 2583              		.loc 1 1581 9 view .LVU753
 2584 0100 FFF7FEFF 		bl	vTaskSuspendAll
 2585              	.LVL235:
1582:FreeRTOS/queue.c **** 
 2586              		.loc 1 1582 9 view .LVU754
 2587 0104 FFF7FEFF 		bl	vPortEnterCritical
 2588              	.LVL236:
1582:FreeRTOS/queue.c **** 
 2589              		.loc 1 1582 9 view .LVU755
 2590 0108 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2591 010c 5BB2     		sxtb	r3, r3
 2592 010e B3F1FF3F 		cmp	r3, #-1
 2593 0112 D1D0     		beq	.L181
 2594              	.L168:
1582:FreeRTOS/queue.c **** 
 2595              		.loc 1 1582 9 discriminator 3 view .LVU756
 2596 0114 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2597 0118 5BB2     		sxtb	r3, r3
 2598 011a B3F1FF3F 		cmp	r3, #-1
 2599 011e CFD0     		beq	.L182
 2600              	.L169:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 105


1582:FreeRTOS/queue.c **** 
 2601              		.loc 1 1582 9 discriminator 6 view .LVU757
 2602 0120 FFF7FEFF 		bl	vPortExitCritical
 2603              	.LVL237:
1585:FreeRTOS/queue.c ****         {
 2604              		.loc 1 1585 9 discriminator 6 view .LVU758
1585:FreeRTOS/queue.c ****         {
 2605              		.loc 1 1585 13 is_stmt 0 discriminator 6 view .LVU759
 2606 0124 03A9     		add	r1, sp, #12
 2607 0126 04A8     		add	r0, sp, #16
 2608 0128 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2609              	.LVL238:
1585:FreeRTOS/queue.c ****         {
 2610              		.loc 1 1585 11 discriminator 6 view .LVU760
 2611 012c 0028     		cmp	r0, #0
 2612 012e D1D1     		bne	.L170
1591:FreeRTOS/queue.c ****             {
 2613              		.loc 1 1591 13 is_stmt 1 view .LVU761
1591:FreeRTOS/queue.c ****             {
 2614              		.loc 1 1591 17 is_stmt 0 view .LVU762
 2615 0130 2046     		mov	r0, r4
 2616 0132 FFF7FEFF 		bl	prvIsQueueEmpty
 2617              	.LVL239:
1591:FreeRTOS/queue.c ****             {
 2618              		.loc 1 1591 15 view .LVU763
 2619 0136 0028     		cmp	r0, #0
 2620 0138 C6D0     		beq	.L171
1593:FreeRTOS/queue.c **** 
 2621              		.loc 1 1593 58 is_stmt 1 view .LVU764
1612:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 2622              		.loc 1 1612 17 view .LVU765
 2623 013a 0399     		ldr	r1, [sp, #12]
 2624 013c 04F12400 		add	r0, r4, #36
 2625 0140 FFF7FEFF 		bl	vTaskPlaceOnEventList
 2626              	.LVL240:
1613:FreeRTOS/queue.c **** 
 2627              		.loc 1 1613 17 view .LVU766
 2628 0144 2046     		mov	r0, r4
 2629 0146 FFF7FEFF 		bl	prvUnlockQueue
 2630              	.LVL241:
1615:FreeRTOS/queue.c ****                 {
 2631              		.loc 1 1615 17 view .LVU767
1615:FreeRTOS/queue.c ****                 {
 2632              		.loc 1 1615 21 is_stmt 0 view .LVU768
 2633 014a FFF7FEFF 		bl	xTaskResumeAll
 2634              	.LVL242:
1615:FreeRTOS/queue.c ****                 {
 2635              		.loc 1 1615 19 view .LVU769
 2636 014e 0028     		cmp	r0, #0
 2637 0150 CAD1     		bne	.L161
1617:FreeRTOS/queue.c ****                 }
 2638              		.loc 1 1617 21 is_stmt 1 view .LVU770
 2639 0152 4FF0E023 		mov	r3, #-536813568
 2640 0156 4FF08052 		mov	r2, #268435456
 2641 015a C3F8042D 		str	r2, [r3, #3332]
1617:FreeRTOS/queue.c ****                 }
 2642              		.loc 1 1617 21 view .LVU771
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 106


 2643              		.syntax unified
 2644              	@ 1617 "FreeRTOS/queue.c" 1
 2645 015e BFF34F8F 		dsb
 2646              	@ 0 "" 2
1617:FreeRTOS/queue.c ****                 }
 2647              		.loc 1 1617 21 view .LVU772
 2648              	@ 1617 "FreeRTOS/queue.c" 1
 2649 0162 BFF36F8F 		isb
 2650              	@ 0 "" 2
1617:FreeRTOS/queue.c ****                 }
 2651              		.loc 1 1617 43 view .LVU773
 2652              		.thumb
 2653              		.syntax unified
 2654 0166 BFE7     		b	.L161
 2655              	.L177:
1668:FreeRTOS/queue.c ****                 return errQUEUE_EMPTY;
 2656              		.loc 1 1668 17 view .LVU774
 2657 0168 2046     		mov	r0, r4
 2658 016a FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2659              	.LVL243:
 2660 016e 0446     		mov	r4, r0
 2661              	.LVL244:
1668:FreeRTOS/queue.c ****                 return errQUEUE_EMPTY;
 2662              		.loc 1 1668 17 is_stmt 0 view .LVU775
 2663 0170 0020     		movs	r0, #0
 2664 0172 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2665              	.LVL245:
 2666 0176 0246     		mov	r2, r0
 2667 0178 0123     		movs	r3, #1
 2668 017a 0093     		str	r3, [sp]
 2669 017c 039B     		ldr	r3, [sp, #12]
 2670 017e 2146     		mov	r1, r4
 2671 0180 5C20     		movs	r0, #92
 2672 0182 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x4
 2673              	.LVL246:
1669:FreeRTOS/queue.c ****             }
 2674              		.loc 1 1669 17 is_stmt 1 view .LVU776
1669:FreeRTOS/queue.c ****             }
 2675              		.loc 1 1669 24 is_stmt 0 view .LVU777
 2676 0186 0020     		movs	r0, #0
 2677 0188 6BE7     		b	.L158
 2678              		.cfi_endproc
 2679              	.LFE12:
 2681              		.section	.text.xQueuePeek,"ax",%progbits
 2682              		.align	1
 2683              		.global	xQueuePeek
 2684              		.syntax unified
 2685              		.thumb
 2686              		.thumb_func
 2688              	xQueuePeek:
 2689              	.LVL247:
 2690              	.LFB13:
1683:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 2691              		.loc 1 1683 1 is_stmt 1 view -0
 2692              		.cfi_startproc
 2693              		@ args = 0, pretend = 0, frame = 16
 2694              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 107


1683:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 2695              		.loc 1 1683 1 is_stmt 0 view .LVU779
 2696 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2697              	.LCFI27:
 2698              		.cfi_def_cfa_offset 20
 2699              		.cfi_offset 4, -20
 2700              		.cfi_offset 5, -16
 2701              		.cfi_offset 6, -12
 2702              		.cfi_offset 7, -8
 2703              		.cfi_offset 14, -4
 2704 0002 87B0     		sub	sp, sp, #28
 2705              	.LCFI28:
 2706              		.cfi_def_cfa_offset 48
 2707 0004 0392     		str	r2, [sp, #12]
1684:FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
 2708              		.loc 1 1684 5 is_stmt 1 view .LVU780
 2709              	.LVL248:
1685:FreeRTOS/queue.c ****     int8_t * pcOriginalReadPosition;
 2710              		.loc 1 1685 5 view .LVU781
1686:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 2711              		.loc 1 1686 5 view .LVU782
1687:FreeRTOS/queue.c **** 
 2712              		.loc 1 1687 5 view .LVU783
1690:FreeRTOS/queue.c **** 
 2713              		.loc 1 1690 5 view .LVU784
 2714 0006 20B1     		cbz	r0, .L202
 2715 0008 0E46     		mov	r6, r1
 2716 000a 0446     		mov	r4, r0
1690:FreeRTOS/queue.c **** 
 2717              		.loc 1 1690 32 discriminator 2 view .LVU785
1694:FreeRTOS/queue.c **** 
 2718              		.loc 1 1694 5 discriminator 2 view .LVU786
 2719 000c 51B1     		cbz	r1, .L203
 2720 000e 0025     		movs	r5, #0
 2721 0010 63E0     		b	.L188
 2722              	.L202:
1690:FreeRTOS/queue.c **** 
 2723              		.loc 1 1690 5 view .LVU787
 2724              	.LBB154:
 2725              	.LBI154:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 2726              		.loc 2 193 34 view .LVU788
 2727              	.LBB155:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2728              		.loc 2 195 9 view .LVU789
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2729              		.loc 2 197 9 view .LVU790
 2730              		.syntax unified
 2731              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2732 0012 4FF05003 			mov r3, #80												
 2733 0016 83F31188 		msr basepri, r3											
 2734 001a BFF36F8F 		isb														
 2735 001e BFF34F8F 		dsb														
 2736              	
 2737              	@ 0 "" 2
 2738              	.LVL249:
 2739              		.thumb
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 108


 2740              		.syntax unified
 2741              	.L185:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2742              		.loc 2 197 9 is_stmt 0 view .LVU791
 2743              	.LBE155:
 2744              	.LBE154:
1690:FreeRTOS/queue.c **** 
 2745              		.loc 1 1690 5 is_stmt 1 discriminator 1 view .LVU792
1690:FreeRTOS/queue.c **** 
 2746              		.loc 1 1690 5 discriminator 1 view .LVU793
1690:FreeRTOS/queue.c **** 
 2747              		.loc 1 1690 5 discriminator 1 view .LVU794
 2748 0022 FEE7     		b	.L185
 2749              	.L203:
1694:FreeRTOS/queue.c **** 
 2750              		.loc 1 1694 5 is_stmt 0 discriminator 2 view .LVU795
 2751 0024 036C     		ldr	r3, [r0, #64]
 2752 0026 43B1     		cbz	r3, .L200
1694:FreeRTOS/queue.c **** 
 2753              		.loc 1 1694 5 is_stmt 1 view .LVU796
 2754              	.LBB156:
 2755              	.LBI156:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 2756              		.loc 2 193 34 view .LVU797
 2757              	.LBB157:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2758              		.loc 2 195 9 view .LVU798
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2759              		.loc 2 197 9 view .LVU799
 2760              		.syntax unified
 2761              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2762 0028 4FF05003 			mov r3, #80												
 2763 002c 83F31188 		msr basepri, r3											
 2764 0030 BFF36F8F 		isb														
 2765 0034 BFF34F8F 		dsb														
 2766              	
 2767              	@ 0 "" 2
 2768              	.LVL250:
 2769              		.thumb
 2770              		.syntax unified
 2771              	.L187:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2772              		.loc 2 197 9 is_stmt 0 view .LVU800
 2773              	.LBE157:
 2774              	.LBE156:
1694:FreeRTOS/queue.c **** 
 2775              		.loc 1 1694 5 is_stmt 1 discriminator 2 view .LVU801
1694:FreeRTOS/queue.c **** 
 2776              		.loc 1 1694 5 discriminator 2 view .LVU802
1694:FreeRTOS/queue.c **** 
 2777              		.loc 1 1694 5 discriminator 2 view .LVU803
 2778 0038 FEE7     		b	.L187
 2779              	.L200:
 2780 003a 0025     		movs	r5, #0
 2781 003c 4DE0     		b	.L188
 2782              	.LVL251:
 2783              	.L206:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 109


 2784              	.LBB158:
1719:FreeRTOS/queue.c **** 
 2785              		.loc 1 1719 17 view .LVU804
1719:FreeRTOS/queue.c **** 
 2786              		.loc 1 1719 40 is_stmt 0 view .LVU805
 2787 003e E768     		ldr	r7, [r4, #12]
 2788              	.LVL252:
1721:FreeRTOS/queue.c ****                 traceQUEUE_PEEK( pxQueue );
 2789              		.loc 1 1721 17 is_stmt 1 view .LVU806
 2790 0040 3146     		mov	r1, r6
 2791 0042 2046     		mov	r0, r4
 2792 0044 FFF7FEFF 		bl	prvCopyDataFromQueue
 2793              	.LVL253:
1722:FreeRTOS/queue.c **** 
 2794              		.loc 1 1722 17 view .LVU807
 2795 0048 2046     		mov	r0, r4
 2796 004a FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2797              	.LVL254:
 2798 004e 0546     		mov	r5, r0
 2799              	.LVL255:
1722:FreeRTOS/queue.c **** 
 2800              		.loc 1 1722 17 is_stmt 0 view .LVU808
 2801 0050 3046     		mov	r0, r6
 2802 0052 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 2803              	.LVL256:
 2804 0056 0246     		mov	r2, r0
 2805 0058 0123     		movs	r3, #1
 2806 005a 0093     		str	r3, [sp]
 2807 005c 039B     		ldr	r3, [sp, #12]
 2808 005e 2946     		mov	r1, r5
 2809 0060 5C20     		movs	r0, #92
 2810 0062 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x4
 2811              	.LVL257:
1725:FreeRTOS/queue.c **** 
 2812              		.loc 1 1725 17 is_stmt 1 view .LVU809
1725:FreeRTOS/queue.c **** 
 2813              		.loc 1 1725 46 is_stmt 0 view .LVU810
 2814 0066 E760     		str	r7, [r4, #12]
1729:FreeRTOS/queue.c ****                 {
 2815              		.loc 1 1729 17 is_stmt 1 view .LVU811
1729:FreeRTOS/queue.c ****                 {
 2816              		.loc 1 1729 21 is_stmt 0 view .LVU812
 2817 0068 636A     		ldr	r3, [r4, #36]
1729:FreeRTOS/queue.c ****                 {
 2818              		.loc 1 1729 19 view .LVU813
 2819 006a 23B9     		cbnz	r3, .L204
 2820              	.L190:
1743:FreeRTOS/queue.c ****                 }
 2821              		.loc 1 1743 45 is_stmt 1 view .LVU814
1746:FreeRTOS/queue.c ****                 return pdPASS;
 2822              		.loc 1 1746 17 view .LVU815
 2823 006c FFF7FEFF 		bl	vPortExitCritical
 2824              	.LVL258:
1747:FreeRTOS/queue.c ****             }
 2825              		.loc 1 1747 17 view .LVU816
1747:FreeRTOS/queue.c ****             }
 2826              		.loc 1 1747 24 is_stmt 0 view .LVU817
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 110


 2827 0070 0120     		movs	r0, #1
 2828              	.LVL259:
 2829              	.L183:
1747:FreeRTOS/queue.c ****             }
 2830              		.loc 1 1747 24 view .LVU818
 2831              	.LBE158:
1828:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2832              		.loc 1 1828 1 view .LVU819
 2833 0072 07B0     		add	sp, sp, #28
 2834              	.LCFI29:
 2835              		.cfi_remember_state
 2836              		.cfi_def_cfa_offset 20
 2837              		@ sp needed
 2838 0074 F0BD     		pop	{r4, r5, r6, r7, pc}
 2839              	.LVL260:
 2840              	.L204:
 2841              	.LCFI30:
 2842              		.cfi_restore_state
 2843              	.LBB159:
1731:FreeRTOS/queue.c ****                     {
 2844              		.loc 1 1731 21 is_stmt 1 view .LVU820
1731:FreeRTOS/queue.c ****                     {
 2845              		.loc 1 1731 25 is_stmt 0 view .LVU821
 2846 0076 04F12400 		add	r0, r4, #36
 2847 007a FFF7FEFF 		bl	xTaskRemoveFromEventList
 2848              	.LVL261:
1731:FreeRTOS/queue.c ****                     {
 2849              		.loc 1 1731 23 view .LVU822
 2850 007e 0028     		cmp	r0, #0
 2851 0080 F4D0     		beq	.L190
1734:FreeRTOS/queue.c ****                     }
 2852              		.loc 1 1734 25 is_stmt 1 view .LVU823
 2853 0082 4FF0E023 		mov	r3, #-536813568
 2854 0086 4FF08052 		mov	r2, #268435456
 2855 008a C3F8042D 		str	r2, [r3, #3332]
1734:FreeRTOS/queue.c ****                     }
 2856              		.loc 1 1734 25 view .LVU824
 2857              		.syntax unified
 2858              	@ 1734 "FreeRTOS/queue.c" 1
 2859 008e BFF34F8F 		dsb
 2860              	@ 0 "" 2
1734:FreeRTOS/queue.c ****                     }
 2861              		.loc 1 1734 25 view .LVU825
 2862              	@ 1734 "FreeRTOS/queue.c" 1
 2863 0092 BFF36F8F 		isb
 2864              	@ 0 "" 2
1734:FreeRTOS/queue.c ****                     }
 2865              		.loc 1 1734 57 view .LVU826
 2866              		.thumb
 2867              		.syntax unified
 2868 0096 E9E7     		b	.L190
 2869              	.LVL262:
 2870              	.L207:
1755:FreeRTOS/queue.c ****                     traceQUEUE_PEEK_FAILED( pxQueue );
 2871              		.loc 1 1755 21 view .LVU827
 2872 0098 FFF7FEFF 		bl	vPortExitCritical
 2873              	.LVL263:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 111


1756:FreeRTOS/queue.c ****                     return errQUEUE_EMPTY;
 2874              		.loc 1 1756 54 view .LVU828
1757:FreeRTOS/queue.c ****                 }
 2875              		.loc 1 1757 21 view .LVU829
1757:FreeRTOS/queue.c ****                 }
 2876              		.loc 1 1757 28 is_stmt 0 view .LVU830
 2877 009c 0020     		movs	r0, #0
 2878 009e E8E7     		b	.L183
 2879              	.L208:
1764:FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 2880              		.loc 1 1764 21 is_stmt 1 view .LVU831
 2881 00a0 04A8     		add	r0, sp, #16
 2882 00a2 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2883              	.LVL264:
1765:FreeRTOS/queue.c ****                 }
 2884              		.loc 1 1765 21 view .LVU832
1765:FreeRTOS/queue.c ****                 }
 2885              		.loc 1 1765 35 is_stmt 0 view .LVU833
 2886 00a6 0125     		movs	r5, #1
 2887 00a8 21E0     		b	.L193
 2888              	.LVL265:
 2889              	.L209:
1765:FreeRTOS/queue.c ****                 }
 2890              		.loc 1 1765 35 view .LVU834
 2891              	.LBE159:
1780:FreeRTOS/queue.c **** 
 2892              		.loc 1 1780 9 is_stmt 1 discriminator 1 view .LVU835
 2893 00aa 0023     		movs	r3, #0
 2894 00ac 84F84430 		strb	r3, [r4, #68]
 2895 00b0 29E0     		b	.L194
 2896              	.L210:
1780:FreeRTOS/queue.c **** 
 2897              		.loc 1 1780 9 discriminator 4 view .LVU836
 2898 00b2 0023     		movs	r3, #0
 2899 00b4 84F84530 		strb	r3, [r4, #69]
 2900 00b8 2BE0     		b	.L195
 2901              	.L197:
1806:FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
 2902              		.loc 1 1806 17 view .LVU837
 2903 00ba 2046     		mov	r0, r4
 2904 00bc FFF7FEFF 		bl	prvUnlockQueue
 2905              	.LVL266:
1807:FreeRTOS/queue.c ****             }
 2906              		.loc 1 1807 17 view .LVU838
1807:FreeRTOS/queue.c ****             }
 2907              		.loc 1 1807 26 is_stmt 0 view .LVU839
 2908 00c0 FFF7FEFF 		bl	xTaskResumeAll
 2909              	.LVL267:
 2910 00c4 09E0     		b	.L188
 2911              	.L196:
1814:FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
 2912              		.loc 1 1814 13 is_stmt 1 view .LVU840
 2913 00c6 2046     		mov	r0, r4
 2914 00c8 FFF7FEFF 		bl	prvUnlockQueue
 2915              	.LVL268:
1815:FreeRTOS/queue.c **** 
 2916              		.loc 1 1815 13 view .LVU841
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 112


1815:FreeRTOS/queue.c **** 
 2917              		.loc 1 1815 22 is_stmt 0 view .LVU842
 2918 00cc FFF7FEFF 		bl	xTaskResumeAll
 2919              	.LVL269:
1817:FreeRTOS/queue.c ****             {
 2920              		.loc 1 1817 13 is_stmt 1 view .LVU843
1817:FreeRTOS/queue.c ****             {
 2921              		.loc 1 1817 17 is_stmt 0 view .LVU844
 2922 00d0 2046     		mov	r0, r4
 2923 00d2 FFF7FEFF 		bl	prvIsQueueEmpty
 2924              	.LVL270:
1817:FreeRTOS/queue.c ****             {
 2925              		.loc 1 1817 15 view .LVU845
 2926 00d6 0028     		cmp	r0, #0
 2927 00d8 3FD1     		bne	.L205
 2928              	.LVL271:
 2929              	.L188:
1694:FreeRTOS/queue.c **** 
 2930              		.loc 1 1694 103 is_stmt 1 discriminator 8 view .LVU846
1706:FreeRTOS/queue.c ****     {
 2931              		.loc 1 1706 5 discriminator 8 view .LVU847
1708:FreeRTOS/queue.c ****         {
 2932              		.loc 1 1708 9 discriminator 8 view .LVU848
 2933 00da FFF7FEFF 		bl	vPortEnterCritical
 2934              	.LVL272:
 2935              	.LBB160:
1710:FreeRTOS/queue.c **** 
 2936              		.loc 1 1710 13 discriminator 8 view .LVU849
1710:FreeRTOS/queue.c **** 
 2937              		.loc 1 1710 31 is_stmt 0 discriminator 8 view .LVU850
 2938 00de A36B     		ldr	r3, [r4, #56]
 2939              	.LVL273:
1714:FreeRTOS/queue.c ****             {
 2940              		.loc 1 1714 13 is_stmt 1 discriminator 8 view .LVU851
1714:FreeRTOS/queue.c ****             {
 2941              		.loc 1 1714 15 is_stmt 0 discriminator 8 view .LVU852
 2942 00e0 002B     		cmp	r3, #0
 2943 00e2 ACD1     		bne	.L206
1751:FreeRTOS/queue.c ****                 {
 2944              		.loc 1 1751 17 is_stmt 1 view .LVU853
1751:FreeRTOS/queue.c ****                 {
 2945              		.loc 1 1751 34 is_stmt 0 view .LVU854
 2946 00e4 039B     		ldr	r3, [sp, #12]
 2947              	.LVL274:
1751:FreeRTOS/queue.c ****                 {
 2948              		.loc 1 1751 19 view .LVU855
 2949 00e6 002B     		cmp	r3, #0
 2950 00e8 D6D0     		beq	.L207
1759:FreeRTOS/queue.c ****                 {
 2951              		.loc 1 1759 22 is_stmt 1 view .LVU856
1759:FreeRTOS/queue.c ****                 {
 2952              		.loc 1 1759 24 is_stmt 0 view .LVU857
 2953 00ea 002D     		cmp	r5, #0
 2954 00ec D8D0     		beq	.L208
 2955              	.LVL275:
 2956              	.L193:
1770:FreeRTOS/queue.c ****                 }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 113


 2957              		.loc 1 1770 45 is_stmt 1 view .LVU858
 2958              	.LBE160:
1774:FreeRTOS/queue.c **** 
 2959              		.loc 1 1774 9 view .LVU859
 2960 00ee FFF7FEFF 		bl	vPortExitCritical
 2961              	.LVL276:
1779:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 2962              		.loc 1 1779 9 view .LVU860
 2963 00f2 FFF7FEFF 		bl	vTaskSuspendAll
 2964              	.LVL277:
1780:FreeRTOS/queue.c **** 
 2965              		.loc 1 1780 9 view .LVU861
 2966 00f6 FFF7FEFF 		bl	vPortEnterCritical
 2967              	.LVL278:
1780:FreeRTOS/queue.c **** 
 2968              		.loc 1 1780 9 view .LVU862
 2969 00fa 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2970 00fe 5BB2     		sxtb	r3, r3
 2971 0100 B3F1FF3F 		cmp	r3, #-1
 2972 0104 D1D0     		beq	.L209
 2973              	.L194:
1780:FreeRTOS/queue.c **** 
 2974              		.loc 1 1780 9 discriminator 3 view .LVU863
 2975 0106 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2976 010a 5BB2     		sxtb	r3, r3
 2977 010c B3F1FF3F 		cmp	r3, #-1
 2978 0110 CFD0     		beq	.L210
 2979              	.L195:
1780:FreeRTOS/queue.c **** 
 2980              		.loc 1 1780 9 discriminator 6 view .LVU864
 2981 0112 FFF7FEFF 		bl	vPortExitCritical
 2982              	.LVL279:
1783:FreeRTOS/queue.c ****         {
 2983              		.loc 1 1783 9 discriminator 6 view .LVU865
1783:FreeRTOS/queue.c ****         {
 2984              		.loc 1 1783 13 is_stmt 0 discriminator 6 view .LVU866
 2985 0116 03A9     		add	r1, sp, #12
 2986 0118 04A8     		add	r0, sp, #16
 2987 011a FFF7FEFF 		bl	xTaskCheckForTimeOut
 2988              	.LVL280:
1783:FreeRTOS/queue.c ****         {
 2989              		.loc 1 1783 11 discriminator 6 view .LVU867
 2990 011e 0028     		cmp	r0, #0
 2991 0120 D1D1     		bne	.L196
1787:FreeRTOS/queue.c ****             {
 2992              		.loc 1 1787 13 is_stmt 1 view .LVU868
1787:FreeRTOS/queue.c ****             {
 2993              		.loc 1 1787 17 is_stmt 0 view .LVU869
 2994 0122 2046     		mov	r0, r4
 2995 0124 FFF7FEFF 		bl	prvIsQueueEmpty
 2996              	.LVL281:
1787:FreeRTOS/queue.c ****             {
 2997              		.loc 1 1787 15 view .LVU870
 2998 0128 0028     		cmp	r0, #0
 2999 012a C6D0     		beq	.L197
1789:FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 3000              		.loc 1 1789 55 is_stmt 1 view .LVU871
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 114


1790:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 3001              		.loc 1 1790 17 view .LVU872
 3002 012c 0399     		ldr	r1, [sp, #12]
 3003 012e 04F12400 		add	r0, r4, #36
 3004 0132 FFF7FEFF 		bl	vTaskPlaceOnEventList
 3005              	.LVL282:
1791:FreeRTOS/queue.c **** 
 3006              		.loc 1 1791 17 view .LVU873
 3007 0136 2046     		mov	r0, r4
 3008 0138 FFF7FEFF 		bl	prvUnlockQueue
 3009              	.LVL283:
1793:FreeRTOS/queue.c ****                 {
 3010              		.loc 1 1793 17 view .LVU874
1793:FreeRTOS/queue.c ****                 {
 3011              		.loc 1 1793 21 is_stmt 0 view .LVU875
 3012 013c FFF7FEFF 		bl	xTaskResumeAll
 3013              	.LVL284:
1793:FreeRTOS/queue.c ****                 {
 3014              		.loc 1 1793 19 view .LVU876
 3015 0140 0028     		cmp	r0, #0
 3016 0142 CAD1     		bne	.L188
1795:FreeRTOS/queue.c ****                 }
 3017              		.loc 1 1795 21 is_stmt 1 view .LVU877
 3018 0144 4FF0E023 		mov	r3, #-536813568
 3019 0148 4FF08052 		mov	r2, #268435456
 3020 014c C3F8042D 		str	r2, [r3, #3332]
1795:FreeRTOS/queue.c ****                 }
 3021              		.loc 1 1795 21 view .LVU878
 3022              		.syntax unified
 3023              	@ 1795 "FreeRTOS/queue.c" 1
 3024 0150 BFF34F8F 		dsb
 3025              	@ 0 "" 2
1795:FreeRTOS/queue.c ****                 }
 3026              		.loc 1 1795 21 view .LVU879
 3027              	@ 1795 "FreeRTOS/queue.c" 1
 3028 0154 BFF36F8F 		isb
 3029              	@ 0 "" 2
1795:FreeRTOS/queue.c ****                 }
 3030              		.loc 1 1795 43 view .LVU880
 3031              		.thumb
 3032              		.syntax unified
 3033 0158 BFE7     		b	.L188
 3034              	.L205:
1820:FreeRTOS/queue.c ****             }
 3035              		.loc 1 1820 24 is_stmt 0 view .LVU881
 3036 015a 0020     		movs	r0, #0
 3037 015c 89E7     		b	.L183
 3038              		.cfi_endproc
 3039              	.LFE13:
 3041              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 3042              		.align	1
 3043              		.global	xQueueReceiveFromISR
 3044              		.syntax unified
 3045              		.thumb
 3046              		.thumb_func
 3048              	xQueueReceiveFromISR:
 3049              	.LVL285:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 115


 3050              	.LFB14:
1834:FreeRTOS/queue.c ****     BaseType_t xReturn;
 3051              		.loc 1 1834 1 is_stmt 1 view -0
 3052              		.cfi_startproc
 3053              		@ args = 0, pretend = 0, frame = 0
 3054              		@ frame_needed = 0, uses_anonymous_args = 0
1835:FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
 3055              		.loc 1 1835 5 view .LVU883
1836:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 3056              		.loc 1 1836 5 view .LVU884
1837:FreeRTOS/queue.c **** 
 3057              		.loc 1 1837 5 view .LVU885
1839:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3058              		.loc 1 1839 5 view .LVU886
 3059 0000 0028     		cmp	r0, #0
 3060 0002 39D0     		beq	.L226
1834:FreeRTOS/queue.c ****     BaseType_t xReturn;
 3061              		.loc 1 1834 1 is_stmt 0 discriminator 2 view .LVU887
 3062 0004 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3063              	.LCFI31:
 3064              		.cfi_def_cfa_offset 32
 3065              		.cfi_offset 4, -32
 3066              		.cfi_offset 5, -28
 3067              		.cfi_offset 6, -24
 3068              		.cfi_offset 7, -20
 3069              		.cfi_offset 8, -16
 3070              		.cfi_offset 9, -12
 3071              		.cfi_offset 10, -8
 3072              		.cfi_offset 14, -4
 3073 0008 0C46     		mov	r4, r1
 3074 000a 1546     		mov	r5, r2
 3075 000c 0646     		mov	r6, r0
1839:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3076              		.loc 1 1839 28 is_stmt 1 discriminator 2 view .LVU888
1840:FreeRTOS/queue.c **** 
 3077              		.loc 1 1840 5 discriminator 2 view .LVU889
 3078 000e 0029     		cmp	r1, #0
 3079 0010 3BD0     		beq	.L227
 3080              	.L214:
1840:FreeRTOS/queue.c **** 
 3081              		.loc 1 1840 95 discriminator 8 view .LVU890
1856:FreeRTOS/queue.c **** 
 3082              		.loc 1 1856 5 discriminator 8 view .LVU891
 3083 0012 FFF7FEFF 		bl	vPortValidateInterruptPriority
 3084              	.LVL286:
1858:FreeRTOS/queue.c ****     {
 3085              		.loc 1 1858 5 discriminator 8 view .LVU892
 3086              	.LBB161:
 3087              	.LBI161:
 209:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3088              		.loc 2 209 38 discriminator 8 view .LVU893
 3089              	.LBB162:
 211:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3090              		.loc 2 211 9 discriminator 8 view .LVU894
 213:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3091              		.loc 2 213 9 discriminator 8 view .LVU895
 3092              		.syntax unified
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 116


 3093              	@ 213 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3094 0016 EFF31189 			mrs r9, basepri											
 3095 001a 4FF05003 		mov r3, #80												
 3096 001e 83F31188 		msr basepri, r3											
 3097 0022 BFF36F8F 		isb														
 3098 0026 BFF34F8F 		dsb														
 3099              	
 3100              	@ 0 "" 2
 3101              	.LVL287:
 225:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 3102              		.loc 2 225 9 discriminator 8 view .LVU896
 225:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 3103              		.loc 2 225 9 is_stmt 0 discriminator 8 view .LVU897
 3104              		.thumb
 3105              		.syntax unified
 3106              	.LBE162:
 3107              	.LBE161:
 3108              	.LBB163:
1860:FreeRTOS/queue.c **** 
 3109              		.loc 1 1860 9 is_stmt 1 discriminator 8 view .LVU898
1860:FreeRTOS/queue.c **** 
 3110              		.loc 1 1860 27 is_stmt 0 discriminator 8 view .LVU899
 3111 002a B76B     		ldr	r7, [r6, #56]
 3112              	.LVL288:
1863:FreeRTOS/queue.c ****         {
 3113              		.loc 1 1863 9 is_stmt 1 discriminator 8 view .LVU900
1863:FreeRTOS/queue.c ****         {
 3114              		.loc 1 1863 11 is_stmt 0 discriminator 8 view .LVU901
 3115 002c 002F     		cmp	r7, #0
 3116 002e 4ED0     		beq	.L216
 3117              	.LBB164:
1865:FreeRTOS/queue.c **** 
 3118              		.loc 1 1865 13 is_stmt 1 view .LVU902
1865:FreeRTOS/queue.c **** 
 3119              		.loc 1 1865 26 is_stmt 0 view .LVU903
 3120 0030 96F84480 		ldrb	r8, [r6, #68]	@ zero_extendqisi2
 3121 0034 4FFA88F8 		sxtb	r8, r8
 3122              	.LVL289:
1867:FreeRTOS/queue.c **** 
 3123              		.loc 1 1867 13 is_stmt 1 view .LVU904
 3124 0038 3046     		mov	r0, r6
 3125 003a FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 3126              	.LVL290:
 3127 003e 8246     		mov	r10, r0
 3128 0040 2046     		mov	r0, r4
 3129 0042 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 3130              	.LVL291:
 3131 0046 0246     		mov	r2, r0
 3132 0048 2B46     		mov	r3, r5
 3133 004a 5146     		mov	r1, r10
 3134 004c 6220     		movs	r0, #98
 3135 004e FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x3
 3136              	.LVL292:
1869:FreeRTOS/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 3137              		.loc 1 1869 13 view .LVU905
 3138 0052 2146     		mov	r1, r4
 3139 0054 3046     		mov	r0, r6
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 117


 3140 0056 FFF7FEFF 		bl	prvCopyDataFromQueue
 3141              	.LVL293:
1870:FreeRTOS/queue.c **** 
 3142              		.loc 1 1870 13 view .LVU906
1870:FreeRTOS/queue.c **** 
 3143              		.loc 1 1870 60 is_stmt 0 view .LVU907
 3144 005a 013F     		subs	r7, r7, #1
 3145              	.LVL294:
1870:FreeRTOS/queue.c **** 
 3146              		.loc 1 1870 40 view .LVU908
 3147 005c B763     		str	r7, [r6, #56]
1876:FreeRTOS/queue.c ****             {
 3148              		.loc 1 1876 13 is_stmt 1 view .LVU909
1876:FreeRTOS/queue.c ****             {
 3149              		.loc 1 1876 15 is_stmt 0 view .LVU910
 3150 005e B8F1FF3F 		cmp	r8, #-1
 3151 0062 1ED0     		beq	.L228
1907:FreeRTOS/queue.c **** 
 3152              		.loc 1 1907 17 is_stmt 1 view .LVU911
 3153 0064 B8F17F0F 		cmp	r8, #127
 3154 0068 28D0     		beq	.L229
1907:FreeRTOS/queue.c **** 
 3155              		.loc 1 1907 57 discriminator 2 view .LVU912
1909:FreeRTOS/queue.c ****             }
 3156              		.loc 1 1909 17 discriminator 2 view .LVU913
1909:FreeRTOS/queue.c ****             }
 3157              		.loc 1 1909 57 is_stmt 0 discriminator 2 view .LVU914
 3158 006a 08F10103 		add	r3, r8, #1
1909:FreeRTOS/queue.c ****             }
 3159              		.loc 1 1909 36 discriminator 2 view .LVU915
 3160 006e 5BB2     		sxtb	r3, r3
1909:FreeRTOS/queue.c ****             }
 3161              		.loc 1 1909 34 discriminator 2 view .LVU916
 3162 0070 86F84430 		strb	r3, [r6, #68]
1912:FreeRTOS/queue.c ****         }
 3163              		.loc 1 1912 21 discriminator 2 view .LVU917
 3164 0074 0120     		movs	r0, #1
 3165 0076 38E0     		b	.L218
 3166              	.LVL295:
 3167              	.L226:
 3168              	.LCFI32:
 3169              		.cfi_def_cfa_offset 0
 3170              		.cfi_restore 4
 3171              		.cfi_restore 5
 3172              		.cfi_restore 6
 3173              		.cfi_restore 7
 3174              		.cfi_restore 8
 3175              		.cfi_restore 9
 3176              		.cfi_restore 10
 3177              		.cfi_restore 14
1912:FreeRTOS/queue.c ****         }
 3178              		.loc 1 1912 21 discriminator 2 view .LVU918
 3179              	.LBE164:
 3180              	.LBE163:
1839:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3181              		.loc 1 1839 5 is_stmt 1 view .LVU919
 3182              	.LBB169:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 118


 3183              	.LBI169:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3184              		.loc 2 193 34 view .LVU920
 3185              	.LBB170:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3186              		.loc 2 195 9 view .LVU921
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3187              		.loc 2 197 9 view .LVU922
 3188              		.syntax unified
 3189              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3190 0078 4FF05003 			mov r3, #80												
 3191 007c 83F31188 		msr basepri, r3											
 3192 0080 BFF36F8F 		isb														
 3193 0084 BFF34F8F 		dsb														
 3194              	
 3195              	@ 0 "" 2
 3196              	.LVL296:
 3197              		.thumb
 3198              		.syntax unified
 3199              	.L213:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3200              		.loc 2 197 9 is_stmt 0 view .LVU923
 3201              	.LBE170:
 3202              	.LBE169:
1839:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3203              		.loc 1 1839 5 is_stmt 1 discriminator 1 view .LVU924
1839:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3204              		.loc 1 1839 5 discriminator 1 view .LVU925
1839:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3205              		.loc 1 1839 5 discriminator 1 view .LVU926
 3206 0088 FEE7     		b	.L213
 3207              	.L227:
 3208              	.LCFI33:
 3209              		.cfi_def_cfa_offset 32
 3210              		.cfi_offset 4, -32
 3211              		.cfi_offset 5, -28
 3212              		.cfi_offset 6, -24
 3213              		.cfi_offset 7, -20
 3214              		.cfi_offset 8, -16
 3215              		.cfi_offset 9, -12
 3216              		.cfi_offset 10, -8
 3217              		.cfi_offset 14, -4
1840:FreeRTOS/queue.c **** 
 3218              		.loc 1 1840 5 is_stmt 0 discriminator 2 view .LVU927
 3219 008a 036C     		ldr	r3, [r0, #64]
 3220 008c 002B     		cmp	r3, #0
 3221 008e C0D0     		beq	.L214
1840:FreeRTOS/queue.c **** 
 3222              		.loc 1 1840 5 is_stmt 1 view .LVU928
 3223              	.LBB171:
 3224              	.LBI171:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3225              		.loc 2 193 34 view .LVU929
 3226              	.LBB172:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3227              		.loc 2 195 9 view .LVU930
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 119


 3228              		.loc 2 197 9 view .LVU931
 3229              		.syntax unified
 3230              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3231 0090 4FF05003 			mov r3, #80												
 3232 0094 83F31188 		msr basepri, r3											
 3233 0098 BFF36F8F 		isb														
 3234 009c BFF34F8F 		dsb														
 3235              	
 3236              	@ 0 "" 2
 3237              	.LVL297:
 3238              		.thumb
 3239              		.syntax unified
 3240              	.L215:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3241              		.loc 2 197 9 is_stmt 0 view .LVU932
 3242              	.LBE172:
 3243              	.LBE171:
1840:FreeRTOS/queue.c **** 
 3244              		.loc 1 1840 5 is_stmt 1 discriminator 2 view .LVU933
1840:FreeRTOS/queue.c **** 
 3245              		.loc 1 1840 5 discriminator 2 view .LVU934
1840:FreeRTOS/queue.c **** 
 3246              		.loc 1 1840 5 discriminator 2 view .LVU935
 3247 00a0 FEE7     		b	.L215
 3248              	.LVL298:
 3249              	.L228:
 3250              	.LBB173:
 3251              	.LBB167:
1878:FreeRTOS/queue.c ****                 {
 3252              		.loc 1 1878 17 view .LVU936
1878:FreeRTOS/queue.c ****                 {
 3253              		.loc 1 1878 21 is_stmt 0 view .LVU937
 3254 00a2 3369     		ldr	r3, [r6, #16]
1878:FreeRTOS/queue.c ****                 {
 3255              		.loc 1 1878 19 view .LVU938
 3256 00a4 0BB9     		cbnz	r3, .L230
1912:FreeRTOS/queue.c ****         }
 3257              		.loc 1 1912 21 view .LVU939
 3258 00a6 0120     		movs	r0, #1
 3259 00a8 1FE0     		b	.L218
 3260              	.L230:
1880:FreeRTOS/queue.c ****                     {
 3261              		.loc 1 1880 21 is_stmt 1 view .LVU940
1880:FreeRTOS/queue.c ****                     {
 3262              		.loc 1 1880 25 is_stmt 0 view .LVU941
 3263 00aa 06F11000 		add	r0, r6, #16
 3264 00ae FFF7FEFF 		bl	xTaskRemoveFromEventList
 3265              	.LVL299:
1880:FreeRTOS/queue.c ****                     {
 3266              		.loc 1 1880 23 view .LVU942
 3267 00b2 F0B1     		cbz	r0, .L222
1884:FreeRTOS/queue.c ****                         {
 3268              		.loc 1 1884 25 is_stmt 1 view .LVU943
1884:FreeRTOS/queue.c ****                         {
 3269              		.loc 1 1884 27 is_stmt 0 view .LVU944
 3270 00b4 FDB1     		cbz	r5, .L223
1886:FreeRTOS/queue.c ****                         }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 120


 3271              		.loc 1 1886 29 is_stmt 1 view .LVU945
1886:FreeRTOS/queue.c ****                         }
 3272              		.loc 1 1886 56 is_stmt 0 view .LVU946
 3273 00b6 0120     		movs	r0, #1
 3274 00b8 2860     		str	r0, [r5]
 3275 00ba 16E0     		b	.L218
 3276              	.L229:
1907:FreeRTOS/queue.c **** 
 3277              		.loc 1 1907 17 is_stmt 1 view .LVU947
 3278              	.LBB165:
 3279              	.LBI165:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3280              		.loc 2 193 34 view .LVU948
 3281              	.LBB166:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3282              		.loc 2 195 9 view .LVU949
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3283              		.loc 2 197 9 view .LVU950
 3284              		.syntax unified
 3285              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3286 00bc 4FF05003 			mov r3, #80												
 3287 00c0 83F31188 		msr basepri, r3											
 3288 00c4 BFF36F8F 		isb														
 3289 00c8 BFF34F8F 		dsb														
 3290              	
 3291              	@ 0 "" 2
 3292              	.LVL300:
 3293              		.thumb
 3294              		.syntax unified
 3295              	.L220:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3296              		.loc 2 197 9 is_stmt 0 view .LVU951
 3297              	.LBE166:
 3298              	.LBE165:
1907:FreeRTOS/queue.c **** 
 3299              		.loc 1 1907 17 is_stmt 1 discriminator 5 view .LVU952
1907:FreeRTOS/queue.c **** 
 3300              		.loc 1 1907 17 discriminator 5 view .LVU953
1907:FreeRTOS/queue.c **** 
 3301              		.loc 1 1907 17 discriminator 5 view .LVU954
 3302 00cc FEE7     		b	.L220
 3303              	.LVL301:
 3304              	.L216:
1907:FreeRTOS/queue.c **** 
 3305              		.loc 1 1907 17 is_stmt 0 discriminator 5 view .LVU955
 3306              	.LBE167:
1916:FreeRTOS/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 3307              		.loc 1 1916 13 is_stmt 1 view .LVU956
1917:FreeRTOS/queue.c ****         }
 3308              		.loc 1 1917 13 view .LVU957
 3309 00ce 3046     		mov	r0, r6
 3310 00d0 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 3311              	.LVL302:
 3312 00d4 0646     		mov	r6, r0
 3313              	.LVL303:
1917:FreeRTOS/queue.c ****         }
 3314              		.loc 1 1917 13 is_stmt 0 view .LVU958
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 121


 3315 00d6 2046     		mov	r0, r4
 3316 00d8 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 3317              	.LVL304:
 3318 00dc 0246     		mov	r2, r0
 3319 00de 2B46     		mov	r3, r5
 3320 00e0 3146     		mov	r1, r6
 3321 00e2 6220     		movs	r0, #98
 3322 00e4 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x3
 3323              	.LVL305:
1916:FreeRTOS/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 3324              		.loc 1 1916 21 view .LVU959
 3325 00e8 0020     		movs	r0, #0
 3326              	.LVL306:
 3327              	.L218:
1916:FreeRTOS/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 3328              		.loc 1 1916 21 view .LVU960
 3329              	.LBE173:
1920:FreeRTOS/queue.c **** 
 3330              		.loc 1 1920 5 is_stmt 1 view .LVU961
 3331              	.LBB174:
 3332              	.LBI174:
 229:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3333              		.loc 2 229 34 view .LVU962
 3334              	.LBB175:
 3335              		.loc 2 231 9 view .LVU963
 3336              		.syntax unified
 3337              	@ 231 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3338 00ea 89F31188 			msr basepri, r9	
 3339              	@ 0 "" 2
 3340              	.LVL307:
 3341              		.loc 2 231 9 is_stmt 0 view .LVU964
 3342              		.thumb
 3343              		.syntax unified
 3344              	.LBE175:
 3345              	.LBE174:
1922:FreeRTOS/queue.c **** }
 3346              		.loc 1 1922 5 is_stmt 1 view .LVU965
1923:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 3347              		.loc 1 1923 1 is_stmt 0 view .LVU966
 3348 00ee BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 3349              	.LVL308:
 3350              	.L222:
 3351              	.LBB176:
 3352              	.LBB168:
1912:FreeRTOS/queue.c ****         }
 3353              		.loc 1 1912 21 view .LVU967
 3354 00f2 0120     		movs	r0, #1
 3355 00f4 F9E7     		b	.L218
 3356              	.L223:
 3357 00f6 0120     		movs	r0, #1
 3358 00f8 F7E7     		b	.L218
 3359              	.LBE168:
 3360              	.LBE176:
 3361              		.cfi_endproc
 3362              	.LFE14:
 3364              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 3365              		.align	1
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 122


 3366              		.global	xQueuePeekFromISR
 3367              		.syntax unified
 3368              		.thumb
 3369              		.thumb_func
 3371              	xQueuePeekFromISR:
 3372              	.LVL309:
 3373              	.LFB15:
1928:FreeRTOS/queue.c ****     BaseType_t xReturn;
 3374              		.loc 1 1928 1 is_stmt 1 view -0
 3375              		.cfi_startproc
 3376              		@ args = 0, pretend = 0, frame = 0
 3377              		@ frame_needed = 0, uses_anonymous_args = 0
1928:FreeRTOS/queue.c ****     BaseType_t xReturn;
 3378              		.loc 1 1928 1 is_stmt 0 view .LVU969
 3379 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3380              	.LCFI34:
 3381              		.cfi_def_cfa_offset 24
 3382              		.cfi_offset 3, -24
 3383              		.cfi_offset 4, -20
 3384              		.cfi_offset 5, -16
 3385              		.cfi_offset 6, -12
 3386              		.cfi_offset 7, -8
 3387              		.cfi_offset 14, -4
1929:FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
 3388              		.loc 1 1929 5 is_stmt 1 view .LVU970
1930:FreeRTOS/queue.c ****     int8_t * pcOriginalReadPosition;
 3389              		.loc 1 1930 5 view .LVU971
1931:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 3390              		.loc 1 1931 5 view .LVU972
1932:FreeRTOS/queue.c **** 
 3391              		.loc 1 1932 5 view .LVU973
 3392              	.LVL310:
1934:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3393              		.loc 1 1934 5 view .LVU974
 3394 0002 68B1     		cbz	r0, .L241
 3395 0004 0D46     		mov	r5, r1
 3396 0006 0446     		mov	r4, r0
1934:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3397              		.loc 1 1934 28 discriminator 2 view .LVU975
1935:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 3398              		.loc 1 1935 5 discriminator 2 view .LVU976
 3399 0008 99B1     		cbz	r1, .L242
 3400              	.L234:
1935:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 3401              		.loc 1 1935 95 discriminator 8 view .LVU977
1936:FreeRTOS/queue.c **** 
 3402              		.loc 1 1936 5 discriminator 8 view .LVU978
 3403 000a 236C     		ldr	r3, [r4, #64]
 3404 000c EBB9     		cbnz	r3, .L236
1936:FreeRTOS/queue.c **** 
 3405              		.loc 1 1936 5 view .LVU979
 3406              	.LBB177:
 3407              	.LBI177:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3408              		.loc 2 193 34 view .LVU980
 3409              	.LBB178:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 123


 3410              		.loc 2 195 9 view .LVU981
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3411              		.loc 2 197 9 view .LVU982
 3412              		.syntax unified
 3413              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3414 000e 4FF05003 			mov r3, #80												
 3415 0012 83F31188 		msr basepri, r3											
 3416 0016 BFF36F8F 		isb														
 3417 001a BFF34F8F 		dsb														
 3418              	
 3419              	@ 0 "" 2
 3420              	.LVL311:
 3421              		.thumb
 3422              		.syntax unified
 3423              	.L237:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3424              		.loc 2 197 9 is_stmt 0 view .LVU983
 3425              	.LBE178:
 3426              	.LBE177:
1936:FreeRTOS/queue.c **** 
 3427              		.loc 1 1936 5 is_stmt 1 discriminator 3 view .LVU984
1936:FreeRTOS/queue.c **** 
 3428              		.loc 1 1936 5 discriminator 3 view .LVU985
1936:FreeRTOS/queue.c **** 
 3429              		.loc 1 1936 5 discriminator 3 view .LVU986
 3430 001e FEE7     		b	.L237
 3431              	.L241:
1934:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3432              		.loc 1 1934 5 view .LVU987
 3433              	.LBB179:
 3434              	.LBI179:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3435              		.loc 2 193 34 view .LVU988
 3436              	.LBB180:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3437              		.loc 2 195 9 view .LVU989
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3438              		.loc 2 197 9 view .LVU990
 3439              		.syntax unified
 3440              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3441 0020 4FF05003 			mov r3, #80												
 3442 0024 83F31188 		msr basepri, r3											
 3443 0028 BFF36F8F 		isb														
 3444 002c BFF34F8F 		dsb														
 3445              	
 3446              	@ 0 "" 2
 3447              	.LVL312:
 3448              		.thumb
 3449              		.syntax unified
 3450              	.L233:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3451              		.loc 2 197 9 is_stmt 0 view .LVU991
 3452              	.LBE180:
 3453              	.LBE179:
1934:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3454              		.loc 1 1934 5 is_stmt 1 discriminator 1 view .LVU992
1934:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 124


 3455              		.loc 1 1934 5 discriminator 1 view .LVU993
1934:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3456              		.loc 1 1934 5 discriminator 1 view .LVU994
 3457 0030 FEE7     		b	.L233
 3458              	.L242:
1935:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 3459              		.loc 1 1935 5 is_stmt 0 discriminator 2 view .LVU995
 3460 0032 036C     		ldr	r3, [r0, #64]
 3461 0034 002B     		cmp	r3, #0
 3462 0036 E8D0     		beq	.L234
1935:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 3463              		.loc 1 1935 5 is_stmt 1 view .LVU996
 3464              	.LBB181:
 3465              	.LBI181:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3466              		.loc 2 193 34 view .LVU997
 3467              	.LBB182:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3468              		.loc 2 195 9 view .LVU998
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3469              		.loc 2 197 9 view .LVU999
 3470              		.syntax unified
 3471              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3472 0038 4FF05003 			mov r3, #80												
 3473 003c 83F31188 		msr basepri, r3											
 3474 0040 BFF36F8F 		isb														
 3475 0044 BFF34F8F 		dsb														
 3476              	
 3477              	@ 0 "" 2
 3478              	.LVL313:
 3479              		.thumb
 3480              		.syntax unified
 3481              	.L235:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3482              		.loc 2 197 9 is_stmt 0 view .LVU1000
 3483              	.LBE182:
 3484              	.LBE181:
1935:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 3485              		.loc 1 1935 5 is_stmt 1 discriminator 2 view .LVU1001
1935:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 3486              		.loc 1 1935 5 discriminator 2 view .LVU1002
1935:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 3487              		.loc 1 1935 5 discriminator 2 view .LVU1003
 3488 0048 FEE7     		b	.L235
 3489              	.L236:
1936:FreeRTOS/queue.c **** 
 3490              		.loc 1 1936 45 discriminator 2 view .LVU1004
1952:FreeRTOS/queue.c **** 
 3491              		.loc 1 1952 5 discriminator 2 view .LVU1005
 3492 004a FFF7FEFF 		bl	vPortValidateInterruptPriority
 3493              	.LVL314:
1954:FreeRTOS/queue.c ****     {
 3494              		.loc 1 1954 5 discriminator 2 view .LVU1006
 3495              	.LBB183:
 3496              	.LBI183:
 209:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3497              		.loc 2 209 38 discriminator 2 view .LVU1007
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 125


 3498              	.LBB184:
 211:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3499              		.loc 2 211 9 discriminator 2 view .LVU1008
 213:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3500              		.loc 2 213 9 discriminator 2 view .LVU1009
 3501              		.syntax unified
 3502              	@ 213 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3503 004e EFF31186 			mrs r6, basepri											
 3504 0052 4FF05003 		mov r3, #80												
 3505 0056 83F31188 		msr basepri, r3											
 3506 005a BFF36F8F 		isb														
 3507 005e BFF34F8F 		dsb														
 3508              	
 3509              	@ 0 "" 2
 3510              	.LVL315:
 225:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 3511              		.loc 2 225 9 discriminator 2 view .LVU1010
 225:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 3512              		.loc 2 225 9 is_stmt 0 discriminator 2 view .LVU1011
 3513              		.thumb
 3514              		.syntax unified
 3515              	.LBE184:
 3516              	.LBE183:
1957:FreeRTOS/queue.c ****         {
 3517              		.loc 1 1957 9 is_stmt 1 discriminator 2 view .LVU1012
1957:FreeRTOS/queue.c ****         {
 3518              		.loc 1 1957 20 is_stmt 0 discriminator 2 view .LVU1013
 3519 0062 A36B     		ldr	r3, [r4, #56]
1957:FreeRTOS/queue.c ****         {
 3520              		.loc 1 1957 11 discriminator 2 view .LVU1014
 3521 0064 ABB1     		cbz	r3, .L238
1959:FreeRTOS/queue.c **** 
 3522              		.loc 1 1959 13 is_stmt 1 view .LVU1015
 3523 0066 2046     		mov	r0, r4
 3524 0068 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 3525              	.LVL316:
 3526 006c 0746     		mov	r7, r0
 3527 006e 2846     		mov	r0, r5
 3528 0070 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 3529              	.LVL317:
 3530 0074 0246     		mov	r2, r0
 3531 0076 3946     		mov	r1, r7
 3532 0078 5B20     		movs	r0, #91
 3533 007a FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
 3534              	.LVL318:
1963:FreeRTOS/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
 3535              		.loc 1 1963 13 view .LVU1016
1963:FreeRTOS/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
 3536              		.loc 1 1963 36 is_stmt 0 view .LVU1017
 3537 007e E768     		ldr	r7, [r4, #12]
 3538              	.LVL319:
1964:FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 3539              		.loc 1 1964 13 is_stmt 1 view .LVU1018
 3540 0080 2946     		mov	r1, r5
 3541 0082 2046     		mov	r0, r4
 3542 0084 FFF7FEFF 		bl	prvCopyDataFromQueue
 3543              	.LVL320:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 126


1965:FreeRTOS/queue.c **** 
 3544              		.loc 1 1965 13 view .LVU1019
1965:FreeRTOS/queue.c **** 
 3545              		.loc 1 1965 42 is_stmt 0 view .LVU1020
 3546 0088 E760     		str	r7, [r4, #12]
1967:FreeRTOS/queue.c ****         }
 3547              		.loc 1 1967 13 is_stmt 1 view .LVU1021
 3548              	.LVL321:
1967:FreeRTOS/queue.c ****         }
 3549              		.loc 1 1967 21 is_stmt 0 view .LVU1022
 3550 008a 0120     		movs	r0, #1
 3551              	.LVL322:
 3552              	.L239:
1975:FreeRTOS/queue.c **** 
 3553              		.loc 1 1975 5 is_stmt 1 view .LVU1023
 3554              	.LBB185:
 3555              	.LBI185:
 229:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3556              		.loc 2 229 34 view .LVU1024
 3557              	.LBB186:
 3558              		.loc 2 231 9 view .LVU1025
 3559              		.syntax unified
 3560              	@ 231 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3561 008c 86F31188 			msr basepri, r6	
 3562              	@ 0 "" 2
 3563              	.LVL323:
 3564              		.loc 2 231 9 is_stmt 0 view .LVU1026
 3565              		.thumb
 3566              		.syntax unified
 3567              	.LBE186:
 3568              	.LBE185:
1977:FreeRTOS/queue.c **** }
 3569              		.loc 1 1977 5 is_stmt 1 view .LVU1027
1978:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 3570              		.loc 1 1978 1 is_stmt 0 view .LVU1028
 3571 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3572              	.LVL324:
 3573              	.L238:
1971:FreeRTOS/queue.c ****             traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 3574              		.loc 1 1971 13 is_stmt 1 view .LVU1029
1972:FreeRTOS/queue.c ****         }
 3575              		.loc 1 1972 13 view .LVU1030
 3576 0092 2046     		mov	r0, r4
 3577 0094 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 3578              	.LVL325:
 3579 0098 0446     		mov	r4, r0
 3580              	.LVL326:
1972:FreeRTOS/queue.c ****         }
 3581              		.loc 1 1972 13 is_stmt 0 view .LVU1031
 3582 009a 2846     		mov	r0, r5
 3583 009c FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 3584              	.LVL327:
 3585 00a0 0246     		mov	r2, r0
 3586 00a2 2146     		mov	r1, r4
 3587 00a4 5B20     		movs	r0, #91
 3588 00a6 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
 3589              	.LVL328:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 127


1971:FreeRTOS/queue.c ****             traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 3590              		.loc 1 1971 21 view .LVU1032
 3591 00aa 0020     		movs	r0, #0
 3592 00ac EEE7     		b	.L239
 3593              		.cfi_endproc
 3594              	.LFE15:
 3596              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 3597              		.align	1
 3598              		.global	uxQueueMessagesWaiting
 3599              		.syntax unified
 3600              		.thumb
 3601              		.thumb_func
 3603              	uxQueueMessagesWaiting:
 3604              	.LVL329:
 3605              	.LFB16:
1982:FreeRTOS/queue.c ****     UBaseType_t uxReturn;
 3606              		.loc 1 1982 1 is_stmt 1 view -0
 3607              		.cfi_startproc
 3608              		@ args = 0, pretend = 0, frame = 0
 3609              		@ frame_needed = 0, uses_anonymous_args = 0
1983:FreeRTOS/queue.c **** 
 3610              		.loc 1 1983 5 view .LVU1034
1985:FreeRTOS/queue.c **** 
 3611              		.loc 1 1985 5 view .LVU1035
 3612 0000 40B1     		cbz	r0, .L248
1982:FreeRTOS/queue.c ****     UBaseType_t uxReturn;
 3613              		.loc 1 1982 1 is_stmt 0 discriminator 2 view .LVU1036
 3614 0002 10B5     		push	{r4, lr}
 3615              	.LCFI35:
 3616              		.cfi_def_cfa_offset 8
 3617              		.cfi_offset 4, -8
 3618              		.cfi_offset 14, -4
 3619 0004 0446     		mov	r4, r0
1985:FreeRTOS/queue.c **** 
 3620              		.loc 1 1985 27 is_stmt 1 discriminator 2 view .LVU1037
1987:FreeRTOS/queue.c ****     {
 3621              		.loc 1 1987 5 discriminator 2 view .LVU1038
 3622 0006 FFF7FEFF 		bl	vPortEnterCritical
 3623              	.LVL330:
1989:FreeRTOS/queue.c ****     }
 3624              		.loc 1 1989 9 discriminator 2 view .LVU1039
1989:FreeRTOS/queue.c ****     }
 3625              		.loc 1 1989 18 is_stmt 0 discriminator 2 view .LVU1040
 3626 000a A46B     		ldr	r4, [r4, #56]
 3627              	.LVL331:
1991:FreeRTOS/queue.c **** 
 3628              		.loc 1 1991 5 is_stmt 1 discriminator 2 view .LVU1041
 3629 000c FFF7FEFF 		bl	vPortExitCritical
 3630              	.LVL332:
1993:FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 3631              		.loc 1 1993 5 discriminator 2 view .LVU1042
1994:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 3632              		.loc 1 1994 1 is_stmt 0 discriminator 2 view .LVU1043
 3633 0010 2046     		mov	r0, r4
 3634 0012 10BD     		pop	{r4, pc}
 3635              	.LVL333:
 3636              	.L248:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 128


 3637              	.LCFI36:
 3638              		.cfi_def_cfa_offset 0
 3639              		.cfi_restore 4
 3640              		.cfi_restore 14
1985:FreeRTOS/queue.c **** 
 3641              		.loc 1 1985 5 is_stmt 1 view .LVU1044
 3642              	.LBB187:
 3643              	.LBI187:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3644              		.loc 2 193 34 view .LVU1045
 3645              	.LBB188:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3646              		.loc 2 195 9 view .LVU1046
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3647              		.loc 2 197 9 view .LVU1047
 3648              		.syntax unified
 3649              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3650 0014 4FF05003 			mov r3, #80												
 3651 0018 83F31188 		msr basepri, r3											
 3652 001c BFF36F8F 		isb														
 3653 0020 BFF34F8F 		dsb														
 3654              	
 3655              	@ 0 "" 2
 3656              	.LVL334:
 3657              		.thumb
 3658              		.syntax unified
 3659              	.L245:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3660              		.loc 2 197 9 is_stmt 0 view .LVU1048
 3661              	.LBE188:
 3662              	.LBE187:
1985:FreeRTOS/queue.c **** 
 3663              		.loc 1 1985 5 is_stmt 1 discriminator 1 view .LVU1049
1985:FreeRTOS/queue.c **** 
 3664              		.loc 1 1985 5 discriminator 1 view .LVU1050
1985:FreeRTOS/queue.c **** 
 3665              		.loc 1 1985 5 discriminator 1 view .LVU1051
 3666 0024 FEE7     		b	.L245
 3667              		.cfi_endproc
 3668              	.LFE16:
 3670              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 3671              		.align	1
 3672              		.global	uxQueueSpacesAvailable
 3673              		.syntax unified
 3674              		.thumb
 3675              		.thumb_func
 3677              	uxQueueSpacesAvailable:
 3678              	.LVL335:
 3679              	.LFB17:
1998:FreeRTOS/queue.c ****     UBaseType_t uxReturn;
 3680              		.loc 1 1998 1 view -0
 3681              		.cfi_startproc
 3682              		@ args = 0, pretend = 0, frame = 0
 3683              		@ frame_needed = 0, uses_anonymous_args = 0
1998:FreeRTOS/queue.c ****     UBaseType_t uxReturn;
 3684              		.loc 1 1998 1 is_stmt 0 view .LVU1053
 3685 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 129


 3686              	.LCFI37:
 3687              		.cfi_def_cfa_offset 16
 3688              		.cfi_offset 3, -16
 3689              		.cfi_offset 4, -12
 3690              		.cfi_offset 5, -8
 3691              		.cfi_offset 14, -4
1999:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 3692              		.loc 1 1999 5 is_stmt 1 view .LVU1054
2000:FreeRTOS/queue.c **** 
 3693              		.loc 1 2000 5 view .LVU1055
 3694              	.LVL336:
2002:FreeRTOS/queue.c **** 
 3695              		.loc 1 2002 5 view .LVU1056
 3696 0002 48B1     		cbz	r0, .L253
 3697 0004 0546     		mov	r5, r0
2002:FreeRTOS/queue.c **** 
 3698              		.loc 1 2002 28 discriminator 2 view .LVU1057
2004:FreeRTOS/queue.c ****     {
 3699              		.loc 1 2004 5 discriminator 2 view .LVU1058
 3700 0006 FFF7FEFF 		bl	vPortEnterCritical
 3701              	.LVL337:
2006:FreeRTOS/queue.c ****     }
 3702              		.loc 1 2006 9 discriminator 2 view .LVU1059
2006:FreeRTOS/queue.c ****     }
 3703              		.loc 1 2006 27 is_stmt 0 discriminator 2 view .LVU1060
 3704 000a EC6B     		ldr	r4, [r5, #60]
2006:FreeRTOS/queue.c ****     }
 3705              		.loc 1 2006 47 discriminator 2 view .LVU1061
 3706 000c AB6B     		ldr	r3, [r5, #56]
2006:FreeRTOS/queue.c ****     }
 3707              		.loc 1 2006 18 discriminator 2 view .LVU1062
 3708 000e E41A     		subs	r4, r4, r3
 3709              	.LVL338:
2008:FreeRTOS/queue.c **** 
 3710              		.loc 1 2008 5 is_stmt 1 discriminator 2 view .LVU1063
 3711 0010 FFF7FEFF 		bl	vPortExitCritical
 3712              	.LVL339:
2010:FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 3713              		.loc 1 2010 5 discriminator 2 view .LVU1064
2011:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 3714              		.loc 1 2011 1 is_stmt 0 discriminator 2 view .LVU1065
 3715 0014 2046     		mov	r0, r4
 3716 0016 38BD     		pop	{r3, r4, r5, pc}
 3717              	.LVL340:
 3718              	.L253:
2002:FreeRTOS/queue.c **** 
 3719              		.loc 1 2002 5 is_stmt 1 view .LVU1066
 3720              	.LBB189:
 3721              	.LBI189:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3722              		.loc 2 193 34 view .LVU1067
 3723              	.LBB190:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3724              		.loc 2 195 9 view .LVU1068
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3725              		.loc 2 197 9 view .LVU1069
 3726              		.syntax unified
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 130


 3727              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3728 0018 4FF05003 			mov r3, #80												
 3729 001c 83F31188 		msr basepri, r3											
 3730 0020 BFF36F8F 		isb														
 3731 0024 BFF34F8F 		dsb														
 3732              	
 3733              	@ 0 "" 2
 3734              	.LVL341:
 3735              		.thumb
 3736              		.syntax unified
 3737              	.L251:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3738              		.loc 2 197 9 is_stmt 0 view .LVU1070
 3739              	.LBE190:
 3740              	.LBE189:
2002:FreeRTOS/queue.c **** 
 3741              		.loc 1 2002 5 is_stmt 1 discriminator 1 view .LVU1071
2002:FreeRTOS/queue.c **** 
 3742              		.loc 1 2002 5 discriminator 1 view .LVU1072
2002:FreeRTOS/queue.c **** 
 3743              		.loc 1 2002 5 discriminator 1 view .LVU1073
 3744 0028 FEE7     		b	.L251
 3745              		.cfi_endproc
 3746              	.LFE17:
 3748              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 3749              		.align	1
 3750              		.global	uxQueueMessagesWaitingFromISR
 3751              		.syntax unified
 3752              		.thumb
 3753              		.thumb_func
 3755              	uxQueueMessagesWaitingFromISR:
 3756              	.LVL342:
 3757              	.LFB18:
2015:FreeRTOS/queue.c ****     UBaseType_t uxReturn;
 3758              		.loc 1 2015 1 view -0
 3759              		.cfi_startproc
 3760              		@ args = 0, pretend = 0, frame = 0
 3761              		@ frame_needed = 0, uses_anonymous_args = 0
 3762              		@ link register save eliminated.
2016:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 3763              		.loc 1 2016 5 view .LVU1075
2017:FreeRTOS/queue.c **** 
 3764              		.loc 1 2017 5 view .LVU1076
2019:FreeRTOS/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
 3765              		.loc 1 2019 5 view .LVU1077
 3766 0000 08B1     		cbz	r0, .L257
2019:FreeRTOS/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
 3767              		.loc 1 2019 28 discriminator 2 view .LVU1078
2020:FreeRTOS/queue.c **** 
 3768              		.loc 1 2020 5 discriminator 2 view .LVU1079
2020:FreeRTOS/queue.c **** 
 3769              		.loc 1 2020 14 is_stmt 0 discriminator 2 view .LVU1080
 3770 0002 806B     		ldr	r0, [r0, #56]
 3771              	.LVL343:
2022:FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 3772              		.loc 1 2022 5 is_stmt 1 discriminator 2 view .LVU1081
2023:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 131


 3773              		.loc 1 2023 1 is_stmt 0 discriminator 2 view .LVU1082
 3774 0004 7047     		bx	lr
 3775              	.LVL344:
 3776              	.L257:
2019:FreeRTOS/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
 3777              		.loc 1 2019 5 is_stmt 1 view .LVU1083
 3778              	.LBB191:
 3779              	.LBI191:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3780              		.loc 2 193 34 view .LVU1084
 3781              	.LBB192:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3782              		.loc 2 195 9 view .LVU1085
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3783              		.loc 2 197 9 view .LVU1086
 3784              		.syntax unified
 3785              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3786 0006 4FF05003 			mov r3, #80												
 3787 000a 83F31188 		msr basepri, r3											
 3788 000e BFF36F8F 		isb														
 3789 0012 BFF34F8F 		dsb														
 3790              	
 3791              	@ 0 "" 2
 3792              	.LVL345:
 3793              		.thumb
 3794              		.syntax unified
 3795              	.L256:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3796              		.loc 2 197 9 is_stmt 0 view .LVU1087
 3797              	.LBE192:
 3798              	.LBE191:
2019:FreeRTOS/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
 3799              		.loc 1 2019 5 is_stmt 1 discriminator 1 view .LVU1088
2019:FreeRTOS/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
 3800              		.loc 1 2019 5 discriminator 1 view .LVU1089
2019:FreeRTOS/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
 3801              		.loc 1 2019 5 discriminator 1 view .LVU1090
 3802 0016 FEE7     		b	.L256
 3803              		.cfi_endproc
 3804              	.LFE18:
 3806              		.section	.text.uxQueueGetQueueNumber,"ax",%progbits
 3807              		.align	1
 3808              		.global	uxQueueGetQueueNumber
 3809              		.syntax unified
 3810              		.thumb
 3811              		.thumb_func
 3813              	uxQueueGetQueueNumber:
 3814              	.LVL346:
 3815              	.LFB20:
2071:FreeRTOS/queue.c ****         return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 3816              		.loc 1 2071 5 view -0
 3817              		.cfi_startproc
 3818              		@ args = 0, pretend = 0, frame = 0
 3819              		@ frame_needed = 0, uses_anonymous_args = 0
 3820              		@ link register save eliminated.
2072:FreeRTOS/queue.c ****     }
 3821              		.loc 1 2072 9 view .LVU1092
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 132


2073:FreeRTOS/queue.c **** 
 3822              		.loc 1 2073 5 is_stmt 0 view .LVU1093
 3823 0000 806C     		ldr	r0, [r0, #72]
 3824              	.LVL347:
2073:FreeRTOS/queue.c **** 
 3825              		.loc 1 2073 5 view .LVU1094
 3826 0002 7047     		bx	lr
 3827              		.cfi_endproc
 3828              	.LFE20:
 3830              		.section	.text.vQueueSetQueueNumber,"ax",%progbits
 3831              		.align	1
 3832              		.global	vQueueSetQueueNumber
 3833              		.syntax unified
 3834              		.thumb
 3835              		.thumb_func
 3837              	vQueueSetQueueNumber:
 3838              	.LVL348:
 3839              	.LFB21:
2082:FreeRTOS/queue.c ****         ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 3840              		.loc 1 2082 5 is_stmt 1 view -0
 3841              		.cfi_startproc
 3842              		@ args = 0, pretend = 0, frame = 0
 3843              		@ frame_needed = 0, uses_anonymous_args = 0
 3844              		@ link register save eliminated.
2083:FreeRTOS/queue.c ****     }
 3845              		.loc 1 2083 9 view .LVU1096
2083:FreeRTOS/queue.c ****     }
 3846              		.loc 1 2083 49 is_stmt 0 view .LVU1097
 3847 0000 8164     		str	r1, [r0, #72]
2084:FreeRTOS/queue.c **** 
 3848              		.loc 1 2084 5 view .LVU1098
 3849 0002 7047     		bx	lr
 3850              		.cfi_endproc
 3851              	.LFE21:
 3853              		.section	.text.ucQueueGetQueueType,"ax",%progbits
 3854              		.align	1
 3855              		.global	ucQueueGetQueueType
 3856              		.syntax unified
 3857              		.thumb
 3858              		.thumb_func
 3860              	ucQueueGetQueueType:
 3861              	.LVL349:
 3862              	.LFB22:
2092:FreeRTOS/queue.c ****         return ( ( Queue_t * ) xQueue )->ucQueueType;
 3863              		.loc 1 2092 5 is_stmt 1 view -0
 3864              		.cfi_startproc
 3865              		@ args = 0, pretend = 0, frame = 0
 3866              		@ frame_needed = 0, uses_anonymous_args = 0
 3867              		@ link register save eliminated.
2093:FreeRTOS/queue.c ****     }
 3868              		.loc 1 2093 9 view .LVU1100
2094:FreeRTOS/queue.c **** 
 3869              		.loc 1 2094 5 is_stmt 0 view .LVU1101
 3870 0000 90F84C00 		ldrb	r0, [r0, #76]	@ zero_extendqisi2
 3871              	.LVL350:
2094:FreeRTOS/queue.c **** 
 3872              		.loc 1 2094 5 view .LVU1102
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 133


 3873 0004 7047     		bx	lr
 3874              		.cfi_endproc
 3875              	.LFE22:
 3877              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 3878              		.align	1
 3879              		.global	xQueueIsQueueEmptyFromISR
 3880              		.syntax unified
 3881              		.thumb
 3882              		.thumb_func
 3884              	xQueueIsQueueEmptyFromISR:
 3885              	.LVL351:
 3886              	.LFB27:
2372:FreeRTOS/queue.c ****     BaseType_t xReturn;
 3887              		.loc 1 2372 1 is_stmt 1 view -0
 3888              		.cfi_startproc
 3889              		@ args = 0, pretend = 0, frame = 0
 3890              		@ frame_needed = 0, uses_anonymous_args = 0
 3891              		@ link register save eliminated.
2373:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 3892              		.loc 1 2373 5 view .LVU1104
2374:FreeRTOS/queue.c **** 
 3893              		.loc 1 2374 5 view .LVU1105
2376:FreeRTOS/queue.c **** 
 3894              		.loc 1 2376 5 view .LVU1106
 3895 0000 18B1     		cbz	r0, .L266
2376:FreeRTOS/queue.c **** 
 3896              		.loc 1 2376 28 discriminator 2 view .LVU1107
2378:FreeRTOS/queue.c ****     {
 3897              		.loc 1 2378 5 discriminator 2 view .LVU1108
2378:FreeRTOS/queue.c ****     {
 3898              		.loc 1 2378 16 is_stmt 0 discriminator 2 view .LVU1109
 3899 0002 836B     		ldr	r3, [r0, #56]
2378:FreeRTOS/queue.c ****     {
 3900              		.loc 1 2378 7 discriminator 2 view .LVU1110
 3901 0004 53B9     		cbnz	r3, .L265
2380:FreeRTOS/queue.c ****     }
 3902              		.loc 1 2380 17 view .LVU1111
 3903 0006 0120     		movs	r0, #1
 3904              	.LVL352:
2380:FreeRTOS/queue.c ****     }
 3905              		.loc 1 2380 17 view .LVU1112
 3906 0008 7047     		bx	lr
 3907              	.LVL353:
 3908              	.L266:
2376:FreeRTOS/queue.c **** 
 3909              		.loc 1 2376 5 is_stmt 1 view .LVU1113
 3910              	.LBB193:
 3911              	.LBI193:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3912              		.loc 2 193 34 view .LVU1114
 3913              	.LBB194:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3914              		.loc 2 195 9 view .LVU1115
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3915              		.loc 2 197 9 view .LVU1116
 3916              		.syntax unified
 3917              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 134


 3918 000a 4FF05003 			mov r3, #80												
 3919 000e 83F31188 		msr basepri, r3											
 3920 0012 BFF36F8F 		isb														
 3921 0016 BFF34F8F 		dsb														
 3922              	
 3923              	@ 0 "" 2
 3924              	.LVL354:
 3925              		.thumb
 3926              		.syntax unified
 3927              	.L263:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3928              		.loc 2 197 9 is_stmt 0 view .LVU1117
 3929              	.LBE194:
 3930              	.LBE193:
2376:FreeRTOS/queue.c **** 
 3931              		.loc 1 2376 5 is_stmt 1 discriminator 1 view .LVU1118
2376:FreeRTOS/queue.c **** 
 3932              		.loc 1 2376 5 discriminator 1 view .LVU1119
2376:FreeRTOS/queue.c **** 
 3933              		.loc 1 2376 5 discriminator 1 view .LVU1120
 3934 001a FEE7     		b	.L263
 3935              	.L265:
2384:FreeRTOS/queue.c ****     }
 3936              		.loc 1 2384 17 is_stmt 0 view .LVU1121
 3937 001c 0020     		movs	r0, #0
 3938              	.LVL355:
2387:FreeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3939              		.loc 1 2387 5 is_stmt 1 view .LVU1122
2388:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 3940              		.loc 1 2388 1 is_stmt 0 view .LVU1123
 3941 001e 7047     		bx	lr
 3942              		.cfi_endproc
 3943              	.LFE27:
 3945              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 3946              		.align	1
 3947              		.global	xQueueIsQueueFullFromISR
 3948              		.syntax unified
 3949              		.thumb
 3950              		.thumb_func
 3952              	xQueueIsQueueFullFromISR:
 3953              	.LVL356:
 3954              	.LFB29:
2410:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2411:FreeRTOS/queue.c **** 
2412:FreeRTOS/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2413:FreeRTOS/queue.c **** {
 3955              		.loc 1 2413 1 is_stmt 1 view -0
 3956              		.cfi_startproc
 3957              		@ args = 0, pretend = 0, frame = 0
 3958              		@ frame_needed = 0, uses_anonymous_args = 0
 3959              		@ link register save eliminated.
2414:FreeRTOS/queue.c ****     BaseType_t xReturn;
 3960              		.loc 1 2414 5 view .LVU1125
2415:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 3961              		.loc 1 2415 5 view .LVU1126
2416:FreeRTOS/queue.c **** 
2417:FreeRTOS/queue.c ****     configASSERT( pxQueue );
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 135


 3962              		.loc 1 2417 5 view .LVU1127
 3963 0000 28B1     		cbz	r0, .L272
 3964              		.loc 1 2417 28 discriminator 2 view .LVU1128
2418:FreeRTOS/queue.c **** 
2419:FreeRTOS/queue.c ****     if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 3965              		.loc 1 2419 5 discriminator 2 view .LVU1129
 3966              		.loc 1 2419 16 is_stmt 0 discriminator 2 view .LVU1130
 3967 0002 826B     		ldr	r2, [r0, #56]
 3968              		.loc 1 2419 46 discriminator 2 view .LVU1131
 3969 0004 C36B     		ldr	r3, [r0, #60]
 3970              		.loc 1 2419 7 discriminator 2 view .LVU1132
 3971 0006 9A42     		cmp	r2, r3
 3972 0008 0AD0     		beq	.L273
2420:FreeRTOS/queue.c ****     {
2421:FreeRTOS/queue.c ****         xReturn = pdTRUE;
2422:FreeRTOS/queue.c ****     }
2423:FreeRTOS/queue.c ****     else
2424:FreeRTOS/queue.c ****     {
2425:FreeRTOS/queue.c ****         xReturn = pdFALSE;
 3973              		.loc 1 2425 17 view .LVU1133
 3974 000a 0020     		movs	r0, #0
 3975              	.LVL357:
2426:FreeRTOS/queue.c ****     }
2427:FreeRTOS/queue.c **** 
2428:FreeRTOS/queue.c ****     return xReturn;
 3976              		.loc 1 2428 5 is_stmt 1 view .LVU1134
2429:FreeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3977              		.loc 1 2429 1 is_stmt 0 view .LVU1135
 3978 000c 7047     		bx	lr
 3979              	.LVL358:
 3980              	.L272:
2417:FreeRTOS/queue.c **** 
 3981              		.loc 1 2417 5 is_stmt 1 view .LVU1136
 3982              	.LBB195:
 3983              	.LBI195:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3984              		.loc 2 193 34 view .LVU1137
 3985              	.LBB196:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3986              		.loc 2 195 9 view .LVU1138
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3987              		.loc 2 197 9 view .LVU1139
 3988              		.syntax unified
 3989              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3990 000e 4FF05003 			mov r3, #80												
 3991 0012 83F31188 		msr basepri, r3											
 3992 0016 BFF36F8F 		isb														
 3993 001a BFF34F8F 		dsb														
 3994              	
 3995              	@ 0 "" 2
 3996              	.LVL359:
 3997              		.thumb
 3998              		.syntax unified
 3999              	.L269:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4000              		.loc 2 197 9 is_stmt 0 view .LVU1140
 4001              	.LBE196:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 136


 4002              	.LBE195:
2417:FreeRTOS/queue.c **** 
 4003              		.loc 1 2417 5 is_stmt 1 discriminator 1 view .LVU1141
2417:FreeRTOS/queue.c **** 
 4004              		.loc 1 2417 5 discriminator 1 view .LVU1142
2417:FreeRTOS/queue.c **** 
 4005              		.loc 1 2417 5 discriminator 1 view .LVU1143
 4006 001e FEE7     		b	.L269
 4007              	.L273:
2421:FreeRTOS/queue.c ****     }
 4008              		.loc 1 2421 17 is_stmt 0 view .LVU1144
 4009 0020 0120     		movs	r0, #1
 4010              	.LVL360:
2421:FreeRTOS/queue.c ****     }
 4011              		.loc 1 2421 17 view .LVU1145
 4012 0022 7047     		bx	lr
 4013              		.cfi_endproc
 4014              	.LFE29:
 4016              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 4017              		.align	1
 4018              		.global	vQueueAddToRegistry
 4019              		.syntax unified
 4020              		.thumb
 4021              		.thumb_func
 4023              	vQueueAddToRegistry:
 4024              	.LVL361:
 4025              	.LFB30:
2430:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2431:FreeRTOS/queue.c **** 
2432:FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2433:FreeRTOS/queue.c **** 
2434:FreeRTOS/queue.c ****     BaseType_t xQueueCRSend( QueueHandle_t xQueue,
2435:FreeRTOS/queue.c ****                              const void * pvItemToQueue,
2436:FreeRTOS/queue.c ****                              TickType_t xTicksToWait )
2437:FreeRTOS/queue.c ****     {
2438:FreeRTOS/queue.c ****         BaseType_t xReturn;
2439:FreeRTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2440:FreeRTOS/queue.c **** 
2441:FreeRTOS/queue.c ****         /* If the queue is already full we may have to block.  A critical section
2442:FreeRTOS/queue.c ****          * is required to prevent an interrupt removing something from the queue
2443:FreeRTOS/queue.c ****          * between the check to see if the queue is full and blocking on the queue. */
2444:FreeRTOS/queue.c ****         portDISABLE_INTERRUPTS();
2445:FreeRTOS/queue.c ****         {
2446:FreeRTOS/queue.c ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
2447:FreeRTOS/queue.c ****             {
2448:FreeRTOS/queue.c ****                 /* The queue is full - do we want to block or just leave without
2449:FreeRTOS/queue.c ****                  * posting? */
2450:FreeRTOS/queue.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
2451:FreeRTOS/queue.c ****                 {
2452:FreeRTOS/queue.c ****                     /* As this is called from a coroutine we cannot block directly, but
2453:FreeRTOS/queue.c ****                      * return indicating that we need to block. */
2454:FreeRTOS/queue.c ****                     vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2455:FreeRTOS/queue.c ****                     portENABLE_INTERRUPTS();
2456:FreeRTOS/queue.c ****                     return errQUEUE_BLOCKED;
2457:FreeRTOS/queue.c ****                 }
2458:FreeRTOS/queue.c ****                 else
2459:FreeRTOS/queue.c ****                 {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 137


2460:FreeRTOS/queue.c ****                     portENABLE_INTERRUPTS();
2461:FreeRTOS/queue.c ****                     return errQUEUE_FULL;
2462:FreeRTOS/queue.c ****                 }
2463:FreeRTOS/queue.c ****             }
2464:FreeRTOS/queue.c ****         }
2465:FreeRTOS/queue.c ****         portENABLE_INTERRUPTS();
2466:FreeRTOS/queue.c **** 
2467:FreeRTOS/queue.c ****         portDISABLE_INTERRUPTS();
2468:FreeRTOS/queue.c ****         {
2469:FreeRTOS/queue.c ****             if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2470:FreeRTOS/queue.c ****             {
2471:FreeRTOS/queue.c ****                 /* There is room in the queue, copy the data into the queue. */
2472:FreeRTOS/queue.c ****                 prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2473:FreeRTOS/queue.c ****                 xReturn = pdPASS;
2474:FreeRTOS/queue.c **** 
2475:FreeRTOS/queue.c ****                 /* Were any co-routines waiting for data to become available? */
2476:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2477:FreeRTOS/queue.c ****                 {
2478:FreeRTOS/queue.c ****                     /* In this instance the co-routine could be placed directly
2479:FreeRTOS/queue.c ****                      * into the ready list as we are within a critical section.
2480:FreeRTOS/queue.c ****                      * Instead the same pending ready list mechanism is used as if
2481:FreeRTOS/queue.c ****                      * the event were caused from within an interrupt. */
2482:FreeRTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pd
2483:FreeRTOS/queue.c ****                     {
2484:FreeRTOS/queue.c ****                         /* The co-routine waiting has a higher priority so record
2485:FreeRTOS/queue.c ****                          * that a yield might be appropriate. */
2486:FreeRTOS/queue.c ****                         xReturn = errQUEUE_YIELD;
2487:FreeRTOS/queue.c ****                     }
2488:FreeRTOS/queue.c ****                     else
2489:FreeRTOS/queue.c ****                     {
2490:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2491:FreeRTOS/queue.c ****                     }
2492:FreeRTOS/queue.c ****                 }
2493:FreeRTOS/queue.c ****                 else
2494:FreeRTOS/queue.c ****                 {
2495:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2496:FreeRTOS/queue.c ****                 }
2497:FreeRTOS/queue.c ****             }
2498:FreeRTOS/queue.c ****             else
2499:FreeRTOS/queue.c ****             {
2500:FreeRTOS/queue.c ****                 xReturn = errQUEUE_FULL;
2501:FreeRTOS/queue.c ****             }
2502:FreeRTOS/queue.c ****         }
2503:FreeRTOS/queue.c ****         portENABLE_INTERRUPTS();
2504:FreeRTOS/queue.c **** 
2505:FreeRTOS/queue.c ****         return xReturn;
2506:FreeRTOS/queue.c ****     }
2507:FreeRTOS/queue.c **** 
2508:FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2509:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2510:FreeRTOS/queue.c **** 
2511:FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2512:FreeRTOS/queue.c **** 
2513:FreeRTOS/queue.c ****     BaseType_t xQueueCRReceive( QueueHandle_t xQueue,
2514:FreeRTOS/queue.c ****                                 void * pvBuffer,
2515:FreeRTOS/queue.c ****                                 TickType_t xTicksToWait )
2516:FreeRTOS/queue.c ****     {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 138


2517:FreeRTOS/queue.c ****         BaseType_t xReturn;
2518:FreeRTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2519:FreeRTOS/queue.c **** 
2520:FreeRTOS/queue.c ****         /* If the queue is already empty we may have to block.  A critical section
2521:FreeRTOS/queue.c ****          * is required to prevent an interrupt adding something to the queue
2522:FreeRTOS/queue.c ****          * between the check to see if the queue is empty and blocking on the queue. */
2523:FreeRTOS/queue.c ****         portDISABLE_INTERRUPTS();
2524:FreeRTOS/queue.c ****         {
2525:FreeRTOS/queue.c ****             if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2526:FreeRTOS/queue.c ****             {
2527:FreeRTOS/queue.c ****                 /* There are no messages in the queue, do we want to block or just
2528:FreeRTOS/queue.c ****                  * leave with nothing? */
2529:FreeRTOS/queue.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
2530:FreeRTOS/queue.c ****                 {
2531:FreeRTOS/queue.c ****                     /* As this is a co-routine we cannot block directly, but return
2532:FreeRTOS/queue.c ****                      * indicating that we need to block. */
2533:FreeRTOS/queue.c ****                     vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) 
2534:FreeRTOS/queue.c ****                     portENABLE_INTERRUPTS();
2535:FreeRTOS/queue.c ****                     return errQUEUE_BLOCKED;
2536:FreeRTOS/queue.c ****                 }
2537:FreeRTOS/queue.c ****                 else
2538:FreeRTOS/queue.c ****                 {
2539:FreeRTOS/queue.c ****                     portENABLE_INTERRUPTS();
2540:FreeRTOS/queue.c ****                     return errQUEUE_FULL;
2541:FreeRTOS/queue.c ****                 }
2542:FreeRTOS/queue.c ****             }
2543:FreeRTOS/queue.c ****             else
2544:FreeRTOS/queue.c ****             {
2545:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2546:FreeRTOS/queue.c ****             }
2547:FreeRTOS/queue.c ****         }
2548:FreeRTOS/queue.c ****         portENABLE_INTERRUPTS();
2549:FreeRTOS/queue.c **** 
2550:FreeRTOS/queue.c ****         portDISABLE_INTERRUPTS();
2551:FreeRTOS/queue.c ****         {
2552:FreeRTOS/queue.c ****             if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2553:FreeRTOS/queue.c ****             {
2554:FreeRTOS/queue.c ****                 /* Data is available from the queue. */
2555:FreeRTOS/queue.c ****                 pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2556:FreeRTOS/queue.c **** 
2557:FreeRTOS/queue.c ****                 if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2558:FreeRTOS/queue.c ****                 {
2559:FreeRTOS/queue.c ****                     pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2560:FreeRTOS/queue.c ****                 }
2561:FreeRTOS/queue.c ****                 else
2562:FreeRTOS/queue.c ****                 {
2563:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2564:FreeRTOS/queue.c ****                 }
2565:FreeRTOS/queue.c **** 
2566:FreeRTOS/queue.c ****                 --( pxQueue->uxMessagesWaiting );
2567:FreeRTOS/queue.c ****                 ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( un
2568:FreeRTOS/queue.c **** 
2569:FreeRTOS/queue.c ****                 xReturn = pdPASS;
2570:FreeRTOS/queue.c **** 
2571:FreeRTOS/queue.c ****                 /* Were any co-routines waiting for space to become available? */
2572:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2573:FreeRTOS/queue.c ****                 {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 139


2574:FreeRTOS/queue.c ****                     /* In this instance the co-routine could be placed directly
2575:FreeRTOS/queue.c ****                      * into the ready list as we are within a critical section.
2576:FreeRTOS/queue.c ****                      * Instead the same pending ready list mechanism is used as if
2577:FreeRTOS/queue.c ****                      * the event were caused from within an interrupt. */
2578:FreeRTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFAL
2579:FreeRTOS/queue.c ****                     {
2580:FreeRTOS/queue.c ****                         xReturn = errQUEUE_YIELD;
2581:FreeRTOS/queue.c ****                     }
2582:FreeRTOS/queue.c ****                     else
2583:FreeRTOS/queue.c ****                     {
2584:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2585:FreeRTOS/queue.c ****                     }
2586:FreeRTOS/queue.c ****                 }
2587:FreeRTOS/queue.c ****                 else
2588:FreeRTOS/queue.c ****                 {
2589:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2590:FreeRTOS/queue.c ****                 }
2591:FreeRTOS/queue.c ****             }
2592:FreeRTOS/queue.c ****             else
2593:FreeRTOS/queue.c ****             {
2594:FreeRTOS/queue.c ****                 xReturn = pdFAIL;
2595:FreeRTOS/queue.c ****             }
2596:FreeRTOS/queue.c ****         }
2597:FreeRTOS/queue.c ****         portENABLE_INTERRUPTS();
2598:FreeRTOS/queue.c **** 
2599:FreeRTOS/queue.c ****         return xReturn;
2600:FreeRTOS/queue.c ****     }
2601:FreeRTOS/queue.c **** 
2602:FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2603:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2604:FreeRTOS/queue.c **** 
2605:FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2606:FreeRTOS/queue.c **** 
2607:FreeRTOS/queue.c ****     BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue,
2608:FreeRTOS/queue.c ****                                     const void * pvItemToQueue,
2609:FreeRTOS/queue.c ****                                     BaseType_t xCoRoutinePreviouslyWoken )
2610:FreeRTOS/queue.c ****     {
2611:FreeRTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2612:FreeRTOS/queue.c **** 
2613:FreeRTOS/queue.c ****         /* Cannot block within an ISR so if there is no space on the queue then
2614:FreeRTOS/queue.c ****          * exit without doing anything. */
2615:FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2616:FreeRTOS/queue.c ****         {
2617:FreeRTOS/queue.c ****             prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2618:FreeRTOS/queue.c **** 
2619:FreeRTOS/queue.c ****             /* We only want to wake one co-routine per ISR, so check that a
2620:FreeRTOS/queue.c ****              * co-routine has not already been woken. */
2621:FreeRTOS/queue.c ****             if( xCoRoutinePreviouslyWoken == pdFALSE )
2622:FreeRTOS/queue.c ****             {
2623:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2624:FreeRTOS/queue.c ****                 {
2625:FreeRTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pd
2626:FreeRTOS/queue.c ****                     {
2627:FreeRTOS/queue.c ****                         return pdTRUE;
2628:FreeRTOS/queue.c ****                     }
2629:FreeRTOS/queue.c ****                     else
2630:FreeRTOS/queue.c ****                     {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 140


2631:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2632:FreeRTOS/queue.c ****                     }
2633:FreeRTOS/queue.c ****                 }
2634:FreeRTOS/queue.c ****                 else
2635:FreeRTOS/queue.c ****                 {
2636:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2637:FreeRTOS/queue.c ****                 }
2638:FreeRTOS/queue.c ****             }
2639:FreeRTOS/queue.c ****             else
2640:FreeRTOS/queue.c ****             {
2641:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2642:FreeRTOS/queue.c ****             }
2643:FreeRTOS/queue.c ****         }
2644:FreeRTOS/queue.c ****         else
2645:FreeRTOS/queue.c ****         {
2646:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2647:FreeRTOS/queue.c ****         }
2648:FreeRTOS/queue.c **** 
2649:FreeRTOS/queue.c ****         return xCoRoutinePreviouslyWoken;
2650:FreeRTOS/queue.c ****     }
2651:FreeRTOS/queue.c **** 
2652:FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2653:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2654:FreeRTOS/queue.c **** 
2655:FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2656:FreeRTOS/queue.c **** 
2657:FreeRTOS/queue.c ****     BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue,
2658:FreeRTOS/queue.c ****                                        void * pvBuffer,
2659:FreeRTOS/queue.c ****                                        BaseType_t * pxCoRoutineWoken )
2660:FreeRTOS/queue.c ****     {
2661:FreeRTOS/queue.c ****         BaseType_t xReturn;
2662:FreeRTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2663:FreeRTOS/queue.c **** 
2664:FreeRTOS/queue.c ****         /* We cannot block from an ISR, so check there is data available. If
2665:FreeRTOS/queue.c ****          * not then just leave without doing anything. */
2666:FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2667:FreeRTOS/queue.c ****         {
2668:FreeRTOS/queue.c ****             /* Copy the data from the queue. */
2669:FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2670:FreeRTOS/queue.c **** 
2671:FreeRTOS/queue.c ****             if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2672:FreeRTOS/queue.c ****             {
2673:FreeRTOS/queue.c ****                 pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2674:FreeRTOS/queue.c ****             }
2675:FreeRTOS/queue.c ****             else
2676:FreeRTOS/queue.c ****             {
2677:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2678:FreeRTOS/queue.c ****             }
2679:FreeRTOS/queue.c **** 
2680:FreeRTOS/queue.c ****             --( pxQueue->uxMessagesWaiting );
2681:FreeRTOS/queue.c ****             ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsign
2682:FreeRTOS/queue.c **** 
2683:FreeRTOS/queue.c ****             if( ( *pxCoRoutineWoken ) == pdFALSE )
2684:FreeRTOS/queue.c ****             {
2685:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2686:FreeRTOS/queue.c ****                 {
2687:FreeRTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFAL
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 141


2688:FreeRTOS/queue.c ****                     {
2689:FreeRTOS/queue.c ****                         *pxCoRoutineWoken = pdTRUE;
2690:FreeRTOS/queue.c ****                     }
2691:FreeRTOS/queue.c ****                     else
2692:FreeRTOS/queue.c ****                     {
2693:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2694:FreeRTOS/queue.c ****                     }
2695:FreeRTOS/queue.c ****                 }
2696:FreeRTOS/queue.c ****                 else
2697:FreeRTOS/queue.c ****                 {
2698:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2699:FreeRTOS/queue.c ****                 }
2700:FreeRTOS/queue.c ****             }
2701:FreeRTOS/queue.c ****             else
2702:FreeRTOS/queue.c ****             {
2703:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2704:FreeRTOS/queue.c ****             }
2705:FreeRTOS/queue.c **** 
2706:FreeRTOS/queue.c ****             xReturn = pdPASS;
2707:FreeRTOS/queue.c ****         }
2708:FreeRTOS/queue.c ****         else
2709:FreeRTOS/queue.c ****         {
2710:FreeRTOS/queue.c ****             xReturn = pdFAIL;
2711:FreeRTOS/queue.c ****         }
2712:FreeRTOS/queue.c **** 
2713:FreeRTOS/queue.c ****         return xReturn;
2714:FreeRTOS/queue.c ****     }
2715:FreeRTOS/queue.c **** 
2716:FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2717:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2718:FreeRTOS/queue.c **** 
2719:FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2720:FreeRTOS/queue.c **** 
2721:FreeRTOS/queue.c ****     void vQueueAddToRegistry( QueueHandle_t xQueue,
2722:FreeRTOS/queue.c ****                               const char * pcQueueName ) /*lint !e971 Unqualified char types are al
2723:FreeRTOS/queue.c ****     {
 4026              		.loc 1 2723 5 is_stmt 1 view -0
 4027              		.cfi_startproc
 4028              		@ args = 0, pretend = 0, frame = 0
 4029              		@ frame_needed = 0, uses_anonymous_args = 0
 4030              		.loc 1 2723 5 is_stmt 0 view .LVU1147
 4031 0000 10B5     		push	{r4, lr}
 4032              	.LCFI38:
 4033              		.cfi_def_cfa_offset 8
 4034              		.cfi_offset 4, -8
 4035              		.cfi_offset 14, -4
 4036 0002 0C46     		mov	r4, r1
2724:FreeRTOS/queue.c ****         UBaseType_t ux;
 4037              		.loc 1 2724 9 is_stmt 1 view .LVU1148
2725:FreeRTOS/queue.c **** 
2726:FreeRTOS/queue.c ****         /* See if there is an empty space in the registry.  A NULL name denotes
2727:FreeRTOS/queue.c ****          * a free slot. */
2728:FreeRTOS/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 4038              		.loc 1 2728 9 view .LVU1149
 4039              	.LVL362:
 4040              		.loc 1 2728 17 is_stmt 0 view .LVU1150
 4041 0004 0023     		movs	r3, #0
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 142


 4042              	.LVL363:
 4043              	.L275:
 4044              		.loc 1 2728 39 is_stmt 1 discriminator 1 view .LVU1151
 4045              		.loc 1 2728 9 is_stmt 0 discriminator 1 view .LVU1152
 4046 0006 072B     		cmp	r3, #7
 4047 0008 12D8     		bhi	.L274
2729:FreeRTOS/queue.c ****         {
2730:FreeRTOS/queue.c ****             if( xQueueRegistry[ ux ].pcQueueName == NULL )
 4048              		.loc 1 2730 13 is_stmt 1 view .LVU1153
 4049              		.loc 1 2730 37 is_stmt 0 view .LVU1154
 4050 000a 0A4A     		ldr	r2, .L281
 4051 000c 52F83320 		ldr	r2, [r2, r3, lsl #3]
 4052              		.loc 1 2730 15 view .LVU1155
 4053 0010 0AB1     		cbz	r2, .L280
2731:FreeRTOS/queue.c ****             {
2732:FreeRTOS/queue.c ****                 /* Store the information on this queue. */
2733:FreeRTOS/queue.c ****                 xQueueRegistry[ ux ].pcQueueName = pcQueueName;
2734:FreeRTOS/queue.c ****                 xQueueRegistry[ ux ].xHandle = xQueue;
2735:FreeRTOS/queue.c **** 
2736:FreeRTOS/queue.c ****                 traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2737:FreeRTOS/queue.c ****                 break;
2738:FreeRTOS/queue.c ****             }
2739:FreeRTOS/queue.c ****             else
2740:FreeRTOS/queue.c ****             {
2741:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 4054              		.loc 1 2741 41 is_stmt 1 discriminator 2 view .LVU1156
2728:FreeRTOS/queue.c ****         {
 4055              		.loc 1 2728 87 discriminator 2 view .LVU1157
2728:FreeRTOS/queue.c ****         {
 4056              		.loc 1 2728 89 is_stmt 0 discriminator 2 view .LVU1158
 4057 0012 0133     		adds	r3, r3, #1
 4058              	.LVL364:
2728:FreeRTOS/queue.c ****         {
 4059              		.loc 1 2728 89 discriminator 2 view .LVU1159
 4060 0014 F7E7     		b	.L275
 4061              	.L280:
2733:FreeRTOS/queue.c ****                 xQueueRegistry[ ux ].xHandle = xQueue;
 4062              		.loc 1 2733 17 is_stmt 1 view .LVU1160
2733:FreeRTOS/queue.c ****                 xQueueRegistry[ ux ].xHandle = xQueue;
 4063              		.loc 1 2733 50 is_stmt 0 view .LVU1161
 4064 0016 074A     		ldr	r2, .L281
 4065 0018 42F83340 		str	r4, [r2, r3, lsl #3]
2734:FreeRTOS/queue.c **** 
 4066              		.loc 1 2734 17 is_stmt 1 view .LVU1162
2734:FreeRTOS/queue.c **** 
 4067              		.loc 1 2734 46 is_stmt 0 view .LVU1163
 4068 001c 02EBC303 		add	r3, r2, r3, lsl #3
 4069              	.LVL365:
2734:FreeRTOS/queue.c **** 
 4070              		.loc 1 2734 46 view .LVU1164
 4071 0020 5860     		str	r0, [r3, #4]
2736:FreeRTOS/queue.c ****                 break;
 4072              		.loc 1 2736 17 is_stmt 1 view .LVU1165
 4073 0022 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 4074              	.LVL366:
2736:FreeRTOS/queue.c ****                 break;
 4075              		.loc 1 2736 17 is_stmt 0 view .LVU1166
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 143


 4076 0026 0146     		mov	r1, r0
 4077 0028 2246     		mov	r2, r4
 4078 002a 7120     		movs	r0, #113
 4079 002c FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
 4080              	.LVL367:
2737:FreeRTOS/queue.c ****             }
 4081              		.loc 1 2737 17 is_stmt 1 view .LVU1167
 4082              	.L274:
2742:FreeRTOS/queue.c ****             }
2743:FreeRTOS/queue.c ****         }
2744:FreeRTOS/queue.c ****     }
 4083              		.loc 1 2744 5 is_stmt 0 view .LVU1168
 4084 0030 10BD     		pop	{r4, pc}
 4085              	.LVL368:
 4086              	.L282:
 4087              		.loc 1 2744 5 view .LVU1169
 4088 0032 00BF     		.align	2
 4089              	.L281:
 4090 0034 00000000 		.word	.LANCHOR0
 4091              		.cfi_endproc
 4092              	.LFE30:
 4094              		.section	.text.pcQueueGetName,"ax",%progbits
 4095              		.align	1
 4096              		.global	pcQueueGetName
 4097              		.syntax unified
 4098              		.thumb
 4099              		.thumb_func
 4101              	pcQueueGetName:
 4102              	.LVL369:
 4103              	.LFB31:
2745:FreeRTOS/queue.c **** 
2746:FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2747:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2748:FreeRTOS/queue.c **** 
2749:FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2750:FreeRTOS/queue.c **** 
2751:FreeRTOS/queue.c ****     const char * pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are all
2752:FreeRTOS/queue.c ****     {
 4104              		.loc 1 2752 5 is_stmt 1 view -0
 4105              		.cfi_startproc
 4106              		@ args = 0, pretend = 0, frame = 0
 4107              		@ frame_needed = 0, uses_anonymous_args = 0
 4108              		@ link register save eliminated.
2753:FreeRTOS/queue.c ****         UBaseType_t ux;
 4109              		.loc 1 2753 9 view .LVU1171
2754:FreeRTOS/queue.c ****         const char * pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings a
 4110              		.loc 1 2754 9 view .LVU1172
2755:FreeRTOS/queue.c **** 
2756:FreeRTOS/queue.c ****         /* Note there is nothing here to protect against another task adding or
2757:FreeRTOS/queue.c ****          * removing entries from the registry while it is being searched. */
2758:FreeRTOS/queue.c **** 
2759:FreeRTOS/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 4111              		.loc 1 2759 9 view .LVU1173
 4112              		.loc 1 2759 17 is_stmt 0 view .LVU1174
 4113 0000 0023     		movs	r3, #0
 4114              	.LVL370:
 4115              	.L284:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 144


 4116              		.loc 1 2759 39 is_stmt 1 discriminator 1 view .LVU1175
 4117              		.loc 1 2759 9 is_stmt 0 discriminator 1 view .LVU1176
 4118 0002 072B     		cmp	r3, #7
 4119 0004 0BD8     		bhi	.L288
2760:FreeRTOS/queue.c ****         {
2761:FreeRTOS/queue.c ****             if( xQueueRegistry[ ux ].xHandle == xQueue )
 4120              		.loc 1 2761 13 is_stmt 1 view .LVU1177
 4121              		.loc 1 2761 37 is_stmt 0 view .LVU1178
 4122 0006 074A     		ldr	r2, .L290
 4123 0008 02EBC302 		add	r2, r2, r3, lsl #3
 4124 000c 5268     		ldr	r2, [r2, #4]
 4125              		.loc 1 2761 15 view .LVU1179
 4126 000e 8242     		cmp	r2, r0
 4127 0010 01D0     		beq	.L289
2762:FreeRTOS/queue.c ****             {
2763:FreeRTOS/queue.c ****                 pcReturn = xQueueRegistry[ ux ].pcQueueName;
2764:FreeRTOS/queue.c ****                 break;
2765:FreeRTOS/queue.c ****             }
2766:FreeRTOS/queue.c ****             else
2767:FreeRTOS/queue.c ****             {
2768:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 4128              		.loc 1 2768 41 is_stmt 1 discriminator 2 view .LVU1180
2759:FreeRTOS/queue.c ****         {
 4129              		.loc 1 2759 87 discriminator 2 view .LVU1181
2759:FreeRTOS/queue.c ****         {
 4130              		.loc 1 2759 89 is_stmt 0 discriminator 2 view .LVU1182
 4131 0012 0133     		adds	r3, r3, #1
 4132              	.LVL371:
2759:FreeRTOS/queue.c ****         {
 4133              		.loc 1 2759 89 discriminator 2 view .LVU1183
 4134 0014 F5E7     		b	.L284
 4135              	.L289:
2763:FreeRTOS/queue.c ****                 break;
 4136              		.loc 1 2763 17 is_stmt 1 view .LVU1184
2763:FreeRTOS/queue.c ****                 break;
 4137              		.loc 1 2763 26 is_stmt 0 view .LVU1185
 4138 0016 034A     		ldr	r2, .L290
 4139 0018 52F83300 		ldr	r0, [r2, r3, lsl #3]
 4140              	.LVL372:
2764:FreeRTOS/queue.c ****             }
 4141              		.loc 1 2764 17 is_stmt 1 view .LVU1186
 4142 001c 7047     		bx	lr
 4143              	.LVL373:
 4144              	.L288:
2754:FreeRTOS/queue.c **** 
 4145              		.loc 1 2754 22 is_stmt 0 view .LVU1187
 4146 001e 0020     		movs	r0, #0
 4147              	.LVL374:
2769:FreeRTOS/queue.c ****             }
2770:FreeRTOS/queue.c ****         }
2771:FreeRTOS/queue.c **** 
2772:FreeRTOS/queue.c ****         return pcReturn;
 4148              		.loc 1 2772 9 is_stmt 1 view .LVU1188
2773:FreeRTOS/queue.c ****     } /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 4149              		.loc 1 2773 5 is_stmt 0 view .LVU1189
 4150 0020 7047     		bx	lr
 4151              	.L291:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 145


 4152 0022 00BF     		.align	2
 4153              	.L290:
 4154 0024 00000000 		.word	.LANCHOR0
 4155              		.cfi_endproc
 4156              	.LFE31:
 4158              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 4159              		.align	1
 4160              		.global	vQueueUnregisterQueue
 4161              		.syntax unified
 4162              		.thumb
 4163              		.thumb_func
 4165              	vQueueUnregisterQueue:
 4166              	.LVL375:
 4167              	.LFB32:
2774:FreeRTOS/queue.c **** 
2775:FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2776:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2777:FreeRTOS/queue.c **** 
2778:FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2779:FreeRTOS/queue.c **** 
2780:FreeRTOS/queue.c ****     void vQueueUnregisterQueue( QueueHandle_t xQueue )
2781:FreeRTOS/queue.c ****     {
 4168              		.loc 1 2781 5 is_stmt 1 view -0
 4169              		.cfi_startproc
 4170              		@ args = 0, pretend = 0, frame = 0
 4171              		@ frame_needed = 0, uses_anonymous_args = 0
 4172              		@ link register save eliminated.
2782:FreeRTOS/queue.c ****         UBaseType_t ux;
 4173              		.loc 1 2782 9 view .LVU1191
2783:FreeRTOS/queue.c **** 
2784:FreeRTOS/queue.c ****         /* See if the handle of the queue being unregistered in actually in the
2785:FreeRTOS/queue.c ****          * registry. */
2786:FreeRTOS/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 4174              		.loc 1 2786 9 view .LVU1192
 4175              		.loc 1 2786 17 is_stmt 0 view .LVU1193
 4176 0000 0023     		movs	r3, #0
 4177              	.LVL376:
 4178              	.L293:
 4179              		.loc 1 2786 39 is_stmt 1 discriminator 1 view .LVU1194
 4180              		.loc 1 2786 9 is_stmt 0 discriminator 1 view .LVU1195
 4181 0002 072B     		cmp	r3, #7
 4182 0004 0FD8     		bhi	.L297
2787:FreeRTOS/queue.c ****         {
2788:FreeRTOS/queue.c ****             if( xQueueRegistry[ ux ].xHandle == xQueue )
 4183              		.loc 1 2788 13 is_stmt 1 view .LVU1196
 4184              		.loc 1 2788 37 is_stmt 0 view .LVU1197
 4185 0006 084A     		ldr	r2, .L299
 4186 0008 02EBC302 		add	r2, r2, r3, lsl #3
 4187 000c 5268     		ldr	r2, [r2, #4]
 4188              		.loc 1 2788 15 view .LVU1198
 4189 000e 8242     		cmp	r2, r0
 4190 0010 01D0     		beq	.L298
2789:FreeRTOS/queue.c ****             {
2790:FreeRTOS/queue.c ****                 /* Set the name to NULL to show that this slot if free again. */
2791:FreeRTOS/queue.c ****                 xQueueRegistry[ ux ].pcQueueName = NULL;
2792:FreeRTOS/queue.c **** 
2793:FreeRTOS/queue.c ****                 /* Set the handle to NULL to ensure the same queue handle cannot
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 146


2794:FreeRTOS/queue.c ****                  * appear in the registry twice if it is added, removed, then
2795:FreeRTOS/queue.c ****                  * added again. */
2796:FreeRTOS/queue.c ****                 xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
2797:FreeRTOS/queue.c ****                 break;
2798:FreeRTOS/queue.c ****             }
2799:FreeRTOS/queue.c ****             else
2800:FreeRTOS/queue.c ****             {
2801:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 4191              		.loc 1 2801 41 is_stmt 1 discriminator 2 view .LVU1199
2786:FreeRTOS/queue.c ****         {
 4192              		.loc 1 2786 87 discriminator 2 view .LVU1200
2786:FreeRTOS/queue.c ****         {
 4193              		.loc 1 2786 89 is_stmt 0 discriminator 2 view .LVU1201
 4194 0012 0133     		adds	r3, r3, #1
 4195              	.LVL377:
2786:FreeRTOS/queue.c ****         {
 4196              		.loc 1 2786 89 discriminator 2 view .LVU1202
 4197 0014 F5E7     		b	.L293
 4198              	.L298:
2791:FreeRTOS/queue.c **** 
 4199              		.loc 1 2791 17 is_stmt 1 view .LVU1203
2791:FreeRTOS/queue.c **** 
 4200              		.loc 1 2791 50 is_stmt 0 view .LVU1204
 4201 0016 044A     		ldr	r2, .L299
 4202 0018 0021     		movs	r1, #0
 4203 001a 42F83310 		str	r1, [r2, r3, lsl #3]
2796:FreeRTOS/queue.c ****                 break;
 4204              		.loc 1 2796 17 is_stmt 1 view .LVU1205
2796:FreeRTOS/queue.c ****                 break;
 4205              		.loc 1 2796 46 is_stmt 0 view .LVU1206
 4206 001e 02EBC303 		add	r3, r2, r3, lsl #3
 4207              	.LVL378:
2796:FreeRTOS/queue.c ****                 break;
 4208              		.loc 1 2796 46 view .LVU1207
 4209 0022 5960     		str	r1, [r3, #4]
2797:FreeRTOS/queue.c ****             }
 4210              		.loc 1 2797 17 is_stmt 1 view .LVU1208
 4211 0024 7047     		bx	lr
 4212              	.LVL379:
 4213              	.L297:
2802:FreeRTOS/queue.c ****             }
2803:FreeRTOS/queue.c ****         }
2804:FreeRTOS/queue.c ****     } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 4214              		.loc 1 2804 5 is_stmt 0 view .LVU1209
 4215 0026 7047     		bx	lr
 4216              	.L300:
 4217              		.align	2
 4218              	.L299:
 4219 0028 00000000 		.word	.LANCHOR0
 4220              		.cfi_endproc
 4221              	.LFE32:
 4223              		.section	.text.vQueueDelete,"ax",%progbits
 4224              		.align	1
 4225              		.global	vQueueDelete
 4226              		.syntax unified
 4227              		.thumb
 4228              		.thumb_func
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 147


 4230              	vQueueDelete:
 4231              	.LVL380:
 4232              	.LFB19:
2027:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 4233              		.loc 1 2027 1 is_stmt 1 view -0
 4234              		.cfi_startproc
 4235              		@ args = 0, pretend = 0, frame = 0
 4236              		@ frame_needed = 0, uses_anonymous_args = 0
2028:FreeRTOS/queue.c **** 
 4237              		.loc 1 2028 5 view .LVU1211
2030:FreeRTOS/queue.c ****     traceQUEUE_DELETE( pxQueue );
 4238              		.loc 1 2030 5 view .LVU1212
 4239 0000 70B1     		cbz	r0, .L306
2027:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 4240              		.loc 1 2027 1 is_stmt 0 discriminator 2 view .LVU1213
 4241 0002 10B5     		push	{r4, lr}
 4242              	.LCFI39:
 4243              		.cfi_def_cfa_offset 8
 4244              		.cfi_offset 4, -8
 4245              		.cfi_offset 14, -4
 4246 0004 0446     		mov	r4, r0
2030:FreeRTOS/queue.c ****     traceQUEUE_DELETE( pxQueue );
 4247              		.loc 1 2030 28 is_stmt 1 discriminator 2 view .LVU1214
2031:FreeRTOS/queue.c **** 
 4248              		.loc 1 2031 5 discriminator 2 view .LVU1215
 4249 0006 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 4250              	.LVL381:
2031:FreeRTOS/queue.c **** 
 4251              		.loc 1 2031 5 is_stmt 0 discriminator 2 view .LVU1216
 4252 000a 0146     		mov	r1, r0
 4253 000c 5F20     		movs	r0, #95
 4254 000e FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
 4255              	.LVL382:
2035:FreeRTOS/queue.c ****         }
 4256              		.loc 1 2035 13 is_stmt 1 discriminator 2 view .LVU1217
 4257 0012 2046     		mov	r0, r4
 4258 0014 FFF7FEFF 		bl	vQueueUnregisterQueue
 4259              	.LVL383:
2043:FreeRTOS/queue.c ****         }
 4260              		.loc 1 2043 13 discriminator 2 view .LVU1218
 4261 0018 2046     		mov	r0, r4
 4262 001a FFF7FEFF 		bl	vPortFree
 4263              	.LVL384:
2065:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 4264              		.loc 1 2065 1 is_stmt 0 discriminator 2 view .LVU1219
 4265 001e 10BD     		pop	{r4, pc}
 4266              	.LVL385:
 4267              	.L306:
 4268              	.LCFI40:
 4269              		.cfi_def_cfa_offset 0
 4270              		.cfi_restore 4
 4271              		.cfi_restore 14
2030:FreeRTOS/queue.c ****     traceQUEUE_DELETE( pxQueue );
 4272              		.loc 1 2030 5 is_stmt 1 view .LVU1220
 4273              	.LBB197:
 4274              	.LBI197:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 148


 4275              		.loc 2 193 34 view .LVU1221
 4276              	.LBB198:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4277              		.loc 2 195 9 view .LVU1222
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4278              		.loc 2 197 9 view .LVU1223
 4279              		.syntax unified
 4280              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4281 0020 4FF05003 			mov r3, #80												
 4282 0024 83F31188 		msr basepri, r3											
 4283 0028 BFF36F8F 		isb														
 4284 002c BFF34F8F 		dsb														
 4285              	
 4286              	@ 0 "" 2
 4287              	.LVL386:
 4288              		.thumb
 4289              		.syntax unified
 4290              	.L303:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4291              		.loc 2 197 9 is_stmt 0 view .LVU1224
 4292              	.LBE198:
 4293              	.LBE197:
2030:FreeRTOS/queue.c ****     traceQUEUE_DELETE( pxQueue );
 4294              		.loc 1 2030 5 is_stmt 1 discriminator 1 view .LVU1225
2030:FreeRTOS/queue.c ****     traceQUEUE_DELETE( pxQueue );
 4295              		.loc 1 2030 5 discriminator 1 view .LVU1226
2030:FreeRTOS/queue.c ****     traceQUEUE_DELETE( pxQueue );
 4296              		.loc 1 2030 5 discriminator 1 view .LVU1227
 4297 0030 FEE7     		b	.L303
 4298              		.cfi_endproc
 4299              	.LFE19:
 4301              		.global	xQueueRegistry
 4302              		.section	.bss.xQueueRegistry,"aw",%nobits
 4303              		.align	2
 4304              		.set	.LANCHOR0,. + 0
 4307              	xQueueRegistry:
 4308 0000 00000000 		.space	64
 4308      00000000 
 4308      00000000 
 4308      00000000 
 4308      00000000 
 4309              		.text
 4310              	.Letext0:
 4311              		.file 3 "d:\\gcc-arm-none-eabi-10.3-2021.10\\lib\\gcc\\arm-none-eabi\\10.3.1\\include\\stddef.h"
 4312              		.file 4 "d:\\gcc-arm-none-eabi-10.3-2021.10\\arm-none-eabi\\include\\machine\\_default_types.h"
 4313              		.file 5 "d:\\gcc-arm-none-eabi-10.3-2021.10\\arm-none-eabi\\include\\sys\\_stdint.h"
 4314              		.file 6 "FreeRTOS/include/list.h"
 4315              		.file 7 "FreeRTOS/include/task.h"
 4316              		.file 8 "FreeRTOS/include/queue.h"
 4317              		.file 9 "SEGGER/SEGGER/SEGGER_SYSVIEW.h"
 4318              		.file 10 "FreeRTOS/include/portable.h"
 4319              		.file 11 "<built-in>"
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 149


DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:20     .text.prvIsQueueFull:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:25     .text.prvIsQueueFull:00000000 prvIsQueueFull
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:74     .text.prvIsQueueEmpty:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:79     .text.prvIsQueueEmpty:00000000 prvIsQueueEmpty
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:124    .text.prvCopyDataToQueue:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:129    .text.prvCopyDataToQueue:00000000 prvCopyDataToQueue
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:251    .text.prvCopyDataFromQueue:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:256    .text.prvCopyDataFromQueue:00000000 prvCopyDataFromQueue
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:316    .text.prvUnlockQueue:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:321    .text.prvUnlockQueue:00000000 prvUnlockQueue
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:446    .text.xQueueGenericReset:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:452    .text.xQueueGenericReset:00000000 xQueueGenericReset
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:595    .text.prvInitialiseNewQueue:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:600    .text.prvInitialiseNewQueue:00000000 prvInitialiseNewQueue
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:667    .text.xQueueGenericCreate:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:673    .text.xQueueGenericCreate:00000000 xQueueGenericCreate
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:839    .text.xQueueGenericSend:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:845    .text.xQueueGenericSend:00000000 xQueueGenericSend
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:1252   .text.xQueueGenericSendFromISR:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:1258   .text.xQueueGenericSendFromISR:00000000 xQueueGenericSendFromISR
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:1574   .text.xQueueGiveFromISR:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:1580   .text.xQueueGiveFromISR:00000000 xQueueGiveFromISR
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:1905   .text.xQueueReceive:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:1911   .text.xQueueReceive:00000000 xQueueReceive
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:2299   .text.xQueueSemaphoreTake:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:2305   .text.xQueueSemaphoreTake:00000000 xQueueSemaphoreTake
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:2682   .text.xQueuePeek:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:2688   .text.xQueuePeek:00000000 xQueuePeek
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:3042   .text.xQueueReceiveFromISR:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:3048   .text.xQueueReceiveFromISR:00000000 xQueueReceiveFromISR
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:3365   .text.xQueuePeekFromISR:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:3371   .text.xQueuePeekFromISR:00000000 xQueuePeekFromISR
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:3597   .text.uxQueueMessagesWaiting:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:3603   .text.uxQueueMessagesWaiting:00000000 uxQueueMessagesWaiting
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:3671   .text.uxQueueSpacesAvailable:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:3677   .text.uxQueueSpacesAvailable:00000000 uxQueueSpacesAvailable
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:3749   .text.uxQueueMessagesWaitingFromISR:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:3755   .text.uxQueueMessagesWaitingFromISR:00000000 uxQueueMessagesWaitingFromISR
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:3807   .text.uxQueueGetQueueNumber:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:3813   .text.uxQueueGetQueueNumber:00000000 uxQueueGetQueueNumber
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:3831   .text.vQueueSetQueueNumber:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:3837   .text.vQueueSetQueueNumber:00000000 vQueueSetQueueNumber
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:3854   .text.ucQueueGetQueueType:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:3860   .text.ucQueueGetQueueType:00000000 ucQueueGetQueueType
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:3878   .text.xQueueIsQueueEmptyFromISR:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:3884   .text.xQueueIsQueueEmptyFromISR:00000000 xQueueIsQueueEmptyFromISR
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:3946   .text.xQueueIsQueueFullFromISR:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:3952   .text.xQueueIsQueueFullFromISR:00000000 xQueueIsQueueFullFromISR
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:4017   .text.vQueueAddToRegistry:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:4023   .text.vQueueAddToRegistry:00000000 vQueueAddToRegistry
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:4090   .text.vQueueAddToRegistry:00000034 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:4095   .text.pcQueueGetName:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:4101   .text.pcQueueGetName:00000000 pcQueueGetName
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:4154   .text.pcQueueGetName:00000024 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:4159   .text.vQueueUnregisterQueue:00000000 $t
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s 			page 150


C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:4165   .text.vQueueUnregisterQueue:00000000 vQueueUnregisterQueue
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:4219   .text.vQueueUnregisterQueue:00000028 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:4224   .text.vQueueDelete:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:4230   .text.vQueueDelete:00000000 vQueueDelete
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:4307   .bss.xQueueRegistry:00000000 xQueueRegistry
C:\Users\LINZHE~1\AppData\Local\Temp\ccZJ8I8n.s:4303   .bss.xQueueRegistry:00000000 $d

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
memcpy
xTaskRemoveFromEventList
vTaskMissedYield
vListInitialise
SEGGER_SYSVIEW_RecordU32x3
pvPortMalloc
SEGGER_SYSVIEW_ShrinkId
SEGGER_SYSVIEW_RecordU32x4
vTaskInternalSetTimeOutState
xTaskResumeAll
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
vPortValidateInterruptPriority
SEGGER_SYSVIEW_RecordU32x2
SEGGER_SYSVIEW_RecordU32
vPortFree
