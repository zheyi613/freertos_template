ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	prvTaskIsTaskSuspended:
  26              	.LVL0:
  27              	.LFB12:
  28              		.file 1 "FreeRTOS/tasks.c"
   1:FreeRTOS/tasks.c **** /*
   2:FreeRTOS/tasks.c ****  * FreeRTOS Kernel V10.4.3
   3:FreeRTOS/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/tasks.c ****  *
   5:FreeRTOS/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/tasks.c ****  * subject to the following conditions:
  11:FreeRTOS/tasks.c ****  *
  12:FreeRTOS/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/tasks.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS/tasks.c ****  *
  15:FreeRTOS/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/tasks.c ****  *
  22:FreeRTOS/tasks.c ****  * https://www.FreeRTOS.org
  23:FreeRTOS/tasks.c ****  * https://github.com/FreeRTOS
  24:FreeRTOS/tasks.c ****  *
  25:FreeRTOS/tasks.c ****  */
  26:FreeRTOS/tasks.c **** 
  27:FreeRTOS/tasks.c **** /* Standard includes. */
  28:FreeRTOS/tasks.c **** #include <stdlib.h>
  29:FreeRTOS/tasks.c **** #include <string.h>
  30:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 2


  31:FreeRTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:FreeRTOS/tasks.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  33:FreeRTOS/tasks.c ****  * task.h is included from an application file. */
  34:FreeRTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:FreeRTOS/tasks.c **** 
  36:FreeRTOS/tasks.c **** /* FreeRTOS includes. */
  37:FreeRTOS/tasks.c **** #include "FreeRTOS.h"
  38:FreeRTOS/tasks.c **** #include "task.h"
  39:FreeRTOS/tasks.c **** #include "timers.h"
  40:FreeRTOS/tasks.c **** #include "stack_macros.h"
  41:FreeRTOS/tasks.c **** 
  42:FreeRTOS/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  43:FreeRTOS/tasks.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  44:FreeRTOS/tasks.c ****  * for the header files above, but not in this file, in order to generate the
  45:FreeRTOS/tasks.c ****  * correct privileged Vs unprivileged linkage and placement. */
  46:FreeRTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  47:FreeRTOS/tasks.c **** 
  48:FreeRTOS/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  49:FreeRTOS/tasks.c ****  * functions but without including stdio.h here. */
  50:FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  51:FreeRTOS/tasks.c **** 
  52:FreeRTOS/tasks.c **** /* At the bottom of this file are two optional functions that can be used
  53:FreeRTOS/tasks.c ****  * to generate human readable text from the raw data generated by the
  54:FreeRTOS/tasks.c ****  * uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:FreeRTOS/tasks.c ****  * for convenience only, and are NOT considered part of the kernel. */
  56:FreeRTOS/tasks.c ****     #include <stdio.h>
  57:FreeRTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:FreeRTOS/tasks.c **** 
  59:FreeRTOS/tasks.c **** #if ( configUSE_PREEMPTION == 0 )
  60:FreeRTOS/tasks.c **** 
  61:FreeRTOS/tasks.c **** /* If the cooperative scheduler is being used then a yield should not be
  62:FreeRTOS/tasks.c ****  * performed just because a higher priority task has been woken. */
  63:FreeRTOS/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()
  64:FreeRTOS/tasks.c **** #else
  65:FreeRTOS/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  66:FreeRTOS/tasks.c **** #endif
  67:FreeRTOS/tasks.c **** 
  68:FreeRTOS/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  69:FreeRTOS/tasks.c **** #define taskNOT_WAITING_NOTIFICATION              ( ( uint8_t ) 0 ) /* Must be zero as it is the in
  70:FreeRTOS/tasks.c **** #define taskWAITING_NOTIFICATION                  ( ( uint8_t ) 1 )
  71:FreeRTOS/tasks.c **** #define taskNOTIFICATION_RECEIVED                 ( ( uint8_t ) 2 )
  72:FreeRTOS/tasks.c **** 
  73:FreeRTOS/tasks.c **** /*
  74:FreeRTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  75:FreeRTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
  76:FreeRTOS/tasks.c ****  */
  77:FreeRTOS/tasks.c **** #define tskSTACK_FILL_BYTE                        ( 0xa5U )
  78:FreeRTOS/tasks.c **** 
  79:FreeRTOS/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  80:FreeRTOS/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB    ( ( uint8_t ) 0 )
  81:FreeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY        ( ( uint8_t ) 1 )
  82:FreeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB     ( ( uint8_t ) 2 )
  83:FreeRTOS/tasks.c **** 
  84:FreeRTOS/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  85:FreeRTOS/tasks.c ****  * value so the high water mark can be determined.  If none of the following are
  86:FreeRTOS/tasks.c ****  * set then don't fill the stack so there is no unnecessary dependency on memset. */
  87:FreeRTOS/tasks.c **** #if ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 3


  88:FreeRTOS/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    1
  89:FreeRTOS/tasks.c **** #else
  90:FreeRTOS/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    0
  91:FreeRTOS/tasks.c **** #endif
  92:FreeRTOS/tasks.c **** 
  93:FreeRTOS/tasks.c **** /*
  94:FreeRTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  95:FreeRTOS/tasks.c ****  */
  96:FreeRTOS/tasks.c **** #define tskRUNNING_CHAR      ( 'X' )
  97:FreeRTOS/tasks.c **** #define tskBLOCKED_CHAR      ( 'B' )
  98:FreeRTOS/tasks.c **** #define tskREADY_CHAR        ( 'R' )
  99:FreeRTOS/tasks.c **** #define tskDELETED_CHAR      ( 'D' )
 100:FreeRTOS/tasks.c **** #define tskSUSPENDED_CHAR    ( 'S' )
 101:FreeRTOS/tasks.c **** 
 102:FreeRTOS/tasks.c **** /*
 103:FreeRTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 104:FreeRTOS/tasks.c ****  * global, rather than file scope.
 105:FreeRTOS/tasks.c ****  */
 106:FreeRTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 107:FreeRTOS/tasks.c ****     #define static
 108:FreeRTOS/tasks.c **** #endif
 109:FreeRTOS/tasks.c **** 
 110:FreeRTOS/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 111:FreeRTOS/tasks.c ****  * configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 112:FreeRTOS/tasks.c **** #ifndef configIDLE_TASK_NAME
 113:FreeRTOS/tasks.c ****     #define configIDLE_TASK_NAME    "IDLE"
 114:FreeRTOS/tasks.c **** #endif
 115:FreeRTOS/tasks.c **** 
 116:FreeRTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 117:FreeRTOS/tasks.c **** 
 118:FreeRTOS/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 119:FreeRTOS/tasks.c ****  * performed in a generic way that is not optimised to any particular
 120:FreeRTOS/tasks.c ****  * microcontroller architecture. */
 121:FreeRTOS/tasks.c **** 
 122:FreeRTOS/tasks.c **** /* uxTopReadyPriority holds the priority of the highest priority ready
 123:FreeRTOS/tasks.c ****  * state task. */
 124:FreeRTOS/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority ) \
 125:FreeRTOS/tasks.c ****     {                                               \
 126:FreeRTOS/tasks.c ****         if( ( uxPriority ) > uxTopReadyPriority )   \
 127:FreeRTOS/tasks.c ****         {                                           \
 128:FreeRTOS/tasks.c ****             uxTopReadyPriority = ( uxPriority );    \
 129:FreeRTOS/tasks.c ****         }                                           \
 130:FreeRTOS/tasks.c ****     } /* taskRECORD_READY_PRIORITY */
 131:FreeRTOS/tasks.c **** 
 132:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 133:FreeRTOS/tasks.c **** 
 134:FreeRTOS/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                \
 135:FreeRTOS/tasks.c ****     {                                                                         \
 136:FreeRTOS/tasks.c ****         UBaseType_t uxTopPriority = uxTopReadyPriority;                       \
 137:FreeRTOS/tasks.c ****                                                                               \
 138:FreeRTOS/tasks.c ****         /* Find the highest priority queue that contains ready tasks. */      \
 139:FreeRTOS/tasks.c ****         while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) ) \
 140:FreeRTOS/tasks.c ****         {                                                                     \
 141:FreeRTOS/tasks.c ****             configASSERT( uxTopPriority );                                    \
 142:FreeRTOS/tasks.c ****             --uxTopPriority;                                                  \
 143:FreeRTOS/tasks.c ****         }                                                                     \
 144:FreeRTOS/tasks.c ****                                                                               \
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 4


 145:FreeRTOS/tasks.c ****         /* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of \
 146:FreeRTOS/tasks.c ****          * the  same priority get an equal share of the processor time. */                    \
 147:FreeRTOS/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) ); \
 148:FreeRTOS/tasks.c ****         uxTopReadyPriority = uxTopPriority;                                                   \
 149:FreeRTOS/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK */
 150:FreeRTOS/tasks.c **** 
 151:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 152:FreeRTOS/tasks.c **** 
 153:FreeRTOS/tasks.c **** /* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 154:FreeRTOS/tasks.c ****  * they are only required when a port optimised method of task selection is
 155:FreeRTOS/tasks.c ****  * being used. */
 156:FreeRTOS/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )
 157:FreeRTOS/tasks.c ****     #define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 158:FreeRTOS/tasks.c **** 
 159:FreeRTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 160:FreeRTOS/tasks.c **** 
 161:FreeRTOS/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 162:FreeRTOS/tasks.c ****  * performed in a way that is tailored to the particular microcontroller
 163:FreeRTOS/tasks.c ****  * architecture being used. */
 164:FreeRTOS/tasks.c **** 
 165:FreeRTOS/tasks.c **** /* A port optimised version is provided.  Call the port defined macros. */
 166:FreeRTOS/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority )    portRECORD_READY_PRIORITY( uxPriority, uxTop
 167:FreeRTOS/tasks.c **** 
 168:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 169:FreeRTOS/tasks.c **** 
 170:FreeRTOS/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                                  \
 171:FreeRTOS/tasks.c ****     {                                                                                           \
 172:FreeRTOS/tasks.c ****         UBaseType_t uxTopPriority;                                                              \
 173:FreeRTOS/tasks.c ****                                                                                                 \
 174:FreeRTOS/tasks.c ****         /* Find the highest priority list that contains ready tasks. */                         \
 175:FreeRTOS/tasks.c ****         portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );                          \
 176:FreeRTOS/tasks.c ****         configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 ); \
 177:FreeRTOS/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );   \
 178:FreeRTOS/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 179:FreeRTOS/tasks.c **** 
 180:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 181:FreeRTOS/tasks.c **** 
 182:FreeRTOS/tasks.c **** /* A port optimised version is provided, call it only if the TCB being reset
 183:FreeRTOS/tasks.c ****  * is being referenced from a ready list.  If it is referenced from a delayed
 184:FreeRTOS/tasks.c ****  * or suspended list then it won't be in a ready list. */
 185:FreeRTOS/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )                                                 
 186:FreeRTOS/tasks.c ****     {                                                                                              
 187:FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 
 188:FreeRTOS/tasks.c ****         {                                                                                          
 189:FreeRTOS/tasks.c ****             portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );                    
 190:FreeRTOS/tasks.c ****         }                                                                                          
 191:FreeRTOS/tasks.c ****     }
 192:FreeRTOS/tasks.c **** 
 193:FreeRTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:FreeRTOS/tasks.c **** 
 195:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 196:FreeRTOS/tasks.c **** 
 197:FreeRTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 198:FreeRTOS/tasks.c ****  * count overflows. */
 199:FreeRTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()                                                \
 200:FreeRTOS/tasks.c ****     {                                                                             \
 201:FreeRTOS/tasks.c ****         List_t * pxTemp;                                                          \
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 5


 202:FreeRTOS/tasks.c ****                                                                                   \
 203:FreeRTOS/tasks.c ****         /* The delayed tasks list should be empty when the lists are switched. */ \
 204:FreeRTOS/tasks.c ****         configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );               \
 205:FreeRTOS/tasks.c ****                                                                                   \
 206:FreeRTOS/tasks.c ****         pxTemp = pxDelayedTaskList;                                               \
 207:FreeRTOS/tasks.c ****         pxDelayedTaskList = pxOverflowDelayedTaskList;                            \
 208:FreeRTOS/tasks.c ****         pxOverflowDelayedTaskList = pxTemp;                                       \
 209:FreeRTOS/tasks.c ****         xNumOfOverflows++;                                                        \
 210:FreeRTOS/tasks.c ****         prvResetNextTaskUnblockTime();                                            \
 211:FreeRTOS/tasks.c ****     }
 212:FreeRTOS/tasks.c **** 
 213:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 214:FreeRTOS/tasks.c **** 
 215:FreeRTOS/tasks.c **** /*
 216:FreeRTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 217:FreeRTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 218:FreeRTOS/tasks.c ****  */
 219:FreeRTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )                                                             
 220:FreeRTOS/tasks.c ****     traceMOVED_TASK_TO_READY_STATE( pxTCB );                                                       
 221:FreeRTOS/tasks.c ****     taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );                                            
 222:FreeRTOS/tasks.c ****     vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem )
 223:FreeRTOS/tasks.c ****     tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 224:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 225:FreeRTOS/tasks.c **** 
 226:FreeRTOS/tasks.c **** /*
 227:FreeRTOS/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 228:FreeRTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 229:FreeRTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 230:FreeRTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 231:FreeRTOS/tasks.c ****  */
 232:FreeRTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle )    ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle )
 233:FreeRTOS/tasks.c **** 
 234:FreeRTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 235:FreeRTOS/tasks.c ****  * of the task to which it belongs (coded to allow it to be held in reverse
 236:FreeRTOS/tasks.c ****  * priority order).  However, it is occasionally borrowed for other purposes.  It
 237:FreeRTOS/tasks.c ****  * is important its value is not updated due to a task priority change while it is
 238:FreeRTOS/tasks.c ****  * being used for another purpose.  The following bit definition is used to inform
 239:FreeRTOS/tasks.c ****  * the scheduler that the value should not be changed - in which case it is the
 240:FreeRTOS/tasks.c ****  * responsibility of whichever module is using the value to ensure it gets set back
 241:FreeRTOS/tasks.c ****  * to its original value when it is released. */
 242:FreeRTOS/tasks.c **** #if ( configUSE_16_BIT_TICKS == 1 )
 243:FreeRTOS/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x8000U
 244:FreeRTOS/tasks.c **** #else
 245:FreeRTOS/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x80000000UL
 246:FreeRTOS/tasks.c **** #endif
 247:FreeRTOS/tasks.c **** 
 248:FreeRTOS/tasks.c **** /*
 249:FreeRTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 250:FreeRTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 251:FreeRTOS/tasks.c ****  * (the task's run time environment, including register values)
 252:FreeRTOS/tasks.c ****  */
 253:FreeRTOS/tasks.c **** typedef struct tskTaskControlBlock       /* The old naming convention is used to prevent breaking k
 254:FreeRTOS/tasks.c **** {
 255:FreeRTOS/tasks.c ****     volatile StackType_t * pxTopOfStack; /*< Points to the location of the last item placed on the 
 256:FreeRTOS/tasks.c **** 
 257:FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 258:FreeRTOS/tasks.c ****         xMPU_SETTINGS xMPUSettings; /*< The MPU settings are defined as part of the port layer.  TH
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 6


 259:FreeRTOS/tasks.c ****     #endif
 260:FreeRTOS/tasks.c **** 
 261:FreeRTOS/tasks.c ****     ListItem_t xStateListItem;                  /*< The list that the state list item of a task is 
 262:FreeRTOS/tasks.c ****     ListItem_t xEventListItem;                  /*< Used to reference a task from an event list. */
 263:FreeRTOS/tasks.c ****     UBaseType_t uxPriority;                     /*< The priority of the task.  0 is the lowest prio
 264:FreeRTOS/tasks.c ****     StackType_t * pxStack;                      /*< Points to the start of the stack. */
 265:FreeRTOS/tasks.c ****     char pcTaskName[ configMAX_TASK_NAME_LEN ]; /*< Descriptive name given to the task when created
 266:FreeRTOS/tasks.c **** 
 267:FreeRTOS/tasks.c ****     #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 268:FreeRTOS/tasks.c ****         StackType_t * pxEndOfStack; /*< Points to the highest valid address for the stack. */
 269:FreeRTOS/tasks.c ****     #endif
 270:FreeRTOS/tasks.c **** 
 271:FreeRTOS/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 272:FreeRTOS/tasks.c ****         UBaseType_t uxCriticalNesting; /*< Holds the critical section nesting depth for ports that 
 273:FreeRTOS/tasks.c ****     #endif
 274:FreeRTOS/tasks.c **** 
 275:FreeRTOS/tasks.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 276:FreeRTOS/tasks.c ****         UBaseType_t uxTCBNumber;  /*< Stores a number that increments each time a TCB is created.  
 277:FreeRTOS/tasks.c ****         UBaseType_t uxTaskNumber; /*< Stores a number specifically for use by third party trace cod
 278:FreeRTOS/tasks.c ****     #endif
 279:FreeRTOS/tasks.c **** 
 280:FreeRTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 281:FreeRTOS/tasks.c ****         UBaseType_t uxBasePriority; /*< The priority last assigned to the task - used by the priori
 282:FreeRTOS/tasks.c ****         UBaseType_t uxMutexesHeld;
 283:FreeRTOS/tasks.c ****     #endif
 284:FreeRTOS/tasks.c **** 
 285:FreeRTOS/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 286:FreeRTOS/tasks.c ****         TaskHookFunction_t pxTaskTag;
 287:FreeRTOS/tasks.c ****     #endif
 288:FreeRTOS/tasks.c **** 
 289:FreeRTOS/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 290:FreeRTOS/tasks.c ****         void * pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 291:FreeRTOS/tasks.c ****     #endif
 292:FreeRTOS/tasks.c **** 
 293:FreeRTOS/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 294:FreeRTOS/tasks.c ****         uint32_t ulRunTimeCounter; /*< Stores the amount of time the task has spent in the Running 
 295:FreeRTOS/tasks.c ****     #endif
 296:FreeRTOS/tasks.c **** 
 297:FreeRTOS/tasks.c ****     #if ( configUSE_NEWLIB_REENTRANT == 1 )
 298:FreeRTOS/tasks.c **** 
 299:FreeRTOS/tasks.c ****         /* Allocate a Newlib reent structure that is specific to this task.
 300:FreeRTOS/tasks.c ****          * Note Newlib support has been included by popular demand, but is not
 301:FreeRTOS/tasks.c ****          * used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 302:FreeRTOS/tasks.c ****          * responsible for resulting newlib operation.  User must be familiar with
 303:FreeRTOS/tasks.c ****          * newlib and must provide system-wide implementations of the necessary
 304:FreeRTOS/tasks.c ****          * stubs. Be warned that (at the time of writing) the current newlib design
 305:FreeRTOS/tasks.c ****          * implements a system-wide malloc() that must be provided with locks.
 306:FreeRTOS/tasks.c ****          *
 307:FreeRTOS/tasks.c ****          * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 308:FreeRTOS/tasks.c ****          * for additional information. */
 309:FreeRTOS/tasks.c ****         struct  _reent xNewLib_reent;
 310:FreeRTOS/tasks.c ****     #endif
 311:FreeRTOS/tasks.c **** 
 312:FreeRTOS/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 313:FreeRTOS/tasks.c ****         volatile uint32_t ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 314:FreeRTOS/tasks.c ****         volatile uint8_t ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 315:FreeRTOS/tasks.c ****     #endif
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 7


 316:FreeRTOS/tasks.c **** 
 317:FreeRTOS/tasks.c ****     /* See the comments in FreeRTOS.h with the definition of
 318:FreeRTOS/tasks.c ****      * tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 319:FreeRTOS/tasks.c ****     #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been conso
 320:FreeRTOS/tasks.c ****         uint8_t ucStaticallyAllocated;                     /*< Set to pdTRUE if the task is a stati
 321:FreeRTOS/tasks.c ****     #endif
 322:FreeRTOS/tasks.c **** 
 323:FreeRTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 324:FreeRTOS/tasks.c ****         uint8_t ucDelayAborted;
 325:FreeRTOS/tasks.c ****     #endif
 326:FreeRTOS/tasks.c **** 
 327:FreeRTOS/tasks.c ****     #if ( configUSE_POSIX_ERRNO == 1 )
 328:FreeRTOS/tasks.c ****         int iTaskErrno;
 329:FreeRTOS/tasks.c ****     #endif
 330:FreeRTOS/tasks.c **** } tskTCB;
 331:FreeRTOS/tasks.c **** 
 332:FreeRTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 333:FreeRTOS/tasks.c ****  * below to enable the use of older kernel aware debuggers. */
 334:FreeRTOS/tasks.c **** typedef tskTCB TCB_t;
 335:FreeRTOS/tasks.c **** 
 336:FreeRTOS/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 337:FreeRTOS/tasks.c ****  * which static variables must be declared volatile. */
 338:FreeRTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 339:FreeRTOS/tasks.c **** 
 340:FreeRTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 341:FreeRTOS/tasks.c ****  * xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 342:FreeRTOS/tasks.c ****  * doing so breaks some kernel aware debuggers and debuggers that rely on removing
 343:FreeRTOS/tasks.c ****  * the static qualifier. */
 344:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ]; /*< Prioritised ready task
 345:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;                         /*< Delayed tasks. */
 346:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;                         /*< Delayed tasks (two lis
 347:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;              /*< Points to the delayed 
 348:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;      /*< Points to the delayed 
 349:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;                         /*< Tasks that have been r
 350:FreeRTOS/tasks.c **** 
 351:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 352:FreeRTOS/tasks.c **** 
 353:FreeRTOS/tasks.c ****     PRIVILEGED_DATA static List_t xTasksWaitingTermination; /*< Tasks that have been deleted - but 
 354:FreeRTOS/tasks.c ****     PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 355:FreeRTOS/tasks.c **** 
 356:FreeRTOS/tasks.c **** #endif
 357:FreeRTOS/tasks.c **** 
 358:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 359:FreeRTOS/tasks.c **** 
 360:FreeRTOS/tasks.c ****     PRIVILEGED_DATA static List_t xSuspendedTaskList; /*< Tasks that are currently suspended. */
 361:FreeRTOS/tasks.c **** 
 362:FreeRTOS/tasks.c **** #endif
 363:FreeRTOS/tasks.c **** 
 364:FreeRTOS/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 365:FreeRTOS/tasks.c ****  * the errno of the currently running task. */
 366:FreeRTOS/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 367:FreeRTOS/tasks.c ****     int FreeRTOS_errno = 0;
 368:FreeRTOS/tasks.c **** #endif
 369:FreeRTOS/tasks.c **** 
 370:FreeRTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 371:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
 372:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 8


 373:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority = tskIDLE_PRIORITY;
 374:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning = pdFALSE;
 375:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks = ( TickType_t ) 0U;
 376:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending = pdFALSE;
 377:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows = ( BaseType_t ) 0;
 378:FreeRTOS/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber = ( UBaseType_t ) 0U;
 379:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime = ( TickType_t ) 0U; /* Initialised
 380:FreeRTOS/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;                          /*< Holds the 
 381:FreeRTOS/tasks.c **** 
 382:FreeRTOS/tasks.c **** /* Improve support for OpenOCD. The kernel tracks Ready tasks via priority lists.
 383:FreeRTOS/tasks.c ****  * For tracking the state of remote threads, OpenOCD uses uxTopUsedPriority
 384:FreeRTOS/tasks.c ****  * to determine the number of priority lists to read back from the remote target. */
 385:FreeRTOS/tasks.c **** const volatile UBaseType_t uxTopUsedPriority = configMAX_PRIORITIES - 1U;
 386:FreeRTOS/tasks.c **** 
 387:FreeRTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 388:FreeRTOS/tasks.c ****  * interrupts must not manipulate the xStateListItem of a TCB, or any of the
 389:FreeRTOS/tasks.c ****  * lists the xStateListItem can be referenced from, if the scheduler is suspended.
 390:FreeRTOS/tasks.c ****  * If an interrupt needs to unblock a task while the scheduler is suspended then it
 391:FreeRTOS/tasks.c ****  * moves the task's event list item into the xPendingReadyList, ready for the
 392:FreeRTOS/tasks.c ****  * kernel to move the task from the pending ready list into the real ready list
 393:FreeRTOS/tasks.c ****  * when the scheduler is unsuspended.  The pending ready list itself can only be
 394:FreeRTOS/tasks.c ****  * accessed from a critical section. */
 395:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended = ( UBaseType_t ) pdFALSE;
 396:FreeRTOS/tasks.c **** 
 397:FreeRTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 398:FreeRTOS/tasks.c **** 
 399:FreeRTOS/tasks.c **** /* Do not move these variables to function scope as doing so prevents the
 400:FreeRTOS/tasks.c ****  * code working with debuggers that need to remove the static qualifier. */
 401:FreeRTOS/tasks.c ****     PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;    /*< Holds the value of a timer/c
 402:FreeRTOS/tasks.c ****     PRIVILEGED_DATA static volatile uint32_t ulTotalRunTime = 0UL; /*< Holds the total amount of ex
 403:FreeRTOS/tasks.c **** 
 404:FreeRTOS/tasks.c **** #endif
 405:FreeRTOS/tasks.c **** 
 406:FreeRTOS/tasks.c **** /*lint -restore */
 407:FreeRTOS/tasks.c **** 
 408:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 409:FreeRTOS/tasks.c **** 
 410:FreeRTOS/tasks.c **** /* File private functions. --------------------------------*/
 411:FreeRTOS/tasks.c **** 
 412:FreeRTOS/tasks.c **** /**
 413:FreeRTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 414:FreeRTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 415:FreeRTOS/tasks.c ****  * is in any other state.
 416:FreeRTOS/tasks.c ****  */
 417:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 418:FreeRTOS/tasks.c **** 
 419:FreeRTOS/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 420:FreeRTOS/tasks.c **** 
 421:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 422:FreeRTOS/tasks.c **** 
 423:FreeRTOS/tasks.c **** /*
 424:FreeRTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 425:FreeRTOS/tasks.c ****  * automatically upon the creation of the first task.
 426:FreeRTOS/tasks.c ****  */
 427:FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 428:FreeRTOS/tasks.c **** 
 429:FreeRTOS/tasks.c **** /*
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 9


 430:FreeRTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 431:FreeRTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 432:FreeRTOS/tasks.c ****  * creation of the first user task.
 433:FreeRTOS/tasks.c ****  *
 434:FreeRTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 435:FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 436:FreeRTOS/tasks.c ****  *
 437:FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 438:FreeRTOS/tasks.c ****  *
 439:FreeRTOS/tasks.c ****  */
 440:FreeRTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters ) PRIVILEGED_FUNCTION;
 441:FreeRTOS/tasks.c **** 
 442:FreeRTOS/tasks.c **** /*
 443:FreeRTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 444:FreeRTOS/tasks.c ****  * including the stack pointed to by the TCB.
 445:FreeRTOS/tasks.c ****  *
 446:FreeRTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 447:FreeRTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 448:FreeRTOS/tasks.c ****  */
 449:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 450:FreeRTOS/tasks.c **** 
 451:FreeRTOS/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB ) PRIVILEGED_FUNCTION;
 452:FreeRTOS/tasks.c **** 
 453:FreeRTOS/tasks.c **** #endif
 454:FreeRTOS/tasks.c **** 
 455:FreeRTOS/tasks.c **** /*
 456:FreeRTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 457:FreeRTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 458:FreeRTOS/tasks.c ****  * and its TCB deleted.
 459:FreeRTOS/tasks.c ****  */
 460:FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 461:FreeRTOS/tasks.c **** 
 462:FreeRTOS/tasks.c **** /*
 463:FreeRTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 464:FreeRTOS/tasks.c ****  * either the current or the overflow delayed task list.
 465:FreeRTOS/tasks.c ****  */
 466:FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
 467:FreeRTOS/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely ) PRIVILEGED_FUN
 468:FreeRTOS/tasks.c **** 
 469:FreeRTOS/tasks.c **** /*
 470:FreeRTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 471:FreeRTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 472:FreeRTOS/tasks.c ****  * a suspended list, etc.).
 473:FreeRTOS/tasks.c ****  *
 474:FreeRTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 475:FreeRTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 476:FreeRTOS/tasks.c ****  */
 477:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 478:FreeRTOS/tasks.c **** 
 479:FreeRTOS/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
 480:FreeRTOS/tasks.c ****                                                      List_t * pxList,
 481:FreeRTOS/tasks.c ****                                                      eTaskState eState ) PRIVILEGED_FUNCTION;
 482:FreeRTOS/tasks.c **** 
 483:FreeRTOS/tasks.c **** #endif
 484:FreeRTOS/tasks.c **** 
 485:FreeRTOS/tasks.c **** /*
 486:FreeRTOS/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 10


 487:FreeRTOS/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 488:FreeRTOS/tasks.c ****  */
 489:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 490:FreeRTOS/tasks.c **** 
 491:FreeRTOS/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
 492:FreeRTOS/tasks.c ****                                                      const char pcNameToQuery[] ) PRIVILEGED_FUNCTI
 493:FreeRTOS/tasks.c **** 
 494:FreeRTOS/tasks.c **** #endif
 495:FreeRTOS/tasks.c **** 
 496:FreeRTOS/tasks.c **** /*
 497:FreeRTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 498:FreeRTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 499:FreeRTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 500:FreeRTOS/tasks.c ****  */
 501:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 502:FreeRTOS/tasks.c **** 
 503:FreeRTOS/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVIL
 504:FreeRTOS/tasks.c **** 
 505:FreeRTOS/tasks.c **** #endif
 506:FreeRTOS/tasks.c **** 
 507:FreeRTOS/tasks.c **** /*
 508:FreeRTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 509:FreeRTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 510:FreeRTOS/tasks.c ****  *
 511:FreeRTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 512:FreeRTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 513:FreeRTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 514:FreeRTOS/tasks.c ****  * set to a value other than 1.
 515:FreeRTOS/tasks.c ****  */
 516:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 517:FreeRTOS/tasks.c **** 
 518:FreeRTOS/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 519:FreeRTOS/tasks.c **** 
 520:FreeRTOS/tasks.c **** #endif
 521:FreeRTOS/tasks.c **** 
 522:FreeRTOS/tasks.c **** /*
 523:FreeRTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 524:FreeRTOS/tasks.c ****  * will exit the Blocked state.
 525:FreeRTOS/tasks.c ****  */
 526:FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void ) PRIVILEGED_FUNCTION;
 527:FreeRTOS/tasks.c **** 
 528:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 529:FreeRTOS/tasks.c **** 
 530:FreeRTOS/tasks.c **** /*
 531:FreeRTOS/tasks.c ****  * Helper function used to pad task names with spaces when printing out
 532:FreeRTOS/tasks.c ****  * human readable tables of task information.
 533:FreeRTOS/tasks.c ****  */
 534:FreeRTOS/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
 535:FreeRTOS/tasks.c ****                                         const char * pcTaskName ) PRIVILEGED_FUNCTION;
 536:FreeRTOS/tasks.c **** 
 537:FreeRTOS/tasks.c **** #endif
 538:FreeRTOS/tasks.c **** 
 539:FreeRTOS/tasks.c **** /*
 540:FreeRTOS/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 541:FreeRTOS/tasks.c ****  * dynamically to fill in the structure's members.
 542:FreeRTOS/tasks.c ****  */
 543:FreeRTOS/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 11


 544:FreeRTOS/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 545:FreeRTOS/tasks.c ****                                   const uint32_t ulStackDepth,
 546:FreeRTOS/tasks.c ****                                   void * const pvParameters,
 547:FreeRTOS/tasks.c ****                                   UBaseType_t uxPriority,
 548:FreeRTOS/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 549:FreeRTOS/tasks.c ****                                   TCB_t * pxNewTCB,
 550:FreeRTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 551:FreeRTOS/tasks.c **** 
 552:FreeRTOS/tasks.c **** /*
 553:FreeRTOS/tasks.c ****  * Called after a new task has been created and initialised to place the task
 554:FreeRTOS/tasks.c ****  * under the control of the scheduler.
 555:FreeRTOS/tasks.c ****  */
 556:FreeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB ) PRIVILEGED_FUNCTION;
 557:FreeRTOS/tasks.c **** 
 558:FreeRTOS/tasks.c **** /*
 559:FreeRTOS/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 560:FreeRTOS/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 561:FreeRTOS/tasks.c ****  * called by the function.
 562:FreeRTOS/tasks.c ****  */
 563:FreeRTOS/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 564:FreeRTOS/tasks.c **** 
 565:FreeRTOS/tasks.c ****     static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 566:FreeRTOS/tasks.c **** 
 567:FreeRTOS/tasks.c **** #endif
 568:FreeRTOS/tasks.c **** 
 569:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 570:FreeRTOS/tasks.c **** 
 571:FreeRTOS/tasks.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 572:FreeRTOS/tasks.c **** 
 573:FreeRTOS/tasks.c ****     TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,
 574:FreeRTOS/tasks.c ****                                     const char * const pcName, /*lint !e971 Unqualified char types 
 575:FreeRTOS/tasks.c ****                                     const uint32_t ulStackDepth,
 576:FreeRTOS/tasks.c ****                                     void * const pvParameters,
 577:FreeRTOS/tasks.c ****                                     UBaseType_t uxPriority,
 578:FreeRTOS/tasks.c ****                                     StackType_t * const puxStackBuffer,
 579:FreeRTOS/tasks.c ****                                     StaticTask_t * const pxTaskBuffer )
 580:FreeRTOS/tasks.c ****     {
 581:FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 582:FreeRTOS/tasks.c ****         TaskHandle_t xReturn;
 583:FreeRTOS/tasks.c **** 
 584:FreeRTOS/tasks.c ****         configASSERT( puxStackBuffer != NULL );
 585:FreeRTOS/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 586:FreeRTOS/tasks.c **** 
 587:FreeRTOS/tasks.c ****         #if ( configASSERT_DEFINED == 1 )
 588:FreeRTOS/tasks.c ****             {
 589:FreeRTOS/tasks.c ****                 /* Sanity check that the size of the structure used to declare a
 590:FreeRTOS/tasks.c ****                  * variable of type StaticTask_t equals the size of the real task
 591:FreeRTOS/tasks.c ****                  * structure. */
 592:FreeRTOS/tasks.c ****                 volatile size_t xSize = sizeof( StaticTask_t );
 593:FreeRTOS/tasks.c ****                 configASSERT( xSize == sizeof( TCB_t ) );
 594:FreeRTOS/tasks.c ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 595:FreeRTOS/tasks.c ****             }
 596:FreeRTOS/tasks.c ****         #endif /* configASSERT_DEFINED */
 597:FreeRTOS/tasks.c **** 
 598:FreeRTOS/tasks.c ****         if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 599:FreeRTOS/tasks.c ****         {
 600:FreeRTOS/tasks.c ****             /* The memory used for the task's TCB and stack are passed into this
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 12


 601:FreeRTOS/tasks.c ****              * function - use them. */
 602:FreeRTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the stru
 603:FreeRTOS/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 604:FreeRTOS/tasks.c **** 
 605:FreeRTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has be
 606:FreeRTOS/tasks.c ****                 {
 607:FreeRTOS/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 608:FreeRTOS/tasks.c ****                      * task was created statically in case the task is later deleted. */
 609:FreeRTOS/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 610:FreeRTOS/tasks.c ****                 }
 611:FreeRTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 612:FreeRTOS/tasks.c **** 
 613:FreeRTOS/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xRet
 614:FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 615:FreeRTOS/tasks.c ****         }
 616:FreeRTOS/tasks.c ****         else
 617:FreeRTOS/tasks.c ****         {
 618:FreeRTOS/tasks.c ****             xReturn = NULL;
 619:FreeRTOS/tasks.c ****         }
 620:FreeRTOS/tasks.c **** 
 621:FreeRTOS/tasks.c ****         return xReturn;
 622:FreeRTOS/tasks.c ****     }
 623:FreeRTOS/tasks.c **** 
 624:FreeRTOS/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 625:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 626:FreeRTOS/tasks.c **** 
 627:FreeRTOS/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 628:FreeRTOS/tasks.c **** 
 629:FreeRTOS/tasks.c ****     BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition,
 630:FreeRTOS/tasks.c ****                                             TaskHandle_t * pxCreatedTask )
 631:FreeRTOS/tasks.c ****     {
 632:FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 633:FreeRTOS/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 634:FreeRTOS/tasks.c **** 
 635:FreeRTOS/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 636:FreeRTOS/tasks.c ****         configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 637:FreeRTOS/tasks.c **** 
 638:FreeRTOS/tasks.c ****         if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NUL
 639:FreeRTOS/tasks.c ****         {
 640:FreeRTOS/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 641:FreeRTOS/tasks.c ****              * on the implementation of the port malloc function and whether or
 642:FreeRTOS/tasks.c ****              * not static allocation is being used. */
 643:FreeRTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 644:FreeRTOS/tasks.c **** 
 645:FreeRTOS/tasks.c ****             /* Store the stack location in the TCB. */
 646:FreeRTOS/tasks.c ****             pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 647:FreeRTOS/tasks.c **** 
 648:FreeRTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 649:FreeRTOS/tasks.c ****                 {
 650:FreeRTOS/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 651:FreeRTOS/tasks.c ****                      * task was created statically in case the task is later deleted. */
 652:FreeRTOS/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 653:FreeRTOS/tasks.c ****                 }
 654:FreeRTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 655:FreeRTOS/tasks.c **** 
 656:FreeRTOS/tasks.c ****             prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 657:FreeRTOS/tasks.c ****                                   pxTaskDefinition->pcName,
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 13


 658:FreeRTOS/tasks.c ****                                   ( uint32_t ) pxTaskDefinition->usStackDepth,
 659:FreeRTOS/tasks.c ****                                   pxTaskDefinition->pvParameters,
 660:FreeRTOS/tasks.c ****                                   pxTaskDefinition->uxPriority,
 661:FreeRTOS/tasks.c ****                                   pxCreatedTask, pxNewTCB,
 662:FreeRTOS/tasks.c ****                                   pxTaskDefinition->xRegions );
 663:FreeRTOS/tasks.c **** 
 664:FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 665:FreeRTOS/tasks.c ****             xReturn = pdPASS;
 666:FreeRTOS/tasks.c ****         }
 667:FreeRTOS/tasks.c **** 
 668:FreeRTOS/tasks.c ****         return xReturn;
 669:FreeRTOS/tasks.c ****     }
 670:FreeRTOS/tasks.c **** 
 671:FreeRTOS/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 672:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 673:FreeRTOS/tasks.c **** 
 674:FreeRTOS/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 675:FreeRTOS/tasks.c **** 
 676:FreeRTOS/tasks.c ****     BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition,
 677:FreeRTOS/tasks.c ****                                       TaskHandle_t * pxCreatedTask )
 678:FreeRTOS/tasks.c ****     {
 679:FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 680:FreeRTOS/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 681:FreeRTOS/tasks.c **** 
 682:FreeRTOS/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer );
 683:FreeRTOS/tasks.c **** 
 684:FreeRTOS/tasks.c ****         if( pxTaskDefinition->puxStackBuffer != NULL )
 685:FreeRTOS/tasks.c ****         {
 686:FreeRTOS/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 687:FreeRTOS/tasks.c ****              * on the implementation of the port malloc function and whether or
 688:FreeRTOS/tasks.c ****              * not static allocation is being used. */
 689:FreeRTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 690:FreeRTOS/tasks.c **** 
 691:FreeRTOS/tasks.c ****             if( pxNewTCB != NULL )
 692:FreeRTOS/tasks.c ****             {
 693:FreeRTOS/tasks.c ****                 /* Store the stack location in the TCB. */
 694:FreeRTOS/tasks.c ****                 pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 695:FreeRTOS/tasks.c **** 
 696:FreeRTOS/tasks.c ****                 #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 697:FreeRTOS/tasks.c ****                     {
 698:FreeRTOS/tasks.c ****                         /* Tasks can be created statically or dynamically, so note
 699:FreeRTOS/tasks.c ****                          * this task had a statically allocated stack in case it is
 700:FreeRTOS/tasks.c ****                          * later deleted.  The TCB was allocated dynamically. */
 701:FreeRTOS/tasks.c ****                         pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 702:FreeRTOS/tasks.c ****                     }
 703:FreeRTOS/tasks.c ****                 #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 704:FreeRTOS/tasks.c **** 
 705:FreeRTOS/tasks.c ****                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 706:FreeRTOS/tasks.c ****                                       pxTaskDefinition->pcName,
 707:FreeRTOS/tasks.c ****                                       ( uint32_t ) pxTaskDefinition->usStackDepth,
 708:FreeRTOS/tasks.c ****                                       pxTaskDefinition->pvParameters,
 709:FreeRTOS/tasks.c ****                                       pxTaskDefinition->uxPriority,
 710:FreeRTOS/tasks.c ****                                       pxCreatedTask, pxNewTCB,
 711:FreeRTOS/tasks.c ****                                       pxTaskDefinition->xRegions );
 712:FreeRTOS/tasks.c **** 
 713:FreeRTOS/tasks.c ****                 prvAddNewTaskToReadyList( pxNewTCB );
 714:FreeRTOS/tasks.c ****                 xReturn = pdPASS;
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 14


 715:FreeRTOS/tasks.c ****             }
 716:FreeRTOS/tasks.c ****         }
 717:FreeRTOS/tasks.c **** 
 718:FreeRTOS/tasks.c ****         return xReturn;
 719:FreeRTOS/tasks.c ****     }
 720:FreeRTOS/tasks.c **** 
 721:FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 722:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 723:FreeRTOS/tasks.c **** 
 724:FreeRTOS/tasks.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 725:FreeRTOS/tasks.c **** 
 726:FreeRTOS/tasks.c ****     BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,
 727:FreeRTOS/tasks.c ****                             const char * const pcName, /*lint !e971 Unqualified char types are allo
 728:FreeRTOS/tasks.c ****                             const configSTACK_DEPTH_TYPE usStackDepth,
 729:FreeRTOS/tasks.c ****                             void * const pvParameters,
 730:FreeRTOS/tasks.c ****                             UBaseType_t uxPriority,
 731:FreeRTOS/tasks.c ****                             TaskHandle_t * const pxCreatedTask )
 732:FreeRTOS/tasks.c ****     {
 733:FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 734:FreeRTOS/tasks.c ****         BaseType_t xReturn;
 735:FreeRTOS/tasks.c **** 
 736:FreeRTOS/tasks.c ****         /* If the stack grows down then allocate the stack then the TCB so the stack
 737:FreeRTOS/tasks.c ****          * does not grow into the TCB.  Likewise if the stack grows up then allocate
 738:FreeRTOS/tasks.c ****          * the TCB then the stack. */
 739:FreeRTOS/tasks.c ****         #if ( portSTACK_GROWTH > 0 )
 740:FreeRTOS/tasks.c ****             {
 741:FreeRTOS/tasks.c ****                 /* Allocate space for the TCB.  Where the memory comes from depends on
 742:FreeRTOS/tasks.c ****                  * the implementation of the port malloc function and whether or not static
 743:FreeRTOS/tasks.c ****                  * allocation is being used. */
 744:FreeRTOS/tasks.c ****                 pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 745:FreeRTOS/tasks.c **** 
 746:FreeRTOS/tasks.c ****                 if( pxNewTCB != NULL )
 747:FreeRTOS/tasks.c ****                 {
 748:FreeRTOS/tasks.c ****                     /* Allocate space for the stack used by the task being created.
 749:FreeRTOS/tasks.c ****                      * The base of the stack memory stored in the TCB so the task can
 750:FreeRTOS/tasks.c ****                      * be deleted later if required. */
 751:FreeRTOS/tasks.c ****                     pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth
 752:FreeRTOS/tasks.c **** 
 753:FreeRTOS/tasks.c ****                     if( pxNewTCB->pxStack == NULL )
 754:FreeRTOS/tasks.c ****                     {
 755:FreeRTOS/tasks.c ****                         /* Could not allocate the stack.  Delete the allocated TCB. */
 756:FreeRTOS/tasks.c ****                         vPortFree( pxNewTCB );
 757:FreeRTOS/tasks.c ****                         pxNewTCB = NULL;
 758:FreeRTOS/tasks.c ****                     }
 759:FreeRTOS/tasks.c ****                 }
 760:FreeRTOS/tasks.c ****             }
 761:FreeRTOS/tasks.c ****         #else /* portSTACK_GROWTH */
 762:FreeRTOS/tasks.c ****             {
 763:FreeRTOS/tasks.c ****                 StackType_t * pxStack;
 764:FreeRTOS/tasks.c **** 
 765:FreeRTOS/tasks.c ****                 /* Allocate space for the stack used by the task being created. */
 766:FreeRTOS/tasks.c ****                 pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); 
 767:FreeRTOS/tasks.c **** 
 768:FreeRTOS/tasks.c ****                 if( pxStack != NULL )
 769:FreeRTOS/tasks.c ****                 {
 770:FreeRTOS/tasks.c ****                     /* Allocate space for the TCB. */
 771:FreeRTOS/tasks.c ****                     pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 Al
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 15


 772:FreeRTOS/tasks.c **** 
 773:FreeRTOS/tasks.c ****                     if( pxNewTCB != NULL )
 774:FreeRTOS/tasks.c ****                     {
 775:FreeRTOS/tasks.c ****                         /* Store the stack location in the TCB. */
 776:FreeRTOS/tasks.c ****                         pxNewTCB->pxStack = pxStack;
 777:FreeRTOS/tasks.c ****                     }
 778:FreeRTOS/tasks.c ****                     else
 779:FreeRTOS/tasks.c ****                     {
 780:FreeRTOS/tasks.c ****                         /* The stack cannot be used as the TCB was not created.  Free
 781:FreeRTOS/tasks.c ****                          * it again. */
 782:FreeRTOS/tasks.c ****                         vPortFree( pxStack );
 783:FreeRTOS/tasks.c ****                     }
 784:FreeRTOS/tasks.c ****                 }
 785:FreeRTOS/tasks.c ****                 else
 786:FreeRTOS/tasks.c ****                 {
 787:FreeRTOS/tasks.c ****                     pxNewTCB = NULL;
 788:FreeRTOS/tasks.c ****                 }
 789:FreeRTOS/tasks.c ****             }
 790:FreeRTOS/tasks.c ****         #endif /* portSTACK_GROWTH */
 791:FreeRTOS/tasks.c **** 
 792:FreeRTOS/tasks.c ****         if( pxNewTCB != NULL )
 793:FreeRTOS/tasks.c ****         {
 794:FreeRTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has be
 795:FreeRTOS/tasks.c ****                 {
 796:FreeRTOS/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 797:FreeRTOS/tasks.c ****                      * task was created dynamically in case it is later deleted. */
 798:FreeRTOS/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 799:FreeRTOS/tasks.c ****                 }
 800:FreeRTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 801:FreeRTOS/tasks.c **** 
 802:FreeRTOS/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPr
 803:FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 804:FreeRTOS/tasks.c ****             xReturn = pdPASS;
 805:FreeRTOS/tasks.c ****         }
 806:FreeRTOS/tasks.c ****         else
 807:FreeRTOS/tasks.c ****         {
 808:FreeRTOS/tasks.c ****             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 809:FreeRTOS/tasks.c ****         }
 810:FreeRTOS/tasks.c **** 
 811:FreeRTOS/tasks.c ****         return xReturn;
 812:FreeRTOS/tasks.c ****     }
 813:FreeRTOS/tasks.c **** 
 814:FreeRTOS/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 815:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 816:FreeRTOS/tasks.c **** 
 817:FreeRTOS/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 818:FreeRTOS/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 819:FreeRTOS/tasks.c ****                                   const uint32_t ulStackDepth,
 820:FreeRTOS/tasks.c ****                                   void * const pvParameters,
 821:FreeRTOS/tasks.c ****                                   UBaseType_t uxPriority,
 822:FreeRTOS/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 823:FreeRTOS/tasks.c ****                                   TCB_t * pxNewTCB,
 824:FreeRTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions )
 825:FreeRTOS/tasks.c **** {
 826:FreeRTOS/tasks.c ****     StackType_t * pxTopOfStack;
 827:FreeRTOS/tasks.c ****     UBaseType_t x;
 828:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 16


 829:FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 830:FreeRTOS/tasks.c ****         /* Should the task be created in privileged mode? */
 831:FreeRTOS/tasks.c ****         BaseType_t xRunPrivileged;
 832:FreeRTOS/tasks.c **** 
 833:FreeRTOS/tasks.c ****         if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 834:FreeRTOS/tasks.c ****         {
 835:FreeRTOS/tasks.c ****             xRunPrivileged = pdTRUE;
 836:FreeRTOS/tasks.c ****         }
 837:FreeRTOS/tasks.c ****         else
 838:FreeRTOS/tasks.c ****         {
 839:FreeRTOS/tasks.c ****             xRunPrivileged = pdFALSE;
 840:FreeRTOS/tasks.c ****         }
 841:FreeRTOS/tasks.c ****         uxPriority &= ~portPRIVILEGE_BIT;
 842:FreeRTOS/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS == 1 */
 843:FreeRTOS/tasks.c **** 
 844:FreeRTOS/tasks.c ****     /* Avoid dependency on memset() if it is not required. */
 845:FreeRTOS/tasks.c ****     #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 846:FreeRTOS/tasks.c ****         {
 847:FreeRTOS/tasks.c ****             /* Fill the stack with a known value to assist debugging. */
 848:FreeRTOS/tasks.c ****             ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth
 849:FreeRTOS/tasks.c ****         }
 850:FreeRTOS/tasks.c ****     #endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 851:FreeRTOS/tasks.c **** 
 852:FreeRTOS/tasks.c ****     /* Calculate the top of stack address.  This depends on whether the stack
 853:FreeRTOS/tasks.c ****      * grows from high memory to low (as per the 80x86) or vice versa.
 854:FreeRTOS/tasks.c ****      * portSTACK_GROWTH is used to make the result positive or negative as required
 855:FreeRTOS/tasks.c ****      * by the port. */
 856:FreeRTOS/tasks.c ****     #if ( portSTACK_GROWTH < 0 )
 857:FreeRTOS/tasks.c ****         {
 858:FreeRTOS/tasks.c ****             pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 859:FreeRTOS/tasks.c ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 860:FreeRTOS/tasks.c **** 
 861:FreeRTOS/tasks.c ****             /* Check the alignment of the calculated top of stack is correct. */
 862:FreeRTOS/tasks.c ****             configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) po
 863:FreeRTOS/tasks.c **** 
 864:FreeRTOS/tasks.c ****             #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
 865:FreeRTOS/tasks.c ****                 {
 866:FreeRTOS/tasks.c ****                     /* Also record the stack's high address, which may assist
 867:FreeRTOS/tasks.c ****                      * debugging. */
 868:FreeRTOS/tasks.c ****                     pxNewTCB->pxEndOfStack = pxTopOfStack;
 869:FreeRTOS/tasks.c ****                 }
 870:FreeRTOS/tasks.c ****             #endif /* configRECORD_STACK_HIGH_ADDRESS */
 871:FreeRTOS/tasks.c ****         }
 872:FreeRTOS/tasks.c ****     #else /* portSTACK_GROWTH */
 873:FreeRTOS/tasks.c ****         {
 874:FreeRTOS/tasks.c ****             pxTopOfStack = pxNewTCB->pxStack;
 875:FreeRTOS/tasks.c **** 
 876:FreeRTOS/tasks.c ****             /* Check the alignment of the stack buffer is correct. */
 877:FreeRTOS/tasks.c ****             configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE
 878:FreeRTOS/tasks.c **** 
 879:FreeRTOS/tasks.c ****             /* The other extreme of the stack space is required if stack checking is
 880:FreeRTOS/tasks.c ****              * performed. */
 881:FreeRTOS/tasks.c ****             pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 882:FreeRTOS/tasks.c ****         }
 883:FreeRTOS/tasks.c ****     #endif /* portSTACK_GROWTH */
 884:FreeRTOS/tasks.c **** 
 885:FreeRTOS/tasks.c ****     /* Store the task name in the TCB. */
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 17


 886:FreeRTOS/tasks.c ****     if( pcName != NULL )
 887:FreeRTOS/tasks.c ****     {
 888:FreeRTOS/tasks.c ****         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 889:FreeRTOS/tasks.c ****         {
 890:FreeRTOS/tasks.c ****             pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 891:FreeRTOS/tasks.c **** 
 892:FreeRTOS/tasks.c ****             /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 893:FreeRTOS/tasks.c ****              * configMAX_TASK_NAME_LEN characters just in case the memory after the
 894:FreeRTOS/tasks.c ****              * string is not accessible (extremely unlikely). */
 895:FreeRTOS/tasks.c ****             if( pcName[ x ] == ( char ) 0x00 )
 896:FreeRTOS/tasks.c ****             {
 897:FreeRTOS/tasks.c ****                 break;
 898:FreeRTOS/tasks.c ****             }
 899:FreeRTOS/tasks.c ****             else
 900:FreeRTOS/tasks.c ****             {
 901:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
 902:FreeRTOS/tasks.c ****             }
 903:FreeRTOS/tasks.c ****         }
 904:FreeRTOS/tasks.c **** 
 905:FreeRTOS/tasks.c ****         /* Ensure the name string is terminated in the case that the string length
 906:FreeRTOS/tasks.c ****          * was greater or equal to configMAX_TASK_NAME_LEN. */
 907:FreeRTOS/tasks.c ****         pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 908:FreeRTOS/tasks.c ****     }
 909:FreeRTOS/tasks.c ****     else
 910:FreeRTOS/tasks.c ****     {
 911:FreeRTOS/tasks.c ****         /* The task has not been given a name, so just ensure there is a NULL
 912:FreeRTOS/tasks.c ****          * terminator when it is read out. */
 913:FreeRTOS/tasks.c ****         pxNewTCB->pcTaskName[ 0 ] = 0x00;
 914:FreeRTOS/tasks.c ****     }
 915:FreeRTOS/tasks.c **** 
 916:FreeRTOS/tasks.c ****     /* This is used as an array index so must ensure it's not too large.  First
 917:FreeRTOS/tasks.c ****      * remove the privilege bit if one is present. */
 918:FreeRTOS/tasks.c ****     if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 919:FreeRTOS/tasks.c ****     {
 920:FreeRTOS/tasks.c ****         uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 921:FreeRTOS/tasks.c ****     }
 922:FreeRTOS/tasks.c ****     else
 923:FreeRTOS/tasks.c ****     {
 924:FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 925:FreeRTOS/tasks.c ****     }
 926:FreeRTOS/tasks.c **** 
 927:FreeRTOS/tasks.c ****     pxNewTCB->uxPriority = uxPriority;
 928:FreeRTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 929:FreeRTOS/tasks.c ****         {
 930:FreeRTOS/tasks.c ****             pxNewTCB->uxBasePriority = uxPriority;
 931:FreeRTOS/tasks.c ****             pxNewTCB->uxMutexesHeld = 0;
 932:FreeRTOS/tasks.c ****         }
 933:FreeRTOS/tasks.c ****     #endif /* configUSE_MUTEXES */
 934:FreeRTOS/tasks.c **** 
 935:FreeRTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 936:FreeRTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 937:FreeRTOS/tasks.c **** 
 938:FreeRTOS/tasks.c ****     /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 939:FreeRTOS/tasks.c ****      * back to  the containing TCB from a generic item in a list. */
 940:FreeRTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 941:FreeRTOS/tasks.c **** 
 942:FreeRTOS/tasks.c ****     /* Event lists are always in priority order. */
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 18


 943:FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - (
 944:FreeRTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 945:FreeRTOS/tasks.c **** 
 946:FreeRTOS/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 947:FreeRTOS/tasks.c ****         {
 948:FreeRTOS/tasks.c ****             pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 949:FreeRTOS/tasks.c ****         }
 950:FreeRTOS/tasks.c ****     #endif /* portCRITICAL_NESTING_IN_TCB */
 951:FreeRTOS/tasks.c **** 
 952:FreeRTOS/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 953:FreeRTOS/tasks.c ****         {
 954:FreeRTOS/tasks.c ****             pxNewTCB->pxTaskTag = NULL;
 955:FreeRTOS/tasks.c ****         }
 956:FreeRTOS/tasks.c ****     #endif /* configUSE_APPLICATION_TASK_TAG */
 957:FreeRTOS/tasks.c **** 
 958:FreeRTOS/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 959:FreeRTOS/tasks.c ****         {
 960:FreeRTOS/tasks.c ****             pxNewTCB->ulRunTimeCounter = 0UL;
 961:FreeRTOS/tasks.c ****         }
 962:FreeRTOS/tasks.c ****     #endif /* configGENERATE_RUN_TIME_STATS */
 963:FreeRTOS/tasks.c **** 
 964:FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 965:FreeRTOS/tasks.c ****         {
 966:FreeRTOS/tasks.c ****             vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ul
 967:FreeRTOS/tasks.c ****         }
 968:FreeRTOS/tasks.c ****     #else
 969:FreeRTOS/tasks.c ****         {
 970:FreeRTOS/tasks.c ****             /* Avoid compiler warning about unreferenced parameter. */
 971:FreeRTOS/tasks.c ****             ( void ) xRegions;
 972:FreeRTOS/tasks.c ****         }
 973:FreeRTOS/tasks.c ****     #endif
 974:FreeRTOS/tasks.c **** 
 975:FreeRTOS/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 976:FreeRTOS/tasks.c ****         {
 977:FreeRTOS/tasks.c ****             memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNe
 978:FreeRTOS/tasks.c ****         }
 979:FreeRTOS/tasks.c ****     #endif
 980:FreeRTOS/tasks.c **** 
 981:FreeRTOS/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 982:FreeRTOS/tasks.c ****         {
 983:FreeRTOS/tasks.c ****             memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotif
 984:FreeRTOS/tasks.c ****             memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyS
 985:FreeRTOS/tasks.c ****         }
 986:FreeRTOS/tasks.c ****     #endif
 987:FreeRTOS/tasks.c **** 
 988:FreeRTOS/tasks.c ****     #if ( configUSE_NEWLIB_REENTRANT == 1 )
 989:FreeRTOS/tasks.c ****         {
 990:FreeRTOS/tasks.c ****             /* Initialise this task's Newlib reent structure.
 991:FreeRTOS/tasks.c ****              * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 992:FreeRTOS/tasks.c ****              * for additional information. */
 993:FreeRTOS/tasks.c ****             _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 994:FreeRTOS/tasks.c ****         }
 995:FreeRTOS/tasks.c ****     #endif
 996:FreeRTOS/tasks.c **** 
 997:FreeRTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 998:FreeRTOS/tasks.c ****         {
 999:FreeRTOS/tasks.c ****             pxNewTCB->ucDelayAborted = pdFALSE;
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 19


1000:FreeRTOS/tasks.c ****         }
1001:FreeRTOS/tasks.c ****     #endif
1002:FreeRTOS/tasks.c **** 
1003:FreeRTOS/tasks.c ****     /* Initialize the TCB stack to look as if the task was already running,
1004:FreeRTOS/tasks.c ****      * but had been interrupted by the scheduler.  The return address is set
1005:FreeRTOS/tasks.c ****      * to the start of the task function. Once the stack has been initialised
1006:FreeRTOS/tasks.c ****      * the top of stack variable is updated. */
1007:FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
1008:FreeRTOS/tasks.c ****         {
1009:FreeRTOS/tasks.c ****             /* If the port has capability to detect stack overflow,
1010:FreeRTOS/tasks.c ****              * pass the stack end address to the stack initialization
1011:FreeRTOS/tasks.c ****              * function as well. */
1012:FreeRTOS/tasks.c ****             #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1013:FreeRTOS/tasks.c ****                 {
1014:FreeRTOS/tasks.c ****                     #if ( portSTACK_GROWTH < 0 )
1015:FreeRTOS/tasks.c ****                         {
1016:FreeRTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1017:FreeRTOS/tasks.c ****                         }
1018:FreeRTOS/tasks.c ****                     #else /* portSTACK_GROWTH */
1019:FreeRTOS/tasks.c ****                         {
1020:FreeRTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1021:FreeRTOS/tasks.c ****                         }
1022:FreeRTOS/tasks.c ****                     #endif /* portSTACK_GROWTH */
1023:FreeRTOS/tasks.c ****                 }
1024:FreeRTOS/tasks.c ****             #else /* portHAS_STACK_OVERFLOW_CHECKING */
1025:FreeRTOS/tasks.c ****                 {
1026:FreeRTOS/tasks.c ****                     pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvPar
1027:FreeRTOS/tasks.c ****                 }
1028:FreeRTOS/tasks.c ****             #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1029:FreeRTOS/tasks.c ****         }
1030:FreeRTOS/tasks.c ****     #else /* portUSING_MPU_WRAPPERS */
1031:FreeRTOS/tasks.c ****         {
1032:FreeRTOS/tasks.c ****             /* If the port has capability to detect stack overflow,
1033:FreeRTOS/tasks.c ****              * pass the stack end address to the stack initialization
1034:FreeRTOS/tasks.c ****              * function as well. */
1035:FreeRTOS/tasks.c ****             #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1036:FreeRTOS/tasks.c ****                 {
1037:FreeRTOS/tasks.c ****                     #if ( portSTACK_GROWTH < 0 )
1038:FreeRTOS/tasks.c ****                         {
1039:FreeRTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1040:FreeRTOS/tasks.c ****                         }
1041:FreeRTOS/tasks.c ****                     #else /* portSTACK_GROWTH */
1042:FreeRTOS/tasks.c ****                         {
1043:FreeRTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1044:FreeRTOS/tasks.c ****                         }
1045:FreeRTOS/tasks.c ****                     #endif /* portSTACK_GROWTH */
1046:FreeRTOS/tasks.c ****                 }
1047:FreeRTOS/tasks.c ****             #else /* portHAS_STACK_OVERFLOW_CHECKING */
1048:FreeRTOS/tasks.c ****                 {
1049:FreeRTOS/tasks.c ****                     pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvPar
1050:FreeRTOS/tasks.c ****                 }
1051:FreeRTOS/tasks.c ****             #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1052:FreeRTOS/tasks.c ****         }
1053:FreeRTOS/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS */
1054:FreeRTOS/tasks.c **** 
1055:FreeRTOS/tasks.c ****     if( pxCreatedTask != NULL )
1056:FreeRTOS/tasks.c ****     {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 20


1057:FreeRTOS/tasks.c ****         /* Pass the handle out in an anonymous way.  The handle can be used to
1058:FreeRTOS/tasks.c ****          * change the created task's priority, delete the created task, etc.*/
1059:FreeRTOS/tasks.c ****         *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1060:FreeRTOS/tasks.c ****     }
1061:FreeRTOS/tasks.c ****     else
1062:FreeRTOS/tasks.c ****     {
1063:FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1064:FreeRTOS/tasks.c ****     }
1065:FreeRTOS/tasks.c **** }
1066:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1067:FreeRTOS/tasks.c **** 
1068:FreeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
1069:FreeRTOS/tasks.c **** {
1070:FreeRTOS/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
1071:FreeRTOS/tasks.c ****      * updated. */
1072:FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
1073:FreeRTOS/tasks.c ****     {
1074:FreeRTOS/tasks.c ****         uxCurrentNumberOfTasks++;
1075:FreeRTOS/tasks.c **** 
1076:FreeRTOS/tasks.c ****         if( pxCurrentTCB == NULL )
1077:FreeRTOS/tasks.c ****         {
1078:FreeRTOS/tasks.c ****             /* There are no other tasks, or all the other tasks are in
1079:FreeRTOS/tasks.c ****              * the suspended state - make this the current task. */
1080:FreeRTOS/tasks.c ****             pxCurrentTCB = pxNewTCB;
1081:FreeRTOS/tasks.c **** 
1082:FreeRTOS/tasks.c ****             if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1083:FreeRTOS/tasks.c ****             {
1084:FreeRTOS/tasks.c ****                 /* This is the first task to be created so do the preliminary
1085:FreeRTOS/tasks.c ****                  * initialisation required.  We will not recover if this call
1086:FreeRTOS/tasks.c ****                  * fails, but we will report the failure. */
1087:FreeRTOS/tasks.c ****                 prvInitialiseTaskLists();
1088:FreeRTOS/tasks.c ****             }
1089:FreeRTOS/tasks.c ****             else
1090:FreeRTOS/tasks.c ****             {
1091:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1092:FreeRTOS/tasks.c ****             }
1093:FreeRTOS/tasks.c ****         }
1094:FreeRTOS/tasks.c ****         else
1095:FreeRTOS/tasks.c ****         {
1096:FreeRTOS/tasks.c ****             /* If the scheduler is not already running, make this task the
1097:FreeRTOS/tasks.c ****              * current task if it is the highest priority task to be created
1098:FreeRTOS/tasks.c ****              * so far. */
1099:FreeRTOS/tasks.c ****             if( xSchedulerRunning == pdFALSE )
1100:FreeRTOS/tasks.c ****             {
1101:FreeRTOS/tasks.c ****                 if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1102:FreeRTOS/tasks.c ****                 {
1103:FreeRTOS/tasks.c ****                     pxCurrentTCB = pxNewTCB;
1104:FreeRTOS/tasks.c ****                 }
1105:FreeRTOS/tasks.c ****                 else
1106:FreeRTOS/tasks.c ****                 {
1107:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1108:FreeRTOS/tasks.c ****                 }
1109:FreeRTOS/tasks.c ****             }
1110:FreeRTOS/tasks.c ****             else
1111:FreeRTOS/tasks.c ****             {
1112:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1113:FreeRTOS/tasks.c ****             }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 21


1114:FreeRTOS/tasks.c ****         }
1115:FreeRTOS/tasks.c **** 
1116:FreeRTOS/tasks.c ****         uxTaskNumber++;
1117:FreeRTOS/tasks.c **** 
1118:FreeRTOS/tasks.c ****         #if ( configUSE_TRACE_FACILITY == 1 )
1119:FreeRTOS/tasks.c ****             {
1120:FreeRTOS/tasks.c ****                 /* Add a counter into the TCB for tracing only. */
1121:FreeRTOS/tasks.c ****                 pxNewTCB->uxTCBNumber = uxTaskNumber;
1122:FreeRTOS/tasks.c ****             }
1123:FreeRTOS/tasks.c ****         #endif /* configUSE_TRACE_FACILITY */
1124:FreeRTOS/tasks.c ****         traceTASK_CREATE( pxNewTCB );
1125:FreeRTOS/tasks.c **** 
1126:FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxNewTCB );
1127:FreeRTOS/tasks.c **** 
1128:FreeRTOS/tasks.c ****         portSETUP_TCB( pxNewTCB );
1129:FreeRTOS/tasks.c ****     }
1130:FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
1131:FreeRTOS/tasks.c **** 
1132:FreeRTOS/tasks.c ****     if( xSchedulerRunning != pdFALSE )
1133:FreeRTOS/tasks.c ****     {
1134:FreeRTOS/tasks.c ****         /* If the created task is of a higher priority than the current task
1135:FreeRTOS/tasks.c ****          * then it should run now. */
1136:FreeRTOS/tasks.c ****         if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1137:FreeRTOS/tasks.c ****         {
1138:FreeRTOS/tasks.c ****             taskYIELD_IF_USING_PREEMPTION();
1139:FreeRTOS/tasks.c ****         }
1140:FreeRTOS/tasks.c ****         else
1141:FreeRTOS/tasks.c ****         {
1142:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1143:FreeRTOS/tasks.c ****         }
1144:FreeRTOS/tasks.c ****     }
1145:FreeRTOS/tasks.c ****     else
1146:FreeRTOS/tasks.c ****     {
1147:FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1148:FreeRTOS/tasks.c ****     }
1149:FreeRTOS/tasks.c **** }
1150:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1151:FreeRTOS/tasks.c **** 
1152:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1153:FreeRTOS/tasks.c **** 
1154:FreeRTOS/tasks.c ****     void vTaskDelete( TaskHandle_t xTaskToDelete )
1155:FreeRTOS/tasks.c ****     {
1156:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
1157:FreeRTOS/tasks.c **** 
1158:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
1159:FreeRTOS/tasks.c ****         {
1160:FreeRTOS/tasks.c ****             /* If null is passed in here then it is the calling task that is
1161:FreeRTOS/tasks.c ****              * being deleted. */
1162:FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1163:FreeRTOS/tasks.c **** 
1164:FreeRTOS/tasks.c ****             /* Remove task from the ready/delayed list. */
1165:FreeRTOS/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1166:FreeRTOS/tasks.c ****             {
1167:FreeRTOS/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1168:FreeRTOS/tasks.c ****             }
1169:FreeRTOS/tasks.c ****             else
1170:FreeRTOS/tasks.c ****             {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 22


1171:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1172:FreeRTOS/tasks.c ****             }
1173:FreeRTOS/tasks.c **** 
1174:FreeRTOS/tasks.c ****             /* Is the task waiting on an event also? */
1175:FreeRTOS/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1176:FreeRTOS/tasks.c ****             {
1177:FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1178:FreeRTOS/tasks.c ****             }
1179:FreeRTOS/tasks.c ****             else
1180:FreeRTOS/tasks.c ****             {
1181:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1182:FreeRTOS/tasks.c ****             }
1183:FreeRTOS/tasks.c **** 
1184:FreeRTOS/tasks.c ****             /* Increment the uxTaskNumber also so kernel aware debuggers can
1185:FreeRTOS/tasks.c ****              * detect that the task lists need re-generating.  This is done before
1186:FreeRTOS/tasks.c ****              * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1187:FreeRTOS/tasks.c ****              * not return. */
1188:FreeRTOS/tasks.c ****             uxTaskNumber++;
1189:FreeRTOS/tasks.c **** 
1190:FreeRTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
1191:FreeRTOS/tasks.c ****             {
1192:FreeRTOS/tasks.c ****                 /* A task is deleting itself.  This cannot complete within the
1193:FreeRTOS/tasks.c ****                  * task itself, as a context switch to another task is required.
1194:FreeRTOS/tasks.c ****                  * Place the task in the termination list.  The idle task will
1195:FreeRTOS/tasks.c ****                  * check the termination list and free up any memory allocated by
1196:FreeRTOS/tasks.c ****                  * the scheduler for the TCB and stack of the deleted task. */
1197:FreeRTOS/tasks.c ****                 vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1198:FreeRTOS/tasks.c **** 
1199:FreeRTOS/tasks.c ****                 /* Increment the ucTasksDeleted variable so the idle task knows
1200:FreeRTOS/tasks.c ****                  * there is a task that has been deleted and that it should therefore
1201:FreeRTOS/tasks.c ****                  * check the xTasksWaitingTermination list. */
1202:FreeRTOS/tasks.c ****                 ++uxDeletedTasksWaitingCleanUp;
1203:FreeRTOS/tasks.c **** 
1204:FreeRTOS/tasks.c ****                 /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1205:FreeRTOS/tasks.c ****                  * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1206:FreeRTOS/tasks.c ****                 traceTASK_DELETE( pxTCB );
1207:FreeRTOS/tasks.c **** 
1208:FreeRTOS/tasks.c ****                 /* The pre-delete hook is primarily for the Windows simulator,
1209:FreeRTOS/tasks.c ****                  * in which Windows specific clean up operations are performed,
1210:FreeRTOS/tasks.c ****                  * after which it is not possible to yield away from this task -
1211:FreeRTOS/tasks.c ****                  * hence xYieldPending is used to latch that a context switch is
1212:FreeRTOS/tasks.c ****                  * required. */
1213:FreeRTOS/tasks.c ****                 portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1214:FreeRTOS/tasks.c ****             }
1215:FreeRTOS/tasks.c ****             else
1216:FreeRTOS/tasks.c ****             {
1217:FreeRTOS/tasks.c ****                 --uxCurrentNumberOfTasks;
1218:FreeRTOS/tasks.c ****                 traceTASK_DELETE( pxTCB );
1219:FreeRTOS/tasks.c ****                 prvDeleteTCB( pxTCB );
1220:FreeRTOS/tasks.c **** 
1221:FreeRTOS/tasks.c ****                 /* Reset the next expected unblock time in case it referred to
1222:FreeRTOS/tasks.c ****                  * the task that has just been deleted. */
1223:FreeRTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
1224:FreeRTOS/tasks.c ****             }
1225:FreeRTOS/tasks.c ****         }
1226:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
1227:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 23


1228:FreeRTOS/tasks.c ****         /* Force a reschedule if it is the currently running task that has just
1229:FreeRTOS/tasks.c ****          * been deleted. */
1230:FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
1231:FreeRTOS/tasks.c ****         {
1232:FreeRTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
1233:FreeRTOS/tasks.c ****             {
1234:FreeRTOS/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
1235:FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
1236:FreeRTOS/tasks.c ****             }
1237:FreeRTOS/tasks.c ****             else
1238:FreeRTOS/tasks.c ****             {
1239:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1240:FreeRTOS/tasks.c ****             }
1241:FreeRTOS/tasks.c ****         }
1242:FreeRTOS/tasks.c ****     }
1243:FreeRTOS/tasks.c **** 
1244:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1245:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1246:FreeRTOS/tasks.c **** 
1247:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskDelayUntil == 1 )
1248:FreeRTOS/tasks.c **** 
1249:FreeRTOS/tasks.c ****     BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
1250:FreeRTOS/tasks.c ****                                 const TickType_t xTimeIncrement )
1251:FreeRTOS/tasks.c ****     {
1252:FreeRTOS/tasks.c ****         TickType_t xTimeToWake;
1253:FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1254:FreeRTOS/tasks.c **** 
1255:FreeRTOS/tasks.c ****         configASSERT( pxPreviousWakeTime );
1256:FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
1257:FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
1258:FreeRTOS/tasks.c **** 
1259:FreeRTOS/tasks.c ****         vTaskSuspendAll();
1260:FreeRTOS/tasks.c ****         {
1261:FreeRTOS/tasks.c ****             /* Minor optimisation.  The tick count cannot change in this
1262:FreeRTOS/tasks.c ****              * block. */
1263:FreeRTOS/tasks.c ****             const TickType_t xConstTickCount = xTickCount;
1264:FreeRTOS/tasks.c **** 
1265:FreeRTOS/tasks.c ****             /* Generate the tick time at which the task wants to wake. */
1266:FreeRTOS/tasks.c ****             xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1267:FreeRTOS/tasks.c **** 
1268:FreeRTOS/tasks.c ****             if( xConstTickCount < *pxPreviousWakeTime )
1269:FreeRTOS/tasks.c ****             {
1270:FreeRTOS/tasks.c ****                 /* The tick count has overflowed since this function was
1271:FreeRTOS/tasks.c ****                  * lasted called.  In this case the only time we should ever
1272:FreeRTOS/tasks.c ****                  * actually delay is if the wake time has also  overflowed,
1273:FreeRTOS/tasks.c ****                  * and the wake time is greater than the tick time.  When this
1274:FreeRTOS/tasks.c ****                  * is the case it is as if neither time had overflowed. */
1275:FreeRTOS/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1276:FreeRTOS/tasks.c ****                 {
1277:FreeRTOS/tasks.c ****                     xShouldDelay = pdTRUE;
1278:FreeRTOS/tasks.c ****                 }
1279:FreeRTOS/tasks.c ****                 else
1280:FreeRTOS/tasks.c ****                 {
1281:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1282:FreeRTOS/tasks.c ****                 }
1283:FreeRTOS/tasks.c ****             }
1284:FreeRTOS/tasks.c ****             else
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 24


1285:FreeRTOS/tasks.c ****             {
1286:FreeRTOS/tasks.c ****                 /* The tick time has not overflowed.  In this case we will
1287:FreeRTOS/tasks.c ****                  * delay if either the wake time has overflowed, and/or the
1288:FreeRTOS/tasks.c ****                  * tick time is less than the wake time. */
1289:FreeRTOS/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1290:FreeRTOS/tasks.c ****                 {
1291:FreeRTOS/tasks.c ****                     xShouldDelay = pdTRUE;
1292:FreeRTOS/tasks.c ****                 }
1293:FreeRTOS/tasks.c ****                 else
1294:FreeRTOS/tasks.c ****                 {
1295:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1296:FreeRTOS/tasks.c ****                 }
1297:FreeRTOS/tasks.c ****             }
1298:FreeRTOS/tasks.c **** 
1299:FreeRTOS/tasks.c ****             /* Update the wake time ready for the next call. */
1300:FreeRTOS/tasks.c ****             *pxPreviousWakeTime = xTimeToWake;
1301:FreeRTOS/tasks.c **** 
1302:FreeRTOS/tasks.c ****             if( xShouldDelay != pdFALSE )
1303:FreeRTOS/tasks.c ****             {
1304:FreeRTOS/tasks.c ****                 traceTASK_DELAY_UNTIL( xTimeToWake );
1305:FreeRTOS/tasks.c **** 
1306:FreeRTOS/tasks.c ****                 /* prvAddCurrentTaskToDelayedList() needs the block time, not
1307:FreeRTOS/tasks.c ****                  * the time to wake, so subtract the current tick count. */
1308:FreeRTOS/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1309:FreeRTOS/tasks.c ****             }
1310:FreeRTOS/tasks.c ****             else
1311:FreeRTOS/tasks.c ****             {
1312:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1313:FreeRTOS/tasks.c ****             }
1314:FreeRTOS/tasks.c ****         }
1315:FreeRTOS/tasks.c ****         xAlreadyYielded = xTaskResumeAll();
1316:FreeRTOS/tasks.c **** 
1317:FreeRTOS/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1318:FreeRTOS/tasks.c ****          * have put ourselves to sleep. */
1319:FreeRTOS/tasks.c ****         if( xAlreadyYielded == pdFALSE )
1320:FreeRTOS/tasks.c ****         {
1321:FreeRTOS/tasks.c ****             portYIELD_WITHIN_API();
1322:FreeRTOS/tasks.c ****         }
1323:FreeRTOS/tasks.c ****         else
1324:FreeRTOS/tasks.c ****         {
1325:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1326:FreeRTOS/tasks.c ****         }
1327:FreeRTOS/tasks.c **** 
1328:FreeRTOS/tasks.c ****         return xShouldDelay;
1329:FreeRTOS/tasks.c ****     }
1330:FreeRTOS/tasks.c **** 
1331:FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskDelayUntil */
1332:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1333:FreeRTOS/tasks.c **** 
1334:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1335:FreeRTOS/tasks.c **** 
1336:FreeRTOS/tasks.c ****     void vTaskDelay( const TickType_t xTicksToDelay )
1337:FreeRTOS/tasks.c ****     {
1338:FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
1339:FreeRTOS/tasks.c **** 
1340:FreeRTOS/tasks.c ****         /* A delay time of zero just forces a reschedule. */
1341:FreeRTOS/tasks.c ****         if( xTicksToDelay > ( TickType_t ) 0U )
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 25


1342:FreeRTOS/tasks.c ****         {
1343:FreeRTOS/tasks.c ****             configASSERT( uxSchedulerSuspended == 0 );
1344:FreeRTOS/tasks.c ****             vTaskSuspendAll();
1345:FreeRTOS/tasks.c ****             {
1346:FreeRTOS/tasks.c ****                 traceTASK_DELAY();
1347:FreeRTOS/tasks.c **** 
1348:FreeRTOS/tasks.c ****                 /* A task that is removed from the event list while the
1349:FreeRTOS/tasks.c ****                  * scheduler is suspended will not get placed in the ready
1350:FreeRTOS/tasks.c ****                  * list or removed from the blocked list until the scheduler
1351:FreeRTOS/tasks.c ****                  * is resumed.
1352:FreeRTOS/tasks.c ****                  *
1353:FreeRTOS/tasks.c ****                  * This task cannot be in an event list as it is the currently
1354:FreeRTOS/tasks.c ****                  * executing task. */
1355:FreeRTOS/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1356:FreeRTOS/tasks.c ****             }
1357:FreeRTOS/tasks.c ****             xAlreadyYielded = xTaskResumeAll();
1358:FreeRTOS/tasks.c ****         }
1359:FreeRTOS/tasks.c ****         else
1360:FreeRTOS/tasks.c ****         {
1361:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1362:FreeRTOS/tasks.c ****         }
1363:FreeRTOS/tasks.c **** 
1364:FreeRTOS/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1365:FreeRTOS/tasks.c ****          * have put ourselves to sleep. */
1366:FreeRTOS/tasks.c ****         if( xAlreadyYielded == pdFALSE )
1367:FreeRTOS/tasks.c ****         {
1368:FreeRTOS/tasks.c ****             portYIELD_WITHIN_API();
1369:FreeRTOS/tasks.c ****         }
1370:FreeRTOS/tasks.c ****         else
1371:FreeRTOS/tasks.c ****         {
1372:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1373:FreeRTOS/tasks.c ****         }
1374:FreeRTOS/tasks.c ****     }
1375:FreeRTOS/tasks.c **** 
1376:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1377:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1378:FreeRTOS/tasks.c **** 
1379:FreeRTOS/tasks.c **** #if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDe
1380:FreeRTOS/tasks.c **** 
1381:FreeRTOS/tasks.c ****     eTaskState eTaskGetState( TaskHandle_t xTask )
1382:FreeRTOS/tasks.c ****     {
1383:FreeRTOS/tasks.c ****         eTaskState eReturn;
1384:FreeRTOS/tasks.c ****         List_t const * pxStateList, * pxDelayedList, * pxOverflowedDelayedList;
1385:FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
1386:FreeRTOS/tasks.c **** 
1387:FreeRTOS/tasks.c ****         configASSERT( pxTCB );
1388:FreeRTOS/tasks.c **** 
1389:FreeRTOS/tasks.c ****         if( pxTCB == pxCurrentTCB )
1390:FreeRTOS/tasks.c ****         {
1391:FreeRTOS/tasks.c ****             /* The task calling this function is querying its own state. */
1392:FreeRTOS/tasks.c ****             eReturn = eRunning;
1393:FreeRTOS/tasks.c ****         }
1394:FreeRTOS/tasks.c ****         else
1395:FreeRTOS/tasks.c ****         {
1396:FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
1397:FreeRTOS/tasks.c ****             {
1398:FreeRTOS/tasks.c ****                 pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 26


1399:FreeRTOS/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
1400:FreeRTOS/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1401:FreeRTOS/tasks.c ****             }
1402:FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
1403:FreeRTOS/tasks.c **** 
1404:FreeRTOS/tasks.c ****             if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1405:FreeRTOS/tasks.c ****             {
1406:FreeRTOS/tasks.c ****                 /* The task being queried is referenced from one of the Blocked
1407:FreeRTOS/tasks.c ****                  * lists. */
1408:FreeRTOS/tasks.c ****                 eReturn = eBlocked;
1409:FreeRTOS/tasks.c ****             }
1410:FreeRTOS/tasks.c **** 
1411:FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
1412:FreeRTOS/tasks.c ****                 else if( pxStateList == &xSuspendedTaskList )
1413:FreeRTOS/tasks.c ****                 {
1414:FreeRTOS/tasks.c ****                     /* The task being queried is referenced from the suspended
1415:FreeRTOS/tasks.c ****                      * list.  Is it genuinely suspended or is it blocked
1416:FreeRTOS/tasks.c ****                      * indefinitely? */
1417:FreeRTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1418:FreeRTOS/tasks.c ****                     {
1419:FreeRTOS/tasks.c ****                         #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1420:FreeRTOS/tasks.c ****                             {
1421:FreeRTOS/tasks.c ****                                 BaseType_t x;
1422:FreeRTOS/tasks.c **** 
1423:FreeRTOS/tasks.c ****                                 /* The task does not appear on the event list item of
1424:FreeRTOS/tasks.c ****                                  * and of the RTOS objects, but could still be in the
1425:FreeRTOS/tasks.c ****                                  * blocked state if it is waiting on its notification
1426:FreeRTOS/tasks.c ****                                  * rather than waiting on an object.  If not, is
1427:FreeRTOS/tasks.c ****                                  * suspended. */
1428:FreeRTOS/tasks.c ****                                 eReturn = eSuspended;
1429:FreeRTOS/tasks.c **** 
1430:FreeRTOS/tasks.c ****                                 for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1431:FreeRTOS/tasks.c ****                                 {
1432:FreeRTOS/tasks.c ****                                     if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
1433:FreeRTOS/tasks.c ****                                     {
1434:FreeRTOS/tasks.c ****                                         eReturn = eBlocked;
1435:FreeRTOS/tasks.c ****                                         break;
1436:FreeRTOS/tasks.c ****                                     }
1437:FreeRTOS/tasks.c ****                                 }
1438:FreeRTOS/tasks.c ****                             }
1439:FreeRTOS/tasks.c ****                         #else /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1440:FreeRTOS/tasks.c ****                             {
1441:FreeRTOS/tasks.c ****                                 eReturn = eSuspended;
1442:FreeRTOS/tasks.c ****                             }
1443:FreeRTOS/tasks.c ****                         #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1444:FreeRTOS/tasks.c ****                     }
1445:FreeRTOS/tasks.c ****                     else
1446:FreeRTOS/tasks.c ****                     {
1447:FreeRTOS/tasks.c ****                         eReturn = eBlocked;
1448:FreeRTOS/tasks.c ****                     }
1449:FreeRTOS/tasks.c ****                 }
1450:FreeRTOS/tasks.c ****             #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */
1451:FreeRTOS/tasks.c **** 
1452:FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
1453:FreeRTOS/tasks.c ****                 else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1454:FreeRTOS/tasks.c ****                 {
1455:FreeRTOS/tasks.c ****                     /* The task being queried is referenced from the deleted
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 27


1456:FreeRTOS/tasks.c ****                      * tasks list, or it is not referenced from any lists at
1457:FreeRTOS/tasks.c ****                      * all. */
1458:FreeRTOS/tasks.c ****                     eReturn = eDeleted;
1459:FreeRTOS/tasks.c ****                 }
1460:FreeRTOS/tasks.c ****             #endif
1461:FreeRTOS/tasks.c **** 
1462:FreeRTOS/tasks.c ****             else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer
1463:FreeRTOS/tasks.c ****             {
1464:FreeRTOS/tasks.c ****                 /* If the task is not in any other state, it must be in the
1465:FreeRTOS/tasks.c ****                  * Ready (including pending ready) state. */
1466:FreeRTOS/tasks.c ****                 eReturn = eReady;
1467:FreeRTOS/tasks.c ****             }
1468:FreeRTOS/tasks.c ****         }
1469:FreeRTOS/tasks.c **** 
1470:FreeRTOS/tasks.c ****         return eReturn;
1471:FreeRTOS/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1472:FreeRTOS/tasks.c **** 
1473:FreeRTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1475:FreeRTOS/tasks.c **** 
1476:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:FreeRTOS/tasks.c **** 
1478:FreeRTOS/tasks.c ****     UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:FreeRTOS/tasks.c ****     {
1480:FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
1481:FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
1482:FreeRTOS/tasks.c **** 
1483:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
1484:FreeRTOS/tasks.c ****         {
1485:FreeRTOS/tasks.c ****             /* If null is passed in here then it is the priority of the task
1486:FreeRTOS/tasks.c ****              * that called uxTaskPriorityGet() that is being queried. */
1487:FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1488:FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
1489:FreeRTOS/tasks.c ****         }
1490:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
1491:FreeRTOS/tasks.c **** 
1492:FreeRTOS/tasks.c ****         return uxReturn;
1493:FreeRTOS/tasks.c ****     }
1494:FreeRTOS/tasks.c **** 
1495:FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1497:FreeRTOS/tasks.c **** 
1498:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:FreeRTOS/tasks.c **** 
1500:FreeRTOS/tasks.c ****     UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:FreeRTOS/tasks.c ****     {
1502:FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
1503:FreeRTOS/tasks.c ****         UBaseType_t uxReturn, uxSavedInterruptState;
1504:FreeRTOS/tasks.c **** 
1505:FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1506:FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1507:FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1508:FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1509:FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
1511:FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 28


1513:FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
1514:FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1515:FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1516:FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1518:FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1519:FreeRTOS/tasks.c ****          * provided on the following link:
1520:FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1521:FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1522:FreeRTOS/tasks.c **** 
1523:FreeRTOS/tasks.c ****         uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1524:FreeRTOS/tasks.c ****         {
1525:FreeRTOS/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1526:FreeRTOS/tasks.c ****              * task that is being queried. */
1527:FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1528:FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
1529:FreeRTOS/tasks.c ****         }
1530:FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:FreeRTOS/tasks.c **** 
1532:FreeRTOS/tasks.c ****         return uxReturn;
1533:FreeRTOS/tasks.c ****     }
1534:FreeRTOS/tasks.c **** 
1535:FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1537:FreeRTOS/tasks.c **** 
1538:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:FreeRTOS/tasks.c **** 
1540:FreeRTOS/tasks.c ****     void vTaskPrioritySet( TaskHandle_t xTask,
1541:FreeRTOS/tasks.c ****                            UBaseType_t uxNewPriority )
1542:FreeRTOS/tasks.c ****     {
1543:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
1544:FreeRTOS/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1545:FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
1546:FreeRTOS/tasks.c **** 
1547:FreeRTOS/tasks.c ****         configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1548:FreeRTOS/tasks.c **** 
1549:FreeRTOS/tasks.c ****         /* Ensure the new priority is valid. */
1550:FreeRTOS/tasks.c ****         if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1551:FreeRTOS/tasks.c ****         {
1552:FreeRTOS/tasks.c ****             uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1553:FreeRTOS/tasks.c ****         }
1554:FreeRTOS/tasks.c ****         else
1555:FreeRTOS/tasks.c ****         {
1556:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1557:FreeRTOS/tasks.c ****         }
1558:FreeRTOS/tasks.c **** 
1559:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
1560:FreeRTOS/tasks.c ****         {
1561:FreeRTOS/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1562:FreeRTOS/tasks.c ****              * task that is being changed. */
1563:FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1564:FreeRTOS/tasks.c **** 
1565:FreeRTOS/tasks.c ****             traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1566:FreeRTOS/tasks.c **** 
1567:FreeRTOS/tasks.c ****             #if ( configUSE_MUTEXES == 1 )
1568:FreeRTOS/tasks.c ****                 {
1569:FreeRTOS/tasks.c ****                     uxCurrentBasePriority = pxTCB->uxBasePriority;
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 29


1570:FreeRTOS/tasks.c ****                 }
1571:FreeRTOS/tasks.c ****             #else
1572:FreeRTOS/tasks.c ****                 {
1573:FreeRTOS/tasks.c ****                     uxCurrentBasePriority = pxTCB->uxPriority;
1574:FreeRTOS/tasks.c ****                 }
1575:FreeRTOS/tasks.c ****             #endif
1576:FreeRTOS/tasks.c **** 
1577:FreeRTOS/tasks.c ****             if( uxCurrentBasePriority != uxNewPriority )
1578:FreeRTOS/tasks.c ****             {
1579:FreeRTOS/tasks.c ****                 /* The priority change may have readied a task of higher
1580:FreeRTOS/tasks.c ****                  * priority than the calling task. */
1581:FreeRTOS/tasks.c ****                 if( uxNewPriority > uxCurrentBasePriority )
1582:FreeRTOS/tasks.c ****                 {
1583:FreeRTOS/tasks.c ****                     if( pxTCB != pxCurrentTCB )
1584:FreeRTOS/tasks.c ****                     {
1585:FreeRTOS/tasks.c ****                         /* The priority of a task other than the currently
1586:FreeRTOS/tasks.c ****                          * running task is being raised.  Is the priority being
1587:FreeRTOS/tasks.c ****                          * raised above that of the running task? */
1588:FreeRTOS/tasks.c ****                         if( uxNewPriority >= pxCurrentTCB->uxPriority )
1589:FreeRTOS/tasks.c ****                         {
1590:FreeRTOS/tasks.c ****                             xYieldRequired = pdTRUE;
1591:FreeRTOS/tasks.c ****                         }
1592:FreeRTOS/tasks.c ****                         else
1593:FreeRTOS/tasks.c ****                         {
1594:FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1595:FreeRTOS/tasks.c ****                         }
1596:FreeRTOS/tasks.c ****                     }
1597:FreeRTOS/tasks.c ****                     else
1598:FreeRTOS/tasks.c ****                     {
1599:FreeRTOS/tasks.c ****                         /* The priority of the running task is being raised,
1600:FreeRTOS/tasks.c ****                          * but the running task must already be the highest
1601:FreeRTOS/tasks.c ****                          * priority task able to run so no yield is required. */
1602:FreeRTOS/tasks.c ****                     }
1603:FreeRTOS/tasks.c ****                 }
1604:FreeRTOS/tasks.c ****                 else if( pxTCB == pxCurrentTCB )
1605:FreeRTOS/tasks.c ****                 {
1606:FreeRTOS/tasks.c ****                     /* Setting the priority of the running task down means
1607:FreeRTOS/tasks.c ****                      * there may now be another task of higher priority that
1608:FreeRTOS/tasks.c ****                      * is ready to execute. */
1609:FreeRTOS/tasks.c ****                     xYieldRequired = pdTRUE;
1610:FreeRTOS/tasks.c ****                 }
1611:FreeRTOS/tasks.c ****                 else
1612:FreeRTOS/tasks.c ****                 {
1613:FreeRTOS/tasks.c ****                     /* Setting the priority of any other task down does not
1614:FreeRTOS/tasks.c ****                      * require a yield as the running task must be above the
1615:FreeRTOS/tasks.c ****                      * new priority of the task being modified. */
1616:FreeRTOS/tasks.c ****                 }
1617:FreeRTOS/tasks.c **** 
1618:FreeRTOS/tasks.c ****                 /* Remember the ready list the task might be referenced from
1619:FreeRTOS/tasks.c ****                  * before its uxPriority member is changed so the
1620:FreeRTOS/tasks.c ****                  * taskRESET_READY_PRIORITY() macro can function correctly. */
1621:FreeRTOS/tasks.c ****                 uxPriorityUsedOnEntry = pxTCB->uxPriority;
1622:FreeRTOS/tasks.c **** 
1623:FreeRTOS/tasks.c ****                 #if ( configUSE_MUTEXES == 1 )
1624:FreeRTOS/tasks.c ****                     {
1625:FreeRTOS/tasks.c ****                         /* Only change the priority being used if the task is not
1626:FreeRTOS/tasks.c ****                          * currently using an inherited priority. */
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 30


1627:FreeRTOS/tasks.c ****                         if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1628:FreeRTOS/tasks.c ****                         {
1629:FreeRTOS/tasks.c ****                             pxTCB->uxPriority = uxNewPriority;
1630:FreeRTOS/tasks.c ****                         }
1631:FreeRTOS/tasks.c ****                         else
1632:FreeRTOS/tasks.c ****                         {
1633:FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1634:FreeRTOS/tasks.c ****                         }
1635:FreeRTOS/tasks.c **** 
1636:FreeRTOS/tasks.c ****                         /* The base priority gets set whatever. */
1637:FreeRTOS/tasks.c ****                         pxTCB->uxBasePriority = uxNewPriority;
1638:FreeRTOS/tasks.c ****                     }
1639:FreeRTOS/tasks.c ****                 #else /* if ( configUSE_MUTEXES == 1 ) */
1640:FreeRTOS/tasks.c ****                     {
1641:FreeRTOS/tasks.c ****                         pxTCB->uxPriority = uxNewPriority;
1642:FreeRTOS/tasks.c ****                     }
1643:FreeRTOS/tasks.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1644:FreeRTOS/tasks.c **** 
1645:FreeRTOS/tasks.c ****                 /* Only reset the event list item value if the value is not
1646:FreeRTOS/tasks.c ****                  * being used for anything else. */
1647:FreeRTOS/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_V
1648:FreeRTOS/tasks.c ****                 {
1649:FreeRTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX
1650:FreeRTOS/tasks.c ****                 }
1651:FreeRTOS/tasks.c ****                 else
1652:FreeRTOS/tasks.c ****                 {
1653:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1654:FreeRTOS/tasks.c ****                 }
1655:FreeRTOS/tasks.c **** 
1656:FreeRTOS/tasks.c ****                 /* If the task is in the blocked or suspended list we need do
1657:FreeRTOS/tasks.c ****                  * nothing more than change its priority variable. However, if
1658:FreeRTOS/tasks.c ****                  * the task is in a ready list it needs to be removed and placed
1659:FreeRTOS/tasks.c ****                  * in the list appropriate to its new priority. */
1660:FreeRTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( px
1661:FreeRTOS/tasks.c ****                 {
1662:FreeRTOS/tasks.c ****                     /* The task is currently in its ready list - remove before
1663:FreeRTOS/tasks.c ****                      * adding it to it's new ready list.  As we are in a critical
1664:FreeRTOS/tasks.c ****                      * section we can do this even if the scheduler is suspended. */
1665:FreeRTOS/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1666:FreeRTOS/tasks.c ****                     {
1667:FreeRTOS/tasks.c ****                         /* It is known that the task is in its ready list so
1668:FreeRTOS/tasks.c ****                          * there is no need to check again and the port level
1669:FreeRTOS/tasks.c ****                          * reset macro can be called directly. */
1670:FreeRTOS/tasks.c ****                         portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1671:FreeRTOS/tasks.c ****                     }
1672:FreeRTOS/tasks.c ****                     else
1673:FreeRTOS/tasks.c ****                     {
1674:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1675:FreeRTOS/tasks.c ****                     }
1676:FreeRTOS/tasks.c **** 
1677:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1678:FreeRTOS/tasks.c ****                 }
1679:FreeRTOS/tasks.c ****                 else
1680:FreeRTOS/tasks.c ****                 {
1681:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1682:FreeRTOS/tasks.c ****                 }
1683:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 31


1684:FreeRTOS/tasks.c ****                 if( xYieldRequired != pdFALSE )
1685:FreeRTOS/tasks.c ****                 {
1686:FreeRTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
1687:FreeRTOS/tasks.c ****                 }
1688:FreeRTOS/tasks.c ****                 else
1689:FreeRTOS/tasks.c ****                 {
1690:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1691:FreeRTOS/tasks.c ****                 }
1692:FreeRTOS/tasks.c **** 
1693:FreeRTOS/tasks.c ****                 /* Remove compiler warning about unused variables when the port
1694:FreeRTOS/tasks.c ****                  * optimised task selection is not being used. */
1695:FreeRTOS/tasks.c ****                 ( void ) uxPriorityUsedOnEntry;
1696:FreeRTOS/tasks.c ****             }
1697:FreeRTOS/tasks.c ****         }
1698:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
1699:FreeRTOS/tasks.c ****     }
1700:FreeRTOS/tasks.c **** 
1701:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1702:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1703:FreeRTOS/tasks.c **** 
1704:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1705:FreeRTOS/tasks.c **** 
1706:FreeRTOS/tasks.c ****     void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1707:FreeRTOS/tasks.c ****     {
1708:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
1709:FreeRTOS/tasks.c **** 
1710:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
1711:FreeRTOS/tasks.c ****         {
1712:FreeRTOS/tasks.c ****             /* If null is passed in here then it is the running task that is
1713:FreeRTOS/tasks.c ****              * being suspended. */
1714:FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1715:FreeRTOS/tasks.c **** 
1716:FreeRTOS/tasks.c ****             traceTASK_SUSPEND( pxTCB );
1717:FreeRTOS/tasks.c **** 
1718:FreeRTOS/tasks.c ****             /* Remove task from the ready/delayed list and place in the
1719:FreeRTOS/tasks.c ****              * suspended list. */
1720:FreeRTOS/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1721:FreeRTOS/tasks.c ****             {
1722:FreeRTOS/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1723:FreeRTOS/tasks.c ****             }
1724:FreeRTOS/tasks.c ****             else
1725:FreeRTOS/tasks.c ****             {
1726:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1727:FreeRTOS/tasks.c ****             }
1728:FreeRTOS/tasks.c **** 
1729:FreeRTOS/tasks.c ****             /* Is the task waiting on an event also? */
1730:FreeRTOS/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1731:FreeRTOS/tasks.c ****             {
1732:FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1733:FreeRTOS/tasks.c ****             }
1734:FreeRTOS/tasks.c ****             else
1735:FreeRTOS/tasks.c ****             {
1736:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1737:FreeRTOS/tasks.c ****             }
1738:FreeRTOS/tasks.c ****             traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
1739:FreeRTOS/tasks.c ****             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1740:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 32


1741:FreeRTOS/tasks.c ****             #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1742:FreeRTOS/tasks.c ****                 {
1743:FreeRTOS/tasks.c ****                     BaseType_t x;
1744:FreeRTOS/tasks.c **** 
1745:FreeRTOS/tasks.c ****                     for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1746:FreeRTOS/tasks.c ****                     {
1747:FreeRTOS/tasks.c ****                         if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
1748:FreeRTOS/tasks.c ****                         {
1749:FreeRTOS/tasks.c ****                             /* The task was blocked to wait for a notification, but is
1750:FreeRTOS/tasks.c ****                              * now suspended, so no notification was received. */
1751:FreeRTOS/tasks.c ****                             pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
1752:FreeRTOS/tasks.c ****                         }
1753:FreeRTOS/tasks.c ****                     }
1754:FreeRTOS/tasks.c ****                 }
1755:FreeRTOS/tasks.c ****             #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1756:FreeRTOS/tasks.c ****         }
1757:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
1758:FreeRTOS/tasks.c **** 
1759:FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
1760:FreeRTOS/tasks.c ****         {
1761:FreeRTOS/tasks.c ****             /* Reset the next expected unblock time in case it referred to the
1762:FreeRTOS/tasks.c ****              * task that is now in the Suspended state. */
1763:FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
1764:FreeRTOS/tasks.c ****             {
1765:FreeRTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
1766:FreeRTOS/tasks.c ****             }
1767:FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
1768:FreeRTOS/tasks.c ****         }
1769:FreeRTOS/tasks.c ****         else
1770:FreeRTOS/tasks.c ****         {
1771:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1772:FreeRTOS/tasks.c ****         }
1773:FreeRTOS/tasks.c **** 
1774:FreeRTOS/tasks.c ****         if( pxTCB == pxCurrentTCB )
1775:FreeRTOS/tasks.c ****         {
1776:FreeRTOS/tasks.c ****             if( xSchedulerRunning != pdFALSE )
1777:FreeRTOS/tasks.c ****             {
1778:FreeRTOS/tasks.c ****                 /* The current task has just been suspended. */
1779:FreeRTOS/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
1780:FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
1781:FreeRTOS/tasks.c ****             }
1782:FreeRTOS/tasks.c ****             else
1783:FreeRTOS/tasks.c ****             {
1784:FreeRTOS/tasks.c ****                 /* The scheduler is not running, but the task that was pointed
1785:FreeRTOS/tasks.c ****                  * to by pxCurrentTCB has just been suspended and pxCurrentTCB
1786:FreeRTOS/tasks.c ****                  * must be adjusted to point to a different task. */
1787:FreeRTOS/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*li
1788:FreeRTOS/tasks.c ****                 {
1789:FreeRTOS/tasks.c ****                     /* No other tasks are ready, so set pxCurrentTCB back to
1790:FreeRTOS/tasks.c ****                      * NULL so when the next task is created pxCurrentTCB will
1791:FreeRTOS/tasks.c ****                      * be set to point to it no matter what its relative priority
1792:FreeRTOS/tasks.c ****                      * is. */
1793:FreeRTOS/tasks.c ****                     pxCurrentTCB = NULL;
1794:FreeRTOS/tasks.c ****                 }
1795:FreeRTOS/tasks.c ****                 else
1796:FreeRTOS/tasks.c ****                 {
1797:FreeRTOS/tasks.c ****                     vTaskSwitchContext();
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 33


1798:FreeRTOS/tasks.c ****                 }
1799:FreeRTOS/tasks.c ****             }
1800:FreeRTOS/tasks.c ****         }
1801:FreeRTOS/tasks.c ****         else
1802:FreeRTOS/tasks.c ****         {
1803:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1804:FreeRTOS/tasks.c ****         }
1805:FreeRTOS/tasks.c ****     }
1806:FreeRTOS/tasks.c **** 
1807:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1808:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1809:FreeRTOS/tasks.c **** 
1810:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1811:FreeRTOS/tasks.c **** 
1812:FreeRTOS/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1813:FreeRTOS/tasks.c ****     {
  29              		.loc 1 1813 5 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
1814:FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
  34              		.loc 1 1814 9 view .LVU1
1815:FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  35              		.loc 1 1815 9 view .LVU2
1816:FreeRTOS/tasks.c **** 
1817:FreeRTOS/tasks.c ****         /* Accesses xPendingReadyList so must be called from a critical
1818:FreeRTOS/tasks.c ****          * section. */
1819:FreeRTOS/tasks.c **** 
1820:FreeRTOS/tasks.c ****         /* It does not make sense to check if the calling task is suspended. */
1821:FreeRTOS/tasks.c ****         configASSERT( xTask );
  36              		.loc 1 1821 9 view .LVU3
  37 0000 28B1     		cbz	r0, .L8
  38              		.loc 1 1821 30 discriminator 2 view .LVU4
1822:FreeRTOS/tasks.c **** 
1823:FreeRTOS/tasks.c ****         /* Is the task being resumed actually in the suspended list? */
1824:FreeRTOS/tasks.c ****         if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  39              		.loc 1 1824 9 discriminator 2 view .LVU5
  40              		.loc 1 1824 13 is_stmt 0 discriminator 2 view .LVU6
  41 0002 4169     		ldr	r1, [r0, #20]
  42              		.loc 1 1824 11 discriminator 2 view .LVU7
  43 0004 0C4A     		ldr	r2, .L10
  44 0006 9142     		cmp	r1, r2
  45 0008 0AD0     		beq	.L9
1814:FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  46              		.loc 1 1814 20 view .LVU8
  47 000a 0020     		movs	r0, #0
  48              	.LVL1:
1814:FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  49              		.loc 1 1814 20 view .LVU9
  50 000c 7047     		bx	lr
  51              	.LVL2:
  52              	.L8:
1821:FreeRTOS/tasks.c **** 
  53              		.loc 1 1821 9 is_stmt 1 view .LVU10
  54              	.LBB111:
  55              	.LBI111:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 34


  56              		.file 2 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h"
   1:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.4.3
   3:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://www.FreeRTOS.org
  23:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://github.com/FreeRTOS
  24:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define PORTMACRO_H
  31:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifdef __cplusplus
  33:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         extern "C" {
  34:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
  35:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portCHAR          char
  48:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portFLOAT         float
  49:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDOUBLE        double
  50:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portLONG          long
  51:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSHORT         short
  52:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  53:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portBASE_TYPE     long
  54:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  56:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef long             BaseType_t;
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 35


  57:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef unsigned long    UBaseType_t;
  58:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  60:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         typedef uint16_t     TickType_t;
  61:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  62:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #else
  63:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         typedef uint32_t     TickType_t;
  64:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  65:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not need to be guarded with a critical section. */
  68:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  69:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
  70:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  74:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  76:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  77:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  78:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  79:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  80:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portYIELD()                                 \
  81:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {                                                   \
  82:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  83:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  84:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****                                                         \
  85:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  86:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  87:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  88:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "isb" );                                  \
  89:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
  90:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  91:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  92:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  93:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired ) { if( xSwitchRequired != pdFALSE ) { traceISR_
  94:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  95:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  96:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  98:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortEnterCritical( void );
  99:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortExitCritical( void );
 100:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 101:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 102:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 103:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 104:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 105:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 106:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 107:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 108:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 109:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 110:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 111:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * (which build with all the ports) will build. */
 112:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 113:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 36


 114:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 115:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 116:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 117:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 118:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 119:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 120:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 121:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 122:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 123:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 124:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 125:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 126:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 127:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 128:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 129:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 130:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Generic helper function. */
 131:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 132:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 133:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             uint8_t ucReturn;
 134:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 135:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 136:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 137:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             return ucReturn;
 138:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 139:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 140:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Check the configuration. */
 141:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 142:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 143:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #endif
 144:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 145:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 146:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 147:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 148:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 150:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 152:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 154:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifdef configASSERT
 158:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         void vPortValidateInterruptPriority( void );
 159:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 160:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 161:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 162:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 163:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNOP()
 164:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portINLINE              __inline
 166:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 167:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef portFORCE_INLINE
 168:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 169:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 170:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 37


 171:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 173:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulCurrentInterrupt;
 174:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         BaseType_t xReturn;
 175:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 177:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 178:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 179:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 180:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 181:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             xReturn = pdFALSE;
 182:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 183:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         else
 184:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 185:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             xReturn = pdTRUE;
 186:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 187:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 188:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         return xReturn;
 189:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 190:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 192:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
  57              		.loc 2 193 34 view .LVU11
  58              	.LBB112:
 194:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulNewBASEPRI;
  59              		.loc 2 195 9 view .LVU12
 196:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
  60              		.loc 2 197 9 view .LVU13
  61              		.syntax unified
  62              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
  63 000e 4FF05003 			mov r3, #80												
  64 0012 83F31188 		msr basepri, r3											
  65 0016 BFF36F8F 		isb														
  66 001a BFF34F8F 		dsb														
  67              	
  68              	@ 0 "" 2
  69              	.LVL3:
  70              		.thumb
  71              		.syntax unified
  72              	.L3:
  73              		.loc 2 197 9 is_stmt 0 view .LVU14
  74              	.LBE112:
  75              	.LBE111:
1821:FreeRTOS/tasks.c **** 
  76              		.loc 1 1821 9 is_stmt 1 discriminator 1 view .LVU15
1821:FreeRTOS/tasks.c **** 
  77              		.loc 1 1821 9 discriminator 1 view .LVU16
1821:FreeRTOS/tasks.c **** 
  78              		.loc 1 1821 9 discriminator 1 view .LVU17
  79 001e FEE7     		b	.L3
  80              	.L9:
1825:FreeRTOS/tasks.c ****         {
1826:FreeRTOS/tasks.c ****             /* Has the task already been resumed from within an ISR? */
1827:FreeRTOS/tasks.c ****             if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALS
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 38


  81              		.loc 1 1827 13 view .LVU18
  82              		.loc 1 1827 17 is_stmt 0 view .LVU19
  83 0020 836A     		ldr	r3, [r0, #40]
  84              		.loc 1 1827 15 view .LVU20
  85 0022 064A     		ldr	r2, .L10+4
  86 0024 9342     		cmp	r3, r2
  87 0026 02D0     		beq	.L6
1828:FreeRTOS/tasks.c ****             {
1829:FreeRTOS/tasks.c ****                 /* Is it in the suspended list because it is in the Suspended
1830:FreeRTOS/tasks.c ****                  * state, or because is is blocked with no timeout? */
1831:FreeRTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint
  88              		.loc 1 1831 17 is_stmt 1 view .LVU21
  89              		.loc 1 1831 19 is_stmt 0 view .LVU22
  90 0028 1BB1     		cbz	r3, .L7
1814:FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  91              		.loc 1 1814 20 view .LVU23
  92 002a 0020     		movs	r0, #0
  93              	.LVL4:
1814:FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  94              		.loc 1 1814 20 view .LVU24
  95 002c 7047     		bx	lr
  96              	.LVL5:
  97              	.L6:
1814:FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  98              		.loc 1 1814 20 view .LVU25
  99 002e 0020     		movs	r0, #0
 100              	.LVL6:
1814:FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
 101              		.loc 1 1814 20 view .LVU26
 102 0030 7047     		bx	lr
 103              	.LVL7:
 104              	.L7:
1832:FreeRTOS/tasks.c ****                 {
1833:FreeRTOS/tasks.c ****                     xReturn = pdTRUE;
 105              		.loc 1 1833 29 view .LVU27
 106 0032 0120     		movs	r0, #1
 107              	.LVL8:
1834:FreeRTOS/tasks.c ****                 }
1835:FreeRTOS/tasks.c ****                 else
1836:FreeRTOS/tasks.c ****                 {
1837:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1838:FreeRTOS/tasks.c ****                 }
1839:FreeRTOS/tasks.c ****             }
1840:FreeRTOS/tasks.c ****             else
1841:FreeRTOS/tasks.c ****             {
1842:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1843:FreeRTOS/tasks.c ****             }
1844:FreeRTOS/tasks.c ****         }
1845:FreeRTOS/tasks.c ****         else
1846:FreeRTOS/tasks.c ****         {
1847:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
 108              		.loc 1 1847 37 is_stmt 1 view .LVU28
1848:FreeRTOS/tasks.c ****         }
1849:FreeRTOS/tasks.c **** 
1850:FreeRTOS/tasks.c ****         return xReturn;
 109              		.loc 1 1850 9 view .LVU29
1851:FreeRTOS/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 39


 110              		.loc 1 1851 5 is_stmt 0 view .LVU30
 111 0034 7047     		bx	lr
 112              	.L11:
 113 0036 00BF     		.align	2
 114              	.L10:
 115 0038 00000000 		.word	.LANCHOR0
 116 003c 00000000 		.word	.LANCHOR1
 117              		.cfi_endproc
 118              	.LFE12:
 120              		.section	.text.prvSearchForNameWithinSingleList,"ax",%progbits
 121              		.align	1
 122              		.syntax unified
 123              		.thumb
 124              		.thumb_func
 126              	prvSearchForNameWithinSingleList:
 127              	.LVL9:
 128              	.LFB23:
1852:FreeRTOS/tasks.c **** 
1853:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1854:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1855:FreeRTOS/tasks.c **** 
1856:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1857:FreeRTOS/tasks.c **** 
1858:FreeRTOS/tasks.c ****     void vTaskResume( TaskHandle_t xTaskToResume )
1859:FreeRTOS/tasks.c ****     {
1860:FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
1861:FreeRTOS/tasks.c **** 
1862:FreeRTOS/tasks.c ****         /* It does not make sense to resume the calling task. */
1863:FreeRTOS/tasks.c ****         configASSERT( xTaskToResume );
1864:FreeRTOS/tasks.c **** 
1865:FreeRTOS/tasks.c ****         /* The parameter cannot be NULL as it is impossible to resume the
1866:FreeRTOS/tasks.c ****          * currently executing task. */
1867:FreeRTOS/tasks.c ****         if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1868:FreeRTOS/tasks.c ****         {
1869:FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
1870:FreeRTOS/tasks.c ****             {
1871:FreeRTOS/tasks.c ****                 if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1872:FreeRTOS/tasks.c ****                 {
1873:FreeRTOS/tasks.c ****                     traceTASK_RESUME( pxTCB );
1874:FreeRTOS/tasks.c **** 
1875:FreeRTOS/tasks.c ****                     /* The ready list can be accessed even if the scheduler is
1876:FreeRTOS/tasks.c ****                      * suspended because this is inside a critical section. */
1877:FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1878:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1879:FreeRTOS/tasks.c **** 
1880:FreeRTOS/tasks.c ****                     /* A higher priority task may have just been resumed. */
1881:FreeRTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1882:FreeRTOS/tasks.c ****                     {
1883:FreeRTOS/tasks.c ****                         /* This yield may not cause the task just resumed to run,
1884:FreeRTOS/tasks.c ****                          * but will leave the lists in the correct state for the
1885:FreeRTOS/tasks.c ****                          * next yield. */
1886:FreeRTOS/tasks.c ****                         taskYIELD_IF_USING_PREEMPTION();
1887:FreeRTOS/tasks.c ****                     }
1888:FreeRTOS/tasks.c ****                     else
1889:FreeRTOS/tasks.c ****                     {
1890:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1891:FreeRTOS/tasks.c ****                     }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 40


1892:FreeRTOS/tasks.c ****                 }
1893:FreeRTOS/tasks.c ****                 else
1894:FreeRTOS/tasks.c ****                 {
1895:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1896:FreeRTOS/tasks.c ****                 }
1897:FreeRTOS/tasks.c ****             }
1898:FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
1899:FreeRTOS/tasks.c ****         }
1900:FreeRTOS/tasks.c ****         else
1901:FreeRTOS/tasks.c ****         {
1902:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1903:FreeRTOS/tasks.c ****         }
1904:FreeRTOS/tasks.c ****     }
1905:FreeRTOS/tasks.c **** 
1906:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1907:FreeRTOS/tasks.c **** 
1908:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1909:FreeRTOS/tasks.c **** 
1910:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1911:FreeRTOS/tasks.c **** 
1912:FreeRTOS/tasks.c ****     BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1913:FreeRTOS/tasks.c ****     {
1914:FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
1915:FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
1916:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
1917:FreeRTOS/tasks.c **** 
1918:FreeRTOS/tasks.c ****         configASSERT( xTaskToResume );
1919:FreeRTOS/tasks.c **** 
1920:FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1921:FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1922:FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1923:FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1924:FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1925:FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
1926:FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1927:FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1928:FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
1929:FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1930:FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1931:FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1932:FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1933:FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1934:FreeRTOS/tasks.c ****          * provided on the following link:
1935:FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1936:FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1937:FreeRTOS/tasks.c **** 
1938:FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1939:FreeRTOS/tasks.c ****         {
1940:FreeRTOS/tasks.c ****             if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1941:FreeRTOS/tasks.c ****             {
1942:FreeRTOS/tasks.c ****                 traceTASK_RESUME_FROM_ISR( pxTCB );
1943:FreeRTOS/tasks.c **** 
1944:FreeRTOS/tasks.c ****                 /* Check the ready lists can be accessed. */
1945:FreeRTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1946:FreeRTOS/tasks.c ****                 {
1947:FreeRTOS/tasks.c ****                     /* Ready lists can be accessed so move the task from the
1948:FreeRTOS/tasks.c ****                      * suspended list to the ready list directly. */
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 41


1949:FreeRTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1950:FreeRTOS/tasks.c ****                     {
1951:FreeRTOS/tasks.c ****                         xYieldRequired = pdTRUE;
1952:FreeRTOS/tasks.c **** 
1953:FreeRTOS/tasks.c ****                         /* Mark that a yield is pending in case the user is not
1954:FreeRTOS/tasks.c ****                          * using the return value to initiate a context switch
1955:FreeRTOS/tasks.c ****                          * from the ISR using portYIELD_FROM_ISR. */
1956:FreeRTOS/tasks.c ****                         xYieldPending = pdTRUE;
1957:FreeRTOS/tasks.c ****                     }
1958:FreeRTOS/tasks.c ****                     else
1959:FreeRTOS/tasks.c ****                     {
1960:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1961:FreeRTOS/tasks.c ****                     }
1962:FreeRTOS/tasks.c **** 
1963:FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1964:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1965:FreeRTOS/tasks.c ****                 }
1966:FreeRTOS/tasks.c ****                 else
1967:FreeRTOS/tasks.c ****                 {
1968:FreeRTOS/tasks.c ****                     /* The delayed or ready lists cannot be accessed so the task
1969:FreeRTOS/tasks.c ****                      * is held in the pending ready list until the scheduler is
1970:FreeRTOS/tasks.c ****                      * unsuspended. */
1971:FreeRTOS/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1972:FreeRTOS/tasks.c ****                 }
1973:FreeRTOS/tasks.c ****             }
1974:FreeRTOS/tasks.c ****             else
1975:FreeRTOS/tasks.c ****             {
1976:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1977:FreeRTOS/tasks.c ****             }
1978:FreeRTOS/tasks.c ****         }
1979:FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1980:FreeRTOS/tasks.c **** 
1981:FreeRTOS/tasks.c ****         return xYieldRequired;
1982:FreeRTOS/tasks.c ****     }
1983:FreeRTOS/tasks.c **** 
1984:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1985:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1986:FreeRTOS/tasks.c **** 
1987:FreeRTOS/tasks.c **** void vTaskStartScheduler( void )
1988:FreeRTOS/tasks.c **** {
1989:FreeRTOS/tasks.c ****     BaseType_t xReturn;
1990:FreeRTOS/tasks.c **** 
1991:FreeRTOS/tasks.c ****     /* Add the idle task at the lowest priority. */
1992:FreeRTOS/tasks.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
1993:FreeRTOS/tasks.c ****         {
1994:FreeRTOS/tasks.c ****             StaticTask_t * pxIdleTaskTCBBuffer = NULL;
1995:FreeRTOS/tasks.c ****             StackType_t * pxIdleTaskStackBuffer = NULL;
1996:FreeRTOS/tasks.c ****             uint32_t ulIdleTaskStackSize;
1997:FreeRTOS/tasks.c **** 
1998:FreeRTOS/tasks.c ****             /* The Idle task is created using user provided RAM - obtain the
1999:FreeRTOS/tasks.c ****              * address of the RAM then create the idle task. */
2000:FreeRTOS/tasks.c ****             vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTas
2001:FreeRTOS/tasks.c ****             xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
2002:FreeRTOS/tasks.c ****                                                  configIDLE_TASK_NAME,
2003:FreeRTOS/tasks.c ****                                                  ulIdleTaskStackSize,
2004:FreeRTOS/tasks.c ****                                                  ( void * ) NULL,       /*lint !e961.  The cast is 
2005:FreeRTOS/tasks.c ****                                                  portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIO
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 42


2006:FreeRTOS/tasks.c ****                                                  pxIdleTaskStackBuffer,
2007:FreeRTOS/tasks.c ****                                                  pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exceptio
2008:FreeRTOS/tasks.c **** 
2009:FreeRTOS/tasks.c ****             if( xIdleTaskHandle != NULL )
2010:FreeRTOS/tasks.c ****             {
2011:FreeRTOS/tasks.c ****                 xReturn = pdPASS;
2012:FreeRTOS/tasks.c ****             }
2013:FreeRTOS/tasks.c ****             else
2014:FreeRTOS/tasks.c ****             {
2015:FreeRTOS/tasks.c ****                 xReturn = pdFAIL;
2016:FreeRTOS/tasks.c ****             }
2017:FreeRTOS/tasks.c ****         }
2018:FreeRTOS/tasks.c ****     #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
2019:FreeRTOS/tasks.c ****         {
2020:FreeRTOS/tasks.c ****             /* The Idle task is being created using dynamically allocated RAM. */
2021:FreeRTOS/tasks.c ****             xReturn = xTaskCreate( prvIdleTask,
2022:FreeRTOS/tasks.c ****                                    configIDLE_TASK_NAME,
2023:FreeRTOS/tasks.c ****                                    configMINIMAL_STACK_SIZE,
2024:FreeRTOS/tasks.c ****                                    ( void * ) NULL,
2025:FreeRTOS/tasks.c ****                                    portPRIVILEGE_BIT,  /* In effect ( tskIDLE_PRIORITY | portPRIVIL
2026:FreeRTOS/tasks.c ****                                    &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as i
2027:FreeRTOS/tasks.c ****         }
2028:FreeRTOS/tasks.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
2029:FreeRTOS/tasks.c **** 
2030:FreeRTOS/tasks.c ****     #if ( configUSE_TIMERS == 1 )
2031:FreeRTOS/tasks.c ****         {
2032:FreeRTOS/tasks.c ****             if( xReturn == pdPASS )
2033:FreeRTOS/tasks.c ****             {
2034:FreeRTOS/tasks.c ****                 xReturn = xTimerCreateTimerTask();
2035:FreeRTOS/tasks.c ****             }
2036:FreeRTOS/tasks.c ****             else
2037:FreeRTOS/tasks.c ****             {
2038:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2039:FreeRTOS/tasks.c ****             }
2040:FreeRTOS/tasks.c ****         }
2041:FreeRTOS/tasks.c ****     #endif /* configUSE_TIMERS */
2042:FreeRTOS/tasks.c **** 
2043:FreeRTOS/tasks.c ****     if( xReturn == pdPASS )
2044:FreeRTOS/tasks.c ****     {
2045:FreeRTOS/tasks.c ****         /* freertos_tasks_c_additions_init() should only be called if the user
2046:FreeRTOS/tasks.c ****          * definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2047:FreeRTOS/tasks.c ****          * the only macro called by the function. */
2048:FreeRTOS/tasks.c ****         #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2049:FreeRTOS/tasks.c ****             {
2050:FreeRTOS/tasks.c ****                 freertos_tasks_c_additions_init();
2051:FreeRTOS/tasks.c ****             }
2052:FreeRTOS/tasks.c ****         #endif
2053:FreeRTOS/tasks.c **** 
2054:FreeRTOS/tasks.c ****         /* Interrupts are turned off here, to ensure a tick does not occur
2055:FreeRTOS/tasks.c ****          * before or during the call to xPortStartScheduler().  The stacks of
2056:FreeRTOS/tasks.c ****          * the created tasks contain a status word with interrupts switched on
2057:FreeRTOS/tasks.c ****          * so interrupts will automatically get re-enabled when the first task
2058:FreeRTOS/tasks.c ****          * starts to run. */
2059:FreeRTOS/tasks.c ****         portDISABLE_INTERRUPTS();
2060:FreeRTOS/tasks.c **** 
2061:FreeRTOS/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
2062:FreeRTOS/tasks.c ****             {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 43


2063:FreeRTOS/tasks.c ****                 /* Switch Newlib's _impure_ptr variable to point to the _reent
2064:FreeRTOS/tasks.c ****                  * structure specific to the task that will run first.
2065:FreeRTOS/tasks.c ****                  * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2066:FreeRTOS/tasks.c ****                  * for additional information. */
2067:FreeRTOS/tasks.c ****                 _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2068:FreeRTOS/tasks.c ****             }
2069:FreeRTOS/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
2070:FreeRTOS/tasks.c **** 
2071:FreeRTOS/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
2072:FreeRTOS/tasks.c ****         xSchedulerRunning = pdTRUE;
2073:FreeRTOS/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2074:FreeRTOS/tasks.c **** 
2075:FreeRTOS/tasks.c ****         /* If configGENERATE_RUN_TIME_STATS is defined then the following
2076:FreeRTOS/tasks.c ****          * macro must be defined to configure the timer/counter used to generate
2077:FreeRTOS/tasks.c ****          * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2078:FreeRTOS/tasks.c ****          * is set to 0 and the following line fails to build then ensure you do not
2079:FreeRTOS/tasks.c ****          * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2080:FreeRTOS/tasks.c ****          * FreeRTOSConfig.h file. */
2081:FreeRTOS/tasks.c ****         portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2082:FreeRTOS/tasks.c **** 
2083:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
2084:FreeRTOS/tasks.c **** 
2085:FreeRTOS/tasks.c ****         /* Setting up the timer tick is hardware specific and thus in the
2086:FreeRTOS/tasks.c ****          * portable interface. */
2087:FreeRTOS/tasks.c ****         if( xPortStartScheduler() != pdFALSE )
2088:FreeRTOS/tasks.c ****         {
2089:FreeRTOS/tasks.c ****             /* Should not reach here as if the scheduler is running the
2090:FreeRTOS/tasks.c ****              * function will not return. */
2091:FreeRTOS/tasks.c ****         }
2092:FreeRTOS/tasks.c ****         else
2093:FreeRTOS/tasks.c ****         {
2094:FreeRTOS/tasks.c ****             /* Should only reach here if a task calls xTaskEndScheduler(). */
2095:FreeRTOS/tasks.c ****         }
2096:FreeRTOS/tasks.c ****     }
2097:FreeRTOS/tasks.c ****     else
2098:FreeRTOS/tasks.c ****     {
2099:FreeRTOS/tasks.c ****         /* This line will only be reached if the kernel could not be started,
2100:FreeRTOS/tasks.c ****          * because there was not enough FreeRTOS heap to create the idle task
2101:FreeRTOS/tasks.c ****          * or the timer task. */
2102:FreeRTOS/tasks.c ****         configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2103:FreeRTOS/tasks.c ****     }
2104:FreeRTOS/tasks.c **** 
2105:FreeRTOS/tasks.c ****     /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2106:FreeRTOS/tasks.c ****      * meaning xIdleTaskHandle is not used anywhere else. */
2107:FreeRTOS/tasks.c ****     ( void ) xIdleTaskHandle;
2108:FreeRTOS/tasks.c **** 
2109:FreeRTOS/tasks.c ****     /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
2110:FreeRTOS/tasks.c ****      * from getting optimized out as it is no longer used by the kernel. */
2111:FreeRTOS/tasks.c ****     ( void ) uxTopUsedPriority;
2112:FreeRTOS/tasks.c **** }
2113:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2114:FreeRTOS/tasks.c **** 
2115:FreeRTOS/tasks.c **** void vTaskEndScheduler( void )
2116:FreeRTOS/tasks.c **** {
2117:FreeRTOS/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
2118:FreeRTOS/tasks.c ****      * routine so the original ISRs can be restored if necessary.  The port
2119:FreeRTOS/tasks.c ****      * layer must ensure interrupts enable  bit is left in the correct state. */
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 44


2120:FreeRTOS/tasks.c ****     portDISABLE_INTERRUPTS();
2121:FreeRTOS/tasks.c ****     xSchedulerRunning = pdFALSE;
2122:FreeRTOS/tasks.c ****     vPortEndScheduler();
2123:FreeRTOS/tasks.c **** }
2124:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2125:FreeRTOS/tasks.c **** 
2126:FreeRTOS/tasks.c **** void vTaskSuspendAll( void )
2127:FreeRTOS/tasks.c **** {
2128:FreeRTOS/tasks.c ****     /* A critical section is not required as the variable is of type
2129:FreeRTOS/tasks.c ****      * BaseType_t.  Please read Richard Barry's reply in the following link to a
2130:FreeRTOS/tasks.c ****      * post in the FreeRTOS support forum before reporting this as a bug! -
2131:FreeRTOS/tasks.c ****      * https://goo.gl/wu4acr */
2132:FreeRTOS/tasks.c **** 
2133:FreeRTOS/tasks.c ****     /* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2134:FreeRTOS/tasks.c ****      * do not otherwise exhibit real time behaviour. */
2135:FreeRTOS/tasks.c ****     portSOFTWARE_BARRIER();
2136:FreeRTOS/tasks.c **** 
2137:FreeRTOS/tasks.c ****     /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2138:FreeRTOS/tasks.c ****      * is used to allow calls to vTaskSuspendAll() to nest. */
2139:FreeRTOS/tasks.c ****     ++uxSchedulerSuspended;
2140:FreeRTOS/tasks.c **** 
2141:FreeRTOS/tasks.c ****     /* Enforces ordering for ports and optimised compilers that may otherwise place
2142:FreeRTOS/tasks.c ****      * the above increment elsewhere. */
2143:FreeRTOS/tasks.c ****     portMEMORY_BARRIER();
2144:FreeRTOS/tasks.c **** }
2145:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2146:FreeRTOS/tasks.c **** 
2147:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2148:FreeRTOS/tasks.c **** 
2149:FreeRTOS/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void )
2150:FreeRTOS/tasks.c ****     {
2151:FreeRTOS/tasks.c ****         TickType_t xReturn;
2152:FreeRTOS/tasks.c ****         UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2153:FreeRTOS/tasks.c **** 
2154:FreeRTOS/tasks.c ****         /* uxHigherPriorityReadyTasks takes care of the case where
2155:FreeRTOS/tasks.c ****          * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2156:FreeRTOS/tasks.c ****          * task that are in the Ready state, even though the idle task is
2157:FreeRTOS/tasks.c ****          * running. */
2158:FreeRTOS/tasks.c ****         #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2159:FreeRTOS/tasks.c ****             {
2160:FreeRTOS/tasks.c ****                 if( uxTopReadyPriority > tskIDLE_PRIORITY )
2161:FreeRTOS/tasks.c ****                 {
2162:FreeRTOS/tasks.c ****                     uxHigherPriorityReadyTasks = pdTRUE;
2163:FreeRTOS/tasks.c ****                 }
2164:FreeRTOS/tasks.c ****             }
2165:FreeRTOS/tasks.c ****         #else
2166:FreeRTOS/tasks.c ****             {
2167:FreeRTOS/tasks.c ****                 const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2168:FreeRTOS/tasks.c **** 
2169:FreeRTOS/tasks.c ****                 /* When port optimised task selection is used the uxTopReadyPriority
2170:FreeRTOS/tasks.c ****                  * variable is used as a bit map.  If bits other than the least
2171:FreeRTOS/tasks.c ****                  * significant bit are set then there are tasks that have a priority
2172:FreeRTOS/tasks.c ****                  * above the idle priority that are in the Ready state.  This takes
2173:FreeRTOS/tasks.c ****                  * care of the case where the co-operative scheduler is in use. */
2174:FreeRTOS/tasks.c ****                 if( uxTopReadyPriority > uxLeastSignificantBit )
2175:FreeRTOS/tasks.c ****                 {
2176:FreeRTOS/tasks.c ****                     uxHigherPriorityReadyTasks = pdTRUE;
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 45


2177:FreeRTOS/tasks.c ****                 }
2178:FreeRTOS/tasks.c ****             }
2179:FreeRTOS/tasks.c ****         #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */
2180:FreeRTOS/tasks.c **** 
2181:FreeRTOS/tasks.c ****         if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2182:FreeRTOS/tasks.c ****         {
2183:FreeRTOS/tasks.c ****             xReturn = 0;
2184:FreeRTOS/tasks.c ****         }
2185:FreeRTOS/tasks.c ****         else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2186:FreeRTOS/tasks.c ****         {
2187:FreeRTOS/tasks.c ****             /* There are other idle priority tasks in the ready state.  If
2188:FreeRTOS/tasks.c ****              * time slicing is used then the very next tick interrupt must be
2189:FreeRTOS/tasks.c ****              * processed. */
2190:FreeRTOS/tasks.c ****             xReturn = 0;
2191:FreeRTOS/tasks.c ****         }
2192:FreeRTOS/tasks.c ****         else if( uxHigherPriorityReadyTasks != pdFALSE )
2193:FreeRTOS/tasks.c ****         {
2194:FreeRTOS/tasks.c ****             /* There are tasks in the Ready state that have a priority above the
2195:FreeRTOS/tasks.c ****              * idle priority.  This path can only be reached if
2196:FreeRTOS/tasks.c ****              * configUSE_PREEMPTION is 0. */
2197:FreeRTOS/tasks.c ****             xReturn = 0;
2198:FreeRTOS/tasks.c ****         }
2199:FreeRTOS/tasks.c ****         else
2200:FreeRTOS/tasks.c ****         {
2201:FreeRTOS/tasks.c ****             xReturn = xNextTaskUnblockTime - xTickCount;
2202:FreeRTOS/tasks.c ****         }
2203:FreeRTOS/tasks.c **** 
2204:FreeRTOS/tasks.c ****         return xReturn;
2205:FreeRTOS/tasks.c ****     }
2206:FreeRTOS/tasks.c **** 
2207:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2208:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2209:FreeRTOS/tasks.c **** 
2210:FreeRTOS/tasks.c **** BaseType_t xTaskResumeAll( void )
2211:FreeRTOS/tasks.c **** {
2212:FreeRTOS/tasks.c ****     TCB_t * pxTCB = NULL;
2213:FreeRTOS/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
2214:FreeRTOS/tasks.c **** 
2215:FreeRTOS/tasks.c ****     /* If uxSchedulerSuspended is zero then this function does not match a
2216:FreeRTOS/tasks.c ****      * previous call to vTaskSuspendAll(). */
2217:FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended );
2218:FreeRTOS/tasks.c **** 
2219:FreeRTOS/tasks.c ****     /* It is possible that an ISR caused a task to be removed from an event
2220:FreeRTOS/tasks.c ****      * list while the scheduler was suspended.  If this was the case then the
2221:FreeRTOS/tasks.c ****      * removed task will have been added to the xPendingReadyList.  Once the
2222:FreeRTOS/tasks.c ****      * scheduler has been resumed it is safe to move all the pending ready
2223:FreeRTOS/tasks.c ****      * tasks from this list into their appropriate ready list. */
2224:FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
2225:FreeRTOS/tasks.c ****     {
2226:FreeRTOS/tasks.c ****         --uxSchedulerSuspended;
2227:FreeRTOS/tasks.c **** 
2228:FreeRTOS/tasks.c ****         if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2229:FreeRTOS/tasks.c ****         {
2230:FreeRTOS/tasks.c ****             if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2231:FreeRTOS/tasks.c ****             {
2232:FreeRTOS/tasks.c ****                 /* Move any readied tasks from the pending list into the
2233:FreeRTOS/tasks.c ****                  * appropriate ready list. */
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 46


2234:FreeRTOS/tasks.c ****                 while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2235:FreeRTOS/tasks.c ****                 {
2236:FreeRTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 vo
2237:FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2238:FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2239:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
2240:FreeRTOS/tasks.c **** 
2241:FreeRTOS/tasks.c ****                     /* If the moved task has a priority higher than the current
2242:FreeRTOS/tasks.c ****                      * task then a yield must be performed. */
2243:FreeRTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2244:FreeRTOS/tasks.c ****                     {
2245:FreeRTOS/tasks.c ****                         xYieldPending = pdTRUE;
2246:FreeRTOS/tasks.c ****                     }
2247:FreeRTOS/tasks.c ****                     else
2248:FreeRTOS/tasks.c ****                     {
2249:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2250:FreeRTOS/tasks.c ****                     }
2251:FreeRTOS/tasks.c ****                 }
2252:FreeRTOS/tasks.c **** 
2253:FreeRTOS/tasks.c ****                 if( pxTCB != NULL )
2254:FreeRTOS/tasks.c ****                 {
2255:FreeRTOS/tasks.c ****                     /* A task was unblocked while the scheduler was suspended,
2256:FreeRTOS/tasks.c ****                      * which may have prevented the next unblock time from being
2257:FreeRTOS/tasks.c ****                      * re-calculated, in which case re-calculate it now.  Mainly
2258:FreeRTOS/tasks.c ****                      * important for low power tickless implementations, where
2259:FreeRTOS/tasks.c ****                      * this can prevent an unnecessary exit from low power
2260:FreeRTOS/tasks.c ****                      * state. */
2261:FreeRTOS/tasks.c ****                     prvResetNextTaskUnblockTime();
2262:FreeRTOS/tasks.c ****                 }
2263:FreeRTOS/tasks.c **** 
2264:FreeRTOS/tasks.c ****                 /* If any ticks occurred while the scheduler was suspended then
2265:FreeRTOS/tasks.c ****                  * they should be processed now.  This ensures the tick count does
2266:FreeRTOS/tasks.c ****                  * not  slip, and that any delayed tasks are resumed at the correct
2267:FreeRTOS/tasks.c ****                  * time. */
2268:FreeRTOS/tasks.c ****                 {
2269:FreeRTOS/tasks.c ****                     TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
2270:FreeRTOS/tasks.c **** 
2271:FreeRTOS/tasks.c ****                     if( xPendedCounts > ( TickType_t ) 0U )
2272:FreeRTOS/tasks.c ****                     {
2273:FreeRTOS/tasks.c ****                         do
2274:FreeRTOS/tasks.c ****                         {
2275:FreeRTOS/tasks.c ****                             if( xTaskIncrementTick() != pdFALSE )
2276:FreeRTOS/tasks.c ****                             {
2277:FreeRTOS/tasks.c ****                                 xYieldPending = pdTRUE;
2278:FreeRTOS/tasks.c ****                             }
2279:FreeRTOS/tasks.c ****                             else
2280:FreeRTOS/tasks.c ****                             {
2281:FreeRTOS/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2282:FreeRTOS/tasks.c ****                             }
2283:FreeRTOS/tasks.c **** 
2284:FreeRTOS/tasks.c ****                             --xPendedCounts;
2285:FreeRTOS/tasks.c ****                         } while( xPendedCounts > ( TickType_t ) 0U );
2286:FreeRTOS/tasks.c **** 
2287:FreeRTOS/tasks.c ****                         xPendedTicks = 0;
2288:FreeRTOS/tasks.c ****                     }
2289:FreeRTOS/tasks.c ****                     else
2290:FreeRTOS/tasks.c ****                     {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 47


2291:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2292:FreeRTOS/tasks.c ****                     }
2293:FreeRTOS/tasks.c ****                 }
2294:FreeRTOS/tasks.c **** 
2295:FreeRTOS/tasks.c ****                 if( xYieldPending != pdFALSE )
2296:FreeRTOS/tasks.c ****                 {
2297:FreeRTOS/tasks.c ****                     #if ( configUSE_PREEMPTION != 0 )
2298:FreeRTOS/tasks.c ****                         {
2299:FreeRTOS/tasks.c ****                             xAlreadyYielded = pdTRUE;
2300:FreeRTOS/tasks.c ****                         }
2301:FreeRTOS/tasks.c ****                     #endif
2302:FreeRTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
2303:FreeRTOS/tasks.c ****                 }
2304:FreeRTOS/tasks.c ****                 else
2305:FreeRTOS/tasks.c ****                 {
2306:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2307:FreeRTOS/tasks.c ****                 }
2308:FreeRTOS/tasks.c ****             }
2309:FreeRTOS/tasks.c ****         }
2310:FreeRTOS/tasks.c ****         else
2311:FreeRTOS/tasks.c ****         {
2312:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2313:FreeRTOS/tasks.c ****         }
2314:FreeRTOS/tasks.c ****     }
2315:FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
2316:FreeRTOS/tasks.c **** 
2317:FreeRTOS/tasks.c ****     return xAlreadyYielded;
2318:FreeRTOS/tasks.c **** }
2319:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2320:FreeRTOS/tasks.c **** 
2321:FreeRTOS/tasks.c **** TickType_t xTaskGetTickCount( void )
2322:FreeRTOS/tasks.c **** {
2323:FreeRTOS/tasks.c ****     TickType_t xTicks;
2324:FreeRTOS/tasks.c **** 
2325:FreeRTOS/tasks.c ****     /* Critical section required if running on a 16 bit processor. */
2326:FreeRTOS/tasks.c ****     portTICK_TYPE_ENTER_CRITICAL();
2327:FreeRTOS/tasks.c ****     {
2328:FreeRTOS/tasks.c ****         xTicks = xTickCount;
2329:FreeRTOS/tasks.c ****     }
2330:FreeRTOS/tasks.c ****     portTICK_TYPE_EXIT_CRITICAL();
2331:FreeRTOS/tasks.c **** 
2332:FreeRTOS/tasks.c ****     return xTicks;
2333:FreeRTOS/tasks.c **** }
2334:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2335:FreeRTOS/tasks.c **** 
2336:FreeRTOS/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2337:FreeRTOS/tasks.c **** {
2338:FreeRTOS/tasks.c ****     TickType_t xReturn;
2339:FreeRTOS/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
2340:FreeRTOS/tasks.c **** 
2341:FreeRTOS/tasks.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
2342:FreeRTOS/tasks.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
2343:FreeRTOS/tasks.c ****      * above the maximum system call priority are kept permanently enabled, even
2344:FreeRTOS/tasks.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
2345:FreeRTOS/tasks.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2346:FreeRTOS/tasks.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2347:FreeRTOS/tasks.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 48


2348:FreeRTOS/tasks.c ****      * assigned a priority above the configured maximum system call priority.
2349:FreeRTOS/tasks.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
2350:FreeRTOS/tasks.c ****      * that have been assigned a priority at or (logically) below the maximum
2351:FreeRTOS/tasks.c ****      * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
2352:FreeRTOS/tasks.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
2353:FreeRTOS/tasks.c ****      * More information (albeit Cortex-M specific) is provided on the following
2354:FreeRTOS/tasks.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2355:FreeRTOS/tasks.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2356:FreeRTOS/tasks.c **** 
2357:FreeRTOS/tasks.c ****     uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2358:FreeRTOS/tasks.c ****     {
2359:FreeRTOS/tasks.c ****         xReturn = xTickCount;
2360:FreeRTOS/tasks.c ****     }
2361:FreeRTOS/tasks.c ****     portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2362:FreeRTOS/tasks.c **** 
2363:FreeRTOS/tasks.c ****     return xReturn;
2364:FreeRTOS/tasks.c **** }
2365:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2366:FreeRTOS/tasks.c **** 
2367:FreeRTOS/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2368:FreeRTOS/tasks.c **** {
2369:FreeRTOS/tasks.c ****     /* A critical section is not required because the variables are of type
2370:FreeRTOS/tasks.c ****      * BaseType_t. */
2371:FreeRTOS/tasks.c ****     return uxCurrentNumberOfTasks;
2372:FreeRTOS/tasks.c **** }
2373:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2374:FreeRTOS/tasks.c **** 
2375:FreeRTOS/tasks.c **** char * pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed f
2376:FreeRTOS/tasks.c **** {
2377:FreeRTOS/tasks.c ****     TCB_t * pxTCB;
2378:FreeRTOS/tasks.c **** 
2379:FreeRTOS/tasks.c ****     /* If null is passed in here then the name of the calling task is being
2380:FreeRTOS/tasks.c ****      * queried. */
2381:FreeRTOS/tasks.c ****     pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2382:FreeRTOS/tasks.c ****     configASSERT( pxTCB );
2383:FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
2384:FreeRTOS/tasks.c **** }
2385:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2386:FreeRTOS/tasks.c **** 
2387:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2388:FreeRTOS/tasks.c **** 
2389:FreeRTOS/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
2390:FreeRTOS/tasks.c ****                                                      const char pcNameToQuery[] )
2391:FreeRTOS/tasks.c ****     {
 129              		.loc 1 2391 5 is_stmt 1 view -0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
2392:FreeRTOS/tasks.c ****         TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 133              		.loc 1 2392 9 view .LVU32
2393:FreeRTOS/tasks.c ****         UBaseType_t x;
 134              		.loc 1 2393 9 view .LVU33
2394:FreeRTOS/tasks.c ****         char cNextChar;
 135              		.loc 1 2394 9 view .LVU34
2395:FreeRTOS/tasks.c ****         BaseType_t xBreakLoop;
 136              		.loc 1 2395 9 view .LVU35
2396:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 49


2397:FreeRTOS/tasks.c ****         /* This function is called with the scheduler suspended. */
2398:FreeRTOS/tasks.c **** 
2399:FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 137              		.loc 1 2399 9 view .LVU36
 138              		.loc 1 2399 13 is_stmt 0 view .LVU37
 139 0000 0368     		ldr	r3, [r0]
 140              		.loc 1 2399 11 view .LVU38
 141 0002 63B3     		cbz	r3, .L20
2391:FreeRTOS/tasks.c ****         TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 142              		.loc 1 2391 5 view .LVU39
 143 0004 70B5     		push	{r4, r5, r6, lr}
 144              	.LCFI0:
 145              		.cfi_def_cfa_offset 16
 146              		.cfi_offset 4, -16
 147              		.cfi_offset 5, -12
 148              		.cfi_offset 6, -8
 149              		.cfi_offset 14, -4
 150 0006 0446     		mov	r4, r0
 151 0008 8E46     		mov	lr, r1
 152              	.LBB113:
2400:FreeRTOS/tasks.c ****         {
2401:FreeRTOS/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
 153              		.loc 1 2401 13 is_stmt 1 view .LVU40
 154              	.LVL10:
 155              		.loc 1 2401 13 view .LVU41
 156 000a 4368     		ldr	r3, [r0, #4]
 157 000c 5B68     		ldr	r3, [r3, #4]
 158 000e 4360     		str	r3, [r0, #4]
 159              		.loc 1 2401 13 view .LVU42
 160 0010 00F10805 		add	r5, r0, #8
 161 0014 AB42     		cmp	r3, r5
 162 0016 03D0     		beq	.L26
 163              	.L14:
 164              		.loc 1 2401 13 discriminator 3 view .LVU43
 165 0018 6368     		ldr	r3, [r4, #4]
 166 001a DE68     		ldr	r6, [r3, #12]
 167              	.LVL11:
 168              		.loc 1 2401 13 is_stmt 0 discriminator 3 view .LVU44
 169              	.LBE113:
2392:FreeRTOS/tasks.c ****         UBaseType_t x;
 170              		.loc 1 2392 44 discriminator 3 view .LVU45
 171 001c 0020     		movs	r0, #0
 172              	.LVL12:
2392:FreeRTOS/tasks.c ****         UBaseType_t x;
 173              		.loc 1 2392 44 discriminator 3 view .LVU46
 174 001e 09E0     		b	.L19
 175              	.LVL13:
 176              	.L26:
 177              	.LBB114:
 178              		.loc 1 2401 13 is_stmt 1 discriminator 1 view .LVU47
 179 0020 5B68     		ldr	r3, [r3, #4]
 180 0022 4360     		str	r3, [r0, #4]
 181 0024 F8E7     		b	.L14
 182              	.LVL14:
 183              	.L27:
 184              		.loc 1 2401 13 is_stmt 0 discriminator 1 view .LVU48
 185              	.LBE114:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 50


 186              	.LBB115:
2402:FreeRTOS/tasks.c **** 
2403:FreeRTOS/tasks.c ****             do
2404:FreeRTOS/tasks.c ****             {
2405:FreeRTOS/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
 187              		.loc 1 2405 17 is_stmt 1 discriminator 1 view .LVU49
 188 0026 5B68     		ldr	r3, [r3, #4]
 189 0028 6360     		str	r3, [r4, #4]
 190 002a 08E0     		b	.L15
 191              	.LVL15:
 192              	.L21:
 193              		.loc 1 2405 17 is_stmt 0 discriminator 1 view .LVU50
 194              	.LBE115:
2406:FreeRTOS/tasks.c **** 
2407:FreeRTOS/tasks.c ****                 /* Check each character in the name looking for a match or
2408:FreeRTOS/tasks.c ****                  * mismatch. */
2409:FreeRTOS/tasks.c ****                 xBreakLoop = pdFALSE;
2410:FreeRTOS/tasks.c **** 
2411:FreeRTOS/tasks.c ****                 for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2412:FreeRTOS/tasks.c ****                 {
2413:FreeRTOS/tasks.c ****                     cNextChar = pxNextTCB->pcTaskName[ x ];
2414:FreeRTOS/tasks.c **** 
2415:FreeRTOS/tasks.c ****                     if( cNextChar != pcNameToQuery[ x ] )
2416:FreeRTOS/tasks.c ****                     {
2417:FreeRTOS/tasks.c ****                         /* Characters didn't match. */
2418:FreeRTOS/tasks.c ****                         xBreakLoop = pdTRUE;
2419:FreeRTOS/tasks.c ****                     }
2420:FreeRTOS/tasks.c ****                     else if( cNextChar == ( char ) 0x00 )
2421:FreeRTOS/tasks.c ****                     {
2422:FreeRTOS/tasks.c ****                         /* Both strings terminated, a match must have been
2423:FreeRTOS/tasks.c ****                          * found. */
2424:FreeRTOS/tasks.c ****                         pxReturn = pxNextTCB;
 195              		.loc 1 2424 34 view .LVU51
 196 002c 0846     		mov	r0, r1
 197              	.LVL16:
 198              	.L17:
2425:FreeRTOS/tasks.c ****                         xBreakLoop = pdTRUE;
2426:FreeRTOS/tasks.c ****                     }
2427:FreeRTOS/tasks.c ****                     else
2428:FreeRTOS/tasks.c ****                     {
2429:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2430:FreeRTOS/tasks.c ****                     }
2431:FreeRTOS/tasks.c **** 
2432:FreeRTOS/tasks.c ****                     if( xBreakLoop != pdFALSE )
2433:FreeRTOS/tasks.c ****                     {
2434:FreeRTOS/tasks.c ****                         break;
2435:FreeRTOS/tasks.c ****                     }
2436:FreeRTOS/tasks.c ****                 }
2437:FreeRTOS/tasks.c **** 
2438:FreeRTOS/tasks.c ****                 if( pxReturn != NULL )
 199              		.loc 1 2438 17 is_stmt 1 view .LVU52
 200              		.loc 1 2438 19 is_stmt 0 view .LVU53
 201 002e C0B9     		cbnz	r0, .L12
2439:FreeRTOS/tasks.c ****                 {
2440:FreeRTOS/tasks.c ****                     /* The handle has been found. */
2441:FreeRTOS/tasks.c ****                     break;
2442:FreeRTOS/tasks.c ****                 }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 51


2443:FreeRTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
 202              		.loc 1 2443 20 is_stmt 1 view .LVU54
 203              		.loc 1 2443 13 is_stmt 0 view .LVU55
 204 0030 8E42     		cmp	r6, r1
 205 0032 16D0     		beq	.L12
 206              	.LVL17:
 207              	.L19:
2401:FreeRTOS/tasks.c **** 
 208              		.loc 1 2401 62 is_stmt 1 discriminator 4 view .LVU56
2403:FreeRTOS/tasks.c ****             {
 209              		.loc 1 2403 13 discriminator 4 view .LVU57
 210              	.LBB116:
2405:FreeRTOS/tasks.c **** 
 211              		.loc 1 2405 17 discriminator 4 view .LVU58
2405:FreeRTOS/tasks.c **** 
 212              		.loc 1 2405 17 discriminator 4 view .LVU59
 213 0034 6368     		ldr	r3, [r4, #4]
 214 0036 5B68     		ldr	r3, [r3, #4]
 215 0038 6360     		str	r3, [r4, #4]
2405:FreeRTOS/tasks.c **** 
 216              		.loc 1 2405 17 discriminator 4 view .LVU60
 217 003a 9D42     		cmp	r5, r3
 218 003c F3D0     		beq	.L27
 219              	.L15:
2405:FreeRTOS/tasks.c **** 
 220              		.loc 1 2405 17 discriminator 3 view .LVU61
 221 003e 6368     		ldr	r3, [r4, #4]
 222 0040 D968     		ldr	r1, [r3, #12]
 223              	.LVL18:
2405:FreeRTOS/tasks.c **** 
 224              		.loc 1 2405 17 is_stmt 0 discriminator 3 view .LVU62
 225              	.LBE116:
2405:FreeRTOS/tasks.c **** 
 226              		.loc 1 2405 65 is_stmt 1 discriminator 3 view .LVU63
2409:FreeRTOS/tasks.c **** 
 227              		.loc 1 2409 17 discriminator 3 view .LVU64
2411:FreeRTOS/tasks.c ****                 {
 228              		.loc 1 2411 17 discriminator 3 view .LVU65
2411:FreeRTOS/tasks.c ****                 {
 229              		.loc 1 2411 24 is_stmt 0 discriminator 3 view .LVU66
 230 0042 0023     		movs	r3, #0
 231              	.LVL19:
 232              	.L16:
2411:FreeRTOS/tasks.c ****                 {
 233              		.loc 1 2411 45 is_stmt 1 discriminator 1 view .LVU67
2411:FreeRTOS/tasks.c ****                 {
 234              		.loc 1 2411 17 is_stmt 0 discriminator 1 view .LVU68
 235 0044 132B     		cmp	r3, #19
 236 0046 F2D8     		bhi	.L17
2413:FreeRTOS/tasks.c **** 
 237              		.loc 1 2413 21 is_stmt 1 view .LVU69
2413:FreeRTOS/tasks.c **** 
 238              		.loc 1 2413 31 is_stmt 0 view .LVU70
 239 0048 CA18     		adds	r2, r1, r3
 240 004a 92F83420 		ldrb	r2, [r2, #52]	@ zero_extendqisi2
 241              	.LVL20:
2415:FreeRTOS/tasks.c ****                     {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 52


 242              		.loc 1 2415 21 is_stmt 1 view .LVU71
2415:FreeRTOS/tasks.c ****                     {
 243              		.loc 1 2415 51 is_stmt 0 view .LVU72
 244 004e 1EF803C0 		ldrb	ip, [lr, r3]	@ zero_extendqisi2
2415:FreeRTOS/tasks.c ****                     {
 245              		.loc 1 2415 23 view .LVU73
 246 0052 9445     		cmp	ip, r2
 247 0054 EBD1     		bne	.L17
2420:FreeRTOS/tasks.c ****                     {
 248              		.loc 1 2420 26 is_stmt 1 view .LVU74
2420:FreeRTOS/tasks.c ****                     {
 249              		.loc 1 2420 28 is_stmt 0 view .LVU75
 250 0056 002A     		cmp	r2, #0
 251 0058 E8D0     		beq	.L21
2429:FreeRTOS/tasks.c ****                     }
 252              		.loc 1 2429 49 is_stmt 1 discriminator 2 view .LVU76
2432:FreeRTOS/tasks.c ****                     {
 253              		.loc 1 2432 21 discriminator 2 view .LVU77
2411:FreeRTOS/tasks.c ****                 {
 254              		.loc 1 2411 90 discriminator 2 view .LVU78
2411:FreeRTOS/tasks.c ****                 {
 255              		.loc 1 2411 91 is_stmt 0 discriminator 2 view .LVU79
 256 005a 0133     		adds	r3, r3, #1
 257              	.LVL21:
2411:FreeRTOS/tasks.c ****                 {
 258              		.loc 1 2411 91 discriminator 2 view .LVU80
 259 005c F2E7     		b	.L16
 260              	.LVL22:
 261              	.L20:
 262              	.LCFI1:
 263              		.cfi_def_cfa_offset 0
 264              		.cfi_restore 4
 265              		.cfi_restore 5
 266              		.cfi_restore 6
 267              		.cfi_restore 14
2392:FreeRTOS/tasks.c ****         UBaseType_t x;
 268              		.loc 1 2392 44 view .LVU81
 269 005e 0020     		movs	r0, #0
 270              	.LVL23:
2444:FreeRTOS/tasks.c ****         }
2445:FreeRTOS/tasks.c ****         else
2446:FreeRTOS/tasks.c ****         {
2447:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
 271              		.loc 1 2447 37 is_stmt 1 view .LVU82
2448:FreeRTOS/tasks.c ****         }
2449:FreeRTOS/tasks.c **** 
2450:FreeRTOS/tasks.c ****         return pxReturn;
 272              		.loc 1 2450 9 view .LVU83
2451:FreeRTOS/tasks.c ****     }
 273              		.loc 1 2451 5 is_stmt 0 view .LVU84
 274 0060 7047     		bx	lr
 275              	.LVL24:
 276              	.L12:
 277              	.LCFI2:
 278              		.cfi_def_cfa_offset 16
 279              		.cfi_offset 4, -16
 280              		.cfi_offset 5, -12
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 53


 281              		.cfi_offset 6, -8
 282              		.cfi_offset 14, -4
 283              		.loc 1 2451 5 view .LVU85
 284 0062 70BD     		pop	{r4, r5, r6, pc}
 285              		.loc 1 2451 5 view .LVU86
 286              		.cfi_endproc
 287              	.LFE23:
 289              		.section	.text.prvIdleTask,"ax",%progbits
 290              		.align	1
 291              		.syntax unified
 292              		.thumb
 293              		.thumb_func
 295              	prvIdleTask:
 296              	.LFB40:
2452:FreeRTOS/tasks.c **** 
2453:FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2454:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2455:FreeRTOS/tasks.c **** 
2456:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2457:FreeRTOS/tasks.c **** 
2458:FreeRTOS/tasks.c ****     TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types a
2459:FreeRTOS/tasks.c ****     {
2460:FreeRTOS/tasks.c ****         UBaseType_t uxQueue = configMAX_PRIORITIES;
2461:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
2462:FreeRTOS/tasks.c **** 
2463:FreeRTOS/tasks.c ****         /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2464:FreeRTOS/tasks.c ****         configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2465:FreeRTOS/tasks.c **** 
2466:FreeRTOS/tasks.c ****         vTaskSuspendAll();
2467:FreeRTOS/tasks.c ****         {
2468:FreeRTOS/tasks.c ****             /* Search the ready lists. */
2469:FreeRTOS/tasks.c ****             do
2470:FreeRTOS/tasks.c ****             {
2471:FreeRTOS/tasks.c ****                 uxQueue--;
2472:FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueu
2473:FreeRTOS/tasks.c **** 
2474:FreeRTOS/tasks.c ****                 if( pxTCB != NULL )
2475:FreeRTOS/tasks.c ****                 {
2476:FreeRTOS/tasks.c ****                     /* Found the handle. */
2477:FreeRTOS/tasks.c ****                     break;
2478:FreeRTOS/tasks.c ****                 }
2479:FreeRTOS/tasks.c ****             } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as 
2480:FreeRTOS/tasks.c **** 
2481:FreeRTOS/tasks.c ****             /* Search the delayed lists. */
2482:FreeRTOS/tasks.c ****             if( pxTCB == NULL )
2483:FreeRTOS/tasks.c ****             {
2484:FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQ
2485:FreeRTOS/tasks.c ****             }
2486:FreeRTOS/tasks.c **** 
2487:FreeRTOS/tasks.c ****             if( pxTCB == NULL )
2488:FreeRTOS/tasks.c ****             {
2489:FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, p
2490:FreeRTOS/tasks.c ****             }
2491:FreeRTOS/tasks.c **** 
2492:FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
2493:FreeRTOS/tasks.c ****                 {
2494:FreeRTOS/tasks.c ****                     if( pxTCB == NULL )
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 54


2495:FreeRTOS/tasks.c ****                     {
2496:FreeRTOS/tasks.c ****                         /* Search the suspended list. */
2497:FreeRTOS/tasks.c ****                         pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuer
2498:FreeRTOS/tasks.c ****                     }
2499:FreeRTOS/tasks.c ****                 }
2500:FreeRTOS/tasks.c ****             #endif
2501:FreeRTOS/tasks.c **** 
2502:FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
2503:FreeRTOS/tasks.c ****                 {
2504:FreeRTOS/tasks.c ****                     if( pxTCB == NULL )
2505:FreeRTOS/tasks.c ****                     {
2506:FreeRTOS/tasks.c ****                         /* Search the deleted list. */
2507:FreeRTOS/tasks.c ****                         pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcName
2508:FreeRTOS/tasks.c ****                     }
2509:FreeRTOS/tasks.c ****                 }
2510:FreeRTOS/tasks.c ****             #endif
2511:FreeRTOS/tasks.c ****         }
2512:FreeRTOS/tasks.c ****         ( void ) xTaskResumeAll();
2513:FreeRTOS/tasks.c **** 
2514:FreeRTOS/tasks.c ****         return pxTCB;
2515:FreeRTOS/tasks.c ****     }
2516:FreeRTOS/tasks.c **** 
2517:FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2518:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2519:FreeRTOS/tasks.c **** 
2520:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2521:FreeRTOS/tasks.c **** 
2522:FreeRTOS/tasks.c ****     UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
2523:FreeRTOS/tasks.c ****                                       const UBaseType_t uxArraySize,
2524:FreeRTOS/tasks.c ****                                       uint32_t * const pulTotalRunTime )
2525:FreeRTOS/tasks.c ****     {
2526:FreeRTOS/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2527:FreeRTOS/tasks.c **** 
2528:FreeRTOS/tasks.c ****         vTaskSuspendAll();
2529:FreeRTOS/tasks.c ****         {
2530:FreeRTOS/tasks.c ****             /* Is there a space in the array for each task in the system? */
2531:FreeRTOS/tasks.c ****             if( uxArraySize >= uxCurrentNumberOfTasks )
2532:FreeRTOS/tasks.c ****             {
2533:FreeRTOS/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2534:FreeRTOS/tasks.c ****                  * task in the Ready state. */
2535:FreeRTOS/tasks.c ****                 do
2536:FreeRTOS/tasks.c ****                 {
2537:FreeRTOS/tasks.c ****                     uxQueue--;
2538:FreeRTOS/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
2539:FreeRTOS/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
2540:FreeRTOS/tasks.c **** 
2541:FreeRTOS/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2542:FreeRTOS/tasks.c ****                  * task in the Blocked state. */
2543:FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2544:FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2545:FreeRTOS/tasks.c **** 
2546:FreeRTOS/tasks.c ****                 #if ( INCLUDE_vTaskDelete == 1 )
2547:FreeRTOS/tasks.c ****                     {
2548:FreeRTOS/tasks.c ****                         /* Fill in an TaskStatus_t structure with information on
2549:FreeRTOS/tasks.c ****                          * each task that has been deleted but not yet cleaned up. */
2550:FreeRTOS/tasks.c ****                         uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &
2551:FreeRTOS/tasks.c ****                     }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 55


2552:FreeRTOS/tasks.c ****                 #endif
2553:FreeRTOS/tasks.c **** 
2554:FreeRTOS/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
2555:FreeRTOS/tasks.c ****                     {
2556:FreeRTOS/tasks.c ****                         /* Fill in an TaskStatus_t structure with information on
2557:FreeRTOS/tasks.c ****                          * each task in the Suspended state. */
2558:FreeRTOS/tasks.c ****                         uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &
2559:FreeRTOS/tasks.c ****                     }
2560:FreeRTOS/tasks.c ****                 #endif
2561:FreeRTOS/tasks.c **** 
2562:FreeRTOS/tasks.c ****                 #if ( configGENERATE_RUN_TIME_STATS == 1 )
2563:FreeRTOS/tasks.c ****                     {
2564:FreeRTOS/tasks.c ****                         if( pulTotalRunTime != NULL )
2565:FreeRTOS/tasks.c ****                         {
2566:FreeRTOS/tasks.c ****                             #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2567:FreeRTOS/tasks.c ****                                 portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2568:FreeRTOS/tasks.c ****                             #else
2569:FreeRTOS/tasks.c ****                                 *pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2570:FreeRTOS/tasks.c ****                             #endif
2571:FreeRTOS/tasks.c ****                         }
2572:FreeRTOS/tasks.c ****                     }
2573:FreeRTOS/tasks.c ****                 #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2574:FreeRTOS/tasks.c ****                     {
2575:FreeRTOS/tasks.c ****                         if( pulTotalRunTime != NULL )
2576:FreeRTOS/tasks.c ****                         {
2577:FreeRTOS/tasks.c ****                             *pulTotalRunTime = 0;
2578:FreeRTOS/tasks.c ****                         }
2579:FreeRTOS/tasks.c ****                     }
2580:FreeRTOS/tasks.c ****                 #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2581:FreeRTOS/tasks.c ****             }
2582:FreeRTOS/tasks.c ****             else
2583:FreeRTOS/tasks.c ****             {
2584:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2585:FreeRTOS/tasks.c ****             }
2586:FreeRTOS/tasks.c ****         }
2587:FreeRTOS/tasks.c ****         ( void ) xTaskResumeAll();
2588:FreeRTOS/tasks.c **** 
2589:FreeRTOS/tasks.c ****         return uxTask;
2590:FreeRTOS/tasks.c ****     }
2591:FreeRTOS/tasks.c **** 
2592:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2593:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2594:FreeRTOS/tasks.c **** 
2595:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2596:FreeRTOS/tasks.c **** 
2597:FreeRTOS/tasks.c ****     TaskHandle_t xTaskGetIdleTaskHandle( void )
2598:FreeRTOS/tasks.c ****     {
2599:FreeRTOS/tasks.c ****         /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2600:FreeRTOS/tasks.c ****          * started, then xIdleTaskHandle will be NULL. */
2601:FreeRTOS/tasks.c ****         configASSERT( ( xIdleTaskHandle != NULL ) );
2602:FreeRTOS/tasks.c ****         return xIdleTaskHandle;
2603:FreeRTOS/tasks.c ****     }
2604:FreeRTOS/tasks.c **** 
2605:FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2606:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2607:FreeRTOS/tasks.c **** 
2608:FreeRTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 56


2609:FreeRTOS/tasks.c ****  * This is to ensure vTaskStepTick() is available when user defined low power mode
2610:FreeRTOS/tasks.c ****  * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2611:FreeRTOS/tasks.c ****  * 1. */
2612:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2613:FreeRTOS/tasks.c **** 
2614:FreeRTOS/tasks.c ****     void vTaskStepTick( const TickType_t xTicksToJump )
2615:FreeRTOS/tasks.c ****     {
2616:FreeRTOS/tasks.c ****         /* Correct the tick count value after a period during which the tick
2617:FreeRTOS/tasks.c ****          * was suppressed.  Note this does *not* call the tick hook function for
2618:FreeRTOS/tasks.c ****          * each stepped tick. */
2619:FreeRTOS/tasks.c ****         configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2620:FreeRTOS/tasks.c ****         xTickCount += xTicksToJump;
2621:FreeRTOS/tasks.c ****         traceINCREASE_TICK_COUNT( xTicksToJump );
2622:FreeRTOS/tasks.c ****     }
2623:FreeRTOS/tasks.c **** 
2624:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2625:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2626:FreeRTOS/tasks.c **** 
2627:FreeRTOS/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2628:FreeRTOS/tasks.c **** {
2629:FreeRTOS/tasks.c ****     BaseType_t xYieldOccurred;
2630:FreeRTOS/tasks.c **** 
2631:FreeRTOS/tasks.c ****     /* Must not be called with the scheduler suspended as the implementation
2632:FreeRTOS/tasks.c ****      * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2633:FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended == 0 );
2634:FreeRTOS/tasks.c **** 
2635:FreeRTOS/tasks.c ****     /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2636:FreeRTOS/tasks.c ****      * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2637:FreeRTOS/tasks.c ****     vTaskSuspendAll();
2638:FreeRTOS/tasks.c ****     xPendedTicks += xTicksToCatchUp;
2639:FreeRTOS/tasks.c ****     xYieldOccurred = xTaskResumeAll();
2640:FreeRTOS/tasks.c **** 
2641:FreeRTOS/tasks.c ****     return xYieldOccurred;
2642:FreeRTOS/tasks.c **** }
2643:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2644:FreeRTOS/tasks.c **** 
2645:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2646:FreeRTOS/tasks.c **** 
2647:FreeRTOS/tasks.c ****     BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2648:FreeRTOS/tasks.c ****     {
2649:FreeRTOS/tasks.c ****         TCB_t * pxTCB = xTask;
2650:FreeRTOS/tasks.c ****         BaseType_t xReturn;
2651:FreeRTOS/tasks.c **** 
2652:FreeRTOS/tasks.c ****         configASSERT( pxTCB );
2653:FreeRTOS/tasks.c **** 
2654:FreeRTOS/tasks.c ****         vTaskSuspendAll();
2655:FreeRTOS/tasks.c ****         {
2656:FreeRTOS/tasks.c ****             /* A task can only be prematurely removed from the Blocked state if
2657:FreeRTOS/tasks.c ****              * it is actually in the Blocked state. */
2658:FreeRTOS/tasks.c ****             if( eTaskGetState( xTask ) == eBlocked )
2659:FreeRTOS/tasks.c ****             {
2660:FreeRTOS/tasks.c ****                 xReturn = pdPASS;
2661:FreeRTOS/tasks.c **** 
2662:FreeRTOS/tasks.c ****                 /* Remove the reference to the task from the blocked list.  An
2663:FreeRTOS/tasks.c ****                  * interrupt won't touch the xStateListItem because the
2664:FreeRTOS/tasks.c ****                  * scheduler is suspended. */
2665:FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 57


2666:FreeRTOS/tasks.c **** 
2667:FreeRTOS/tasks.c ****                 /* Is the task waiting on an event also?  If so remove it from
2668:FreeRTOS/tasks.c ****                  * the event list too.  Interrupts can touch the event list item,
2669:FreeRTOS/tasks.c ****                  * even though the scheduler is suspended, so a critical section
2670:FreeRTOS/tasks.c ****                  * is used. */
2671:FreeRTOS/tasks.c ****                 taskENTER_CRITICAL();
2672:FreeRTOS/tasks.c ****                 {
2673:FreeRTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2674:FreeRTOS/tasks.c ****                     {
2675:FreeRTOS/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2676:FreeRTOS/tasks.c **** 
2677:FreeRTOS/tasks.c ****                         /* This lets the task know it was forcibly removed from the
2678:FreeRTOS/tasks.c ****                          * blocked state so it should not re-evaluate its block time and
2679:FreeRTOS/tasks.c ****                          * then block again. */
2680:FreeRTOS/tasks.c ****                         pxTCB->ucDelayAborted = pdTRUE;
2681:FreeRTOS/tasks.c ****                     }
2682:FreeRTOS/tasks.c ****                     else
2683:FreeRTOS/tasks.c ****                     {
2684:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2685:FreeRTOS/tasks.c ****                     }
2686:FreeRTOS/tasks.c ****                 }
2687:FreeRTOS/tasks.c ****                 taskEXIT_CRITICAL();
2688:FreeRTOS/tasks.c **** 
2689:FreeRTOS/tasks.c ****                 /* Place the unblocked task into the appropriate ready list. */
2690:FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
2691:FreeRTOS/tasks.c **** 
2692:FreeRTOS/tasks.c ****                 /* A task being unblocked cannot cause an immediate context
2693:FreeRTOS/tasks.c ****                  * switch if preemption is turned off. */
2694:FreeRTOS/tasks.c ****                 #if ( configUSE_PREEMPTION == 1 )
2695:FreeRTOS/tasks.c ****                     {
2696:FreeRTOS/tasks.c ****                         /* Preemption is on, but a context switch should only be
2697:FreeRTOS/tasks.c ****                          *  performed if the unblocked task has a priority that is
2698:FreeRTOS/tasks.c ****                          *  equal to or higher than the currently executing task. */
2699:FreeRTOS/tasks.c ****                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2700:FreeRTOS/tasks.c ****                         {
2701:FreeRTOS/tasks.c ****                             /* Pend the yield to be performed when the scheduler
2702:FreeRTOS/tasks.c ****                              * is unsuspended. */
2703:FreeRTOS/tasks.c ****                             xYieldPending = pdTRUE;
2704:FreeRTOS/tasks.c ****                         }
2705:FreeRTOS/tasks.c ****                         else
2706:FreeRTOS/tasks.c ****                         {
2707:FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
2708:FreeRTOS/tasks.c ****                         }
2709:FreeRTOS/tasks.c ****                     }
2710:FreeRTOS/tasks.c ****                 #endif /* configUSE_PREEMPTION */
2711:FreeRTOS/tasks.c ****             }
2712:FreeRTOS/tasks.c ****             else
2713:FreeRTOS/tasks.c ****             {
2714:FreeRTOS/tasks.c ****                 xReturn = pdFAIL;
2715:FreeRTOS/tasks.c ****             }
2716:FreeRTOS/tasks.c ****         }
2717:FreeRTOS/tasks.c ****         ( void ) xTaskResumeAll();
2718:FreeRTOS/tasks.c **** 
2719:FreeRTOS/tasks.c ****         return xReturn;
2720:FreeRTOS/tasks.c ****     }
2721:FreeRTOS/tasks.c **** 
2722:FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 58


2723:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2724:FreeRTOS/tasks.c **** 
2725:FreeRTOS/tasks.c **** BaseType_t xTaskIncrementTick( void )
2726:FreeRTOS/tasks.c **** {
2727:FreeRTOS/tasks.c ****     TCB_t * pxTCB;
2728:FreeRTOS/tasks.c ****     TickType_t xItemValue;
2729:FreeRTOS/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
2730:FreeRTOS/tasks.c **** 
2731:FreeRTOS/tasks.c ****     /* Called by the portable layer each time a tick interrupt occurs.
2732:FreeRTOS/tasks.c ****      * Increments the tick then checks to see if the new tick value will cause any
2733:FreeRTOS/tasks.c ****      * tasks to be unblocked. */
2734:FreeRTOS/tasks.c ****     traceTASK_INCREMENT_TICK( xTickCount );
2735:FreeRTOS/tasks.c **** 
2736:FreeRTOS/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2737:FreeRTOS/tasks.c ****     {
2738:FreeRTOS/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this
2739:FreeRTOS/tasks.c ****          * block. */
2740:FreeRTOS/tasks.c ****         const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2741:FreeRTOS/tasks.c **** 
2742:FreeRTOS/tasks.c ****         /* Increment the RTOS tick, switching the delayed and overflowed
2743:FreeRTOS/tasks.c ****          * delayed lists if it wraps to 0. */
2744:FreeRTOS/tasks.c ****         xTickCount = xConstTickCount;
2745:FreeRTOS/tasks.c **** 
2746:FreeRTOS/tasks.c ****         if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to fa
2747:FreeRTOS/tasks.c ****         {
2748:FreeRTOS/tasks.c ****             taskSWITCH_DELAYED_LISTS();
2749:FreeRTOS/tasks.c ****         }
2750:FreeRTOS/tasks.c ****         else
2751:FreeRTOS/tasks.c ****         {
2752:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2753:FreeRTOS/tasks.c ****         }
2754:FreeRTOS/tasks.c **** 
2755:FreeRTOS/tasks.c ****         /* See if this tick has made a timeout expire.  Tasks are stored in
2756:FreeRTOS/tasks.c ****          * the  queue in the order of their wake time - meaning once one task
2757:FreeRTOS/tasks.c ****          * has been found whose block time has not expired there is no need to
2758:FreeRTOS/tasks.c ****          * look any further down the list. */
2759:FreeRTOS/tasks.c ****         if( xConstTickCount >= xNextTaskUnblockTime )
2760:FreeRTOS/tasks.c ****         {
2761:FreeRTOS/tasks.c ****             for( ; ; )
2762:FreeRTOS/tasks.c ****             {
2763:FreeRTOS/tasks.c ****                 if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2764:FreeRTOS/tasks.c ****                 {
2765:FreeRTOS/tasks.c ****                     /* The delayed list is empty.  Set xNextTaskUnblockTime
2766:FreeRTOS/tasks.c ****                      * to the maximum possible value so it is extremely
2767:FreeRTOS/tasks.c ****                      * unlikely that the
2768:FreeRTOS/tasks.c ****                      * if( xTickCount >= xNextTaskUnblockTime ) test will pass
2769:FreeRTOS/tasks.c ****                      * next time through. */
2770:FreeRTOS/tasks.c ****                     xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts
2771:FreeRTOS/tasks.c ****                     break;
2772:FreeRTOS/tasks.c ****                 }
2773:FreeRTOS/tasks.c ****                 else
2774:FreeRTOS/tasks.c ****                 {
2775:FreeRTOS/tasks.c ****                     /* The delayed list is not empty, get the value of the
2776:FreeRTOS/tasks.c ****                      * item at the head of the delayed list.  This is the time
2777:FreeRTOS/tasks.c ****                      * at which the task at the head of the delayed list must
2778:FreeRTOS/tasks.c ****                      * be removed from the Blocked state. */
2779:FreeRTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 59


2780:FreeRTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2781:FreeRTOS/tasks.c **** 
2782:FreeRTOS/tasks.c ****                     if( xConstTickCount < xItemValue )
2783:FreeRTOS/tasks.c ****                     {
2784:FreeRTOS/tasks.c ****                         /* It is not time to unblock this item yet, but the
2785:FreeRTOS/tasks.c ****                          * item value is the time at which the task at the head
2786:FreeRTOS/tasks.c ****                          * of the blocked list must be removed from the Blocked
2787:FreeRTOS/tasks.c ****                          * state -  so record the item value in
2788:FreeRTOS/tasks.c ****                          * xNextTaskUnblockTime. */
2789:FreeRTOS/tasks.c ****                         xNextTaskUnblockTime = xItemValue;
2790:FreeRTOS/tasks.c ****                         break; /*lint !e9011 Code structure here is deedmed easier to understand wi
2791:FreeRTOS/tasks.c ****                     }
2792:FreeRTOS/tasks.c ****                     else
2793:FreeRTOS/tasks.c ****                     {
2794:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2795:FreeRTOS/tasks.c ****                     }
2796:FreeRTOS/tasks.c **** 
2797:FreeRTOS/tasks.c ****                     /* It is time to remove the item from the Blocked state. */
2798:FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2799:FreeRTOS/tasks.c **** 
2800:FreeRTOS/tasks.c ****                     /* Is the task waiting on an event also?  If so remove
2801:FreeRTOS/tasks.c ****                      * it from the event list. */
2802:FreeRTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2803:FreeRTOS/tasks.c ****                     {
2804:FreeRTOS/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2805:FreeRTOS/tasks.c ****                     }
2806:FreeRTOS/tasks.c ****                     else
2807:FreeRTOS/tasks.c ****                     {
2808:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2809:FreeRTOS/tasks.c ****                     }
2810:FreeRTOS/tasks.c **** 
2811:FreeRTOS/tasks.c ****                     /* Place the unblocked task into the appropriate ready
2812:FreeRTOS/tasks.c ****                      * list. */
2813:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
2814:FreeRTOS/tasks.c **** 
2815:FreeRTOS/tasks.c ****                     /* A task being unblocked cannot cause an immediate
2816:FreeRTOS/tasks.c ****                      * context switch if preemption is turned off. */
2817:FreeRTOS/tasks.c ****                     #if ( configUSE_PREEMPTION == 1 )
2818:FreeRTOS/tasks.c ****                         {
2819:FreeRTOS/tasks.c ****                             /* Preemption is on, but a context switch should
2820:FreeRTOS/tasks.c ****                              * only be performed if the unblocked task has a
2821:FreeRTOS/tasks.c ****                              * priority that is equal to or higher than the
2822:FreeRTOS/tasks.c ****                              * currently executing task. */
2823:FreeRTOS/tasks.c ****                             if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2824:FreeRTOS/tasks.c ****                             {
2825:FreeRTOS/tasks.c ****                                 xSwitchRequired = pdTRUE;
2826:FreeRTOS/tasks.c ****                             }
2827:FreeRTOS/tasks.c ****                             else
2828:FreeRTOS/tasks.c ****                             {
2829:FreeRTOS/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2830:FreeRTOS/tasks.c ****                             }
2831:FreeRTOS/tasks.c ****                         }
2832:FreeRTOS/tasks.c ****                     #endif /* configUSE_PREEMPTION */
2833:FreeRTOS/tasks.c ****                 }
2834:FreeRTOS/tasks.c ****             }
2835:FreeRTOS/tasks.c ****         }
2836:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 60


2837:FreeRTOS/tasks.c ****         /* Tasks of equal priority to the currently running task will share
2838:FreeRTOS/tasks.c ****          * processing time (time slice) if preemption is on, and the application
2839:FreeRTOS/tasks.c ****          * writer has not explicitly turned time slicing off. */
2840:FreeRTOS/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2841:FreeRTOS/tasks.c ****             {
2842:FreeRTOS/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) >
2843:FreeRTOS/tasks.c ****                 {
2844:FreeRTOS/tasks.c ****                     xSwitchRequired = pdTRUE;
2845:FreeRTOS/tasks.c ****                 }
2846:FreeRTOS/tasks.c ****                 else
2847:FreeRTOS/tasks.c ****                 {
2848:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2849:FreeRTOS/tasks.c ****                 }
2850:FreeRTOS/tasks.c ****             }
2851:FreeRTOS/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2852:FreeRTOS/tasks.c **** 
2853:FreeRTOS/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2854:FreeRTOS/tasks.c ****             {
2855:FreeRTOS/tasks.c ****                 /* Guard against the tick hook being called when the pended tick
2856:FreeRTOS/tasks.c ****                  * count is being unwound (when the scheduler is being unlocked). */
2857:FreeRTOS/tasks.c ****                 if( xPendedTicks == ( TickType_t ) 0 )
2858:FreeRTOS/tasks.c ****                 {
2859:FreeRTOS/tasks.c ****                     vApplicationTickHook();
2860:FreeRTOS/tasks.c ****                 }
2861:FreeRTOS/tasks.c ****                 else
2862:FreeRTOS/tasks.c ****                 {
2863:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2864:FreeRTOS/tasks.c ****                 }
2865:FreeRTOS/tasks.c ****             }
2866:FreeRTOS/tasks.c ****         #endif /* configUSE_TICK_HOOK */
2867:FreeRTOS/tasks.c **** 
2868:FreeRTOS/tasks.c ****         #if ( configUSE_PREEMPTION == 1 )
2869:FreeRTOS/tasks.c ****             {
2870:FreeRTOS/tasks.c ****                 if( xYieldPending != pdFALSE )
2871:FreeRTOS/tasks.c ****                 {
2872:FreeRTOS/tasks.c ****                     xSwitchRequired = pdTRUE;
2873:FreeRTOS/tasks.c ****                 }
2874:FreeRTOS/tasks.c ****                 else
2875:FreeRTOS/tasks.c ****                 {
2876:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2877:FreeRTOS/tasks.c ****                 }
2878:FreeRTOS/tasks.c ****             }
2879:FreeRTOS/tasks.c ****         #endif /* configUSE_PREEMPTION */
2880:FreeRTOS/tasks.c ****     }
2881:FreeRTOS/tasks.c ****     else
2882:FreeRTOS/tasks.c ****     {
2883:FreeRTOS/tasks.c ****         ++xPendedTicks;
2884:FreeRTOS/tasks.c **** 
2885:FreeRTOS/tasks.c ****         /* The tick hook gets called at regular intervals, even if the
2886:FreeRTOS/tasks.c ****          * scheduler is locked. */
2887:FreeRTOS/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2888:FreeRTOS/tasks.c ****             {
2889:FreeRTOS/tasks.c ****                 vApplicationTickHook();
2890:FreeRTOS/tasks.c ****             }
2891:FreeRTOS/tasks.c ****         #endif
2892:FreeRTOS/tasks.c ****     }
2893:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 61


2894:FreeRTOS/tasks.c ****     return xSwitchRequired;
2895:FreeRTOS/tasks.c **** }
2896:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2897:FreeRTOS/tasks.c **** 
2898:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2899:FreeRTOS/tasks.c **** 
2900:FreeRTOS/tasks.c ****     void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
2901:FreeRTOS/tasks.c ****                                      TaskHookFunction_t pxHookFunction )
2902:FreeRTOS/tasks.c ****     {
2903:FreeRTOS/tasks.c ****         TCB_t * xTCB;
2904:FreeRTOS/tasks.c **** 
2905:FreeRTOS/tasks.c ****         /* If xTask is NULL then it is the task hook of the calling task that is
2906:FreeRTOS/tasks.c ****          * getting set. */
2907:FreeRTOS/tasks.c ****         if( xTask == NULL )
2908:FreeRTOS/tasks.c ****         {
2909:FreeRTOS/tasks.c ****             xTCB = ( TCB_t * ) pxCurrentTCB;
2910:FreeRTOS/tasks.c ****         }
2911:FreeRTOS/tasks.c ****         else
2912:FreeRTOS/tasks.c ****         {
2913:FreeRTOS/tasks.c ****             xTCB = xTask;
2914:FreeRTOS/tasks.c ****         }
2915:FreeRTOS/tasks.c **** 
2916:FreeRTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2917:FreeRTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2918:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
2919:FreeRTOS/tasks.c ****         {
2920:FreeRTOS/tasks.c ****             xTCB->pxTaskTag = pxHookFunction;
2921:FreeRTOS/tasks.c ****         }
2922:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
2923:FreeRTOS/tasks.c ****     }
2924:FreeRTOS/tasks.c **** 
2925:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2926:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2927:FreeRTOS/tasks.c **** 
2928:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2929:FreeRTOS/tasks.c **** 
2930:FreeRTOS/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2931:FreeRTOS/tasks.c ****     {
2932:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
2933:FreeRTOS/tasks.c ****         TaskHookFunction_t xReturn;
2934:FreeRTOS/tasks.c **** 
2935:FreeRTOS/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2936:FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2937:FreeRTOS/tasks.c **** 
2938:FreeRTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2939:FreeRTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2940:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
2941:FreeRTOS/tasks.c ****         {
2942:FreeRTOS/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2943:FreeRTOS/tasks.c ****         }
2944:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
2945:FreeRTOS/tasks.c **** 
2946:FreeRTOS/tasks.c ****         return xReturn;
2947:FreeRTOS/tasks.c ****     }
2948:FreeRTOS/tasks.c **** 
2949:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2950:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 62


2951:FreeRTOS/tasks.c **** 
2952:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2953:FreeRTOS/tasks.c **** 
2954:FreeRTOS/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2955:FreeRTOS/tasks.c ****     {
2956:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
2957:FreeRTOS/tasks.c ****         TaskHookFunction_t xReturn;
2958:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
2959:FreeRTOS/tasks.c **** 
2960:FreeRTOS/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2961:FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2962:FreeRTOS/tasks.c **** 
2963:FreeRTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2964:FreeRTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2965:FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2966:FreeRTOS/tasks.c ****         {
2967:FreeRTOS/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2968:FreeRTOS/tasks.c ****         }
2969:FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2970:FreeRTOS/tasks.c **** 
2971:FreeRTOS/tasks.c ****         return xReturn;
2972:FreeRTOS/tasks.c ****     }
2973:FreeRTOS/tasks.c **** 
2974:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2975:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2976:FreeRTOS/tasks.c **** 
2977:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2978:FreeRTOS/tasks.c **** 
2979:FreeRTOS/tasks.c ****     BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask,
2980:FreeRTOS/tasks.c ****                                              void * pvParameter )
2981:FreeRTOS/tasks.c ****     {
2982:FreeRTOS/tasks.c ****         TCB_t * xTCB;
2983:FreeRTOS/tasks.c ****         BaseType_t xReturn;
2984:FreeRTOS/tasks.c **** 
2985:FreeRTOS/tasks.c ****         /* If xTask is NULL then we are calling our own task hook. */
2986:FreeRTOS/tasks.c ****         if( xTask == NULL )
2987:FreeRTOS/tasks.c ****         {
2988:FreeRTOS/tasks.c ****             xTCB = pxCurrentTCB;
2989:FreeRTOS/tasks.c ****         }
2990:FreeRTOS/tasks.c ****         else
2991:FreeRTOS/tasks.c ****         {
2992:FreeRTOS/tasks.c ****             xTCB = xTask;
2993:FreeRTOS/tasks.c ****         }
2994:FreeRTOS/tasks.c **** 
2995:FreeRTOS/tasks.c ****         if( xTCB->pxTaskTag != NULL )
2996:FreeRTOS/tasks.c ****         {
2997:FreeRTOS/tasks.c ****             xReturn = xTCB->pxTaskTag( pvParameter );
2998:FreeRTOS/tasks.c ****         }
2999:FreeRTOS/tasks.c ****         else
3000:FreeRTOS/tasks.c ****         {
3001:FreeRTOS/tasks.c ****             xReturn = pdFAIL;
3002:FreeRTOS/tasks.c ****         }
3003:FreeRTOS/tasks.c **** 
3004:FreeRTOS/tasks.c ****         return xReturn;
3005:FreeRTOS/tasks.c ****     }
3006:FreeRTOS/tasks.c **** 
3007:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 63


3008:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3009:FreeRTOS/tasks.c **** 
3010:FreeRTOS/tasks.c **** void vTaskSwitchContext( void )
3011:FreeRTOS/tasks.c **** {
3012:FreeRTOS/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
3013:FreeRTOS/tasks.c ****     {
3014:FreeRTOS/tasks.c ****         /* The scheduler is currently suspended - do not allow a context
3015:FreeRTOS/tasks.c ****          * switch. */
3016:FreeRTOS/tasks.c ****         xYieldPending = pdTRUE;
3017:FreeRTOS/tasks.c ****     }
3018:FreeRTOS/tasks.c ****     else
3019:FreeRTOS/tasks.c ****     {
3020:FreeRTOS/tasks.c ****         xYieldPending = pdFALSE;
3021:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_OUT();
3022:FreeRTOS/tasks.c **** 
3023:FreeRTOS/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3024:FreeRTOS/tasks.c ****             {
3025:FreeRTOS/tasks.c ****                 #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3026:FreeRTOS/tasks.c ****                     portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3027:FreeRTOS/tasks.c ****                 #else
3028:FreeRTOS/tasks.c ****                     ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3029:FreeRTOS/tasks.c ****                 #endif
3030:FreeRTOS/tasks.c **** 
3031:FreeRTOS/tasks.c ****                 /* Add the amount of time the task has been running to the
3032:FreeRTOS/tasks.c ****                  * accumulated time so far.  The time the task started running was
3033:FreeRTOS/tasks.c ****                  * stored in ulTaskSwitchedInTime.  Note that there is no overflow
3034:FreeRTOS/tasks.c ****                  * protection here so count values are only valid until the timer
3035:FreeRTOS/tasks.c ****                  * overflows.  The guard against negative values is to protect
3036:FreeRTOS/tasks.c ****                  * against suspect run time stat counter implementations - which
3037:FreeRTOS/tasks.c ****                  * are provided by the application, not the kernel. */
3038:FreeRTOS/tasks.c ****                 if( ulTotalRunTime > ulTaskSwitchedInTime )
3039:FreeRTOS/tasks.c ****                 {
3040:FreeRTOS/tasks.c ****                     pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3041:FreeRTOS/tasks.c ****                 }
3042:FreeRTOS/tasks.c ****                 else
3043:FreeRTOS/tasks.c ****                 {
3044:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3045:FreeRTOS/tasks.c ****                 }
3046:FreeRTOS/tasks.c **** 
3047:FreeRTOS/tasks.c ****                 ulTaskSwitchedInTime = ulTotalRunTime;
3048:FreeRTOS/tasks.c ****             }
3049:FreeRTOS/tasks.c ****         #endif /* configGENERATE_RUN_TIME_STATS */
3050:FreeRTOS/tasks.c **** 
3051:FreeRTOS/tasks.c ****         /* Check for stack overflow, if configured. */
3052:FreeRTOS/tasks.c ****         taskCHECK_FOR_STACK_OVERFLOW();
3053:FreeRTOS/tasks.c **** 
3054:FreeRTOS/tasks.c ****         /* Before the currently running task is switched out, save its errno. */
3055:FreeRTOS/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3056:FreeRTOS/tasks.c ****             {
3057:FreeRTOS/tasks.c ****                 pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3058:FreeRTOS/tasks.c ****             }
3059:FreeRTOS/tasks.c ****         #endif
3060:FreeRTOS/tasks.c **** 
3061:FreeRTOS/tasks.c ****         /* Select a new task to run using either the generic C or port
3062:FreeRTOS/tasks.c ****          * optimised asm code. */
3063:FreeRTOS/tasks.c ****         taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with
3064:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 64


3065:FreeRTOS/tasks.c **** 
3066:FreeRTOS/tasks.c ****         /* After the new task is switched in, update the global errno. */
3067:FreeRTOS/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3068:FreeRTOS/tasks.c ****             {
3069:FreeRTOS/tasks.c ****                 FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3070:FreeRTOS/tasks.c ****             }
3071:FreeRTOS/tasks.c ****         #endif
3072:FreeRTOS/tasks.c **** 
3073:FreeRTOS/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
3074:FreeRTOS/tasks.c ****             {
3075:FreeRTOS/tasks.c ****                 /* Switch Newlib's _impure_ptr variable to point to the _reent
3076:FreeRTOS/tasks.c ****                  * structure specific to this task.
3077:FreeRTOS/tasks.c ****                  * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3078:FreeRTOS/tasks.c ****                  * for additional information. */
3079:FreeRTOS/tasks.c ****                 _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3080:FreeRTOS/tasks.c ****             }
3081:FreeRTOS/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
3082:FreeRTOS/tasks.c ****     }
3083:FreeRTOS/tasks.c **** }
3084:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3085:FreeRTOS/tasks.c **** 
3086:FreeRTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList,
3087:FreeRTOS/tasks.c ****                             const TickType_t xTicksToWait )
3088:FreeRTOS/tasks.c **** {
3089:FreeRTOS/tasks.c ****     configASSERT( pxEventList );
3090:FreeRTOS/tasks.c **** 
3091:FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3092:FreeRTOS/tasks.c ****      * SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3093:FreeRTOS/tasks.c **** 
3094:FreeRTOS/tasks.c ****     /* Place the event list item of the TCB in the appropriate event list.
3095:FreeRTOS/tasks.c ****      * This is placed in the list in priority order so the highest priority task
3096:FreeRTOS/tasks.c ****      * is the first to be woken by the event.  The queue that contains the event
3097:FreeRTOS/tasks.c ****      * list is locked, preventing simultaneous access from interrupts. */
3098:FreeRTOS/tasks.c ****     vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3099:FreeRTOS/tasks.c **** 
3100:FreeRTOS/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3101:FreeRTOS/tasks.c **** }
3102:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3103:FreeRTOS/tasks.c **** 
3104:FreeRTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
3105:FreeRTOS/tasks.c ****                                      const TickType_t xItemValue,
3106:FreeRTOS/tasks.c ****                                      const TickType_t xTicksToWait )
3107:FreeRTOS/tasks.c **** {
3108:FreeRTOS/tasks.c ****     configASSERT( pxEventList );
3109:FreeRTOS/tasks.c **** 
3110:FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3111:FreeRTOS/tasks.c ****      * the event groups implementation. */
3112:FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended != 0 );
3113:FreeRTOS/tasks.c **** 
3114:FreeRTOS/tasks.c ****     /* Store the item value in the event list item.  It is safe to access the
3115:FreeRTOS/tasks.c ****      * event list item here as interrupts won't access the event list item of a
3116:FreeRTOS/tasks.c ****      * task that is not in the Blocked state. */
3117:FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VA
3118:FreeRTOS/tasks.c **** 
3119:FreeRTOS/tasks.c ****     /* Place the event list item of the TCB at the end of the appropriate event
3120:FreeRTOS/tasks.c ****      * list.  It is safe to access the event list here because it is part of an
3121:FreeRTOS/tasks.c ****      * event group implementation - and interrupts don't access event groups
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 65


3122:FreeRTOS/tasks.c ****      * directly (instead they access them indirectly by pending function calls to
3123:FreeRTOS/tasks.c ****      * the task level). */
3124:FreeRTOS/tasks.c ****     vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3125:FreeRTOS/tasks.c **** 
3126:FreeRTOS/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3127:FreeRTOS/tasks.c **** }
3128:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3129:FreeRTOS/tasks.c **** 
3130:FreeRTOS/tasks.c **** #if ( configUSE_TIMERS == 1 )
3131:FreeRTOS/tasks.c **** 
3132:FreeRTOS/tasks.c ****     void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
3133:FreeRTOS/tasks.c ****                                           TickType_t xTicksToWait,
3134:FreeRTOS/tasks.c ****                                           const BaseType_t xWaitIndefinitely )
3135:FreeRTOS/tasks.c ****     {
3136:FreeRTOS/tasks.c ****         configASSERT( pxEventList );
3137:FreeRTOS/tasks.c **** 
3138:FreeRTOS/tasks.c ****         /* This function should not be called by application code hence the
3139:FreeRTOS/tasks.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
3140:FreeRTOS/tasks.c ****          * designed for use by kernel code, and has special calling requirements -
3141:FreeRTOS/tasks.c ****          * it should be called with the scheduler suspended. */
3142:FreeRTOS/tasks.c **** 
3143:FreeRTOS/tasks.c **** 
3144:FreeRTOS/tasks.c ****         /* Place the event list item of the TCB in the appropriate event list.
3145:FreeRTOS/tasks.c ****          * In this case it is assume that this is the only task that is going to
3146:FreeRTOS/tasks.c ****          * be waiting on this event list, so the faster vListInsertEnd() function
3147:FreeRTOS/tasks.c ****          * can be used in place of vListInsert. */
3148:FreeRTOS/tasks.c ****         vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3149:FreeRTOS/tasks.c **** 
3150:FreeRTOS/tasks.c ****         /* If the task should block indefinitely then set the block time to a
3151:FreeRTOS/tasks.c ****          * value that will be recognised as an indefinite delay inside the
3152:FreeRTOS/tasks.c ****          * prvAddCurrentTaskToDelayedList() function. */
3153:FreeRTOS/tasks.c ****         if( xWaitIndefinitely != pdFALSE )
3154:FreeRTOS/tasks.c ****         {
3155:FreeRTOS/tasks.c ****             xTicksToWait = portMAX_DELAY;
3156:FreeRTOS/tasks.c ****         }
3157:FreeRTOS/tasks.c **** 
3158:FreeRTOS/tasks.c ****         traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3159:FreeRTOS/tasks.c ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3160:FreeRTOS/tasks.c ****     }
3161:FreeRTOS/tasks.c **** 
3162:FreeRTOS/tasks.c **** #endif /* configUSE_TIMERS */
3163:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3164:FreeRTOS/tasks.c **** 
3165:FreeRTOS/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3166:FreeRTOS/tasks.c **** {
3167:FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
3168:FreeRTOS/tasks.c ****     BaseType_t xReturn;
3169:FreeRTOS/tasks.c **** 
3170:FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3171:FreeRTOS/tasks.c ****      * called from a critical section within an ISR. */
3172:FreeRTOS/tasks.c **** 
3173:FreeRTOS/tasks.c ****     /* The event list is sorted in priority order, so the first in the list can
3174:FreeRTOS/tasks.c ****      * be removed as it is known to be the highest priority.  Remove the TCB from
3175:FreeRTOS/tasks.c ****      * the delayed list, and add it to the ready list.
3176:FreeRTOS/tasks.c ****      *
3177:FreeRTOS/tasks.c ****      * If an event is for a queue that is locked then this function will never
3178:FreeRTOS/tasks.c ****      * get called - the lock count on the queue will get modified instead.  This
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 66


3179:FreeRTOS/tasks.c ****      * means exclusive access to the event list is guaranteed here.
3180:FreeRTOS/tasks.c ****      *
3181:FreeRTOS/tasks.c ****      * This function assumes that a check has already been made to ensure that
3182:FreeRTOS/tasks.c ****      * pxEventList is not empty. */
3183:FreeRTOS/tasks.c ****     pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as th
3184:FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
3185:FreeRTOS/tasks.c ****     ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3186:FreeRTOS/tasks.c **** 
3187:FreeRTOS/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3188:FreeRTOS/tasks.c ****     {
3189:FreeRTOS/tasks.c ****         ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3190:FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
3191:FreeRTOS/tasks.c **** 
3192:FreeRTOS/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3193:FreeRTOS/tasks.c ****             {
3194:FreeRTOS/tasks.c ****                 /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3195:FreeRTOS/tasks.c ****                  * might be set to the blocked task's time out time.  If the task is
3196:FreeRTOS/tasks.c ****                  * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3197:FreeRTOS/tasks.c ****                  * normally left unchanged, because it is automatically reset to a new
3198:FreeRTOS/tasks.c ****                  * value when the tick count equals xNextTaskUnblockTime.  However if
3199:FreeRTOS/tasks.c ****                  * tickless idling is used it might be more important to enter sleep mode
3200:FreeRTOS/tasks.c ****                  * at the earliest possible time - so reset xNextTaskUnblockTime here to
3201:FreeRTOS/tasks.c ****                  * ensure it is updated at the earliest possible time. */
3202:FreeRTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
3203:FreeRTOS/tasks.c ****             }
3204:FreeRTOS/tasks.c ****         #endif
3205:FreeRTOS/tasks.c ****     }
3206:FreeRTOS/tasks.c ****     else
3207:FreeRTOS/tasks.c ****     {
3208:FreeRTOS/tasks.c ****         /* The delayed and ready lists cannot be accessed, so hold this task
3209:FreeRTOS/tasks.c ****          * pending until the scheduler is resumed. */
3210:FreeRTOS/tasks.c ****         vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3211:FreeRTOS/tasks.c ****     }
3212:FreeRTOS/tasks.c **** 
3213:FreeRTOS/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3214:FreeRTOS/tasks.c ****     {
3215:FreeRTOS/tasks.c ****         /* Return true if the task removed from the event list has a higher
3216:FreeRTOS/tasks.c ****          * priority than the calling task.  This allows the calling task to know if
3217:FreeRTOS/tasks.c ****          * it should force a context switch now. */
3218:FreeRTOS/tasks.c ****         xReturn = pdTRUE;
3219:FreeRTOS/tasks.c **** 
3220:FreeRTOS/tasks.c ****         /* Mark that a yield is pending in case the user is not using the
3221:FreeRTOS/tasks.c ****          * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3222:FreeRTOS/tasks.c ****         xYieldPending = pdTRUE;
3223:FreeRTOS/tasks.c ****     }
3224:FreeRTOS/tasks.c ****     else
3225:FreeRTOS/tasks.c ****     {
3226:FreeRTOS/tasks.c ****         xReturn = pdFALSE;
3227:FreeRTOS/tasks.c ****     }
3228:FreeRTOS/tasks.c **** 
3229:FreeRTOS/tasks.c ****     return xReturn;
3230:FreeRTOS/tasks.c **** }
3231:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3232:FreeRTOS/tasks.c **** 
3233:FreeRTOS/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
3234:FreeRTOS/tasks.c ****                                         const TickType_t xItemValue )
3235:FreeRTOS/tasks.c **** {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 67


3236:FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
3237:FreeRTOS/tasks.c **** 
3238:FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3239:FreeRTOS/tasks.c ****      * the event flags implementation. */
3240:FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended != pdFALSE );
3241:FreeRTOS/tasks.c **** 
3242:FreeRTOS/tasks.c ****     /* Store the new item value in the event list. */
3243:FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3244:FreeRTOS/tasks.c **** 
3245:FreeRTOS/tasks.c ****     /* Remove the event list form the event flag.  Interrupts do not access
3246:FreeRTOS/tasks.c ****      * event flags. */
3247:FreeRTOS/tasks.c ****     pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as th
3248:FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
3249:FreeRTOS/tasks.c ****     ( void ) uxListRemove( pxEventListItem );
3250:FreeRTOS/tasks.c **** 
3251:FreeRTOS/tasks.c ****     #if ( configUSE_TICKLESS_IDLE != 0 )
3252:FreeRTOS/tasks.c ****         {
3253:FreeRTOS/tasks.c ****             /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3254:FreeRTOS/tasks.c ****              * might be set to the blocked task's time out time.  If the task is
3255:FreeRTOS/tasks.c ****              * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3256:FreeRTOS/tasks.c ****              * normally left unchanged, because it is automatically reset to a new
3257:FreeRTOS/tasks.c ****              * value when the tick count equals xNextTaskUnblockTime.  However if
3258:FreeRTOS/tasks.c ****              * tickless idling is used it might be more important to enter sleep mode
3259:FreeRTOS/tasks.c ****              * at the earliest possible time - so reset xNextTaskUnblockTime here to
3260:FreeRTOS/tasks.c ****              * ensure it is updated at the earliest possible time. */
3261:FreeRTOS/tasks.c ****             prvResetNextTaskUnblockTime();
3262:FreeRTOS/tasks.c ****         }
3263:FreeRTOS/tasks.c ****     #endif
3264:FreeRTOS/tasks.c **** 
3265:FreeRTOS/tasks.c ****     /* Remove the task from the delayed list and add it to the ready list.  The
3266:FreeRTOS/tasks.c ****      * scheduler is suspended so interrupts will not be accessing the ready
3267:FreeRTOS/tasks.c ****      * lists. */
3268:FreeRTOS/tasks.c ****     ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3269:FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
3270:FreeRTOS/tasks.c **** 
3271:FreeRTOS/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3272:FreeRTOS/tasks.c ****     {
3273:FreeRTOS/tasks.c ****         /* The unblocked task has a priority above that of the calling task, so
3274:FreeRTOS/tasks.c ****          * a context switch is required.  This function is called with the
3275:FreeRTOS/tasks.c ****          * scheduler suspended so xYieldPending is set so the context switch
3276:FreeRTOS/tasks.c ****          * occurs immediately that the scheduler is resumed (unsuspended). */
3277:FreeRTOS/tasks.c ****         xYieldPending = pdTRUE;
3278:FreeRTOS/tasks.c ****     }
3279:FreeRTOS/tasks.c **** }
3280:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3281:FreeRTOS/tasks.c **** 
3282:FreeRTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3283:FreeRTOS/tasks.c **** {
3284:FreeRTOS/tasks.c ****     configASSERT( pxTimeOut );
3285:FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
3286:FreeRTOS/tasks.c ****     {
3287:FreeRTOS/tasks.c ****         pxTimeOut->xOverflowCount = xNumOfOverflows;
3288:FreeRTOS/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
3289:FreeRTOS/tasks.c ****     }
3290:FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
3291:FreeRTOS/tasks.c **** }
3292:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 68


3293:FreeRTOS/tasks.c **** 
3294:FreeRTOS/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3295:FreeRTOS/tasks.c **** {
3296:FreeRTOS/tasks.c ****     /* For internal use only as it does not use a critical section. */
3297:FreeRTOS/tasks.c ****     pxTimeOut->xOverflowCount = xNumOfOverflows;
3298:FreeRTOS/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
3299:FreeRTOS/tasks.c **** }
3300:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3301:FreeRTOS/tasks.c **** 
3302:FreeRTOS/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
3303:FreeRTOS/tasks.c ****                                  TickType_t * const pxTicksToWait )
3304:FreeRTOS/tasks.c **** {
3305:FreeRTOS/tasks.c ****     BaseType_t xReturn;
3306:FreeRTOS/tasks.c **** 
3307:FreeRTOS/tasks.c ****     configASSERT( pxTimeOut );
3308:FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
3309:FreeRTOS/tasks.c **** 
3310:FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
3311:FreeRTOS/tasks.c ****     {
3312:FreeRTOS/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this block. */
3313:FreeRTOS/tasks.c ****         const TickType_t xConstTickCount = xTickCount;
3314:FreeRTOS/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3315:FreeRTOS/tasks.c **** 
3316:FreeRTOS/tasks.c ****         #if ( INCLUDE_xTaskAbortDelay == 1 )
3317:FreeRTOS/tasks.c ****             if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3318:FreeRTOS/tasks.c ****             {
3319:FreeRTOS/tasks.c ****                 /* The delay was aborted, which is not the same as a time out,
3320:FreeRTOS/tasks.c ****                  * but has the same result. */
3321:FreeRTOS/tasks.c ****                 pxCurrentTCB->ucDelayAborted = pdFALSE;
3322:FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
3323:FreeRTOS/tasks.c ****             }
3324:FreeRTOS/tasks.c ****             else
3325:FreeRTOS/tasks.c ****         #endif
3326:FreeRTOS/tasks.c **** 
3327:FreeRTOS/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3328:FreeRTOS/tasks.c ****             if( *pxTicksToWait == portMAX_DELAY )
3329:FreeRTOS/tasks.c ****             {
3330:FreeRTOS/tasks.c ****                 /* If INCLUDE_vTaskSuspend is set to 1 and the block time
3331:FreeRTOS/tasks.c ****                  * specified is the maximum block time then the task should block
3332:FreeRTOS/tasks.c ****                  * indefinitely, and therefore never time out. */
3333:FreeRTOS/tasks.c ****                 xReturn = pdFALSE;
3334:FreeRTOS/tasks.c ****             }
3335:FreeRTOS/tasks.c ****             else
3336:FreeRTOS/tasks.c ****         #endif
3337:FreeRTOS/tasks.c **** 
3338:FreeRTOS/tasks.c ****         if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTi
3339:FreeRTOS/tasks.c ****         {
3340:FreeRTOS/tasks.c ****             /* The tick count is greater than the time at which
3341:FreeRTOS/tasks.c ****              * vTaskSetTimeout() was called, but has also overflowed since
3342:FreeRTOS/tasks.c ****              * vTaskSetTimeOut() was called.  It must have wrapped all the way
3343:FreeRTOS/tasks.c ****              * around and gone past again. This passed since vTaskSetTimeout()
3344:FreeRTOS/tasks.c ****              * was called. */
3345:FreeRTOS/tasks.c ****             xReturn = pdTRUE;
3346:FreeRTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
3347:FreeRTOS/tasks.c ****         }
3348:FreeRTOS/tasks.c ****         else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant wi
3349:FreeRTOS/tasks.c ****         {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 69


3350:FreeRTOS/tasks.c ****             /* Not a genuine timeout. Adjust parameters for time remaining. */
3351:FreeRTOS/tasks.c ****             *pxTicksToWait -= xElapsedTime;
3352:FreeRTOS/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
3353:FreeRTOS/tasks.c ****             xReturn = pdFALSE;
3354:FreeRTOS/tasks.c ****         }
3355:FreeRTOS/tasks.c ****         else
3356:FreeRTOS/tasks.c ****         {
3357:FreeRTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
3358:FreeRTOS/tasks.c ****             xReturn = pdTRUE;
3359:FreeRTOS/tasks.c ****         }
3360:FreeRTOS/tasks.c ****     }
3361:FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
3362:FreeRTOS/tasks.c **** 
3363:FreeRTOS/tasks.c ****     return xReturn;
3364:FreeRTOS/tasks.c **** }
3365:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3366:FreeRTOS/tasks.c **** 
3367:FreeRTOS/tasks.c **** void vTaskMissedYield( void )
3368:FreeRTOS/tasks.c **** {
3369:FreeRTOS/tasks.c ****     xYieldPending = pdTRUE;
3370:FreeRTOS/tasks.c **** }
3371:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3372:FreeRTOS/tasks.c **** 
3373:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3374:FreeRTOS/tasks.c **** 
3375:FreeRTOS/tasks.c ****     UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3376:FreeRTOS/tasks.c ****     {
3377:FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
3378:FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
3379:FreeRTOS/tasks.c **** 
3380:FreeRTOS/tasks.c ****         if( xTask != NULL )
3381:FreeRTOS/tasks.c ****         {
3382:FreeRTOS/tasks.c ****             pxTCB = xTask;
3383:FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxTaskNumber;
3384:FreeRTOS/tasks.c ****         }
3385:FreeRTOS/tasks.c ****         else
3386:FreeRTOS/tasks.c ****         {
3387:FreeRTOS/tasks.c ****             uxReturn = 0U;
3388:FreeRTOS/tasks.c ****         }
3389:FreeRTOS/tasks.c **** 
3390:FreeRTOS/tasks.c ****         return uxReturn;
3391:FreeRTOS/tasks.c ****     }
3392:FreeRTOS/tasks.c **** 
3393:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3394:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3395:FreeRTOS/tasks.c **** 
3396:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3397:FreeRTOS/tasks.c **** 
3398:FreeRTOS/tasks.c ****     void vTaskSetTaskNumber( TaskHandle_t xTask,
3399:FreeRTOS/tasks.c ****                              const UBaseType_t uxHandle )
3400:FreeRTOS/tasks.c ****     {
3401:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3402:FreeRTOS/tasks.c **** 
3403:FreeRTOS/tasks.c ****         if( xTask != NULL )
3404:FreeRTOS/tasks.c ****         {
3405:FreeRTOS/tasks.c ****             pxTCB = xTask;
3406:FreeRTOS/tasks.c ****             pxTCB->uxTaskNumber = uxHandle;
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 70


3407:FreeRTOS/tasks.c ****         }
3408:FreeRTOS/tasks.c ****     }
3409:FreeRTOS/tasks.c **** 
3410:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3411:FreeRTOS/tasks.c **** 
3412:FreeRTOS/tasks.c **** /*
3413:FreeRTOS/tasks.c ****  * -----------------------------------------------------------
3414:FreeRTOS/tasks.c ****  * The Idle task.
3415:FreeRTOS/tasks.c ****  * ----------------------------------------------------------
3416:FreeRTOS/tasks.c ****  *
3417:FreeRTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3418:FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3419:FreeRTOS/tasks.c ****  *
3420:FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
3421:FreeRTOS/tasks.c ****  *
3422:FreeRTOS/tasks.c ****  */
3423:FreeRTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3424:FreeRTOS/tasks.c **** {
 297              		.loc 1 3424 1 is_stmt 1 view -0
 298              		.cfi_startproc
 299              		@ Volatile: function does not return.
 300              		@ args = 0, pretend = 0, frame = 0
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302              		@ link register save eliminated.
 303              	.LVL25:
 304              	.L29:
3425:FreeRTOS/tasks.c ****     /* Stop warnings. */
3426:FreeRTOS/tasks.c ****     ( void ) pvParameters;
 305              		.loc 1 3426 5 view .LVU88
3427:FreeRTOS/tasks.c **** 
3428:FreeRTOS/tasks.c ****     /** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3429:FreeRTOS/tasks.c ****      * SCHEDULER IS STARTED. **/
3430:FreeRTOS/tasks.c **** 
3431:FreeRTOS/tasks.c ****     /* In case a task that has a secure context deletes itself, in which case
3432:FreeRTOS/tasks.c ****      * the idle task is responsible for deleting the task's secure context, if
3433:FreeRTOS/tasks.c ****      * any. */
3434:FreeRTOS/tasks.c ****     portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
 306              		.loc 1 3434 67 view .LVU89
3435:FreeRTOS/tasks.c **** 
3436:FreeRTOS/tasks.c ****     for( ; ; )
 307              		.loc 1 3436 5 view .LVU90
3437:FreeRTOS/tasks.c ****     {
3438:FreeRTOS/tasks.c ****         /* See if any tasks have deleted themselves - if so then the idle task
3439:FreeRTOS/tasks.c ****          * is responsible for freeing the deleted task's TCB and stack. */
3440:FreeRTOS/tasks.c ****         prvCheckTasksWaitingTermination();
 308              		.loc 1 3440 9 view .LVU91
3441:FreeRTOS/tasks.c **** 
3442:FreeRTOS/tasks.c ****         #if ( configUSE_PREEMPTION == 0 )
3443:FreeRTOS/tasks.c ****             {
3444:FreeRTOS/tasks.c ****                 /* If we are not using preemption we keep forcing a task switch to
3445:FreeRTOS/tasks.c ****                  * see if any other task has become available.  If we are using
3446:FreeRTOS/tasks.c ****                  * preemption we don't need to do this as any task becoming available
3447:FreeRTOS/tasks.c ****                  * will automatically get the processor anyway. */
3448:FreeRTOS/tasks.c ****                 taskYIELD();
3449:FreeRTOS/tasks.c ****             }
3450:FreeRTOS/tasks.c ****         #endif /* configUSE_PREEMPTION */
3451:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 71


3452:FreeRTOS/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3453:FreeRTOS/tasks.c ****             {
3454:FreeRTOS/tasks.c ****                 /* When using preemption tasks of equal priority will be
3455:FreeRTOS/tasks.c ****                  * timesliced.  If a task that is sharing the idle priority is ready
3456:FreeRTOS/tasks.c ****                  * to run then the idle task should yield before the end of the
3457:FreeRTOS/tasks.c ****                  * timeslice.
3458:FreeRTOS/tasks.c ****                  *
3459:FreeRTOS/tasks.c ****                  * A critical region is not required here as we are just reading from
3460:FreeRTOS/tasks.c ****                  * the list, and an occasional incorrect value will not matter.  If
3461:FreeRTOS/tasks.c ****                  * the ready list at the idle priority contains more than one task
3462:FreeRTOS/tasks.c ****                  * then a task other than the idle task is ready to execute. */
3463:FreeRTOS/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBase
 309              		.loc 1 3463 17 view .LVU92
 310              		.loc 1 3463 21 is_stmt 0 view .LVU93
 311 0000 074B     		ldr	r3, .L31
 312 0002 1B68     		ldr	r3, [r3]
 313              		.loc 1 3463 19 view .LVU94
 314 0004 012B     		cmp	r3, #1
 315 0006 FBD9     		bls	.L29
3464:FreeRTOS/tasks.c ****                 {
3465:FreeRTOS/tasks.c ****                     taskYIELD();
 316              		.loc 1 3465 21 is_stmt 1 view .LVU95
 317 0008 4FF0E023 		mov	r3, #-536813568
 318 000c 4FF08052 		mov	r2, #268435456
 319 0010 C3F8042D 		str	r2, [r3, #3332]
 320              		.loc 1 3465 21 view .LVU96
 321              		.syntax unified
 322              	@ 3465 "FreeRTOS/tasks.c" 1
 323 0014 BFF34F8F 		dsb
 324              	@ 0 "" 2
 325              		.loc 1 3465 21 view .LVU97
 326              	@ 3465 "FreeRTOS/tasks.c" 1
 327 0018 BFF36F8F 		isb
 328              	@ 0 "" 2
 329              		.loc 1 3465 32 view .LVU98
 330              		.thumb
 331              		.syntax unified
 332 001c F0E7     		b	.L29
 333              	.L32:
 334 001e 00BF     		.align	2
 335              	.L31:
 336 0020 00000000 		.word	.LANCHOR2
 337              		.cfi_endproc
 338              	.LFE40:
 340              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 341              		.align	1
 342              		.syntax unified
 343              		.thumb
 344              		.thumb_func
 346              	prvTaskCheckFreeStackSpace:
 347              	.LVL26:
 348              	.LFB45:
3466:FreeRTOS/tasks.c ****                 }
3467:FreeRTOS/tasks.c ****                 else
3468:FreeRTOS/tasks.c ****                 {
3469:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3470:FreeRTOS/tasks.c ****                 }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 72


3471:FreeRTOS/tasks.c ****             }
3472:FreeRTOS/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3473:FreeRTOS/tasks.c **** 
3474:FreeRTOS/tasks.c ****         #if ( configUSE_IDLE_HOOK == 1 )
3475:FreeRTOS/tasks.c ****             {
3476:FreeRTOS/tasks.c ****                 extern void vApplicationIdleHook( void );
3477:FreeRTOS/tasks.c **** 
3478:FreeRTOS/tasks.c ****                 /* Call the user defined function from within the idle task.  This
3479:FreeRTOS/tasks.c ****                  * allows the application designer to add background functionality
3480:FreeRTOS/tasks.c ****                  * without the overhead of a separate task.
3481:FreeRTOS/tasks.c ****                  * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3482:FreeRTOS/tasks.c ****                  * CALL A FUNCTION THAT MIGHT BLOCK. */
3483:FreeRTOS/tasks.c ****                 vApplicationIdleHook();
3484:FreeRTOS/tasks.c ****             }
3485:FreeRTOS/tasks.c ****         #endif /* configUSE_IDLE_HOOK */
3486:FreeRTOS/tasks.c **** 
3487:FreeRTOS/tasks.c ****         /* This conditional compilation should use inequality to 0, not equality
3488:FreeRTOS/tasks.c ****          * to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3489:FreeRTOS/tasks.c ****          * user defined low power mode  implementations require
3490:FreeRTOS/tasks.c ****          * configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3491:FreeRTOS/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3492:FreeRTOS/tasks.c ****             {
3493:FreeRTOS/tasks.c ****                 TickType_t xExpectedIdleTime;
3494:FreeRTOS/tasks.c **** 
3495:FreeRTOS/tasks.c ****                 /* It is not desirable to suspend then resume the scheduler on
3496:FreeRTOS/tasks.c ****                  * each iteration of the idle task.  Therefore, a preliminary
3497:FreeRTOS/tasks.c ****                  * test of the expected idle time is performed without the
3498:FreeRTOS/tasks.c ****                  * scheduler suspended.  The result here is not necessarily
3499:FreeRTOS/tasks.c ****                  * valid. */
3500:FreeRTOS/tasks.c ****                 xExpectedIdleTime = prvGetExpectedIdleTime();
3501:FreeRTOS/tasks.c **** 
3502:FreeRTOS/tasks.c ****                 if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3503:FreeRTOS/tasks.c ****                 {
3504:FreeRTOS/tasks.c ****                     vTaskSuspendAll();
3505:FreeRTOS/tasks.c ****                     {
3506:FreeRTOS/tasks.c ****                         /* Now the scheduler is suspended, the expected idle
3507:FreeRTOS/tasks.c ****                          * time can be sampled again, and this time its value can
3508:FreeRTOS/tasks.c ****                          * be used. */
3509:FreeRTOS/tasks.c ****                         configASSERT( xNextTaskUnblockTime >= xTickCount );
3510:FreeRTOS/tasks.c ****                         xExpectedIdleTime = prvGetExpectedIdleTime();
3511:FreeRTOS/tasks.c **** 
3512:FreeRTOS/tasks.c ****                         /* Define the following macro to set xExpectedIdleTime to 0
3513:FreeRTOS/tasks.c ****                          * if the application does not want
3514:FreeRTOS/tasks.c ****                          * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3515:FreeRTOS/tasks.c ****                         configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3516:FreeRTOS/tasks.c **** 
3517:FreeRTOS/tasks.c ****                         if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3518:FreeRTOS/tasks.c ****                         {
3519:FreeRTOS/tasks.c ****                             traceLOW_POWER_IDLE_BEGIN();
3520:FreeRTOS/tasks.c ****                             portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3521:FreeRTOS/tasks.c ****                             traceLOW_POWER_IDLE_END();
3522:FreeRTOS/tasks.c ****                         }
3523:FreeRTOS/tasks.c ****                         else
3524:FreeRTOS/tasks.c ****                         {
3525:FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
3526:FreeRTOS/tasks.c ****                         }
3527:FreeRTOS/tasks.c ****                     }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 73


3528:FreeRTOS/tasks.c ****                     ( void ) xTaskResumeAll();
3529:FreeRTOS/tasks.c ****                 }
3530:FreeRTOS/tasks.c ****                 else
3531:FreeRTOS/tasks.c ****                 {
3532:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3533:FreeRTOS/tasks.c ****                 }
3534:FreeRTOS/tasks.c ****             }
3535:FreeRTOS/tasks.c ****         #endif /* configUSE_TICKLESS_IDLE */
3536:FreeRTOS/tasks.c ****     }
3537:FreeRTOS/tasks.c **** }
3538:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3539:FreeRTOS/tasks.c **** 
3540:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
3541:FreeRTOS/tasks.c **** 
3542:FreeRTOS/tasks.c ****     eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3543:FreeRTOS/tasks.c ****     {
3544:FreeRTOS/tasks.c ****         /* The idle task exists in addition to the application tasks. */
3545:FreeRTOS/tasks.c ****         const UBaseType_t uxNonApplicationTasks = 1;
3546:FreeRTOS/tasks.c ****         eSleepModeStatus eReturn = eStandardSleep;
3547:FreeRTOS/tasks.c **** 
3548:FreeRTOS/tasks.c ****         /* This function must be called from a critical section. */
3549:FreeRTOS/tasks.c **** 
3550:FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3551:FreeRTOS/tasks.c ****         {
3552:FreeRTOS/tasks.c ****             /* A task was made ready while the scheduler was suspended. */
3553:FreeRTOS/tasks.c ****             eReturn = eAbortSleep;
3554:FreeRTOS/tasks.c ****         }
3555:FreeRTOS/tasks.c ****         else if( xYieldPending != pdFALSE )
3556:FreeRTOS/tasks.c ****         {
3557:FreeRTOS/tasks.c ****             /* A yield was pended while the scheduler was suspended. */
3558:FreeRTOS/tasks.c ****             eReturn = eAbortSleep;
3559:FreeRTOS/tasks.c ****         }
3560:FreeRTOS/tasks.c ****         else if( xPendedTicks != 0 )
3561:FreeRTOS/tasks.c ****         {
3562:FreeRTOS/tasks.c ****             /* A tick interrupt has already occurred but was held pending
3563:FreeRTOS/tasks.c ****              * because the scheduler is suspended. */
3564:FreeRTOS/tasks.c ****             eReturn = eAbortSleep;
3565:FreeRTOS/tasks.c ****         }
3566:FreeRTOS/tasks.c ****         else
3567:FreeRTOS/tasks.c ****         {
3568:FreeRTOS/tasks.c ****             /* If all the tasks are in the suspended list (which might mean they
3569:FreeRTOS/tasks.c ****              * have an infinite block time rather than actually being suspended)
3570:FreeRTOS/tasks.c ****              * then it is safe to turn all clocks off and just wait for external
3571:FreeRTOS/tasks.c ****              * interrupts. */
3572:FreeRTOS/tasks.c ****             if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonA
3573:FreeRTOS/tasks.c ****             {
3574:FreeRTOS/tasks.c ****                 eReturn = eNoTasksWaitingTimeout;
3575:FreeRTOS/tasks.c ****             }
3576:FreeRTOS/tasks.c ****             else
3577:FreeRTOS/tasks.c ****             {
3578:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3579:FreeRTOS/tasks.c ****             }
3580:FreeRTOS/tasks.c ****         }
3581:FreeRTOS/tasks.c **** 
3582:FreeRTOS/tasks.c ****         return eReturn;
3583:FreeRTOS/tasks.c ****     }
3584:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 74


3585:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3586:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3587:FreeRTOS/tasks.c **** 
3588:FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3589:FreeRTOS/tasks.c **** 
3590:FreeRTOS/tasks.c ****     void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,
3591:FreeRTOS/tasks.c ****                                             BaseType_t xIndex,
3592:FreeRTOS/tasks.c ****                                             void * pvValue )
3593:FreeRTOS/tasks.c ****     {
3594:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3595:FreeRTOS/tasks.c **** 
3596:FreeRTOS/tasks.c ****         if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3597:FreeRTOS/tasks.c ****         {
3598:FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSet );
3599:FreeRTOS/tasks.c ****             configASSERT( pxTCB != NULL );
3600:FreeRTOS/tasks.c ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3601:FreeRTOS/tasks.c ****         }
3602:FreeRTOS/tasks.c ****     }
3603:FreeRTOS/tasks.c **** 
3604:FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3605:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3606:FreeRTOS/tasks.c **** 
3607:FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3608:FreeRTOS/tasks.c **** 
3609:FreeRTOS/tasks.c ****     void * pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,
3610:FreeRTOS/tasks.c ****                                                BaseType_t xIndex )
3611:FreeRTOS/tasks.c ****     {
3612:FreeRTOS/tasks.c ****         void * pvReturn = NULL;
3613:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3614:FreeRTOS/tasks.c **** 
3615:FreeRTOS/tasks.c ****         if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3616:FreeRTOS/tasks.c ****         {
3617:FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3618:FreeRTOS/tasks.c ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3619:FreeRTOS/tasks.c ****         }
3620:FreeRTOS/tasks.c ****         else
3621:FreeRTOS/tasks.c ****         {
3622:FreeRTOS/tasks.c ****             pvReturn = NULL;
3623:FreeRTOS/tasks.c ****         }
3624:FreeRTOS/tasks.c **** 
3625:FreeRTOS/tasks.c ****         return pvReturn;
3626:FreeRTOS/tasks.c ****     }
3627:FreeRTOS/tasks.c **** 
3628:FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3629:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3630:FreeRTOS/tasks.c **** 
3631:FreeRTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3632:FreeRTOS/tasks.c **** 
3633:FreeRTOS/tasks.c ****     void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
3634:FreeRTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions )
3635:FreeRTOS/tasks.c ****     {
3636:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3637:FreeRTOS/tasks.c **** 
3638:FreeRTOS/tasks.c ****         /* If null is passed in here then we are modifying the MPU settings of
3639:FreeRTOS/tasks.c ****          * the calling task. */
3640:FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTaskToModify );
3641:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 75


3642:FreeRTOS/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3643:FreeRTOS/tasks.c ****     }
3644:FreeRTOS/tasks.c **** 
3645:FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3646:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3647:FreeRTOS/tasks.c **** 
3648:FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void )
3649:FreeRTOS/tasks.c **** {
3650:FreeRTOS/tasks.c ****     UBaseType_t uxPriority;
3651:FreeRTOS/tasks.c **** 
3652:FreeRTOS/tasks.c ****     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPrio
3653:FreeRTOS/tasks.c ****     {
3654:FreeRTOS/tasks.c ****         vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3655:FreeRTOS/tasks.c ****     }
3656:FreeRTOS/tasks.c **** 
3657:FreeRTOS/tasks.c ****     vListInitialise( &xDelayedTaskList1 );
3658:FreeRTOS/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
3659:FreeRTOS/tasks.c ****     vListInitialise( &xPendingReadyList );
3660:FreeRTOS/tasks.c **** 
3661:FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3662:FreeRTOS/tasks.c ****         {
3663:FreeRTOS/tasks.c ****             vListInitialise( &xTasksWaitingTermination );
3664:FreeRTOS/tasks.c ****         }
3665:FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3666:FreeRTOS/tasks.c **** 
3667:FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
3668:FreeRTOS/tasks.c ****         {
3669:FreeRTOS/tasks.c ****             vListInitialise( &xSuspendedTaskList );
3670:FreeRTOS/tasks.c ****         }
3671:FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
3672:FreeRTOS/tasks.c **** 
3673:FreeRTOS/tasks.c ****     /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3674:FreeRTOS/tasks.c ****      * using list2. */
3675:FreeRTOS/tasks.c ****     pxDelayedTaskList = &xDelayedTaskList1;
3676:FreeRTOS/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
3677:FreeRTOS/tasks.c **** }
3678:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3679:FreeRTOS/tasks.c **** 
3680:FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3681:FreeRTOS/tasks.c **** {
3682:FreeRTOS/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3683:FreeRTOS/tasks.c **** 
3684:FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3685:FreeRTOS/tasks.c ****         {
3686:FreeRTOS/tasks.c ****             TCB_t * pxTCB;
3687:FreeRTOS/tasks.c **** 
3688:FreeRTOS/tasks.c ****             /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3689:FreeRTOS/tasks.c ****              * being called too often in the idle task. */
3690:FreeRTOS/tasks.c ****             while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3691:FreeRTOS/tasks.c ****             {
3692:FreeRTOS/tasks.c ****                 taskENTER_CRITICAL();
3693:FreeRTOS/tasks.c ****                 {
3694:FreeRTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e
3695:FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3696:FreeRTOS/tasks.c ****                     --uxCurrentNumberOfTasks;
3697:FreeRTOS/tasks.c ****                     --uxDeletedTasksWaitingCleanUp;
3698:FreeRTOS/tasks.c ****                 }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 76


3699:FreeRTOS/tasks.c ****                 taskEXIT_CRITICAL();
3700:FreeRTOS/tasks.c **** 
3701:FreeRTOS/tasks.c ****                 prvDeleteTCB( pxTCB );
3702:FreeRTOS/tasks.c ****             }
3703:FreeRTOS/tasks.c ****         }
3704:FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3705:FreeRTOS/tasks.c **** }
3706:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3707:FreeRTOS/tasks.c **** 
3708:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3709:FreeRTOS/tasks.c **** 
3710:FreeRTOS/tasks.c ****     void vTaskGetInfo( TaskHandle_t xTask,
3711:FreeRTOS/tasks.c ****                        TaskStatus_t * pxTaskStatus,
3712:FreeRTOS/tasks.c ****                        BaseType_t xGetFreeStackSpace,
3713:FreeRTOS/tasks.c ****                        eTaskState eState )
3714:FreeRTOS/tasks.c ****     {
3715:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3716:FreeRTOS/tasks.c **** 
3717:FreeRTOS/tasks.c ****         /* xTask is NULL then get the state of the calling task. */
3718:FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3719:FreeRTOS/tasks.c **** 
3720:FreeRTOS/tasks.c ****         pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3721:FreeRTOS/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
3722:FreeRTOS/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3723:FreeRTOS/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
3724:FreeRTOS/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3725:FreeRTOS/tasks.c **** 
3726:FreeRTOS/tasks.c ****         #if ( configUSE_MUTEXES == 1 )
3727:FreeRTOS/tasks.c ****             {
3728:FreeRTOS/tasks.c ****                 pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3729:FreeRTOS/tasks.c ****             }
3730:FreeRTOS/tasks.c ****         #else
3731:FreeRTOS/tasks.c ****             {
3732:FreeRTOS/tasks.c ****                 pxTaskStatus->uxBasePriority = 0;
3733:FreeRTOS/tasks.c ****             }
3734:FreeRTOS/tasks.c ****         #endif
3735:FreeRTOS/tasks.c **** 
3736:FreeRTOS/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3737:FreeRTOS/tasks.c ****             {
3738:FreeRTOS/tasks.c ****                 pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3739:FreeRTOS/tasks.c ****             }
3740:FreeRTOS/tasks.c ****         #else
3741:FreeRTOS/tasks.c ****             {
3742:FreeRTOS/tasks.c ****                 pxTaskStatus->ulRunTimeCounter = 0;
3743:FreeRTOS/tasks.c ****             }
3744:FreeRTOS/tasks.c ****         #endif
3745:FreeRTOS/tasks.c **** 
3746:FreeRTOS/tasks.c ****         /* Obtaining the task state is a little fiddly, so is only done if the
3747:FreeRTOS/tasks.c ****          * value of eState passed into this function is eInvalid - otherwise the
3748:FreeRTOS/tasks.c ****          * state is just set to whatever is passed in. */
3749:FreeRTOS/tasks.c ****         if( eState != eInvalid )
3750:FreeRTOS/tasks.c ****         {
3751:FreeRTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
3752:FreeRTOS/tasks.c ****             {
3753:FreeRTOS/tasks.c ****                 pxTaskStatus->eCurrentState = eRunning;
3754:FreeRTOS/tasks.c ****             }
3755:FreeRTOS/tasks.c ****             else
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 77


3756:FreeRTOS/tasks.c ****             {
3757:FreeRTOS/tasks.c ****                 pxTaskStatus->eCurrentState = eState;
3758:FreeRTOS/tasks.c **** 
3759:FreeRTOS/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
3760:FreeRTOS/tasks.c ****                     {
3761:FreeRTOS/tasks.c ****                         /* If the task is in the suspended list then there is a
3762:FreeRTOS/tasks.c ****                          *  chance it is actually just blocked indefinitely - so really
3763:FreeRTOS/tasks.c ****                          *  it should be reported as being in the Blocked state. */
3764:FreeRTOS/tasks.c ****                         if( eState == eSuspended )
3765:FreeRTOS/tasks.c ****                         {
3766:FreeRTOS/tasks.c ****                             vTaskSuspendAll();
3767:FreeRTOS/tasks.c ****                             {
3768:FreeRTOS/tasks.c ****                                 if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3769:FreeRTOS/tasks.c ****                                 {
3770:FreeRTOS/tasks.c ****                                     pxTaskStatus->eCurrentState = eBlocked;
3771:FreeRTOS/tasks.c ****                                 }
3772:FreeRTOS/tasks.c ****                             }
3773:FreeRTOS/tasks.c ****                             ( void ) xTaskResumeAll();
3774:FreeRTOS/tasks.c ****                         }
3775:FreeRTOS/tasks.c ****                     }
3776:FreeRTOS/tasks.c ****                 #endif /* INCLUDE_vTaskSuspend */
3777:FreeRTOS/tasks.c ****             }
3778:FreeRTOS/tasks.c ****         }
3779:FreeRTOS/tasks.c ****         else
3780:FreeRTOS/tasks.c ****         {
3781:FreeRTOS/tasks.c ****             pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3782:FreeRTOS/tasks.c ****         }
3783:FreeRTOS/tasks.c **** 
3784:FreeRTOS/tasks.c ****         /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3785:FreeRTOS/tasks.c ****          * parameter is provided to allow it to be skipped. */
3786:FreeRTOS/tasks.c ****         if( xGetFreeStackSpace != pdFALSE )
3787:FreeRTOS/tasks.c ****         {
3788:FreeRTOS/tasks.c ****             #if ( portSTACK_GROWTH > 0 )
3789:FreeRTOS/tasks.c ****                 {
3790:FreeRTOS/tasks.c ****                     pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) 
3791:FreeRTOS/tasks.c ****                 }
3792:FreeRTOS/tasks.c ****             #else
3793:FreeRTOS/tasks.c ****                 {
3794:FreeRTOS/tasks.c ****                     pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) 
3795:FreeRTOS/tasks.c ****                 }
3796:FreeRTOS/tasks.c ****             #endif
3797:FreeRTOS/tasks.c ****         }
3798:FreeRTOS/tasks.c ****         else
3799:FreeRTOS/tasks.c ****         {
3800:FreeRTOS/tasks.c ****             pxTaskStatus->usStackHighWaterMark = 0;
3801:FreeRTOS/tasks.c ****         }
3802:FreeRTOS/tasks.c ****     }
3803:FreeRTOS/tasks.c **** 
3804:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3805:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3806:FreeRTOS/tasks.c **** 
3807:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3808:FreeRTOS/tasks.c **** 
3809:FreeRTOS/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
3810:FreeRTOS/tasks.c ****                                                      List_t * pxList,
3811:FreeRTOS/tasks.c ****                                                      eTaskState eState )
3812:FreeRTOS/tasks.c ****     {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 78


3813:FreeRTOS/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB, * pxFirstTCB;
3814:FreeRTOS/tasks.c ****         UBaseType_t uxTask = 0;
3815:FreeRTOS/tasks.c **** 
3816:FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3817:FreeRTOS/tasks.c ****         {
3818:FreeRTOS/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
3819:FreeRTOS/tasks.c **** 
3820:FreeRTOS/tasks.c ****             /* Populate an TaskStatus_t structure within the
3821:FreeRTOS/tasks.c ****              * pxTaskStatusArray array for each task that is referenced from
3822:FreeRTOS/tasks.c ****              * pxList.  See the definition of TaskStatus_t in task.h for the
3823:FreeRTOS/tasks.c ****              * meaning of each TaskStatus_t structure member. */
3824:FreeRTOS/tasks.c ****             do
3825:FreeRTOS/tasks.c ****             {
3826:FreeRTOS/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
3827:FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
3828:FreeRTOS/tasks.c ****                 uxTask++;
3829:FreeRTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
3830:FreeRTOS/tasks.c ****         }
3831:FreeRTOS/tasks.c ****         else
3832:FreeRTOS/tasks.c ****         {
3833:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3834:FreeRTOS/tasks.c ****         }
3835:FreeRTOS/tasks.c **** 
3836:FreeRTOS/tasks.c ****         return uxTask;
3837:FreeRTOS/tasks.c ****     }
3838:FreeRTOS/tasks.c **** 
3839:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3840:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3841:FreeRTOS/tasks.c **** 
3842:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3843:FreeRTOS/tasks.c **** 
3844:FreeRTOS/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3845:FreeRTOS/tasks.c ****     {
 349              		.loc 1 3845 5 view -0
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 0
 352              		@ frame_needed = 0, uses_anonymous_args = 0
 353              		@ link register save eliminated.
3846:FreeRTOS/tasks.c ****         uint32_t ulCount = 0U;
 354              		.loc 1 3846 9 view .LVU100
3847:FreeRTOS/tasks.c **** 
3848:FreeRTOS/tasks.c ****         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 355              		.loc 1 3848 9 view .LVU101
3846:FreeRTOS/tasks.c ****         uint32_t ulCount = 0U;
 356              		.loc 1 3846 18 is_stmt 0 view .LVU102
 357 0000 0023     		movs	r3, #0
 358              		.loc 1 3848 14 view .LVU103
 359 0002 01E0     		b	.L34
 360              	.LVL27:
 361              	.L35:
3849:FreeRTOS/tasks.c ****         {
3850:FreeRTOS/tasks.c ****             pucStackByte -= portSTACK_GROWTH;
 362              		.loc 1 3850 13 is_stmt 1 view .LVU104
 363              		.loc 1 3850 26 is_stmt 0 view .LVU105
 364 0004 0130     		adds	r0, r0, #1
 365              	.LVL28:
3851:FreeRTOS/tasks.c ****             ulCount++;
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 79


 366              		.loc 1 3851 13 is_stmt 1 view .LVU106
 367              		.loc 1 3851 20 is_stmt 0 view .LVU107
 368 0006 0133     		adds	r3, r3, #1
 369              	.LVL29:
 370              	.L34:
3848:FreeRTOS/tasks.c ****         {
 371              		.loc 1 3848 14 is_stmt 1 view .LVU108
3848:FreeRTOS/tasks.c ****         {
 372              		.loc 1 3848 16 is_stmt 0 view .LVU109
 373 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
3848:FreeRTOS/tasks.c ****         {
 374              		.loc 1 3848 14 view .LVU110
 375 000a A52A     		cmp	r2, #165
 376 000c FAD0     		beq	.L35
3852:FreeRTOS/tasks.c ****         }
3853:FreeRTOS/tasks.c **** 
3854:FreeRTOS/tasks.c ****         ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on sma
 377              		.loc 1 3854 9 is_stmt 1 view .LVU111
 378              	.LVL30:
3855:FreeRTOS/tasks.c **** 
3856:FreeRTOS/tasks.c ****         return ( configSTACK_DEPTH_TYPE ) ulCount;
 379              		.loc 1 3856 9 view .LVU112
3857:FreeRTOS/tasks.c ****     }
 380              		.loc 1 3857 5 is_stmt 0 view .LVU113
 381 000e C3F38F00 		ubfx	r0, r3, #2, #16
 382              	.LVL31:
 383              		.loc 1 3857 5 view .LVU114
 384 0012 7047     		bx	lr
 385              		.cfi_endproc
 386              	.LFE45:
 388              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 389              		.align	1
 390              		.syntax unified
 391              		.thumb
 392              		.thumb_func
 394              	prvResetNextTaskUnblockTime:
 395              	.LFB48:
3858:FreeRTOS/tasks.c **** 
3859:FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3860:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3861:FreeRTOS/tasks.c **** 
3862:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3863:FreeRTOS/tasks.c **** 
3864:FreeRTOS/tasks.c **** /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3865:FreeRTOS/tasks.c ****  * same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3866:FreeRTOS/tasks.c ****  * user to determine the return type.  It gets around the problem of the value
3867:FreeRTOS/tasks.c ****  * overflowing on 8-bit types without breaking backward compatibility for
3868:FreeRTOS/tasks.c ****  * applications that expect an 8-bit return type. */
3869:FreeRTOS/tasks.c ****     configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3870:FreeRTOS/tasks.c ****     {
3871:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3872:FreeRTOS/tasks.c ****         uint8_t * pucEndOfStack;
3873:FreeRTOS/tasks.c ****         configSTACK_DEPTH_TYPE uxReturn;
3874:FreeRTOS/tasks.c **** 
3875:FreeRTOS/tasks.c ****         /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3876:FreeRTOS/tasks.c ****          * the same except for their return type.  Using configSTACK_DEPTH_TYPE
3877:FreeRTOS/tasks.c ****          * allows the user to determine the return type.  It gets around the
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 80


3878:FreeRTOS/tasks.c ****          * problem of the value overflowing on 8-bit types without breaking
3879:FreeRTOS/tasks.c ****          * backward compatibility for applications that expect an 8-bit return
3880:FreeRTOS/tasks.c ****          * type. */
3881:FreeRTOS/tasks.c **** 
3882:FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3883:FreeRTOS/tasks.c **** 
3884:FreeRTOS/tasks.c ****         #if portSTACK_GROWTH < 0
3885:FreeRTOS/tasks.c ****             {
3886:FreeRTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3887:FreeRTOS/tasks.c ****             }
3888:FreeRTOS/tasks.c ****         #else
3889:FreeRTOS/tasks.c ****             {
3890:FreeRTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3891:FreeRTOS/tasks.c ****             }
3892:FreeRTOS/tasks.c ****         #endif
3893:FreeRTOS/tasks.c **** 
3894:FreeRTOS/tasks.c ****         uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3895:FreeRTOS/tasks.c **** 
3896:FreeRTOS/tasks.c ****         return uxReturn;
3897:FreeRTOS/tasks.c ****     }
3898:FreeRTOS/tasks.c **** 
3899:FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3900:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3901:FreeRTOS/tasks.c **** 
3902:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3903:FreeRTOS/tasks.c **** 
3904:FreeRTOS/tasks.c ****     UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3905:FreeRTOS/tasks.c ****     {
3906:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3907:FreeRTOS/tasks.c ****         uint8_t * pucEndOfStack;
3908:FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
3909:FreeRTOS/tasks.c **** 
3910:FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3911:FreeRTOS/tasks.c **** 
3912:FreeRTOS/tasks.c ****         #if portSTACK_GROWTH < 0
3913:FreeRTOS/tasks.c ****             {
3914:FreeRTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3915:FreeRTOS/tasks.c ****             }
3916:FreeRTOS/tasks.c ****         #else
3917:FreeRTOS/tasks.c ****             {
3918:FreeRTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3919:FreeRTOS/tasks.c ****             }
3920:FreeRTOS/tasks.c ****         #endif
3921:FreeRTOS/tasks.c **** 
3922:FreeRTOS/tasks.c ****         uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3923:FreeRTOS/tasks.c **** 
3924:FreeRTOS/tasks.c ****         return uxReturn;
3925:FreeRTOS/tasks.c ****     }
3926:FreeRTOS/tasks.c **** 
3927:FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3928:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3929:FreeRTOS/tasks.c **** 
3930:FreeRTOS/tasks.c **** #if (INCLUDE_pxTaskGetStackStart == 1)
3931:FreeRTOS/tasks.c **** 	uint8_t* pxTaskGetStackStart( TaskHandle_t xTask)
3932:FreeRTOS/tasks.c **** 	{
3933:FreeRTOS/tasks.c **** 	    TCB_t *pxTCB;
3934:FreeRTOS/tasks.c **** 	    UBaseType_t uxReturn;
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 81


3935:FreeRTOS/tasks.c ****         (void)uxReturn;
3936:FreeRTOS/tasks.c **** 
3937:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3938:FreeRTOS/tasks.c **** 		return ( uint8_t * ) pxTCB->pxStack;
3939:FreeRTOS/tasks.c **** 	}
3940:FreeRTOS/tasks.c **** 
3941:FreeRTOS/tasks.c **** #endif /* INCLUDE_pxTaskGetStackStart */
3942:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3943:FreeRTOS/tasks.c **** 
3944:FreeRTOS/tasks.c **** 
3945:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3946:FreeRTOS/tasks.c **** 
3947:FreeRTOS/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB )
3948:FreeRTOS/tasks.c ****     {
3949:FreeRTOS/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
3950:FreeRTOS/tasks.c ****          * above the vPortFree() calls.  The call is also used by ports/demos that
3951:FreeRTOS/tasks.c ****          * want to allocate and clean RAM statically. */
3952:FreeRTOS/tasks.c ****         portCLEAN_UP_TCB( pxTCB );
3953:FreeRTOS/tasks.c **** 
3954:FreeRTOS/tasks.c ****         /* Free up the memory allocated by the scheduler for the task.  It is up
3955:FreeRTOS/tasks.c ****          * to the task to free any memory allocated at the application level.
3956:FreeRTOS/tasks.c ****          * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3957:FreeRTOS/tasks.c ****          * for additional information. */
3958:FreeRTOS/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
3959:FreeRTOS/tasks.c ****             {
3960:FreeRTOS/tasks.c ****                 _reclaim_reent( &( pxTCB->xNewLib_reent ) );
3961:FreeRTOS/tasks.c ****             }
3962:FreeRTOS/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
3963:FreeRTOS/tasks.c **** 
3964:FreeRTOS/tasks.c ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
3965:FreeRTOS/tasks.c ****             {
3966:FreeRTOS/tasks.c ****                 /* The task can only have been allocated dynamically - free both
3967:FreeRTOS/tasks.c ****                  * the stack and TCB. */
3968:FreeRTOS/tasks.c ****                 vPortFree( pxTCB->pxStack );
3969:FreeRTOS/tasks.c ****                 vPortFree( pxTCB );
3970:FreeRTOS/tasks.c ****             }
3971:FreeRTOS/tasks.c ****         #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been
3972:FreeRTOS/tasks.c ****             {
3973:FreeRTOS/tasks.c ****                 /* The task could have been allocated statically or dynamically, so
3974:FreeRTOS/tasks.c ****                  * check what was statically allocated before trying to free the
3975:FreeRTOS/tasks.c ****                  * memory. */
3976:FreeRTOS/tasks.c ****                 if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3977:FreeRTOS/tasks.c ****                 {
3978:FreeRTOS/tasks.c ****                     /* Both the stack and TCB were allocated dynamically, so both
3979:FreeRTOS/tasks.c ****                      * must be freed. */
3980:FreeRTOS/tasks.c ****                     vPortFree( pxTCB->pxStack );
3981:FreeRTOS/tasks.c ****                     vPortFree( pxTCB );
3982:FreeRTOS/tasks.c ****                 }
3983:FreeRTOS/tasks.c ****                 else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3984:FreeRTOS/tasks.c ****                 {
3985:FreeRTOS/tasks.c ****                     /* Only the stack was statically allocated, so the TCB is the
3986:FreeRTOS/tasks.c ****                      * only memory that must be freed. */
3987:FreeRTOS/tasks.c ****                     vPortFree( pxTCB );
3988:FreeRTOS/tasks.c ****                 }
3989:FreeRTOS/tasks.c ****                 else
3990:FreeRTOS/tasks.c ****                 {
3991:FreeRTOS/tasks.c ****                     /* Neither the stack nor the TCB were allocated dynamically, so
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 82


3992:FreeRTOS/tasks.c ****                      * nothing needs to be freed. */
3993:FreeRTOS/tasks.c ****                     configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND
3994:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3995:FreeRTOS/tasks.c ****                 }
3996:FreeRTOS/tasks.c ****             }
3997:FreeRTOS/tasks.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3998:FreeRTOS/tasks.c ****     }
3999:FreeRTOS/tasks.c **** 
4000:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
4001:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4002:FreeRTOS/tasks.c **** 
4003:FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
4004:FreeRTOS/tasks.c **** {
 396              		.loc 1 4004 1 is_stmt 1 view -0
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 0
 399              		@ frame_needed = 0, uses_anonymous_args = 0
 400              		@ link register save eliminated.
4005:FreeRTOS/tasks.c ****     if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 401              		.loc 1 4005 5 view .LVU116
 402              		.loc 1 4005 9 is_stmt 0 view .LVU117
 403 0000 074B     		ldr	r3, .L39
 404 0002 1B68     		ldr	r3, [r3]
 405 0004 1B68     		ldr	r3, [r3]
 406              		.loc 1 4005 7 view .LVU118
 407 0006 23B9     		cbnz	r3, .L37
4006:FreeRTOS/tasks.c ****     {
4007:FreeRTOS/tasks.c ****         /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
4008:FreeRTOS/tasks.c ****          * the maximum possible value so it is  extremely unlikely that the
4009:FreeRTOS/tasks.c ****          * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
4010:FreeRTOS/tasks.c ****          * there is an item in the delayed list. */
4011:FreeRTOS/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
 408              		.loc 1 4011 9 is_stmt 1 view .LVU119
 409              		.loc 1 4011 30 is_stmt 0 view .LVU120
 410 0008 064B     		ldr	r3, .L39+4
 411 000a 4FF0FF32 		mov	r2, #-1
 412 000e 1A60     		str	r2, [r3]
 413 0010 7047     		bx	lr
 414              	.L37:
4012:FreeRTOS/tasks.c ****     }
4013:FreeRTOS/tasks.c ****     else
4014:FreeRTOS/tasks.c ****     {
4015:FreeRTOS/tasks.c ****         /* The new current delayed list is not empty, get the value of
4016:FreeRTOS/tasks.c ****          * the item at the head of the delayed list.  This is the time at
4017:FreeRTOS/tasks.c ****          * which the task at the head of the delayed list should be removed
4018:FreeRTOS/tasks.c ****          * from the Blocked state. */
4019:FreeRTOS/tasks.c ****         xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 415              		.loc 1 4019 9 is_stmt 1 view .LVU121
 416              		.loc 1 4019 32 is_stmt 0 view .LVU122
 417 0012 034B     		ldr	r3, .L39
 418 0014 1B68     		ldr	r3, [r3]
 419 0016 DB68     		ldr	r3, [r3, #12]
 420 0018 1A68     		ldr	r2, [r3]
 421              		.loc 1 4019 30 view .LVU123
 422 001a 024B     		ldr	r3, .L39+4
 423 001c 1A60     		str	r2, [r3]
4020:FreeRTOS/tasks.c ****     }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 83


4021:FreeRTOS/tasks.c **** }
 424              		.loc 1 4021 1 view .LVU124
 425 001e 7047     		bx	lr
 426              	.L40:
 427              		.align	2
 428              	.L39:
 429 0020 00000000 		.word	.LANCHOR3
 430 0024 00000000 		.word	.LANCHOR4
 431              		.cfi_endproc
 432              	.LFE48:
 434              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 435              		.align	1
 436              		.syntax unified
 437              		.thumb
 438              		.thumb_func
 440              	prvInitialiseNewTask:
 441              	.LVL32:
 442              	.LFB6:
 825:FreeRTOS/tasks.c ****     StackType_t * pxTopOfStack;
 443              		.loc 1 825 1 is_stmt 1 view -0
 444              		.cfi_startproc
 445              		@ args = 16, pretend = 0, frame = 0
 446              		@ frame_needed = 0, uses_anonymous_args = 0
 825:FreeRTOS/tasks.c ****     StackType_t * pxTopOfStack;
 447              		.loc 1 825 1 is_stmt 0 view .LVU126
 448 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 449              	.LCFI3:
 450              		.cfi_def_cfa_offset 32
 451              		.cfi_offset 4, -32
 452              		.cfi_offset 5, -28
 453              		.cfi_offset 6, -24
 454              		.cfi_offset 7, -20
 455              		.cfi_offset 8, -16
 456              		.cfi_offset 9, -12
 457              		.cfi_offset 10, -8
 458              		.cfi_offset 14, -4
 459 0004 8046     		mov	r8, r0
 460 0006 0D46     		mov	r5, r1
 461 0008 1746     		mov	r7, r2
 462 000a 9946     		mov	r9, r3
 463 000c 089E     		ldr	r6, [sp, #32]
 464 000e DDF824A0 		ldr	r10, [sp, #36]
 465 0012 0A9C     		ldr	r4, [sp, #40]
 826:FreeRTOS/tasks.c ****     UBaseType_t x;
 466              		.loc 1 826 5 is_stmt 1 view .LVU127
 827:FreeRTOS/tasks.c **** 
 467              		.loc 1 827 5 view .LVU128
 848:FreeRTOS/tasks.c ****         }
 468              		.loc 1 848 13 view .LVU129
 848:FreeRTOS/tasks.c ****         }
 469              		.loc 1 848 22 is_stmt 0 view .LVU130
 470 0014 9200     		lsls	r2, r2, #2
 471              	.LVL33:
 848:FreeRTOS/tasks.c ****         }
 472              		.loc 1 848 22 view .LVU131
 473 0016 A521     		movs	r1, #165
 474              	.LVL34:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 84


 848:FreeRTOS/tasks.c ****         }
 475              		.loc 1 848 22 view .LVU132
 476 0018 206B     		ldr	r0, [r4, #48]
 477              	.LVL35:
 848:FreeRTOS/tasks.c ****         }
 478              		.loc 1 848 22 view .LVU133
 479 001a FFF7FEFF 		bl	memset
 480              	.LVL36:
 858:FreeRTOS/tasks.c ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 481              		.loc 1 858 13 is_stmt 1 view .LVU134
 858:FreeRTOS/tasks.c ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 482              		.loc 1 858 39 is_stmt 0 view .LVU135
 483 001e 236B     		ldr	r3, [r4, #48]
 858:FreeRTOS/tasks.c ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 484              		.loc 1 858 48 view .LVU136
 485 0020 07F18042 		add	r2, r7, #1073741824
 486 0024 013A     		subs	r2, r2, #1
 858:FreeRTOS/tasks.c ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 487              		.loc 1 858 26 view .LVU137
 488 0026 03EB8207 		add	r7, r3, r2, lsl #2
 489              	.LVL37:
 859:FreeRTOS/tasks.c **** 
 490              		.loc 1 859 13 is_stmt 1 view .LVU138
 859:FreeRTOS/tasks.c **** 
 491              		.loc 1 859 91 is_stmt 0 view .LVU139
 492 002a 27F00707 		bic	r7, r7, #7
 493              	.LVL38:
 862:FreeRTOS/tasks.c **** 
 494              		.loc 1 862 13 is_stmt 1 view .LVU140
 862:FreeRTOS/tasks.c **** 
 495              		.loc 1 862 134 view .LVU141
 886:FreeRTOS/tasks.c ****     {
 496              		.loc 1 886 5 view .LVU142
 886:FreeRTOS/tasks.c ****     {
 497              		.loc 1 886 7 is_stmt 0 view .LVU143
 498 002e A5B3     		cbz	r5, .L53
 888:FreeRTOS/tasks.c ****         {
 499              		.loc 1 888 16 view .LVU144
 500 0030 4FF0000C 		mov	ip, #0
 501              	.LVL39:
 502              	.L42:
 888:FreeRTOS/tasks.c ****         {
 503              		.loc 1 888 37 is_stmt 1 discriminator 1 view .LVU145
 888:FreeRTOS/tasks.c ****         {
 504              		.loc 1 888 9 is_stmt 0 discriminator 1 view .LVU146
 505 0034 BCF1130F 		cmp	ip, #19
 506 0038 0BD8     		bhi	.L44
 890:FreeRTOS/tasks.c **** 
 507              		.loc 1 890 13 is_stmt 1 view .LVU147
 890:FreeRTOS/tasks.c **** 
 508              		.loc 1 890 47 is_stmt 0 view .LVU148
 509 003a 15F80C20 		ldrb	r2, [r5, ip]	@ zero_extendqisi2
 890:FreeRTOS/tasks.c **** 
 510              		.loc 1 890 39 view .LVU149
 511 003e 04EB0C03 		add	r3, r4, ip
 512 0042 83F83420 		strb	r2, [r3, #52]
 895:FreeRTOS/tasks.c ****             {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 85


 513              		.loc 1 895 13 is_stmt 1 view .LVU150
 895:FreeRTOS/tasks.c ****             {
 514              		.loc 1 895 23 is_stmt 0 view .LVU151
 515 0046 15F80C30 		ldrb	r3, [r5, ip]	@ zero_extendqisi2
 895:FreeRTOS/tasks.c ****             {
 516              		.loc 1 895 15 view .LVU152
 517 004a 13B1     		cbz	r3, .L44
 901:FreeRTOS/tasks.c ****             }
 518              		.loc 1 901 41 is_stmt 1 discriminator 2 view .LVU153
 888:FreeRTOS/tasks.c ****         {
 519              		.loc 1 888 82 discriminator 2 view .LVU154
 888:FreeRTOS/tasks.c ****         {
 520              		.loc 1 888 83 is_stmt 0 discriminator 2 view .LVU155
 521 004c 0CF1010C 		add	ip, ip, #1
 522              	.LVL40:
 888:FreeRTOS/tasks.c ****         {
 523              		.loc 1 888 83 discriminator 2 view .LVU156
 524 0050 F0E7     		b	.L42
 525              	.L44:
 907:FreeRTOS/tasks.c ****     }
 526              		.loc 1 907 9 is_stmt 1 view .LVU157
 907:FreeRTOS/tasks.c ****     }
 527              		.loc 1 907 61 is_stmt 0 view .LVU158
 528 0052 0023     		movs	r3, #0
 529 0054 84F84730 		strb	r3, [r4, #71]
 530              	.LVL41:
 531              	.L46:
 918:FreeRTOS/tasks.c ****     {
 532              		.loc 1 918 5 is_stmt 1 view .LVU159
 918:FreeRTOS/tasks.c ****     {
 533              		.loc 1 918 7 is_stmt 0 view .LVU160
 534 0058 042E     		cmp	r6, #4
 535 005a 00D9     		bls	.L47
 920:FreeRTOS/tasks.c ****     }
 536              		.loc 1 920 20 view .LVU161
 537 005c 0426     		movs	r6, #4
 538              	.L47:
 539              	.LVL42:
 924:FreeRTOS/tasks.c ****     }
 540              		.loc 1 924 33 is_stmt 1 view .LVU162
 927:FreeRTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 541              		.loc 1 927 5 view .LVU163
 927:FreeRTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 542              		.loc 1 927 26 is_stmt 0 view .LVU164
 543 005e E662     		str	r6, [r4, #44]
 935:FreeRTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 544              		.loc 1 935 5 is_stmt 1 view .LVU165
 545 0060 201D     		adds	r0, r4, #4
 546 0062 FFF7FEFF 		bl	vListInitialiseItem
 547              	.LVL43:
 936:FreeRTOS/tasks.c **** 
 548              		.loc 1 936 5 view .LVU166
 549 0066 04F11800 		add	r0, r4, #24
 550 006a FFF7FEFF 		bl	vListInitialiseItem
 551              	.LVL44:
 940:FreeRTOS/tasks.c **** 
 552              		.loc 1 940 5 view .LVU167
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 86


 553 006e 2461     		str	r4, [r4, #16]
 943:FreeRTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 554              		.loc 1 943 5 view .LVU168
 555 0070 C6F10506 		rsb	r6, r6, #5
 556              	.LVL45:
 943:FreeRTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 557              		.loc 1 943 5 is_stmt 0 view .LVU169
 558 0074 A661     		str	r6, [r4, #24]
 944:FreeRTOS/tasks.c **** 
 559              		.loc 1 944 5 is_stmt 1 view .LVU170
 560 0076 6462     		str	r4, [r4, #36]
 971:FreeRTOS/tasks.c ****         }
 561              		.loc 1 971 13 view .LVU171
 983:FreeRTOS/tasks.c ****             memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyS
 562              		.loc 1 983 13 view .LVU172
 563 0078 0023     		movs	r3, #0
 564 007a 2365     		str	r3, [r4, #80]	@ unaligned
 984:FreeRTOS/tasks.c ****         }
 565              		.loc 1 984 13 view .LVU173
 566 007c 84F85430 		strb	r3, [r4, #84]
1049:FreeRTOS/tasks.c ****                 }
 567              		.loc 1 1049 21 view .LVU174
1049:FreeRTOS/tasks.c ****                 }
 568              		.loc 1 1049 46 is_stmt 0 view .LVU175
 569 0080 4A46     		mov	r2, r9
 570 0082 4146     		mov	r1, r8
 571 0084 3846     		mov	r0, r7
 572 0086 FFF7FEFF 		bl	pxPortInitialiseStack
 573              	.LVL46:
1049:FreeRTOS/tasks.c ****                 }
 574              		.loc 1 1049 44 view .LVU176
 575 008a 2060     		str	r0, [r4]
1055:FreeRTOS/tasks.c ****     {
 576              		.loc 1 1055 5 is_stmt 1 view .LVU177
1055:FreeRTOS/tasks.c ****     {
 577              		.loc 1 1055 7 is_stmt 0 view .LVU178
 578 008c BAF1000F 		cmp	r10, #0
 579 0090 01D0     		beq	.L41
1059:FreeRTOS/tasks.c ****     }
 580              		.loc 1 1059 9 is_stmt 1 view .LVU179
1059:FreeRTOS/tasks.c ****     }
 581              		.loc 1 1059 24 is_stmt 0 view .LVU180
 582 0092 CAF80040 		str	r4, [r10]
1063:FreeRTOS/tasks.c ****     }
 583              		.loc 1 1063 33 is_stmt 1 view .LVU181
 584              	.L41:
1065:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 585              		.loc 1 1065 1 is_stmt 0 view .LVU182
 586 0096 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 587              	.LVL47:
 588              	.L53:
 913:FreeRTOS/tasks.c ****     }
 589              		.loc 1 913 9 is_stmt 1 view .LVU183
 913:FreeRTOS/tasks.c ****     }
 590              		.loc 1 913 35 is_stmt 0 view .LVU184
 591 009a 0023     		movs	r3, #0
 592 009c 84F83430 		strb	r3, [r4, #52]
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 87


 593 00a0 DAE7     		b	.L46
 594              		.cfi_endproc
 595              	.LFE6:
 597              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 598              		.align	1
 599              		.syntax unified
 600              		.thumb
 601              		.thumb_func
 603              	prvInitialiseTaskLists:
 604              	.LFB41:
3649:FreeRTOS/tasks.c ****     UBaseType_t uxPriority;
 605              		.loc 1 3649 1 is_stmt 1 view -0
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 0
 608              		@ frame_needed = 0, uses_anonymous_args = 0
 609 0000 38B5     		push	{r3, r4, r5, lr}
 610              	.LCFI4:
 611              		.cfi_def_cfa_offset 16
 612              		.cfi_offset 3, -16
 613              		.cfi_offset 4, -12
 614              		.cfi_offset 5, -8
 615              		.cfi_offset 14, -4
3650:FreeRTOS/tasks.c **** 
 616              		.loc 1 3650 5 view .LVU186
3652:FreeRTOS/tasks.c ****     {
 617              		.loc 1 3652 5 view .LVU187
 618              	.LVL48:
3652:FreeRTOS/tasks.c ****     {
 619              		.loc 1 3652 21 is_stmt 0 view .LVU188
 620 0002 0024     		movs	r4, #0
3652:FreeRTOS/tasks.c ****     {
 621              		.loc 1 3652 5 view .LVU189
 622 0004 07E0     		b	.L55
 623              	.LVL49:
 624              	.L56:
3654:FreeRTOS/tasks.c ****     }
 625              		.loc 1 3654 9 is_stmt 1 discriminator 3 view .LVU190
 626 0006 04EB8402 		add	r2, r4, r4, lsl #2
 627 000a 9300     		lsls	r3, r2, #2
 628 000c 0C48     		ldr	r0, .L58
 629 000e 1844     		add	r0, r0, r3
 630 0010 FFF7FEFF 		bl	vListInitialise
 631              	.LVL50:
3652:FreeRTOS/tasks.c ****     {
 632              		.loc 1 3652 94 discriminator 3 view .LVU191
3652:FreeRTOS/tasks.c ****     {
 633              		.loc 1 3652 104 is_stmt 0 discriminator 3 view .LVU192
 634 0014 0134     		adds	r4, r4, #1
 635              	.LVL51:
 636              	.L55:
3652:FreeRTOS/tasks.c ****     {
 637              		.loc 1 3652 43 is_stmt 1 discriminator 1 view .LVU193
3652:FreeRTOS/tasks.c ****     {
 638              		.loc 1 3652 5 is_stmt 0 discriminator 1 view .LVU194
 639 0016 042C     		cmp	r4, #4
 640 0018 F5D9     		bls	.L56
3657:FreeRTOS/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 88


 641              		.loc 1 3657 5 is_stmt 1 view .LVU195
 642 001a 0A4D     		ldr	r5, .L58+4
 643 001c 2846     		mov	r0, r5
 644 001e FFF7FEFF 		bl	vListInitialise
 645              	.LVL52:
3658:FreeRTOS/tasks.c ****     vListInitialise( &xPendingReadyList );
 646              		.loc 1 3658 5 view .LVU196
 647 0022 094C     		ldr	r4, .L58+8
 648              	.LVL53:
3658:FreeRTOS/tasks.c ****     vListInitialise( &xPendingReadyList );
 649              		.loc 1 3658 5 is_stmt 0 view .LVU197
 650 0024 2046     		mov	r0, r4
 651 0026 FFF7FEFF 		bl	vListInitialise
 652              	.LVL54:
3659:FreeRTOS/tasks.c **** 
 653              		.loc 1 3659 5 is_stmt 1 view .LVU198
 654 002a 0848     		ldr	r0, .L58+12
 655 002c FFF7FEFF 		bl	vListInitialise
 656              	.LVL55:
3669:FreeRTOS/tasks.c ****         }
 657              		.loc 1 3669 13 view .LVU199
 658 0030 0748     		ldr	r0, .L58+16
 659 0032 FFF7FEFF 		bl	vListInitialise
 660              	.LVL56:
3675:FreeRTOS/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 661              		.loc 1 3675 5 view .LVU200
3675:FreeRTOS/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 662              		.loc 1 3675 23 is_stmt 0 view .LVU201
 663 0036 074B     		ldr	r3, .L58+20
 664 0038 1D60     		str	r5, [r3]
3676:FreeRTOS/tasks.c **** }
 665              		.loc 1 3676 5 is_stmt 1 view .LVU202
3676:FreeRTOS/tasks.c **** }
 666              		.loc 1 3676 31 is_stmt 0 view .LVU203
 667 003a 074B     		ldr	r3, .L58+24
 668 003c 1C60     		str	r4, [r3]
3677:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 669              		.loc 1 3677 1 view .LVU204
 670 003e 38BD     		pop	{r3, r4, r5, pc}
 671              	.L59:
 672              		.align	2
 673              	.L58:
 674 0040 00000000 		.word	.LANCHOR2
 675 0044 00000000 		.word	.LANCHOR5
 676 0048 00000000 		.word	.LANCHOR6
 677 004c 00000000 		.word	.LANCHOR1
 678 0050 00000000 		.word	.LANCHOR0
 679 0054 00000000 		.word	.LANCHOR3
 680 0058 00000000 		.word	.LANCHOR7
 681              		.cfi_endproc
 682              	.LFE41:
 684              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 685              		.align	1
 686              		.syntax unified
 687              		.thumb
 688              		.thumb_func
 690              	prvAddNewTaskToReadyList:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 89


 691              	.LVL57:
 692              	.LFB7:
1069:FreeRTOS/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
 693              		.loc 1 1069 1 is_stmt 1 view -0
 694              		.cfi_startproc
 695              		@ args = 0, pretend = 0, frame = 0
 696              		@ frame_needed = 0, uses_anonymous_args = 0
1069:FreeRTOS/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
 697              		.loc 1 1069 1 is_stmt 0 view .LVU206
 698 0000 10B5     		push	{r4, lr}
 699              	.LCFI5:
 700              		.cfi_def_cfa_offset 8
 701              		.cfi_offset 4, -8
 702              		.cfi_offset 14, -4
 703 0002 82B0     		sub	sp, sp, #8
 704              	.LCFI6:
 705              		.cfi_def_cfa_offset 16
 706 0004 0446     		mov	r4, r0
1072:FreeRTOS/tasks.c ****     {
 707              		.loc 1 1072 5 is_stmt 1 view .LVU207
 708 0006 FFF7FEFF 		bl	vPortEnterCritical
 709              	.LVL58:
1074:FreeRTOS/tasks.c **** 
 710              		.loc 1 1074 9 view .LVU208
1074:FreeRTOS/tasks.c **** 
 711              		.loc 1 1074 31 is_stmt 0 view .LVU209
 712 000a 2B4A     		ldr	r2, .L68
 713 000c 1368     		ldr	r3, [r2]
 714 000e 0133     		adds	r3, r3, #1
 715 0010 1360     		str	r3, [r2]
1076:FreeRTOS/tasks.c ****         {
 716              		.loc 1 1076 9 is_stmt 1 view .LVU210
1076:FreeRTOS/tasks.c ****         {
 717              		.loc 1 1076 26 is_stmt 0 view .LVU211
 718 0012 2A4B     		ldr	r3, .L68+4
 719 0014 1B68     		ldr	r3, [r3]
1076:FreeRTOS/tasks.c ****         {
 720              		.loc 1 1076 11 view .LVU212
 721 0016 5BB1     		cbz	r3, .L66
1099:FreeRTOS/tasks.c ****             {
 722              		.loc 1 1099 13 is_stmt 1 view .LVU213
1099:FreeRTOS/tasks.c ****             {
 723              		.loc 1 1099 35 is_stmt 0 view .LVU214
 724 0018 294B     		ldr	r3, .L68+8
 725 001a 1B68     		ldr	r3, [r3]
1099:FreeRTOS/tasks.c ****             {
 726              		.loc 1 1099 15 view .LVU215
 727 001c 6BB9     		cbnz	r3, .L62
1101:FreeRTOS/tasks.c ****                 {
 728              		.loc 1 1101 17 is_stmt 1 view .LVU216
1101:FreeRTOS/tasks.c ****                 {
 729              		.loc 1 1101 33 is_stmt 0 view .LVU217
 730 001e 274B     		ldr	r3, .L68+4
 731 0020 1B68     		ldr	r3, [r3]
 732 0022 DA6A     		ldr	r2, [r3, #44]
1101:FreeRTOS/tasks.c ****                 {
 733              		.loc 1 1101 57 view .LVU218
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 90


 734 0024 E36A     		ldr	r3, [r4, #44]
1101:FreeRTOS/tasks.c ****                 {
 735              		.loc 1 1101 19 view .LVU219
 736 0026 9A42     		cmp	r2, r3
 737 0028 07D8     		bhi	.L62
1103:FreeRTOS/tasks.c ****                 }
 738              		.loc 1 1103 21 is_stmt 1 view .LVU220
1103:FreeRTOS/tasks.c ****                 }
 739              		.loc 1 1103 34 is_stmt 0 view .LVU221
 740 002a 244B     		ldr	r3, .L68+4
 741 002c 1C60     		str	r4, [r3]
 742 002e 04E0     		b	.L62
 743              	.L66:
1080:FreeRTOS/tasks.c **** 
 744              		.loc 1 1080 13 is_stmt 1 view .LVU222
1080:FreeRTOS/tasks.c **** 
 745              		.loc 1 1080 26 is_stmt 0 view .LVU223
 746 0030 224B     		ldr	r3, .L68+4
 747 0032 1C60     		str	r4, [r3]
1082:FreeRTOS/tasks.c ****             {
 748              		.loc 1 1082 13 is_stmt 1 view .LVU224
1082:FreeRTOS/tasks.c ****             {
 749              		.loc 1 1082 40 is_stmt 0 view .LVU225
 750 0034 1368     		ldr	r3, [r2]
1082:FreeRTOS/tasks.c ****             {
 751              		.loc 1 1082 15 view .LVU226
 752 0036 012B     		cmp	r3, #1
 753 0038 3BD0     		beq	.L67
 754              	.L62:
1112:FreeRTOS/tasks.c ****             }
 755              		.loc 1 1112 41 is_stmt 1 view .LVU227
1116:FreeRTOS/tasks.c **** 
 756              		.loc 1 1116 9 view .LVU228
1116:FreeRTOS/tasks.c **** 
 757              		.loc 1 1116 21 is_stmt 0 view .LVU229
 758 003a 224A     		ldr	r2, .L68+12
 759 003c 1368     		ldr	r3, [r2]
 760 003e 0133     		adds	r3, r3, #1
 761 0040 1360     		str	r3, [r2]
1121:FreeRTOS/tasks.c ****             }
 762              		.loc 1 1121 17 is_stmt 1 view .LVU230
1121:FreeRTOS/tasks.c ****             }
 763              		.loc 1 1121 39 is_stmt 0 view .LVU231
 764 0042 A364     		str	r3, [r4, #72]
1124:FreeRTOS/tasks.c **** 
 765              		.loc 1 1124 9 is_stmt 1 view .LVU232
 766 0044 64B1     		cbz	r4, .L63
1124:FreeRTOS/tasks.c **** 
 767              		.loc 1 1124 9 discriminator 1 view .LVU233
 768 0046 2046     		mov	r0, r4
 769 0048 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskCreate
 770              	.LVL59:
1124:FreeRTOS/tasks.c **** 
 771              		.loc 1 1124 9 discriminator 1 view .LVU234
 772 004c 236B     		ldr	r3, [r4, #48]
 773 004e 2268     		ldr	r2, [r4]
 774 0050 D21A     		subs	r2, r2, r3
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 91


 775 0052 0092     		str	r2, [sp]
 776 0054 E26A     		ldr	r2, [r4, #44]
 777 0056 04F13401 		add	r1, r4, #52
 778 005a 2046     		mov	r0, r4
 779 005c FFF7FEFF 		bl	SYSVIEW_AddTask
 780              	.LVL60:
 781              	.L63:
1124:FreeRTOS/tasks.c **** 
 782              		.loc 1 1124 37 discriminator 3 view .LVU235
1126:FreeRTOS/tasks.c **** 
 783              		.loc 1 1126 9 discriminator 3 view .LVU236
 784 0060 2046     		mov	r0, r4
 785 0062 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 786              	.LVL61:
1126:FreeRTOS/tasks.c **** 
 787              		.loc 1 1126 9 discriminator 3 view .LVU237
 788 0066 E06A     		ldr	r0, [r4, #44]
 789 0068 0123     		movs	r3, #1
 790 006a 8340     		lsls	r3, r3, r0
 791 006c 164A     		ldr	r2, .L68+16
 792 006e 1168     		ldr	r1, [r2]
 793 0070 0B43     		orrs	r3, r3, r1
 794 0072 1360     		str	r3, [r2]
1126:FreeRTOS/tasks.c **** 
 795              		.loc 1 1126 9 discriminator 3 view .LVU238
 796 0074 00EB8000 		add	r0, r0, r0, lsl #2
 797 0078 211D     		adds	r1, r4, #4
 798 007a 144B     		ldr	r3, .L68+20
 799 007c 03EB8000 		add	r0, r3, r0, lsl #2
 800 0080 FFF7FEFF 		bl	vListInsertEnd
 801              	.LVL62:
1126:FreeRTOS/tasks.c **** 
 802              		.loc 1 1126 42 discriminator 3 view .LVU239
1128:FreeRTOS/tasks.c ****     }
 803              		.loc 1 1128 9 discriminator 3 view .LVU240
1130:FreeRTOS/tasks.c **** 
 804              		.loc 1 1130 5 discriminator 3 view .LVU241
 805 0084 FFF7FEFF 		bl	vPortExitCritical
 806              	.LVL63:
1132:FreeRTOS/tasks.c ****     {
 807              		.loc 1 1132 5 discriminator 3 view .LVU242
1132:FreeRTOS/tasks.c ****     {
 808              		.loc 1 1132 27 is_stmt 0 discriminator 3 view .LVU243
 809 0088 0D4B     		ldr	r3, .L68+8
 810 008a 1B68     		ldr	r3, [r3]
1132:FreeRTOS/tasks.c ****     {
 811              		.loc 1 1132 7 discriminator 3 view .LVU244
 812 008c 7BB1     		cbz	r3, .L60
1136:FreeRTOS/tasks.c ****         {
 813              		.loc 1 1136 9 is_stmt 1 view .LVU245
1136:FreeRTOS/tasks.c ****         {
 814              		.loc 1 1136 25 is_stmt 0 view .LVU246
 815 008e 0B4B     		ldr	r3, .L68+4
 816 0090 1B68     		ldr	r3, [r3]
 817 0092 DA6A     		ldr	r2, [r3, #44]
1136:FreeRTOS/tasks.c ****         {
 818              		.loc 1 1136 48 view .LVU247
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 92


 819 0094 E36A     		ldr	r3, [r4, #44]
1136:FreeRTOS/tasks.c ****         {
 820              		.loc 1 1136 11 view .LVU248
 821 0096 9A42     		cmp	r2, r3
 822 0098 09D2     		bcs	.L60
1138:FreeRTOS/tasks.c ****         }
 823              		.loc 1 1138 13 is_stmt 1 view .LVU249
 824 009a 4FF0E023 		mov	r3, #-536813568
 825 009e 4FF08052 		mov	r2, #268435456
 826 00a2 C3F8042D 		str	r2, [r3, #3332]
1138:FreeRTOS/tasks.c ****         }
 827              		.loc 1 1138 13 view .LVU250
 828              		.syntax unified
 829              	@ 1138 "FreeRTOS/tasks.c" 1
 830 00a6 BFF34F8F 		dsb
 831              	@ 0 "" 2
1138:FreeRTOS/tasks.c ****         }
 832              		.loc 1 1138 13 view .LVU251
 833              	@ 1138 "FreeRTOS/tasks.c" 1
 834 00aa BFF36F8F 		isb
 835              	@ 0 "" 2
1138:FreeRTOS/tasks.c ****         }
 836              		.loc 1 1138 44 view .LVU252
1147:FreeRTOS/tasks.c ****     }
 837              		.loc 1 1147 33 view .LVU253
 838              		.thumb
 839              		.syntax unified
 840              	.L60:
1149:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 841              		.loc 1 1149 1 is_stmt 0 view .LVU254
 842 00ae 02B0     		add	sp, sp, #8
 843              	.LCFI7:
 844              		.cfi_remember_state
 845              		.cfi_def_cfa_offset 8
 846              		@ sp needed
 847 00b0 10BD     		pop	{r4, pc}
 848              	.LVL64:
 849              	.L67:
 850              	.LCFI8:
 851              		.cfi_restore_state
1087:FreeRTOS/tasks.c ****             }
 852              		.loc 1 1087 17 is_stmt 1 view .LVU255
 853 00b2 FFF7FEFF 		bl	prvInitialiseTaskLists
 854              	.LVL65:
 855 00b6 C0E7     		b	.L62
 856              	.L69:
 857              		.align	2
 858              	.L68:
 859 00b8 00000000 		.word	.LANCHOR8
 860 00bc 00000000 		.word	.LANCHOR9
 861 00c0 00000000 		.word	.LANCHOR10
 862 00c4 00000000 		.word	.LANCHOR11
 863 00c8 00000000 		.word	.LANCHOR12
 864 00cc 00000000 		.word	.LANCHOR2
 865              		.cfi_endproc
 866              	.LFE7:
 868              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 93


 869              		.align	1
 870              		.syntax unified
 871              		.thumb
 872              		.thumb_func
 874              	prvAddCurrentTaskToDelayedList:
 875              	.LVL66:
 876              	.LFB58:
4022:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4023:FreeRTOS/tasks.c **** 
4024:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
4025:FreeRTOS/tasks.c **** 
4026:FreeRTOS/tasks.c ****     TaskHandle_t xTaskGetCurrentTaskHandle( void )
4027:FreeRTOS/tasks.c ****     {
4028:FreeRTOS/tasks.c ****         TaskHandle_t xReturn;
4029:FreeRTOS/tasks.c **** 
4030:FreeRTOS/tasks.c ****         /* A critical section is not required as this is not called from
4031:FreeRTOS/tasks.c ****          * an interrupt and the current TCB will always be the same for any
4032:FreeRTOS/tasks.c ****          * individual execution thread. */
4033:FreeRTOS/tasks.c ****         xReturn = pxCurrentTCB;
4034:FreeRTOS/tasks.c **** 
4035:FreeRTOS/tasks.c ****         return xReturn;
4036:FreeRTOS/tasks.c ****     }
4037:FreeRTOS/tasks.c **** 
4038:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
4039:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4040:FreeRTOS/tasks.c **** 
4041:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
4042:FreeRTOS/tasks.c **** 
4043:FreeRTOS/tasks.c ****     BaseType_t xTaskGetSchedulerState( void )
4044:FreeRTOS/tasks.c ****     {
4045:FreeRTOS/tasks.c ****         BaseType_t xReturn;
4046:FreeRTOS/tasks.c **** 
4047:FreeRTOS/tasks.c ****         if( xSchedulerRunning == pdFALSE )
4048:FreeRTOS/tasks.c ****         {
4049:FreeRTOS/tasks.c ****             xReturn = taskSCHEDULER_NOT_STARTED;
4050:FreeRTOS/tasks.c ****         }
4051:FreeRTOS/tasks.c ****         else
4052:FreeRTOS/tasks.c ****         {
4053:FreeRTOS/tasks.c ****             if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4054:FreeRTOS/tasks.c ****             {
4055:FreeRTOS/tasks.c ****                 xReturn = taskSCHEDULER_RUNNING;
4056:FreeRTOS/tasks.c ****             }
4057:FreeRTOS/tasks.c ****             else
4058:FreeRTOS/tasks.c ****             {
4059:FreeRTOS/tasks.c ****                 xReturn = taskSCHEDULER_SUSPENDED;
4060:FreeRTOS/tasks.c ****             }
4061:FreeRTOS/tasks.c ****         }
4062:FreeRTOS/tasks.c **** 
4063:FreeRTOS/tasks.c ****         return xReturn;
4064:FreeRTOS/tasks.c ****     }
4065:FreeRTOS/tasks.c **** 
4066:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4067:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4068:FreeRTOS/tasks.c **** 
4069:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4070:FreeRTOS/tasks.c **** 
4071:FreeRTOS/tasks.c ****     BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 94


4072:FreeRTOS/tasks.c ****     {
4073:FreeRTOS/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4074:FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
4075:FreeRTOS/tasks.c **** 
4076:FreeRTOS/tasks.c ****         /* If the mutex was given back by an interrupt while the queue was
4077:FreeRTOS/tasks.c ****          * locked then the mutex holder might now be NULL.  _RB_ Is this still
4078:FreeRTOS/tasks.c ****          * needed as interrupts can no longer use mutexes? */
4079:FreeRTOS/tasks.c ****         if( pxMutexHolder != NULL )
4080:FreeRTOS/tasks.c ****         {
4081:FreeRTOS/tasks.c ****             /* If the holder of the mutex has a priority below the priority of
4082:FreeRTOS/tasks.c ****              * the task attempting to obtain the mutex then it will temporarily
4083:FreeRTOS/tasks.c ****              * inherit the priority of the task attempting to obtain the mutex. */
4084:FreeRTOS/tasks.c ****             if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4085:FreeRTOS/tasks.c ****             {
4086:FreeRTOS/tasks.c ****                 /* Adjust the mutex holder state to account for its new
4087:FreeRTOS/tasks.c ****                  * priority.  Only reset the event list item value if the value is
4088:FreeRTOS/tasks.c ****                  * not being used for anything else. */
4089:FreeRTOS/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_
4090:FreeRTOS/tasks.c ****                 {
4091:FreeRTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) 
4092:FreeRTOS/tasks.c ****                 }
4093:FreeRTOS/tasks.c ****                 else
4094:FreeRTOS/tasks.c ****                 {
4095:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4096:FreeRTOS/tasks.c ****                 }
4097:FreeRTOS/tasks.c **** 
4098:FreeRTOS/tasks.c ****                 /* If the task being modified is in the ready state it will need
4099:FreeRTOS/tasks.c ****                  * to be moved into a new list. */
4100:FreeRTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] )
4101:FreeRTOS/tasks.c ****                 {
4102:FreeRTOS/tasks.c ****                     if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
4103:FreeRTOS/tasks.c ****                     {
4104:FreeRTOS/tasks.c ****                         /* It is known that the task is in its ready list so
4105:FreeRTOS/tasks.c ****                          * there is no need to check again and the port level
4106:FreeRTOS/tasks.c ****                          * reset macro can be called directly. */
4107:FreeRTOS/tasks.c ****                         portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority 
4108:FreeRTOS/tasks.c ****                     }
4109:FreeRTOS/tasks.c ****                     else
4110:FreeRTOS/tasks.c ****                     {
4111:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4112:FreeRTOS/tasks.c ****                     }
4113:FreeRTOS/tasks.c **** 
4114:FreeRTOS/tasks.c ****                     /* Inherit the priority before being moved into the new list. */
4115:FreeRTOS/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4116:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
4117:FreeRTOS/tasks.c ****                 }
4118:FreeRTOS/tasks.c ****                 else
4119:FreeRTOS/tasks.c ****                 {
4120:FreeRTOS/tasks.c ****                     /* Just inherit the priority. */
4121:FreeRTOS/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4122:FreeRTOS/tasks.c ****                 }
4123:FreeRTOS/tasks.c **** 
4124:FreeRTOS/tasks.c ****                 traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4125:FreeRTOS/tasks.c **** 
4126:FreeRTOS/tasks.c ****                 /* Inheritance occurred. */
4127:FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
4128:FreeRTOS/tasks.c ****             }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 95


4129:FreeRTOS/tasks.c ****             else
4130:FreeRTOS/tasks.c ****             {
4131:FreeRTOS/tasks.c ****                 if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4132:FreeRTOS/tasks.c ****                 {
4133:FreeRTOS/tasks.c ****                     /* The base priority of the mutex holder is lower than the
4134:FreeRTOS/tasks.c ****                      * priority of the task attempting to take the mutex, but the
4135:FreeRTOS/tasks.c ****                      * current priority of the mutex holder is not lower than the
4136:FreeRTOS/tasks.c ****                      * priority of the task attempting to take the mutex.
4137:FreeRTOS/tasks.c ****                      * Therefore the mutex holder must have already inherited a
4138:FreeRTOS/tasks.c ****                      * priority, but inheritance would have occurred if that had
4139:FreeRTOS/tasks.c ****                      * not been the case. */
4140:FreeRTOS/tasks.c ****                     xReturn = pdTRUE;
4141:FreeRTOS/tasks.c ****                 }
4142:FreeRTOS/tasks.c ****                 else
4143:FreeRTOS/tasks.c ****                 {
4144:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4145:FreeRTOS/tasks.c ****                 }
4146:FreeRTOS/tasks.c ****             }
4147:FreeRTOS/tasks.c ****         }
4148:FreeRTOS/tasks.c ****         else
4149:FreeRTOS/tasks.c ****         {
4150:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4151:FreeRTOS/tasks.c ****         }
4152:FreeRTOS/tasks.c **** 
4153:FreeRTOS/tasks.c ****         return xReturn;
4154:FreeRTOS/tasks.c ****     }
4155:FreeRTOS/tasks.c **** 
4156:FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4157:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4158:FreeRTOS/tasks.c **** 
4159:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4160:FreeRTOS/tasks.c **** 
4161:FreeRTOS/tasks.c ****     BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4162:FreeRTOS/tasks.c ****     {
4163:FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
4164:FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
4165:FreeRTOS/tasks.c **** 
4166:FreeRTOS/tasks.c ****         if( pxMutexHolder != NULL )
4167:FreeRTOS/tasks.c ****         {
4168:FreeRTOS/tasks.c ****             /* A task can only have an inherited priority if it holds the mutex.
4169:FreeRTOS/tasks.c ****              * If the mutex is held by a task then it cannot be given from an
4170:FreeRTOS/tasks.c ****              * interrupt, and if a mutex is given by the holding task then it must
4171:FreeRTOS/tasks.c ****              * be the running state task. */
4172:FreeRTOS/tasks.c ****             configASSERT( pxTCB == pxCurrentTCB );
4173:FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
4174:FreeRTOS/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
4175:FreeRTOS/tasks.c **** 
4176:FreeRTOS/tasks.c ****             /* Has the holder of the mutex inherited the priority of another
4177:FreeRTOS/tasks.c ****              * task? */
4178:FreeRTOS/tasks.c ****             if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4179:FreeRTOS/tasks.c ****             {
4180:FreeRTOS/tasks.c ****                 /* Only disinherit if no other mutexes are held. */
4181:FreeRTOS/tasks.c ****                 if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4182:FreeRTOS/tasks.c ****                 {
4183:FreeRTOS/tasks.c ****                     /* A task can only have an inherited priority if it holds
4184:FreeRTOS/tasks.c ****                      * the mutex.  If the mutex is held by a task then it cannot be
4185:FreeRTOS/tasks.c ****                      * given from an interrupt, and if a mutex is given by the
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 96


4186:FreeRTOS/tasks.c ****                      * holding task then it must be the running state task.  Remove
4187:FreeRTOS/tasks.c ****                      * the holding task from the ready list. */
4188:FreeRTOS/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4189:FreeRTOS/tasks.c ****                     {
4190:FreeRTOS/tasks.c ****                         portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4191:FreeRTOS/tasks.c ****                     }
4192:FreeRTOS/tasks.c ****                     else
4193:FreeRTOS/tasks.c ****                     {
4194:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4195:FreeRTOS/tasks.c ****                     }
4196:FreeRTOS/tasks.c **** 
4197:FreeRTOS/tasks.c ****                     /* Disinherit the priority before adding the task into the
4198:FreeRTOS/tasks.c ****                      * new  ready list. */
4199:FreeRTOS/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4200:FreeRTOS/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
4201:FreeRTOS/tasks.c **** 
4202:FreeRTOS/tasks.c ****                     /* Reset the event list item value.  It cannot be in use for
4203:FreeRTOS/tasks.c ****                      * any other purpose if this task is running, and it must be
4204:FreeRTOS/tasks.c ****                      * running to give back the mutex. */
4205:FreeRTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_P
4206:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
4207:FreeRTOS/tasks.c **** 
4208:FreeRTOS/tasks.c ****                     /* Return true to indicate that a context switch is required.
4209:FreeRTOS/tasks.c ****                      * This is only actually required in the corner case whereby
4210:FreeRTOS/tasks.c ****                      * multiple mutexes were held and the mutexes were given back
4211:FreeRTOS/tasks.c ****                      * in an order different to that in which they were taken.
4212:FreeRTOS/tasks.c ****                      * If a context switch did not occur when the first mutex was
4213:FreeRTOS/tasks.c ****                      * returned, even if a task was waiting on it, then a context
4214:FreeRTOS/tasks.c ****                      * switch should occur when the last mutex is returned whether
4215:FreeRTOS/tasks.c ****                      * a task is waiting on it or not. */
4216:FreeRTOS/tasks.c ****                     xReturn = pdTRUE;
4217:FreeRTOS/tasks.c ****                 }
4218:FreeRTOS/tasks.c ****                 else
4219:FreeRTOS/tasks.c ****                 {
4220:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4221:FreeRTOS/tasks.c ****                 }
4222:FreeRTOS/tasks.c ****             }
4223:FreeRTOS/tasks.c ****             else
4224:FreeRTOS/tasks.c ****             {
4225:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4226:FreeRTOS/tasks.c ****             }
4227:FreeRTOS/tasks.c ****         }
4228:FreeRTOS/tasks.c ****         else
4229:FreeRTOS/tasks.c ****         {
4230:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4231:FreeRTOS/tasks.c ****         }
4232:FreeRTOS/tasks.c **** 
4233:FreeRTOS/tasks.c ****         return xReturn;
4234:FreeRTOS/tasks.c ****     }
4235:FreeRTOS/tasks.c **** 
4236:FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4237:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4238:FreeRTOS/tasks.c **** 
4239:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4240:FreeRTOS/tasks.c **** 
4241:FreeRTOS/tasks.c ****     void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
4242:FreeRTOS/tasks.c ****                                               UBaseType_t uxHighestPriorityWaitingTask )
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 97


4243:FreeRTOS/tasks.c ****     {
4244:FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
4245:FreeRTOS/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4246:FreeRTOS/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4247:FreeRTOS/tasks.c **** 
4248:FreeRTOS/tasks.c ****         if( pxMutexHolder != NULL )
4249:FreeRTOS/tasks.c ****         {
4250:FreeRTOS/tasks.c ****             /* If pxMutexHolder is not NULL then the holder must hold at least
4251:FreeRTOS/tasks.c ****              * one mutex. */
4252:FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
4253:FreeRTOS/tasks.c **** 
4254:FreeRTOS/tasks.c ****             /* Determine the priority to which the priority of the task that
4255:FreeRTOS/tasks.c ****              * holds the mutex should be set.  This will be the greater of the
4256:FreeRTOS/tasks.c ****              * holding task's base priority and the priority of the highest
4257:FreeRTOS/tasks.c ****              * priority task that is waiting to obtain the mutex. */
4258:FreeRTOS/tasks.c ****             if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4259:FreeRTOS/tasks.c ****             {
4260:FreeRTOS/tasks.c ****                 uxPriorityToUse = uxHighestPriorityWaitingTask;
4261:FreeRTOS/tasks.c ****             }
4262:FreeRTOS/tasks.c ****             else
4263:FreeRTOS/tasks.c ****             {
4264:FreeRTOS/tasks.c ****                 uxPriorityToUse = pxTCB->uxBasePriority;
4265:FreeRTOS/tasks.c ****             }
4266:FreeRTOS/tasks.c **** 
4267:FreeRTOS/tasks.c ****             /* Does the priority need to change? */
4268:FreeRTOS/tasks.c ****             if( pxTCB->uxPriority != uxPriorityToUse )
4269:FreeRTOS/tasks.c ****             {
4270:FreeRTOS/tasks.c ****                 /* Only disinherit if no other mutexes are held.  This is a
4271:FreeRTOS/tasks.c ****                  * simplification in the priority inheritance implementation.  If
4272:FreeRTOS/tasks.c ****                  * the task that holds the mutex is also holding other mutexes then
4273:FreeRTOS/tasks.c ****                  * the other mutexes may have caused the priority inheritance. */
4274:FreeRTOS/tasks.c ****                 if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4275:FreeRTOS/tasks.c ****                 {
4276:FreeRTOS/tasks.c ****                     /* If a task has timed out because it already holds the
4277:FreeRTOS/tasks.c ****                      * mutex it was trying to obtain then it cannot of inherited
4278:FreeRTOS/tasks.c ****                      * its own priority. */
4279:FreeRTOS/tasks.c ****                     configASSERT( pxTCB != pxCurrentTCB );
4280:FreeRTOS/tasks.c **** 
4281:FreeRTOS/tasks.c ****                     /* Disinherit the priority, remembering the previous
4282:FreeRTOS/tasks.c ****                      * priority to facilitate determining the subject task's
4283:FreeRTOS/tasks.c ****                      * state. */
4284:FreeRTOS/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
4285:FreeRTOS/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
4286:FreeRTOS/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
4287:FreeRTOS/tasks.c **** 
4288:FreeRTOS/tasks.c ****                     /* Only reset the event list item value if the value is not
4289:FreeRTOS/tasks.c ****                      * being used for anything else. */
4290:FreeRTOS/tasks.c ****                     if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_IT
4291:FreeRTOS/tasks.c ****                     {
4292:FreeRTOS/tasks.c ****                         listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configM
4293:FreeRTOS/tasks.c ****                     }
4294:FreeRTOS/tasks.c ****                     else
4295:FreeRTOS/tasks.c ****                     {
4296:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4297:FreeRTOS/tasks.c ****                     }
4298:FreeRTOS/tasks.c **** 
4299:FreeRTOS/tasks.c ****                     /* If the running task is not the task that holds the mutex
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 98


4300:FreeRTOS/tasks.c ****                      * then the task that holds the mutex could be in either the
4301:FreeRTOS/tasks.c ****                      * Ready, Blocked or Suspended states.  Only remove the task
4302:FreeRTOS/tasks.c ****                      * from its current state list if it is in the Ready state as
4303:FreeRTOS/tasks.c ****                      * the task's priority is going to change and there is one
4304:FreeRTOS/tasks.c ****                      * Ready list per priority. */
4305:FreeRTOS/tasks.c ****                     if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &
4306:FreeRTOS/tasks.c ****                     {
4307:FreeRTOS/tasks.c ****                         if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4308:FreeRTOS/tasks.c ****                         {
4309:FreeRTOS/tasks.c ****                             /* It is known that the task is in its ready list so
4310:FreeRTOS/tasks.c ****                              * there is no need to check again and the port level
4311:FreeRTOS/tasks.c ****                              * reset macro can be called directly. */
4312:FreeRTOS/tasks.c ****                             portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4313:FreeRTOS/tasks.c ****                         }
4314:FreeRTOS/tasks.c ****                         else
4315:FreeRTOS/tasks.c ****                         {
4316:FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
4317:FreeRTOS/tasks.c ****                         }
4318:FreeRTOS/tasks.c **** 
4319:FreeRTOS/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
4320:FreeRTOS/tasks.c ****                     }
4321:FreeRTOS/tasks.c ****                     else
4322:FreeRTOS/tasks.c ****                     {
4323:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4324:FreeRTOS/tasks.c ****                     }
4325:FreeRTOS/tasks.c ****                 }
4326:FreeRTOS/tasks.c ****                 else
4327:FreeRTOS/tasks.c ****                 {
4328:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4329:FreeRTOS/tasks.c ****                 }
4330:FreeRTOS/tasks.c ****             }
4331:FreeRTOS/tasks.c ****             else
4332:FreeRTOS/tasks.c ****             {
4333:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4334:FreeRTOS/tasks.c ****             }
4335:FreeRTOS/tasks.c ****         }
4336:FreeRTOS/tasks.c ****         else
4337:FreeRTOS/tasks.c ****         {
4338:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4339:FreeRTOS/tasks.c ****         }
4340:FreeRTOS/tasks.c ****     }
4341:FreeRTOS/tasks.c **** 
4342:FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4343:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4344:FreeRTOS/tasks.c **** 
4345:FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4346:FreeRTOS/tasks.c **** 
4347:FreeRTOS/tasks.c ****     void vTaskEnterCritical( void )
4348:FreeRTOS/tasks.c ****     {
4349:FreeRTOS/tasks.c ****         portDISABLE_INTERRUPTS();
4350:FreeRTOS/tasks.c **** 
4351:FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4352:FreeRTOS/tasks.c ****         {
4353:FreeRTOS/tasks.c ****             ( pxCurrentTCB->uxCriticalNesting )++;
4354:FreeRTOS/tasks.c **** 
4355:FreeRTOS/tasks.c ****             /* This is not the interrupt safe version of the enter critical
4356:FreeRTOS/tasks.c ****              * function so  assert() if it is being called from an interrupt
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 99


4357:FreeRTOS/tasks.c ****              * context.  Only API functions that end in "FromISR" can be used in an
4358:FreeRTOS/tasks.c ****              * interrupt.  Only assert if the critical nesting count is 1 to
4359:FreeRTOS/tasks.c ****              * protect against recursive calls if the assert function also uses a
4360:FreeRTOS/tasks.c ****              * critical section. */
4361:FreeRTOS/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting == 1 )
4362:FreeRTOS/tasks.c ****             {
4363:FreeRTOS/tasks.c ****                 portASSERT_IF_IN_ISR();
4364:FreeRTOS/tasks.c ****             }
4365:FreeRTOS/tasks.c ****         }
4366:FreeRTOS/tasks.c ****         else
4367:FreeRTOS/tasks.c ****         {
4368:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4369:FreeRTOS/tasks.c ****         }
4370:FreeRTOS/tasks.c ****     }
4371:FreeRTOS/tasks.c **** 
4372:FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4373:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4374:FreeRTOS/tasks.c **** 
4375:FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4376:FreeRTOS/tasks.c **** 
4377:FreeRTOS/tasks.c ****     void vTaskExitCritical( void )
4378:FreeRTOS/tasks.c ****     {
4379:FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4380:FreeRTOS/tasks.c ****         {
4381:FreeRTOS/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting > 0U )
4382:FreeRTOS/tasks.c ****             {
4383:FreeRTOS/tasks.c ****                 ( pxCurrentTCB->uxCriticalNesting )--;
4384:FreeRTOS/tasks.c **** 
4385:FreeRTOS/tasks.c ****                 if( pxCurrentTCB->uxCriticalNesting == 0U )
4386:FreeRTOS/tasks.c ****                 {
4387:FreeRTOS/tasks.c ****                     portENABLE_INTERRUPTS();
4388:FreeRTOS/tasks.c ****                 }
4389:FreeRTOS/tasks.c ****                 else
4390:FreeRTOS/tasks.c ****                 {
4391:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4392:FreeRTOS/tasks.c ****                 }
4393:FreeRTOS/tasks.c ****             }
4394:FreeRTOS/tasks.c ****             else
4395:FreeRTOS/tasks.c ****             {
4396:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4397:FreeRTOS/tasks.c ****             }
4398:FreeRTOS/tasks.c ****         }
4399:FreeRTOS/tasks.c ****         else
4400:FreeRTOS/tasks.c ****         {
4401:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4402:FreeRTOS/tasks.c ****         }
4403:FreeRTOS/tasks.c ****     }
4404:FreeRTOS/tasks.c **** 
4405:FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4406:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4407:FreeRTOS/tasks.c **** 
4408:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4409:FreeRTOS/tasks.c **** 
4410:FreeRTOS/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
4411:FreeRTOS/tasks.c ****                                         const char * pcTaskName )
4412:FreeRTOS/tasks.c ****     {
4413:FreeRTOS/tasks.c ****         size_t x;
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 100


4414:FreeRTOS/tasks.c **** 
4415:FreeRTOS/tasks.c ****         /* Start by copying the entire string. */
4416:FreeRTOS/tasks.c ****         strcpy( pcBuffer, pcTaskName );
4417:FreeRTOS/tasks.c **** 
4418:FreeRTOS/tasks.c ****         /* Pad the end of the string with spaces to ensure columns line up when
4419:FreeRTOS/tasks.c ****          * printed out. */
4420:FreeRTOS/tasks.c ****         for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4421:FreeRTOS/tasks.c ****         {
4422:FreeRTOS/tasks.c ****             pcBuffer[ x ] = ' ';
4423:FreeRTOS/tasks.c ****         }
4424:FreeRTOS/tasks.c **** 
4425:FreeRTOS/tasks.c ****         /* Terminate. */
4426:FreeRTOS/tasks.c ****         pcBuffer[ x ] = ( char ) 0x00;
4427:FreeRTOS/tasks.c **** 
4428:FreeRTOS/tasks.c ****         /* Return the new end of string. */
4429:FreeRTOS/tasks.c ****         return &( pcBuffer[ x ] );
4430:FreeRTOS/tasks.c ****     }
4431:FreeRTOS/tasks.c **** 
4432:FreeRTOS/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4433:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4434:FreeRTOS/tasks.c **** 
4435:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4436:FreeRTOS/tasks.c **** 
4437:FreeRTOS/tasks.c ****     void vTaskList( char * pcWriteBuffer )
4438:FreeRTOS/tasks.c ****     {
4439:FreeRTOS/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4440:FreeRTOS/tasks.c ****         UBaseType_t uxArraySize, x;
4441:FreeRTOS/tasks.c ****         char cStatus;
4442:FreeRTOS/tasks.c **** 
4443:FreeRTOS/tasks.c ****         /*
4444:FreeRTOS/tasks.c ****          * PLEASE NOTE:
4445:FreeRTOS/tasks.c ****          *
4446:FreeRTOS/tasks.c ****          * This function is provided for convenience only, and is used by many
4447:FreeRTOS/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4448:FreeRTOS/tasks.c ****          * scheduler.
4449:FreeRTOS/tasks.c ****          *
4450:FreeRTOS/tasks.c ****          * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4451:FreeRTOS/tasks.c ****          * uxTaskGetSystemState() output into a human readable table that
4452:FreeRTOS/tasks.c ****          * displays task names, states and stack usage.
4453:FreeRTOS/tasks.c ****          *
4454:FreeRTOS/tasks.c ****          * vTaskList() has a dependency on the sprintf() C library function that
4455:FreeRTOS/tasks.c ****          * might bloat the code size, use a lot of stack, and provide different
4456:FreeRTOS/tasks.c ****          * results on different platforms.  An alternative, tiny, third party,
4457:FreeRTOS/tasks.c ****          * and limited functionality implementation of sprintf() is provided in
4458:FreeRTOS/tasks.c ****          * many of the FreeRTOS/Demo sub-directories in a file called
4459:FreeRTOS/tasks.c ****          * printf-stdarg.c (note printf-stdarg.c does not provide a full
4460:FreeRTOS/tasks.c ****          * snprintf() implementation!).
4461:FreeRTOS/tasks.c ****          *
4462:FreeRTOS/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4463:FreeRTOS/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4464:FreeRTOS/tasks.c ****          * through a call to vTaskList().
4465:FreeRTOS/tasks.c ****          */
4466:FreeRTOS/tasks.c **** 
4467:FreeRTOS/tasks.c **** 
4468:FreeRTOS/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4469:FreeRTOS/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4470:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 101


4471:FreeRTOS/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4472:FreeRTOS/tasks.c ****          * function is executing. */
4473:FreeRTOS/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4474:FreeRTOS/tasks.c **** 
4475:FreeRTOS/tasks.c ****         /* Allocate an array index for each task.  NOTE!  if
4476:FreeRTOS/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4477:FreeRTOS/tasks.c ****          * equate to NULL. */
4478:FreeRTOS/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4479:FreeRTOS/tasks.c **** 
4480:FreeRTOS/tasks.c ****         if( pxTaskStatusArray != NULL )
4481:FreeRTOS/tasks.c ****         {
4482:FreeRTOS/tasks.c ****             /* Generate the (binary) data. */
4483:FreeRTOS/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4484:FreeRTOS/tasks.c **** 
4485:FreeRTOS/tasks.c ****             /* Create a human readable table from the binary data. */
4486:FreeRTOS/tasks.c ****             for( x = 0; x < uxArraySize; x++ )
4487:FreeRTOS/tasks.c ****             {
4488:FreeRTOS/tasks.c ****                 switch( pxTaskStatusArray[ x ].eCurrentState )
4489:FreeRTOS/tasks.c ****                 {
4490:FreeRTOS/tasks.c ****                     case eRunning:
4491:FreeRTOS/tasks.c ****                         cStatus = tskRUNNING_CHAR;
4492:FreeRTOS/tasks.c ****                         break;
4493:FreeRTOS/tasks.c **** 
4494:FreeRTOS/tasks.c ****                     case eReady:
4495:FreeRTOS/tasks.c ****                         cStatus = tskREADY_CHAR;
4496:FreeRTOS/tasks.c ****                         break;
4497:FreeRTOS/tasks.c **** 
4498:FreeRTOS/tasks.c ****                     case eBlocked:
4499:FreeRTOS/tasks.c ****                         cStatus = tskBLOCKED_CHAR;
4500:FreeRTOS/tasks.c ****                         break;
4501:FreeRTOS/tasks.c **** 
4502:FreeRTOS/tasks.c ****                     case eSuspended:
4503:FreeRTOS/tasks.c ****                         cStatus = tskSUSPENDED_CHAR;
4504:FreeRTOS/tasks.c ****                         break;
4505:FreeRTOS/tasks.c **** 
4506:FreeRTOS/tasks.c ****                     case eDeleted:
4507:FreeRTOS/tasks.c ****                         cStatus = tskDELETED_CHAR;
4508:FreeRTOS/tasks.c ****                         break;
4509:FreeRTOS/tasks.c **** 
4510:FreeRTOS/tasks.c ****                     case eInvalid: /* Fall through. */
4511:FreeRTOS/tasks.c ****                     default:       /* Should not get here, but it is included
4512:FreeRTOS/tasks.c ****                                     * to prevent static checking errors. */
4513:FreeRTOS/tasks.c ****                         cStatus = ( char ) 0x00;
4514:FreeRTOS/tasks.c ****                         break;
4515:FreeRTOS/tasks.c ****                 }
4516:FreeRTOS/tasks.c **** 
4517:FreeRTOS/tasks.c ****                 /* Write the task name to the string, padding with spaces so it
4518:FreeRTOS/tasks.c ****                  * can be printed in tabular form more easily. */
4519:FreeRTOS/tasks.c ****                 pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskN
4520:FreeRTOS/tasks.c **** 
4521:FreeRTOS/tasks.c ****                 /* Write the rest of the string. */
4522:FreeRTOS/tasks.c ****                 sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskSta
4523:FreeRTOS/tasks.c ****                 pcWriteBuffer += strlen( pcWriteBuffer );                                          
4524:FreeRTOS/tasks.c ****             }
4525:FreeRTOS/tasks.c **** 
4526:FreeRTOS/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4527:FreeRTOS/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 102


4528:FreeRTOS/tasks.c ****             vPortFree( pxTaskStatusArray );
4529:FreeRTOS/tasks.c ****         }
4530:FreeRTOS/tasks.c ****         else
4531:FreeRTOS/tasks.c ****         {
4532:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4533:FreeRTOS/tasks.c ****         }
4534:FreeRTOS/tasks.c ****     }
4535:FreeRTOS/tasks.c **** 
4536:FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4537:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
4538:FreeRTOS/tasks.c **** 
4539:FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4540:FreeRTOS/tasks.c **** 
4541:FreeRTOS/tasks.c ****     void vTaskGetRunTimeStats( char * pcWriteBuffer )
4542:FreeRTOS/tasks.c ****     {
4543:FreeRTOS/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4544:FreeRTOS/tasks.c ****         UBaseType_t uxArraySize, x;
4545:FreeRTOS/tasks.c ****         uint32_t ulTotalTime, ulStatsAsPercentage;
4546:FreeRTOS/tasks.c **** 
4547:FreeRTOS/tasks.c ****         #if ( configUSE_TRACE_FACILITY != 1 )
4548:FreeRTOS/tasks.c ****             {
4549:FreeRTOS/tasks.c ****                 #error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vT
4550:FreeRTOS/tasks.c ****             }
4551:FreeRTOS/tasks.c ****         #endif
4552:FreeRTOS/tasks.c **** 
4553:FreeRTOS/tasks.c ****         /*
4554:FreeRTOS/tasks.c ****          * PLEASE NOTE:
4555:FreeRTOS/tasks.c ****          *
4556:FreeRTOS/tasks.c ****          * This function is provided for convenience only, and is used by many
4557:FreeRTOS/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4558:FreeRTOS/tasks.c ****          * scheduler.
4559:FreeRTOS/tasks.c ****          *
4560:FreeRTOS/tasks.c ****          * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4561:FreeRTOS/tasks.c ****          * of the uxTaskGetSystemState() output into a human readable table that
4562:FreeRTOS/tasks.c ****          * displays the amount of time each task has spent in the Running state
4563:FreeRTOS/tasks.c ****          * in both absolute and percentage terms.
4564:FreeRTOS/tasks.c ****          *
4565:FreeRTOS/tasks.c ****          * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4566:FreeRTOS/tasks.c ****          * function that might bloat the code size, use a lot of stack, and
4567:FreeRTOS/tasks.c ****          * provide different results on different platforms.  An alternative,
4568:FreeRTOS/tasks.c ****          * tiny, third party, and limited functionality implementation of
4569:FreeRTOS/tasks.c ****          * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4570:FreeRTOS/tasks.c ****          * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4571:FreeRTOS/tasks.c ****          * a full snprintf() implementation!).
4572:FreeRTOS/tasks.c ****          *
4573:FreeRTOS/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4574:FreeRTOS/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4575:FreeRTOS/tasks.c ****          * through a call to vTaskGetRunTimeStats().
4576:FreeRTOS/tasks.c ****          */
4577:FreeRTOS/tasks.c **** 
4578:FreeRTOS/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4579:FreeRTOS/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4580:FreeRTOS/tasks.c **** 
4581:FreeRTOS/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4582:FreeRTOS/tasks.c ****          * function is executing. */
4583:FreeRTOS/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4584:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 103


4585:FreeRTOS/tasks.c ****         /* Allocate an array index for each task.  NOTE!  If
4586:FreeRTOS/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4587:FreeRTOS/tasks.c ****          * equate to NULL. */
4588:FreeRTOS/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4589:FreeRTOS/tasks.c **** 
4590:FreeRTOS/tasks.c ****         if( pxTaskStatusArray != NULL )
4591:FreeRTOS/tasks.c ****         {
4592:FreeRTOS/tasks.c ****             /* Generate the (binary) data. */
4593:FreeRTOS/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4594:FreeRTOS/tasks.c **** 
4595:FreeRTOS/tasks.c ****             /* For percentage calculations. */
4596:FreeRTOS/tasks.c ****             ulTotalTime /= 100UL;
4597:FreeRTOS/tasks.c **** 
4598:FreeRTOS/tasks.c ****             /* Avoid divide by zero errors. */
4599:FreeRTOS/tasks.c ****             if( ulTotalTime > 0UL )
4600:FreeRTOS/tasks.c ****             {
4601:FreeRTOS/tasks.c ****                 /* Create a human readable table from the binary data. */
4602:FreeRTOS/tasks.c ****                 for( x = 0; x < uxArraySize; x++ )
4603:FreeRTOS/tasks.c ****                 {
4604:FreeRTOS/tasks.c ****                     /* What percentage of the total run time has the task used?
4605:FreeRTOS/tasks.c ****                      * This will always be rounded down to the nearest integer.
4606:FreeRTOS/tasks.c ****                      * ulTotalRunTimeDiv100 has already been divided by 100. */
4607:FreeRTOS/tasks.c ****                     ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4608:FreeRTOS/tasks.c **** 
4609:FreeRTOS/tasks.c ****                     /* Write the task name to the string, padding with
4610:FreeRTOS/tasks.c ****                      * spaces so it can be printed in tabular form more
4611:FreeRTOS/tasks.c ****                      * easily. */
4612:FreeRTOS/tasks.c ****                     pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcT
4613:FreeRTOS/tasks.c **** 
4614:FreeRTOS/tasks.c ****                     if( ulStatsAsPercentage > 0UL )
4615:FreeRTOS/tasks.c ****                     {
4616:FreeRTOS/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4617:FreeRTOS/tasks.c ****                             {
4618:FreeRTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x 
4619:FreeRTOS/tasks.c ****                             }
4620:FreeRTOS/tasks.c ****                         #else
4621:FreeRTOS/tasks.c ****                             {
4622:FreeRTOS/tasks.c ****                                 /* sizeof( int ) == sizeof( long ) so a smaller
4623:FreeRTOS/tasks.c ****                                  * printf() library can be used. */
4624:FreeRTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTask
4625:FreeRTOS/tasks.c ****                             }
4626:FreeRTOS/tasks.c ****                         #endif
4627:FreeRTOS/tasks.c ****                     }
4628:FreeRTOS/tasks.c ****                     else
4629:FreeRTOS/tasks.c ****                     {
4630:FreeRTOS/tasks.c ****                         /* If the percentage is zero here then the task has
4631:FreeRTOS/tasks.c ****                          * consumed less than 1% of the total run time. */
4632:FreeRTOS/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4633:FreeRTOS/tasks.c ****                             {
4634:FreeRTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ]
4635:FreeRTOS/tasks.c ****                             }
4636:FreeRTOS/tasks.c ****                         #else
4637:FreeRTOS/tasks.c ****                             {
4638:FreeRTOS/tasks.c ****                                 /* sizeof( int ) == sizeof( long ) so a smaller
4639:FreeRTOS/tasks.c ****                                  * printf() library can be used. */
4640:FreeRTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTask
4641:FreeRTOS/tasks.c ****                             }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 104


4642:FreeRTOS/tasks.c ****                         #endif
4643:FreeRTOS/tasks.c ****                     }
4644:FreeRTOS/tasks.c **** 
4645:FreeRTOS/tasks.c ****                     pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok o
4646:FreeRTOS/tasks.c ****                 }
4647:FreeRTOS/tasks.c ****             }
4648:FreeRTOS/tasks.c ****             else
4649:FreeRTOS/tasks.c ****             {
4650:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4651:FreeRTOS/tasks.c ****             }
4652:FreeRTOS/tasks.c **** 
4653:FreeRTOS/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4654:FreeRTOS/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4655:FreeRTOS/tasks.c ****             vPortFree( pxTaskStatusArray );
4656:FreeRTOS/tasks.c ****         }
4657:FreeRTOS/tasks.c ****         else
4658:FreeRTOS/tasks.c ****         {
4659:FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4660:FreeRTOS/tasks.c ****         }
4661:FreeRTOS/tasks.c ****     }
4662:FreeRTOS/tasks.c **** 
4663:FreeRTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4664:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4665:FreeRTOS/tasks.c **** 
4666:FreeRTOS/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4667:FreeRTOS/tasks.c **** {
4668:FreeRTOS/tasks.c ****     TickType_t uxReturn;
4669:FreeRTOS/tasks.c **** 
4670:FreeRTOS/tasks.c ****     uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4671:FreeRTOS/tasks.c **** 
4672:FreeRTOS/tasks.c ****     /* Reset the event list item to its normal value - so it can be used with
4673:FreeRTOS/tasks.c ****      * queues and semaphores. */
4674:FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITI
4675:FreeRTOS/tasks.c **** 
4676:FreeRTOS/tasks.c ****     return uxReturn;
4677:FreeRTOS/tasks.c **** }
4678:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4679:FreeRTOS/tasks.c **** 
4680:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4681:FreeRTOS/tasks.c **** 
4682:FreeRTOS/tasks.c ****     TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4683:FreeRTOS/tasks.c ****     {
4684:FreeRTOS/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
4685:FreeRTOS/tasks.c ****          * then pxCurrentTCB will be NULL. */
4686:FreeRTOS/tasks.c ****         if( pxCurrentTCB != NULL )
4687:FreeRTOS/tasks.c ****         {
4688:FreeRTOS/tasks.c ****             ( pxCurrentTCB->uxMutexesHeld )++;
4689:FreeRTOS/tasks.c ****         }
4690:FreeRTOS/tasks.c **** 
4691:FreeRTOS/tasks.c ****         return pxCurrentTCB;
4692:FreeRTOS/tasks.c ****     }
4693:FreeRTOS/tasks.c **** 
4694:FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4695:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4696:FreeRTOS/tasks.c **** 
4697:FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4698:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 105


4699:FreeRTOS/tasks.c ****     uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
4700:FreeRTOS/tasks.c ****                                       BaseType_t xClearCountOnExit,
4701:FreeRTOS/tasks.c ****                                       TickType_t xTicksToWait )
4702:FreeRTOS/tasks.c ****     {
4703:FreeRTOS/tasks.c ****         uint32_t ulReturn;
4704:FreeRTOS/tasks.c **** 
4705:FreeRTOS/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4706:FreeRTOS/tasks.c **** 
4707:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4708:FreeRTOS/tasks.c ****         {
4709:FreeRTOS/tasks.c ****             /* Only block if the notification count is not already non-zero. */
4710:FreeRTOS/tasks.c ****             if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
4711:FreeRTOS/tasks.c ****             {
4712:FreeRTOS/tasks.c ****                 /* Mark this task as waiting for a notification. */
4713:FreeRTOS/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
4714:FreeRTOS/tasks.c **** 
4715:FreeRTOS/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
4716:FreeRTOS/tasks.c ****                 {
4717:FreeRTOS/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4718:FreeRTOS/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
4719:FreeRTOS/tasks.c **** 
4720:FreeRTOS/tasks.c ****                     /* All ports are written to allow a yield in a critical
4721:FreeRTOS/tasks.c ****                      * section (some will yield immediately, others wait until the
4722:FreeRTOS/tasks.c ****                      * critical section exits) - but it is not something that
4723:FreeRTOS/tasks.c ****                      * application code should ever do. */
4724:FreeRTOS/tasks.c ****                     portYIELD_WITHIN_API();
4725:FreeRTOS/tasks.c ****                 }
4726:FreeRTOS/tasks.c ****                 else
4727:FreeRTOS/tasks.c ****                 {
4728:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4729:FreeRTOS/tasks.c ****                 }
4730:FreeRTOS/tasks.c ****             }
4731:FreeRTOS/tasks.c ****             else
4732:FreeRTOS/tasks.c ****             {
4733:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4734:FreeRTOS/tasks.c ****             }
4735:FreeRTOS/tasks.c ****         }
4736:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
4737:FreeRTOS/tasks.c **** 
4738:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4739:FreeRTOS/tasks.c ****         {
4740:FreeRTOS/tasks.c ****             traceTASK_NOTIFY_TAKE( uxIndexToWait );
4741:FreeRTOS/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
4742:FreeRTOS/tasks.c **** 
4743:FreeRTOS/tasks.c ****             if( ulReturn != 0UL )
4744:FreeRTOS/tasks.c ****             {
4745:FreeRTOS/tasks.c ****                 if( xClearCountOnExit != pdFALSE )
4746:FreeRTOS/tasks.c ****                 {
4747:FreeRTOS/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
4748:FreeRTOS/tasks.c ****                 }
4749:FreeRTOS/tasks.c ****                 else
4750:FreeRTOS/tasks.c ****                 {
4751:FreeRTOS/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
4752:FreeRTOS/tasks.c ****                 }
4753:FreeRTOS/tasks.c ****             }
4754:FreeRTOS/tasks.c ****             else
4755:FreeRTOS/tasks.c ****             {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 106


4756:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4757:FreeRTOS/tasks.c ****             }
4758:FreeRTOS/tasks.c **** 
4759:FreeRTOS/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
4760:FreeRTOS/tasks.c ****         }
4761:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
4762:FreeRTOS/tasks.c **** 
4763:FreeRTOS/tasks.c ****         return ulReturn;
4764:FreeRTOS/tasks.c ****     }
4765:FreeRTOS/tasks.c **** 
4766:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4767:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4768:FreeRTOS/tasks.c **** 
4769:FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4770:FreeRTOS/tasks.c **** 
4771:FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
4772:FreeRTOS/tasks.c ****                                        uint32_t ulBitsToClearOnEntry,
4773:FreeRTOS/tasks.c ****                                        uint32_t ulBitsToClearOnExit,
4774:FreeRTOS/tasks.c ****                                        uint32_t * pulNotificationValue,
4775:FreeRTOS/tasks.c ****                                        TickType_t xTicksToWait )
4776:FreeRTOS/tasks.c ****     {
4777:FreeRTOS/tasks.c ****         BaseType_t xReturn;
4778:FreeRTOS/tasks.c **** 
4779:FreeRTOS/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4780:FreeRTOS/tasks.c **** 
4781:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4782:FreeRTOS/tasks.c ****         {
4783:FreeRTOS/tasks.c ****             /* Only block if a notification is not already pending. */
4784:FreeRTOS/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
4785:FreeRTOS/tasks.c ****             {
4786:FreeRTOS/tasks.c ****                 /* Clear bits in the task's notification value as bits may get
4787:FreeRTOS/tasks.c ****                  * set  by the notifying task or interrupt.  This can be used to
4788:FreeRTOS/tasks.c ****                  * clear the value to zero. */
4789:FreeRTOS/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
4790:FreeRTOS/tasks.c **** 
4791:FreeRTOS/tasks.c ****                 /* Mark this task as waiting for a notification. */
4792:FreeRTOS/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
4793:FreeRTOS/tasks.c **** 
4794:FreeRTOS/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
4795:FreeRTOS/tasks.c ****                 {
4796:FreeRTOS/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4797:FreeRTOS/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
4798:FreeRTOS/tasks.c **** 
4799:FreeRTOS/tasks.c ****                     /* All ports are written to allow a yield in a critical
4800:FreeRTOS/tasks.c ****                      * section (some will yield immediately, others wait until the
4801:FreeRTOS/tasks.c ****                      * critical section exits) - but it is not something that
4802:FreeRTOS/tasks.c ****                      * application code should ever do. */
4803:FreeRTOS/tasks.c ****                     portYIELD_WITHIN_API();
4804:FreeRTOS/tasks.c ****                 }
4805:FreeRTOS/tasks.c ****                 else
4806:FreeRTOS/tasks.c ****                 {
4807:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4808:FreeRTOS/tasks.c ****                 }
4809:FreeRTOS/tasks.c ****             }
4810:FreeRTOS/tasks.c ****             else
4811:FreeRTOS/tasks.c ****             {
4812:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 107


4813:FreeRTOS/tasks.c ****             }
4814:FreeRTOS/tasks.c ****         }
4815:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
4816:FreeRTOS/tasks.c **** 
4817:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4818:FreeRTOS/tasks.c ****         {
4819:FreeRTOS/tasks.c ****             traceTASK_NOTIFY_WAIT( uxIndexToWait );
4820:FreeRTOS/tasks.c **** 
4821:FreeRTOS/tasks.c ****             if( pulNotificationValue != NULL )
4822:FreeRTOS/tasks.c ****             {
4823:FreeRTOS/tasks.c ****                 /* Output the current notification value, which may or may not
4824:FreeRTOS/tasks.c ****                  * have changed. */
4825:FreeRTOS/tasks.c ****                 *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
4826:FreeRTOS/tasks.c ****             }
4827:FreeRTOS/tasks.c **** 
4828:FreeRTOS/tasks.c ****             /* If ucNotifyValue is set then either the task never entered the
4829:FreeRTOS/tasks.c ****              * blocked state (because a notification was already pending) or the
4830:FreeRTOS/tasks.c ****              * task unblocked because of a notification.  Otherwise the task
4831:FreeRTOS/tasks.c ****              * unblocked because of a timeout. */
4832:FreeRTOS/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
4833:FreeRTOS/tasks.c ****             {
4834:FreeRTOS/tasks.c ****                 /* A notification was not received. */
4835:FreeRTOS/tasks.c ****                 xReturn = pdFALSE;
4836:FreeRTOS/tasks.c ****             }
4837:FreeRTOS/tasks.c ****             else
4838:FreeRTOS/tasks.c ****             {
4839:FreeRTOS/tasks.c ****                 /* A notification was already pending or a notification was
4840:FreeRTOS/tasks.c ****                  * received while the task was waiting. */
4841:FreeRTOS/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
4842:FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
4843:FreeRTOS/tasks.c ****             }
4844:FreeRTOS/tasks.c **** 
4845:FreeRTOS/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
4846:FreeRTOS/tasks.c ****         }
4847:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
4848:FreeRTOS/tasks.c **** 
4849:FreeRTOS/tasks.c ****         return xReturn;
4850:FreeRTOS/tasks.c ****     }
4851:FreeRTOS/tasks.c **** 
4852:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4853:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4854:FreeRTOS/tasks.c **** 
4855:FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4856:FreeRTOS/tasks.c **** 
4857:FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
4858:FreeRTOS/tasks.c ****                                    UBaseType_t uxIndexToNotify,
4859:FreeRTOS/tasks.c ****                                    uint32_t ulValue,
4860:FreeRTOS/tasks.c ****                                    eNotifyAction eAction,
4861:FreeRTOS/tasks.c ****                                    uint32_t * pulPreviousNotificationValue )
4862:FreeRTOS/tasks.c ****     {
4863:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
4864:FreeRTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
4865:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
4866:FreeRTOS/tasks.c **** 
4867:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4868:FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
4869:FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 108


4870:FreeRTOS/tasks.c **** 
4871:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4872:FreeRTOS/tasks.c ****         {
4873:FreeRTOS/tasks.c ****             if( pulPreviousNotificationValue != NULL )
4874:FreeRTOS/tasks.c ****             {
4875:FreeRTOS/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
4876:FreeRTOS/tasks.c ****             }
4877:FreeRTOS/tasks.c **** 
4878:FreeRTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
4879:FreeRTOS/tasks.c **** 
4880:FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
4881:FreeRTOS/tasks.c **** 
4882:FreeRTOS/tasks.c ****             switch( eAction )
4883:FreeRTOS/tasks.c ****             {
4884:FreeRTOS/tasks.c ****                 case eSetBits:
4885:FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
4886:FreeRTOS/tasks.c ****                     break;
4887:FreeRTOS/tasks.c **** 
4888:FreeRTOS/tasks.c ****                 case eIncrement:
4889:FreeRTOS/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
4890:FreeRTOS/tasks.c ****                     break;
4891:FreeRTOS/tasks.c **** 
4892:FreeRTOS/tasks.c ****                 case eSetValueWithOverwrite:
4893:FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
4894:FreeRTOS/tasks.c ****                     break;
4895:FreeRTOS/tasks.c **** 
4896:FreeRTOS/tasks.c ****                 case eSetValueWithoutOverwrite:
4897:FreeRTOS/tasks.c **** 
4898:FreeRTOS/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4899:FreeRTOS/tasks.c ****                     {
4900:FreeRTOS/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
4901:FreeRTOS/tasks.c ****                     }
4902:FreeRTOS/tasks.c ****                     else
4903:FreeRTOS/tasks.c ****                     {
4904:FreeRTOS/tasks.c ****                         /* The value could not be written to the task. */
4905:FreeRTOS/tasks.c ****                         xReturn = pdFAIL;
4906:FreeRTOS/tasks.c ****                     }
4907:FreeRTOS/tasks.c **** 
4908:FreeRTOS/tasks.c ****                     break;
4909:FreeRTOS/tasks.c **** 
4910:FreeRTOS/tasks.c ****                 case eNoAction:
4911:FreeRTOS/tasks.c **** 
4912:FreeRTOS/tasks.c ****                     /* The task is being notified without its notify value being
4913:FreeRTOS/tasks.c ****                      * updated. */
4914:FreeRTOS/tasks.c ****                     break;
4915:FreeRTOS/tasks.c **** 
4916:FreeRTOS/tasks.c ****                 default:
4917:FreeRTOS/tasks.c **** 
4918:FreeRTOS/tasks.c ****                     /* Should not get here if all enums are handled.
4919:FreeRTOS/tasks.c ****                      * Artificially force an assert by testing a value the
4920:FreeRTOS/tasks.c ****                      * compiler can't assume is const. */
4921:FreeRTOS/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
4922:FreeRTOS/tasks.c **** 
4923:FreeRTOS/tasks.c ****                     break;
4924:FreeRTOS/tasks.c ****             }
4925:FreeRTOS/tasks.c **** 
4926:FreeRTOS/tasks.c ****             traceTASK_NOTIFY( uxIndexToNotify );
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 109


4927:FreeRTOS/tasks.c **** 
4928:FreeRTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
4929:FreeRTOS/tasks.c ****              * notification then unblock it now. */
4930:FreeRTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4931:FreeRTOS/tasks.c ****             {
4932:FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4933:FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
4934:FreeRTOS/tasks.c **** 
4935:FreeRTOS/tasks.c ****                 /* The task should not have been on an event list. */
4936:FreeRTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4937:FreeRTOS/tasks.c **** 
4938:FreeRTOS/tasks.c ****                 #if ( configUSE_TICKLESS_IDLE != 0 )
4939:FreeRTOS/tasks.c ****                     {
4940:FreeRTOS/tasks.c ****                         /* If a task is blocked waiting for a notification then
4941:FreeRTOS/tasks.c ****                          * xNextTaskUnblockTime might be set to the blocked task's time
4942:FreeRTOS/tasks.c ****                          * out time.  If the task is unblocked for a reason other than
4943:FreeRTOS/tasks.c ****                          * a timeout xNextTaskUnblockTime is normally left unchanged,
4944:FreeRTOS/tasks.c ****                          * because it will automatically get reset to a new value when
4945:FreeRTOS/tasks.c ****                          * the tick count equals xNextTaskUnblockTime.  However if
4946:FreeRTOS/tasks.c ****                          * tickless idling is used it might be more important to enter
4947:FreeRTOS/tasks.c ****                          * sleep mode at the earliest possible time - so reset
4948:FreeRTOS/tasks.c ****                          * xNextTaskUnblockTime here to ensure it is updated at the
4949:FreeRTOS/tasks.c ****                          * earliest possible time. */
4950:FreeRTOS/tasks.c ****                         prvResetNextTaskUnblockTime();
4951:FreeRTOS/tasks.c ****                     }
4952:FreeRTOS/tasks.c ****                 #endif
4953:FreeRTOS/tasks.c **** 
4954:FreeRTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4955:FreeRTOS/tasks.c ****                 {
4956:FreeRTOS/tasks.c ****                     /* The notified task has a priority above the currently
4957:FreeRTOS/tasks.c ****                      * executing task so a yield is required. */
4958:FreeRTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
4959:FreeRTOS/tasks.c ****                 }
4960:FreeRTOS/tasks.c ****                 else
4961:FreeRTOS/tasks.c ****                 {
4962:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4963:FreeRTOS/tasks.c ****                 }
4964:FreeRTOS/tasks.c ****             }
4965:FreeRTOS/tasks.c ****             else
4966:FreeRTOS/tasks.c ****             {
4967:FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4968:FreeRTOS/tasks.c ****             }
4969:FreeRTOS/tasks.c ****         }
4970:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
4971:FreeRTOS/tasks.c **** 
4972:FreeRTOS/tasks.c ****         return xReturn;
4973:FreeRTOS/tasks.c ****     }
4974:FreeRTOS/tasks.c **** 
4975:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4976:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4977:FreeRTOS/tasks.c **** 
4978:FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4979:FreeRTOS/tasks.c **** 
4980:FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
4981:FreeRTOS/tasks.c ****                                           UBaseType_t uxIndexToNotify,
4982:FreeRTOS/tasks.c ****                                           uint32_t ulValue,
4983:FreeRTOS/tasks.c ****                                           eNotifyAction eAction,
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 110


4984:FreeRTOS/tasks.c ****                                           uint32_t * pulPreviousNotificationValue,
4985:FreeRTOS/tasks.c ****                                           BaseType_t * pxHigherPriorityTaskWoken )
4986:FreeRTOS/tasks.c ****     {
4987:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
4988:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
4989:FreeRTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
4990:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
4991:FreeRTOS/tasks.c **** 
4992:FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
4993:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4994:FreeRTOS/tasks.c **** 
4995:FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
4996:FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
4997:FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
4998:FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
4999:FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5000:FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
5001:FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5002:FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
5003:FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
5004:FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
5005:FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
5006:FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
5007:FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5008:FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5009:FreeRTOS/tasks.c ****          * provided on the following link:
5010:FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5011:FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5012:FreeRTOS/tasks.c **** 
5013:FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
5014:FreeRTOS/tasks.c **** 
5015:FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5016:FreeRTOS/tasks.c ****         {
5017:FreeRTOS/tasks.c ****             if( pulPreviousNotificationValue != NULL )
5018:FreeRTOS/tasks.c ****             {
5019:FreeRTOS/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
5020:FreeRTOS/tasks.c ****             }
5021:FreeRTOS/tasks.c **** 
5022:FreeRTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
5023:FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
5024:FreeRTOS/tasks.c **** 
5025:FreeRTOS/tasks.c ****             switch( eAction )
5026:FreeRTOS/tasks.c ****             {
5027:FreeRTOS/tasks.c ****                 case eSetBits:
5028:FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
5029:FreeRTOS/tasks.c ****                     break;
5030:FreeRTOS/tasks.c **** 
5031:FreeRTOS/tasks.c ****                 case eIncrement:
5032:FreeRTOS/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
5033:FreeRTOS/tasks.c ****                     break;
5034:FreeRTOS/tasks.c **** 
5035:FreeRTOS/tasks.c ****                 case eSetValueWithOverwrite:
5036:FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
5037:FreeRTOS/tasks.c ****                     break;
5038:FreeRTOS/tasks.c **** 
5039:FreeRTOS/tasks.c ****                 case eSetValueWithoutOverwrite:
5040:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 111


5041:FreeRTOS/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
5042:FreeRTOS/tasks.c ****                     {
5043:FreeRTOS/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
5044:FreeRTOS/tasks.c ****                     }
5045:FreeRTOS/tasks.c ****                     else
5046:FreeRTOS/tasks.c ****                     {
5047:FreeRTOS/tasks.c ****                         /* The value could not be written to the task. */
5048:FreeRTOS/tasks.c ****                         xReturn = pdFAIL;
5049:FreeRTOS/tasks.c ****                     }
5050:FreeRTOS/tasks.c **** 
5051:FreeRTOS/tasks.c ****                     break;
5052:FreeRTOS/tasks.c **** 
5053:FreeRTOS/tasks.c ****                 case eNoAction:
5054:FreeRTOS/tasks.c **** 
5055:FreeRTOS/tasks.c ****                     /* The task is being notified without its notify value being
5056:FreeRTOS/tasks.c ****                      * updated. */
5057:FreeRTOS/tasks.c ****                     break;
5058:FreeRTOS/tasks.c **** 
5059:FreeRTOS/tasks.c ****                 default:
5060:FreeRTOS/tasks.c **** 
5061:FreeRTOS/tasks.c ****                     /* Should not get here if all enums are handled.
5062:FreeRTOS/tasks.c ****                      * Artificially force an assert by testing a value the
5063:FreeRTOS/tasks.c ****                      * compiler can't assume is const. */
5064:FreeRTOS/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
5065:FreeRTOS/tasks.c ****                     break;
5066:FreeRTOS/tasks.c ****             }
5067:FreeRTOS/tasks.c **** 
5068:FreeRTOS/tasks.c ****             traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );
5069:FreeRTOS/tasks.c **** 
5070:FreeRTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5071:FreeRTOS/tasks.c ****              * notification then unblock it now. */
5072:FreeRTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5073:FreeRTOS/tasks.c ****             {
5074:FreeRTOS/tasks.c ****                 /* The task should not have been on an event list. */
5075:FreeRTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5076:FreeRTOS/tasks.c **** 
5077:FreeRTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5078:FreeRTOS/tasks.c ****                 {
5079:FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5080:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
5081:FreeRTOS/tasks.c ****                 }
5082:FreeRTOS/tasks.c ****                 else
5083:FreeRTOS/tasks.c ****                 {
5084:FreeRTOS/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5085:FreeRTOS/tasks.c ****                      * this task pending until the scheduler is resumed. */
5086:FreeRTOS/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5087:FreeRTOS/tasks.c ****                 }
5088:FreeRTOS/tasks.c **** 
5089:FreeRTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5090:FreeRTOS/tasks.c ****                 {
5091:FreeRTOS/tasks.c ****                     /* The notified task has a priority above the currently
5092:FreeRTOS/tasks.c ****                      * executing task so a yield is required. */
5093:FreeRTOS/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
5094:FreeRTOS/tasks.c ****                     {
5095:FreeRTOS/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
5096:FreeRTOS/tasks.c ****                     }
5097:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 112


5098:FreeRTOS/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5099:FreeRTOS/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter to an ISR
5100:FreeRTOS/tasks.c ****                      * safe FreeRTOS function. */
5101:FreeRTOS/tasks.c ****                     xYieldPending = pdTRUE;
5102:FreeRTOS/tasks.c ****                 }
5103:FreeRTOS/tasks.c ****                 else
5104:FreeRTOS/tasks.c ****                 {
5105:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5106:FreeRTOS/tasks.c ****                 }
5107:FreeRTOS/tasks.c ****             }
5108:FreeRTOS/tasks.c ****         }
5109:FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5110:FreeRTOS/tasks.c **** 
5111:FreeRTOS/tasks.c ****         return xReturn;
5112:FreeRTOS/tasks.c ****     }
5113:FreeRTOS/tasks.c **** 
5114:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5115:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5116:FreeRTOS/tasks.c **** 
5117:FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5118:FreeRTOS/tasks.c **** 
5119:FreeRTOS/tasks.c ****     void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
5120:FreeRTOS/tasks.c ****                                         UBaseType_t uxIndexToNotify,
5121:FreeRTOS/tasks.c ****                                         BaseType_t * pxHigherPriorityTaskWoken )
5122:FreeRTOS/tasks.c ****     {
5123:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
5124:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
5125:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
5126:FreeRTOS/tasks.c **** 
5127:FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
5128:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5129:FreeRTOS/tasks.c **** 
5130:FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
5131:FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
5132:FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
5133:FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
5134:FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5135:FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
5136:FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5137:FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
5138:FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
5139:FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
5140:FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
5141:FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
5142:FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5143:FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5144:FreeRTOS/tasks.c ****          * provided on the following link:
5145:FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5146:FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5147:FreeRTOS/tasks.c **** 
5148:FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
5149:FreeRTOS/tasks.c **** 
5150:FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5151:FreeRTOS/tasks.c ****         {
5152:FreeRTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
5153:FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
5154:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 113


5155:FreeRTOS/tasks.c ****             /* 'Giving' is equivalent to incrementing a count in a counting
5156:FreeRTOS/tasks.c ****              * semaphore. */
5157:FreeRTOS/tasks.c ****             ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
5158:FreeRTOS/tasks.c **** 
5159:FreeRTOS/tasks.c ****             traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );
5160:FreeRTOS/tasks.c **** 
5161:FreeRTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5162:FreeRTOS/tasks.c ****              * notification then unblock it now. */
5163:FreeRTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5164:FreeRTOS/tasks.c ****             {
5165:FreeRTOS/tasks.c ****                 /* The task should not have been on an event list. */
5166:FreeRTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5167:FreeRTOS/tasks.c **** 
5168:FreeRTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5169:FreeRTOS/tasks.c ****                 {
5170:FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5171:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
5172:FreeRTOS/tasks.c ****                 }
5173:FreeRTOS/tasks.c ****                 else
5174:FreeRTOS/tasks.c ****                 {
5175:FreeRTOS/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5176:FreeRTOS/tasks.c ****                      * this task pending until the scheduler is resumed. */
5177:FreeRTOS/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5178:FreeRTOS/tasks.c ****                 }
5179:FreeRTOS/tasks.c **** 
5180:FreeRTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5181:FreeRTOS/tasks.c ****                 {
5182:FreeRTOS/tasks.c ****                     /* The notified task has a priority above the currently
5183:FreeRTOS/tasks.c ****                      * executing task so a yield is required. */
5184:FreeRTOS/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
5185:FreeRTOS/tasks.c ****                     {
5186:FreeRTOS/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
5187:FreeRTOS/tasks.c ****                     }
5188:FreeRTOS/tasks.c **** 
5189:FreeRTOS/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5190:FreeRTOS/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter in an ISR
5191:FreeRTOS/tasks.c ****                      * safe FreeRTOS function. */
5192:FreeRTOS/tasks.c ****                     xYieldPending = pdTRUE;
5193:FreeRTOS/tasks.c ****                 }
5194:FreeRTOS/tasks.c ****                 else
5195:FreeRTOS/tasks.c ****                 {
5196:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5197:FreeRTOS/tasks.c ****                 }
5198:FreeRTOS/tasks.c ****             }
5199:FreeRTOS/tasks.c ****         }
5200:FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5201:FreeRTOS/tasks.c ****     }
5202:FreeRTOS/tasks.c **** 
5203:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5204:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5205:FreeRTOS/tasks.c **** 
5206:FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5207:FreeRTOS/tasks.c **** 
5208:FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
5209:FreeRTOS/tasks.c ****                                              UBaseType_t uxIndexToClear )
5210:FreeRTOS/tasks.c ****     {
5211:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 114


5212:FreeRTOS/tasks.c ****         BaseType_t xReturn;
5213:FreeRTOS/tasks.c **** 
5214:FreeRTOS/tasks.c ****         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5215:FreeRTOS/tasks.c **** 
5216:FreeRTOS/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5217:FreeRTOS/tasks.c ****          * its notification state cleared. */
5218:FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
5219:FreeRTOS/tasks.c **** 
5220:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
5221:FreeRTOS/tasks.c ****         {
5222:FreeRTOS/tasks.c ****             if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
5223:FreeRTOS/tasks.c ****             {
5224:FreeRTOS/tasks.c ****                 pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
5225:FreeRTOS/tasks.c ****                 xReturn = pdPASS;
5226:FreeRTOS/tasks.c ****             }
5227:FreeRTOS/tasks.c ****             else
5228:FreeRTOS/tasks.c ****             {
5229:FreeRTOS/tasks.c ****                 xReturn = pdFAIL;
5230:FreeRTOS/tasks.c ****             }
5231:FreeRTOS/tasks.c ****         }
5232:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
5233:FreeRTOS/tasks.c **** 
5234:FreeRTOS/tasks.c ****         return xReturn;
5235:FreeRTOS/tasks.c ****     }
5236:FreeRTOS/tasks.c **** 
5237:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5238:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5239:FreeRTOS/tasks.c **** 
5240:FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5241:FreeRTOS/tasks.c **** 
5242:FreeRTOS/tasks.c ****     uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
5243:FreeRTOS/tasks.c ****                                             UBaseType_t uxIndexToClear,
5244:FreeRTOS/tasks.c ****                                             uint32_t ulBitsToClear )
5245:FreeRTOS/tasks.c ****     {
5246:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
5247:FreeRTOS/tasks.c ****         uint32_t ulReturn;
5248:FreeRTOS/tasks.c **** 
5249:FreeRTOS/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5250:FreeRTOS/tasks.c ****          * its notification state cleared. */
5251:FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
5252:FreeRTOS/tasks.c **** 
5253:FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
5254:FreeRTOS/tasks.c ****         {
5255:FreeRTOS/tasks.c ****             /* Return the notification as it was before the bits were cleared,
5256:FreeRTOS/tasks.c ****              * then clear the bit mask. */
5257:FreeRTOS/tasks.c ****             ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
5258:FreeRTOS/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
5259:FreeRTOS/tasks.c ****         }
5260:FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
5261:FreeRTOS/tasks.c **** 
5262:FreeRTOS/tasks.c ****         return ulReturn;
5263:FreeRTOS/tasks.c ****     }
5264:FreeRTOS/tasks.c **** 
5265:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5266:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5267:FreeRTOS/tasks.c **** 
5268:FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 115


5269:FreeRTOS/tasks.c **** 
5270:FreeRTOS/tasks.c ****     uint32_t ulTaskGetIdleRunTimeCounter( void )
5271:FreeRTOS/tasks.c ****     {
5272:FreeRTOS/tasks.c ****         return xIdleTaskHandle->ulRunTimeCounter;
5273:FreeRTOS/tasks.c ****     }
5274:FreeRTOS/tasks.c **** 
5275:FreeRTOS/tasks.c **** #endif
5276:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5277:FreeRTOS/tasks.c **** 
5278:FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
5279:FreeRTOS/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely )
5280:FreeRTOS/tasks.c **** {
 877              		.loc 1 5280 1 view -0
 878              		.cfi_startproc
 879              		@ args = 0, pretend = 0, frame = 0
 880              		@ frame_needed = 0, uses_anonymous_args = 0
 881              		.loc 1 5280 1 is_stmt 0 view .LVU257
 882 0000 70B5     		push	{r4, r5, r6, lr}
 883              	.LCFI9:
 884              		.cfi_def_cfa_offset 16
 885              		.cfi_offset 4, -16
 886              		.cfi_offset 5, -12
 887              		.cfi_offset 6, -8
 888              		.cfi_offset 14, -4
 889 0002 0446     		mov	r4, r0
 890 0004 0D46     		mov	r5, r1
5281:FreeRTOS/tasks.c ****     TickType_t xTimeToWake;
 891              		.loc 1 5281 5 is_stmt 1 view .LVU258
5282:FreeRTOS/tasks.c ****     const TickType_t xConstTickCount = xTickCount;
 892              		.loc 1 5282 5 view .LVU259
 893              		.loc 1 5282 22 is_stmt 0 view .LVU260
 894 0006 214B     		ldr	r3, .L77
 895 0008 1E68     		ldr	r6, [r3]
 896              	.LVL67:
5283:FreeRTOS/tasks.c **** 
5284:FreeRTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
5285:FreeRTOS/tasks.c ****         {
5286:FreeRTOS/tasks.c ****             /* About to enter a delayed list, so ensure the ucDelayAborted flag is
5287:FreeRTOS/tasks.c ****              * reset to pdFALSE so it can be detected as having been set to pdTRUE
5288:FreeRTOS/tasks.c ****              * when the task leaves the Blocked state. */
5289:FreeRTOS/tasks.c ****             pxCurrentTCB->ucDelayAborted = pdFALSE;
5290:FreeRTOS/tasks.c ****         }
5291:FreeRTOS/tasks.c ****     #endif
5292:FreeRTOS/tasks.c **** 
5293:FreeRTOS/tasks.c ****     /* Remove the task from the ready list before adding it to the blocked list
5294:FreeRTOS/tasks.c ****      * as the same list item is used for both lists. */
5295:FreeRTOS/tasks.c ****     if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 897              		.loc 1 5295 5 is_stmt 1 view .LVU261
 898              		.loc 1 5295 38 is_stmt 0 view .LVU262
 899 000a 214B     		ldr	r3, .L77+4
 900 000c 1868     		ldr	r0, [r3]
 901              	.LVL68:
 902              		.loc 1 5295 9 view .LVU263
 903 000e 0430     		adds	r0, r0, #4
 904 0010 FFF7FEFF 		bl	uxListRemove
 905              	.LVL69:
 906              		.loc 1 5295 7 view .LVU264
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 116


 907 0014 50B9     		cbnz	r0, .L71
5296:FreeRTOS/tasks.c ****     {
5297:FreeRTOS/tasks.c ****         /* The current task must be in a ready list, so there is no need to
5298:FreeRTOS/tasks.c ****          * check, and the port reset macro can be called directly. */
5299:FreeRTOS/tasks.c ****         portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCu
 908              		.loc 1 5299 9 is_stmt 1 view .LVU265
 909 0016 1E4B     		ldr	r3, .L77+4
 910 0018 1B68     		ldr	r3, [r3]
 911 001a DA6A     		ldr	r2, [r3, #44]
 912 001c 0123     		movs	r3, #1
 913 001e 03FA02F2 		lsl	r2, r3, r2
 914 0022 1C49     		ldr	r1, .L77+8
 915 0024 0B68     		ldr	r3, [r1]
 916 0026 23EA0203 		bic	r3, r3, r2
 917 002a 0B60     		str	r3, [r1]
 918              	.L71:
5300:FreeRTOS/tasks.c ****     }
5301:FreeRTOS/tasks.c ****     else
5302:FreeRTOS/tasks.c ****     {
5303:FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 919              		.loc 1 5303 33 view .LVU266
5304:FreeRTOS/tasks.c ****     }
5305:FreeRTOS/tasks.c **** 
5306:FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
5307:FreeRTOS/tasks.c ****         {
5308:FreeRTOS/tasks.c ****             if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 920              		.loc 1 5308 13 view .LVU267
 921              		.loc 1 5308 15 is_stmt 0 view .LVU268
 922 002c B4F1FF3F 		cmp	r4, #-1
 923 0030 11D0     		beq	.L76
 924              	.L72:
5309:FreeRTOS/tasks.c ****             {
5310:FreeRTOS/tasks.c ****                 /* Add the task to the suspended task list instead of a delayed task
5311:FreeRTOS/tasks.c ****                  * list to ensure it is not woken by a timing event.  It will block
5312:FreeRTOS/tasks.c ****                  * indefinitely. */
5313:FreeRTOS/tasks.c ****                 vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
5314:FreeRTOS/tasks.c ****             }
5315:FreeRTOS/tasks.c ****             else
5316:FreeRTOS/tasks.c ****             {
5317:FreeRTOS/tasks.c ****                 /* Calculate the time at which the task should be woken if the event
5318:FreeRTOS/tasks.c ****                  * does not occur.  This may overflow but this doesn't matter, the
5319:FreeRTOS/tasks.c ****                  * kernel will manage it correctly. */
5320:FreeRTOS/tasks.c ****                 xTimeToWake = xConstTickCount + xTicksToWait;
 925              		.loc 1 5320 17 is_stmt 1 view .LVU269
 926              		.loc 1 5320 29 is_stmt 0 view .LVU270
 927 0032 3444     		add	r4, r4, r6
 928              	.LVL70:
5321:FreeRTOS/tasks.c **** 
5322:FreeRTOS/tasks.c ****                 /* The list item will be inserted in wake time order. */
5323:FreeRTOS/tasks.c ****                 listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 929              		.loc 1 5323 17 is_stmt 1 view .LVU271
 930 0034 164B     		ldr	r3, .L77+4
 931 0036 1B68     		ldr	r3, [r3]
 932 0038 5C60     		str	r4, [r3, #4]
5324:FreeRTOS/tasks.c **** 
5325:FreeRTOS/tasks.c ****                 if( xTimeToWake < xConstTickCount )
 933              		.loc 1 5325 17 view .LVU272
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 117


 934              		.loc 1 5325 19 is_stmt 0 view .LVU273
 935 003a A642     		cmp	r6, r4
 936 003c 14D9     		bls	.L74
5326:FreeRTOS/tasks.c ****                 {
5327:FreeRTOS/tasks.c ****                     /* Wake time has overflowed.  Place this item in the overflow
5328:FreeRTOS/tasks.c ****                      * list. */
5329:FreeRTOS/tasks.c ****                     traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 937              		.loc 1 5329 21 is_stmt 1 view .LVU274
 938 003e 144C     		ldr	r4, .L77+4
 939              	.LVL71:
 940              		.loc 1 5329 21 is_stmt 0 view .LVU275
 941 0040 2068     		ldr	r0, [r4]
 942 0042 0421     		movs	r1, #4
 943 0044 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStopReady
 944              	.LVL72:
5330:FreeRTOS/tasks.c ****                     vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 945              		.loc 1 5330 21 is_stmt 1 view .LVU276
 946 0048 134B     		ldr	r3, .L77+12
 947 004a 1868     		ldr	r0, [r3]
 948              		.loc 1 5330 76 is_stmt 0 view .LVU277
 949 004c 2168     		ldr	r1, [r4]
 950              		.loc 1 5330 21 view .LVU278
 951 004e 0431     		adds	r1, r1, #4
 952 0050 FFF7FEFF 		bl	vListInsert
 953              	.LVL73:
 954              	.L70:
5331:FreeRTOS/tasks.c ****                 }
5332:FreeRTOS/tasks.c ****                 else
5333:FreeRTOS/tasks.c ****                 {
5334:FreeRTOS/tasks.c ****                     /* The wake time has not overflowed, so the current block list
5335:FreeRTOS/tasks.c ****                      * is used. */
5336:FreeRTOS/tasks.c ****                     traceMOVED_TASK_TO_DELAYED_LIST();
5337:FreeRTOS/tasks.c ****                     vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5338:FreeRTOS/tasks.c **** 
5339:FreeRTOS/tasks.c ****                     /* If the task entering the blocked state was placed at the
5340:FreeRTOS/tasks.c ****                      * head of the list of blocked tasks then xNextTaskUnblockTime
5341:FreeRTOS/tasks.c ****                      * needs to be updated too. */
5342:FreeRTOS/tasks.c ****                     if( xTimeToWake < xNextTaskUnblockTime )
5343:FreeRTOS/tasks.c ****                     {
5344:FreeRTOS/tasks.c ****                         xNextTaskUnblockTime = xTimeToWake;
5345:FreeRTOS/tasks.c ****                     }
5346:FreeRTOS/tasks.c ****                     else
5347:FreeRTOS/tasks.c ****                     {
5348:FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
5349:FreeRTOS/tasks.c ****                     }
5350:FreeRTOS/tasks.c ****                 }
5351:FreeRTOS/tasks.c ****             }
5352:FreeRTOS/tasks.c ****         }
5353:FreeRTOS/tasks.c ****     #else /* INCLUDE_vTaskSuspend */
5354:FreeRTOS/tasks.c ****         {
5355:FreeRTOS/tasks.c ****             /* Calculate the time at which the task should be woken if the event
5356:FreeRTOS/tasks.c ****              * does not occur.  This may overflow but this doesn't matter, the kernel
5357:FreeRTOS/tasks.c ****              * will manage it correctly. */
5358:FreeRTOS/tasks.c ****             xTimeToWake = xConstTickCount + xTicksToWait;
5359:FreeRTOS/tasks.c **** 
5360:FreeRTOS/tasks.c ****             /* The list item will be inserted in wake time order. */
5361:FreeRTOS/tasks.c ****             listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 118


5362:FreeRTOS/tasks.c **** 
5363:FreeRTOS/tasks.c ****             if( xTimeToWake < xConstTickCount )
5364:FreeRTOS/tasks.c ****             {
5365:FreeRTOS/tasks.c ****                 traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
5366:FreeRTOS/tasks.c ****                 /* Wake time has overflowed.  Place this item in the overflow list. */
5367:FreeRTOS/tasks.c ****                 vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5368:FreeRTOS/tasks.c ****             }
5369:FreeRTOS/tasks.c ****             else
5370:FreeRTOS/tasks.c ****             {
5371:FreeRTOS/tasks.c ****                 traceMOVED_TASK_TO_DELAYED_LIST();
5372:FreeRTOS/tasks.c ****                 /* The wake time has not overflowed, so the current block list is used. */
5373:FreeRTOS/tasks.c ****                 vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5374:FreeRTOS/tasks.c **** 
5375:FreeRTOS/tasks.c ****                 /* If the task entering the blocked state was placed at the head of the
5376:FreeRTOS/tasks.c ****                  * list of blocked tasks then xNextTaskUnblockTime needs to be updated
5377:FreeRTOS/tasks.c ****                  * too. */
5378:FreeRTOS/tasks.c ****                 if( xTimeToWake < xNextTaskUnblockTime )
5379:FreeRTOS/tasks.c ****                 {
5380:FreeRTOS/tasks.c ****                     xNextTaskUnblockTime = xTimeToWake;
5381:FreeRTOS/tasks.c ****                 }
5382:FreeRTOS/tasks.c ****                 else
5383:FreeRTOS/tasks.c ****                 {
5384:FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5385:FreeRTOS/tasks.c ****                 }
5386:FreeRTOS/tasks.c ****             }
5387:FreeRTOS/tasks.c **** 
5388:FreeRTOS/tasks.c ****             /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5389:FreeRTOS/tasks.c ****             ( void ) xCanBlockIndefinitely;
5390:FreeRTOS/tasks.c ****         }
5391:FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
5392:FreeRTOS/tasks.c **** }
 955              		.loc 1 5392 1 view .LVU279
 956 0054 70BD     		pop	{r4, r5, r6, pc}
 957              	.LVL74:
 958              	.L76:
5308:FreeRTOS/tasks.c ****             {
 959              		.loc 1 5308 51 discriminator 1 view .LVU280
 960 0056 002D     		cmp	r5, #0
 961 0058 EBD0     		beq	.L72
5313:FreeRTOS/tasks.c ****             }
 962              		.loc 1 5313 17 is_stmt 1 view .LVU281
5313:FreeRTOS/tasks.c ****             }
 963              		.loc 1 5313 69 is_stmt 0 view .LVU282
 964 005a 0D4B     		ldr	r3, .L77+4
 965 005c 1968     		ldr	r1, [r3]
5313:FreeRTOS/tasks.c ****             }
 966              		.loc 1 5313 17 view .LVU283
 967 005e 0431     		adds	r1, r1, #4
 968 0060 0E48     		ldr	r0, .L77+16
 969 0062 FFF7FEFF 		bl	vListInsertEnd
 970              	.LVL75:
 971 0066 F5E7     		b	.L70
 972              	.LVL76:
 973              	.L74:
5336:FreeRTOS/tasks.c ****                     vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 974              		.loc 1 5336 21 is_stmt 1 view .LVU284
 975 0068 094D     		ldr	r5, .L77+4
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 119


 976              	.LVL77:
5336:FreeRTOS/tasks.c ****                     vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 977              		.loc 1 5336 21 is_stmt 0 view .LVU285
 978 006a 2868     		ldr	r0, [r5]
 979 006c 0421     		movs	r1, #4
 980 006e FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStopReady
 981              	.LVL78:
5337:FreeRTOS/tasks.c **** 
 982              		.loc 1 5337 21 is_stmt 1 view .LVU286
 983 0072 0B4B     		ldr	r3, .L77+20
 984 0074 1868     		ldr	r0, [r3]
5337:FreeRTOS/tasks.c **** 
 985              		.loc 1 5337 68 is_stmt 0 view .LVU287
 986 0076 2968     		ldr	r1, [r5]
5337:FreeRTOS/tasks.c **** 
 987              		.loc 1 5337 21 view .LVU288
 988 0078 0431     		adds	r1, r1, #4
 989 007a FFF7FEFF 		bl	vListInsert
 990              	.LVL79:
5342:FreeRTOS/tasks.c ****                     {
 991              		.loc 1 5342 21 is_stmt 1 view .LVU289
5342:FreeRTOS/tasks.c ****                     {
 992              		.loc 1 5342 37 is_stmt 0 view .LVU290
 993 007e 094B     		ldr	r3, .L77+24
 994 0080 1B68     		ldr	r3, [r3]
5342:FreeRTOS/tasks.c ****                     {
 995              		.loc 1 5342 23 view .LVU291
 996 0082 A342     		cmp	r3, r4
 997 0084 E6D9     		bls	.L70
5344:FreeRTOS/tasks.c ****                     }
 998              		.loc 1 5344 25 is_stmt 1 view .LVU292
5344:FreeRTOS/tasks.c ****                     }
 999              		.loc 1 5344 46 is_stmt 0 view .LVU293
 1000 0086 074B     		ldr	r3, .L77+24
 1001 0088 1C60     		str	r4, [r3]
5348:FreeRTOS/tasks.c ****                     }
 1002              		.loc 1 5348 49 is_stmt 1 view .LVU294
 1003              		.loc 1 5392 1 is_stmt 0 view .LVU295
 1004 008a E3E7     		b	.L70
 1005              	.L78:
 1006              		.align	2
 1007              	.L77:
 1008 008c 00000000 		.word	.LANCHOR13
 1009 0090 00000000 		.word	.LANCHOR9
 1010 0094 00000000 		.word	.LANCHOR12
 1011 0098 00000000 		.word	.LANCHOR7
 1012 009c 00000000 		.word	.LANCHOR0
 1013 00a0 00000000 		.word	.LANCHOR3
 1014 00a4 00000000 		.word	.LANCHOR4
 1015              		.cfi_endproc
 1016              	.LFE58:
 1018              		.section	.text.xTaskCreate,"ax",%progbits
 1019              		.align	1
 1020              		.global	xTaskCreate
 1021              		.syntax unified
 1022              		.thumb
 1023              		.thumb_func
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 120


 1025              	xTaskCreate:
 1026              	.LVL80:
 1027              	.LFB5:
 732:FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 1028              		.loc 1 732 5 is_stmt 1 view -0
 1029              		.cfi_startproc
 1030              		@ args = 8, pretend = 0, frame = 0
 1031              		@ frame_needed = 0, uses_anonymous_args = 0
 732:FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 1032              		.loc 1 732 5 is_stmt 0 view .LVU297
 1033 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1034              	.LCFI10:
 1035              		.cfi_def_cfa_offset 28
 1036              		.cfi_offset 4, -28
 1037              		.cfi_offset 5, -24
 1038              		.cfi_offset 6, -20
 1039              		.cfi_offset 7, -16
 1040              		.cfi_offset 8, -12
 1041              		.cfi_offset 9, -8
 1042              		.cfi_offset 14, -4
 1043 0004 85B0     		sub	sp, sp, #20
 1044              	.LCFI11:
 1045              		.cfi_def_cfa_offset 48
 1046 0006 0746     		mov	r7, r0
 1047 0008 8846     		mov	r8, r1
 1048 000a 1446     		mov	r4, r2
 1049 000c 1E46     		mov	r6, r3
 733:FreeRTOS/tasks.c ****         BaseType_t xReturn;
 1050              		.loc 1 733 9 is_stmt 1 view .LVU298
 734:FreeRTOS/tasks.c **** 
 1051              		.loc 1 734 9 view .LVU299
 1052              	.LBB117:
 763:FreeRTOS/tasks.c **** 
 1053              		.loc 1 763 17 view .LVU300
 766:FreeRTOS/tasks.c **** 
 1054              		.loc 1 766 17 view .LVU301
 766:FreeRTOS/tasks.c **** 
 1055              		.loc 1 766 27 is_stmt 0 view .LVU302
 1056 000e 9000     		lsls	r0, r2, #2
 1057              	.LVL81:
 766:FreeRTOS/tasks.c **** 
 1058              		.loc 1 766 27 view .LVU303
 1059 0010 FFF7FEFF 		bl	pvPortMalloc
 1060              	.LVL82:
 768:FreeRTOS/tasks.c ****                 {
 1061              		.loc 1 768 17 is_stmt 1 view .LVU304
 768:FreeRTOS/tasks.c ****                 {
 1062              		.loc 1 768 19 is_stmt 0 view .LVU305
 1063 0014 F0B1     		cbz	r0, .L83
 1064 0016 8146     		mov	r9, r0
 771:FreeRTOS/tasks.c **** 
 1065              		.loc 1 771 21 is_stmt 1 view .LVU306
 771:FreeRTOS/tasks.c **** 
 1066              		.loc 1 771 44 is_stmt 0 view .LVU307
 1067 0018 5820     		movs	r0, #88
 1068              	.LVL83:
 771:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 121


 1069              		.loc 1 771 44 view .LVU308
 1070 001a FFF7FEFF 		bl	pvPortMalloc
 1071              	.LVL84:
 773:FreeRTOS/tasks.c ****                     {
 1072              		.loc 1 773 21 is_stmt 1 view .LVU309
 773:FreeRTOS/tasks.c ****                     {
 1073              		.loc 1 773 23 is_stmt 0 view .LVU310
 1074 001e 0546     		mov	r5, r0
 1075 0020 A0B1     		cbz	r0, .L81
 776:FreeRTOS/tasks.c ****                     }
 1076              		.loc 1 776 25 is_stmt 1 view .LVU311
 776:FreeRTOS/tasks.c ****                     }
 1077              		.loc 1 776 43 is_stmt 0 view .LVU312
 1078 0022 C0F83090 		str	r9, [r0, #48]
 1079              	.LVL85:
 1080              	.L82:
 776:FreeRTOS/tasks.c ****                     }
 1081              		.loc 1 776 43 view .LVU313
 1082              	.LBE117:
 792:FreeRTOS/tasks.c ****         {
 1083              		.loc 1 792 9 is_stmt 1 view .LVU314
 792:FreeRTOS/tasks.c ****         {
 1084              		.loc 1 792 11 is_stmt 0 view .LVU315
 1085 0026 D5B1     		cbz	r5, .L84
 802:FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 1086              		.loc 1 802 13 is_stmt 1 view .LVU316
 1087 0028 0023     		movs	r3, #0
 1088 002a 0393     		str	r3, [sp, #12]
 1089 002c 0295     		str	r5, [sp, #8]
 1090 002e 0D9B     		ldr	r3, [sp, #52]
 1091 0030 0193     		str	r3, [sp, #4]
 1092 0032 0C9B     		ldr	r3, [sp, #48]
 1093 0034 0093     		str	r3, [sp]
 1094 0036 3346     		mov	r3, r6
 1095 0038 2246     		mov	r2, r4
 1096 003a 4146     		mov	r1, r8
 1097 003c 3846     		mov	r0, r7
 1098 003e FFF7FEFF 		bl	prvInitialiseNewTask
 1099              	.LVL86:
 803:FreeRTOS/tasks.c ****             xReturn = pdPASS;
 1100              		.loc 1 803 13 view .LVU317
 1101 0042 2846     		mov	r0, r5
 1102 0044 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1103              	.LVL87:
 804:FreeRTOS/tasks.c ****         }
 1104              		.loc 1 804 13 view .LVU318
 804:FreeRTOS/tasks.c ****         }
 1105              		.loc 1 804 21 is_stmt 0 view .LVU319
 1106 0048 0120     		movs	r0, #1
 1107 004a 05E0     		b	.L79
 1108              	.LVL88:
 1109              	.L81:
 1110              	.LBB118:
 782:FreeRTOS/tasks.c ****                     }
 1111              		.loc 1 782 25 is_stmt 1 view .LVU320
 1112 004c 4846     		mov	r0, r9
 1113              	.LVL89:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 122


 782:FreeRTOS/tasks.c ****                     }
 1114              		.loc 1 782 25 is_stmt 0 view .LVU321
 1115 004e FFF7FEFF 		bl	vPortFree
 1116              	.LVL90:
 1117 0052 E8E7     		b	.L82
 1118              	.LVL91:
 1119              	.L83:
 782:FreeRTOS/tasks.c ****                     }
 1120              		.loc 1 782 25 view .LVU322
 1121              	.LBE118:
 808:FreeRTOS/tasks.c ****         }
 1122              		.loc 1 808 21 view .LVU323
 1123 0054 4FF0FF30 		mov	r0, #-1
 1124              	.LVL92:
 1125              	.L79:
 812:FreeRTOS/tasks.c **** 
 1126              		.loc 1 812 5 view .LVU324
 1127 0058 05B0     		add	sp, sp, #20
 1128              	.LCFI12:
 1129              		.cfi_remember_state
 1130              		.cfi_def_cfa_offset 28
 1131              		@ sp needed
 1132 005a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1133              	.LVL93:
 1134              	.L84:
 1135              	.LCFI13:
 1136              		.cfi_restore_state
 808:FreeRTOS/tasks.c ****         }
 1137              		.loc 1 808 21 view .LVU325
 1138 005e 4FF0FF30 		mov	r0, #-1
 1139              	.LVL94:
 811:FreeRTOS/tasks.c ****     }
 1140              		.loc 1 811 9 is_stmt 1 view .LVU326
 811:FreeRTOS/tasks.c ****     }
 1141              		.loc 1 811 16 is_stmt 0 view .LVU327
 1142 0062 F9E7     		b	.L79
 1143              		.cfi_endproc
 1144              	.LFE5:
 1146              		.section	.text.eTaskGetState,"ax",%progbits
 1147              		.align	1
 1148              		.global	eTaskGetState
 1149              		.syntax unified
 1150              		.thumb
 1151              		.thumb_func
 1153              	eTaskGetState:
 1154              	.LVL95:
 1155              	.LFB10:
1382:FreeRTOS/tasks.c ****         eTaskState eReturn;
 1156              		.loc 1 1382 5 is_stmt 1 view -0
 1157              		.cfi_startproc
 1158              		@ args = 0, pretend = 0, frame = 0
 1159              		@ frame_needed = 0, uses_anonymous_args = 0
1382:FreeRTOS/tasks.c ****         eTaskState eReturn;
 1160              		.loc 1 1382 5 is_stmt 0 view .LVU329
 1161 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1162              	.LCFI14:
 1163              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 123


 1164              		.cfi_offset 3, -24
 1165              		.cfi_offset 4, -20
 1166              		.cfi_offset 5, -16
 1167              		.cfi_offset 6, -12
 1168              		.cfi_offset 7, -8
 1169              		.cfi_offset 14, -4
1383:FreeRTOS/tasks.c ****         List_t const * pxStateList, * pxDelayedList, * pxOverflowedDelayedList;
 1170              		.loc 1 1383 9 is_stmt 1 view .LVU330
1384:FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
 1171              		.loc 1 1384 9 view .LVU331
1385:FreeRTOS/tasks.c **** 
 1172              		.loc 1 1385 9 view .LVU332
 1173              	.LVL96:
1387:FreeRTOS/tasks.c **** 
 1174              		.loc 1 1387 9 view .LVU333
 1175 0002 B0B1     		cbz	r0, .L99
 1176 0004 0446     		mov	r4, r0
1387:FreeRTOS/tasks.c **** 
 1177              		.loc 1 1387 30 discriminator 2 view .LVU334
1389:FreeRTOS/tasks.c ****         {
 1178              		.loc 1 1389 9 discriminator 2 view .LVU335
1389:FreeRTOS/tasks.c ****         {
 1179              		.loc 1 1389 19 is_stmt 0 discriminator 2 view .LVU336
 1180 0006 1C4B     		ldr	r3, .L101
 1181 0008 1B68     		ldr	r3, [r3]
1389:FreeRTOS/tasks.c ****         {
 1182              		.loc 1 1389 11 discriminator 2 view .LVU337
 1183 000a 8342     		cmp	r3, r0
 1184 000c 2BD0     		beq	.L92
1396:FreeRTOS/tasks.c ****             {
 1185              		.loc 1 1396 13 is_stmt 1 view .LVU338
 1186 000e FFF7FEFF 		bl	vPortEnterCritical
 1187              	.LVL97:
1398:FreeRTOS/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
 1188              		.loc 1 1398 17 view .LVU339
1398:FreeRTOS/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
 1189              		.loc 1 1398 29 is_stmt 0 view .LVU340
 1190 0012 6569     		ldr	r5, [r4, #20]
 1191              	.LVL98:
1399:FreeRTOS/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1192              		.loc 1 1399 17 is_stmt 1 view .LVU341
1399:FreeRTOS/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1193              		.loc 1 1399 31 is_stmt 0 view .LVU342
 1194 0014 194B     		ldr	r3, .L101+4
 1195 0016 1E68     		ldr	r6, [r3]
 1196              	.LVL99:
1400:FreeRTOS/tasks.c ****             }
 1197              		.loc 1 1400 17 is_stmt 1 view .LVU343
1400:FreeRTOS/tasks.c ****             }
 1198              		.loc 1 1400 41 is_stmt 0 view .LVU344
 1199 0018 194B     		ldr	r3, .L101+8
 1200 001a 1F68     		ldr	r7, [r3]
 1201              	.LVL100:
1402:FreeRTOS/tasks.c **** 
 1202              		.loc 1 1402 13 is_stmt 1 view .LVU345
 1203 001c FFF7FEFF 		bl	vPortExitCritical
 1204              	.LVL101:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 124


1404:FreeRTOS/tasks.c ****             {
 1205              		.loc 1 1404 13 view .LVU346
1404:FreeRTOS/tasks.c ****             {
 1206              		.loc 1 1404 15 is_stmt 0 view .LVU347
 1207 0020 B542     		cmp	r5, r6
 1208 0022 22D0     		beq	.L93
1404:FreeRTOS/tasks.c ****             {
 1209              		.loc 1 1404 50 discriminator 1 view .LVU348
 1210 0024 BD42     		cmp	r5, r7
 1211 0026 22D0     		beq	.L94
1412:FreeRTOS/tasks.c ****                 {
 1212              		.loc 1 1412 22 is_stmt 1 view .LVU349
1412:FreeRTOS/tasks.c ****                 {
 1213              		.loc 1 1412 24 is_stmt 0 view .LVU350
 1214 0028 164B     		ldr	r3, .L101+12
 1215 002a 9D42     		cmp	r5, r3
 1216 002c 0AD0     		beq	.L100
1466:FreeRTOS/tasks.c ****             }
 1217              		.loc 1 1466 25 view .LVU351
 1218 002e 0120     		movs	r0, #1
 1219 0030 1AE0     		b	.L89
 1220              	.LVL102:
 1221              	.L99:
1387:FreeRTOS/tasks.c **** 
 1222              		.loc 1 1387 9 is_stmt 1 view .LVU352
 1223              	.LBB119:
 1224              	.LBI119:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 1225              		.loc 2 193 34 view .LVU353
 1226              	.LBB120:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1227              		.loc 2 195 9 view .LVU354
 1228              		.loc 2 197 9 view .LVU355
 1229              		.syntax unified
 1230              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1231 0032 4FF05003 			mov r3, #80												
 1232 0036 83F31188 		msr basepri, r3											
 1233 003a BFF36F8F 		isb														
 1234 003e BFF34F8F 		dsb														
 1235              	
 1236              	@ 0 "" 2
 1237              	.LVL103:
 1238              		.thumb
 1239              		.syntax unified
 1240              	.L88:
 1241              		.loc 2 197 9 is_stmt 0 view .LVU356
 1242              	.LBE120:
 1243              	.LBE119:
1387:FreeRTOS/tasks.c **** 
 1244              		.loc 1 1387 9 is_stmt 1 discriminator 1 view .LVU357
1387:FreeRTOS/tasks.c **** 
 1245              		.loc 1 1387 9 discriminator 1 view .LVU358
1387:FreeRTOS/tasks.c **** 
 1246              		.loc 1 1387 9 discriminator 1 view .LVU359
 1247 0042 FEE7     		b	.L88
 1248              	.LVL104:
 1249              	.L100:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 125


1417:FreeRTOS/tasks.c ****                     {
 1250              		.loc 1 1417 21 view .LVU360
1417:FreeRTOS/tasks.c ****                     {
 1251              		.loc 1 1417 25 is_stmt 0 view .LVU361
 1252 0044 A36A     		ldr	r3, [r4, #40]
1417:FreeRTOS/tasks.c ****                     {
 1253              		.loc 1 1417 23 view .LVU362
 1254 0046 4BB1     		cbz	r3, .L96
1447:FreeRTOS/tasks.c ****                     }
 1255              		.loc 1 1447 33 view .LVU363
 1256 0048 0220     		movs	r0, #2
 1257 004a 0DE0     		b	.L89
 1258              	.LVL105:
 1259              	.L91:
 1260              	.LBB121:
1432:FreeRTOS/tasks.c ****                                     {
 1261              		.loc 1 1432 37 is_stmt 1 view .LVU364
1432:FreeRTOS/tasks.c ****                                     {
 1262              		.loc 1 1432 61 is_stmt 0 view .LVU365
 1263 004c E218     		adds	r2, r4, r3
 1264 004e 92F85420 		ldrb	r2, [r2, #84]	@ zero_extendqisi2
 1265 0052 D2B2     		uxtb	r2, r2
1432:FreeRTOS/tasks.c ****                                     {
 1266              		.loc 1 1432 39 view .LVU366
 1267 0054 012A     		cmp	r2, #1
 1268 0056 0CD0     		beq	.L97
1430:FreeRTOS/tasks.c ****                                 {
 1269              		.loc 1 1430 88 is_stmt 1 discriminator 2 view .LVU367
1430:FreeRTOS/tasks.c ****                                 {
 1270              		.loc 1 1430 89 is_stmt 0 discriminator 2 view .LVU368
 1271 0058 0133     		adds	r3, r3, #1
 1272              	.LVL106:
1430:FreeRTOS/tasks.c ****                                 {
 1273              		.loc 1 1430 89 discriminator 2 view .LVU369
 1274 005a 00E0     		b	.L90
 1275              	.LVL107:
 1276              	.L96:
1430:FreeRTOS/tasks.c ****                                 {
 1277              		.loc 1 1430 40 view .LVU370
 1278 005c 0023     		movs	r3, #0
 1279              	.L90:
 1280              	.LVL108:
1430:FreeRTOS/tasks.c ****                                 {
 1281              		.loc 1 1430 45 is_stmt 1 discriminator 1 view .LVU371
1430:FreeRTOS/tasks.c ****                                 {
 1282              		.loc 1 1430 33 is_stmt 0 discriminator 1 view .LVU372
 1283 005e 002B     		cmp	r3, #0
 1284 0060 F4DD     		ble	.L91
1428:FreeRTOS/tasks.c **** 
 1285              		.loc 1 1428 41 view .LVU373
 1286 0062 0320     		movs	r0, #3
 1287 0064 00E0     		b	.L89
 1288              	.LVL109:
 1289              	.L92:
1428:FreeRTOS/tasks.c **** 
 1290              		.loc 1 1428 41 view .LVU374
 1291              	.LBE121:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 126


1392:FreeRTOS/tasks.c ****         }
 1292              		.loc 1 1392 21 view .LVU375
 1293 0066 0020     		movs	r0, #0
 1294              	.LVL110:
 1295              	.L89:
1470:FreeRTOS/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1296              		.loc 1 1470 9 is_stmt 1 view .LVU376
1471:FreeRTOS/tasks.c **** 
 1297              		.loc 1 1471 5 is_stmt 0 view .LVU377
 1298 0068 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1299              	.LVL111:
 1300              	.L93:
1408:FreeRTOS/tasks.c ****             }
 1301              		.loc 1 1408 25 view .LVU378
 1302 006a 0220     		movs	r0, #2
 1303 006c FCE7     		b	.L89
 1304              	.L94:
 1305 006e 0220     		movs	r0, #2
 1306 0070 FAE7     		b	.L89
 1307              	.LVL112:
 1308              	.L97:
 1309              	.LBB122:
1434:FreeRTOS/tasks.c ****                                         break;
 1310              		.loc 1 1434 49 view .LVU379
 1311 0072 0220     		movs	r0, #2
 1312 0074 F8E7     		b	.L89
 1313              	.L102:
 1314 0076 00BF     		.align	2
 1315              	.L101:
 1316 0078 00000000 		.word	.LANCHOR9
 1317 007c 00000000 		.word	.LANCHOR3
 1318 0080 00000000 		.word	.LANCHOR7
 1319 0084 00000000 		.word	.LANCHOR0
 1320              	.LBE122:
 1321              		.cfi_endproc
 1322              	.LFE10:
 1324              		.section	.text.vTaskResume,"ax",%progbits
 1325              		.align	1
 1326              		.global	vTaskResume
 1327              		.syntax unified
 1328              		.thumb
 1329              		.thumb_func
 1331              	vTaskResume:
 1332              	.LVL113:
 1333              	.LFB13:
1859:FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1334              		.loc 1 1859 5 is_stmt 1 view -0
 1335              		.cfi_startproc
 1336              		@ args = 0, pretend = 0, frame = 0
 1337              		@ frame_needed = 0, uses_anonymous_args = 0
1859:FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1338              		.loc 1 1859 5 is_stmt 0 view .LVU381
 1339 0000 38B5     		push	{r3, r4, r5, lr}
 1340              	.LCFI15:
 1341              		.cfi_def_cfa_offset 16
 1342              		.cfi_offset 3, -16
 1343              		.cfi_offset 4, -12
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 127


 1344              		.cfi_offset 5, -8
 1345              		.cfi_offset 14, -4
1860:FreeRTOS/tasks.c **** 
 1346              		.loc 1 1860 9 is_stmt 1 view .LVU382
 1347              	.LVL114:
1863:FreeRTOS/tasks.c **** 
 1348              		.loc 1 1863 9 view .LVU383
 1349 0002 68B1     		cbz	r0, .L109
 1350 0004 0446     		mov	r4, r0
1863:FreeRTOS/tasks.c **** 
 1351              		.loc 1 1863 38 discriminator 2 view .LVU384
1867:FreeRTOS/tasks.c ****         {
 1352              		.loc 1 1867 9 discriminator 2 view .LVU385
1867:FreeRTOS/tasks.c ****         {
 1353              		.loc 1 1867 21 is_stmt 0 discriminator 2 view .LVU386
 1354 0006 224B     		ldr	r3, .L111
 1355 0008 1B68     		ldr	r3, [r3]
1867:FreeRTOS/tasks.c ****         {
 1356              		.loc 1 1867 11 discriminator 2 view .LVU387
 1357 000a 8342     		cmp	r3, r0
 1358 000c 07D0     		beq	.L103
1869:FreeRTOS/tasks.c ****             {
 1359              		.loc 1 1869 13 is_stmt 1 view .LVU388
 1360 000e FFF7FEFF 		bl	vPortEnterCritical
 1361              	.LVL115:
1871:FreeRTOS/tasks.c ****                 {
 1362              		.loc 1 1871 17 view .LVU389
1871:FreeRTOS/tasks.c ****                 {
 1363              		.loc 1 1871 21 is_stmt 0 view .LVU390
 1364 0012 2046     		mov	r0, r4
 1365 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1366              	.LVL116:
1871:FreeRTOS/tasks.c ****                 {
 1367              		.loc 1 1871 19 view .LVU391
 1368 0018 58B9     		cbnz	r0, .L110
 1369              	.L107:
1895:FreeRTOS/tasks.c ****                 }
 1370              		.loc 1 1895 45 is_stmt 1 view .LVU392
1898:FreeRTOS/tasks.c ****         }
 1371              		.loc 1 1898 13 view .LVU393
 1372 001a FFF7FEFF 		bl	vPortExitCritical
 1373              	.LVL117:
1902:FreeRTOS/tasks.c ****         }
 1374              		.loc 1 1902 37 view .LVU394
 1375              	.L103:
1904:FreeRTOS/tasks.c **** 
 1376              		.loc 1 1904 5 is_stmt 0 view .LVU395
 1377 001e 38BD     		pop	{r3, r4, r5, pc}
 1378              	.LVL118:
 1379              	.L109:
1863:FreeRTOS/tasks.c **** 
 1380              		.loc 1 1863 9 is_stmt 1 view .LVU396
 1381              	.LBB123:
 1382              	.LBI123:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 1383              		.loc 2 193 34 view .LVU397
 1384              	.LBB124:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 128


 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1385              		.loc 2 195 9 view .LVU398
 1386              		.loc 2 197 9 view .LVU399
 1387              		.syntax unified
 1388              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1389 0020 4FF05003 			mov r3, #80												
 1390 0024 83F31188 		msr basepri, r3											
 1391 0028 BFF36F8F 		isb														
 1392 002c BFF34F8F 		dsb														
 1393              	
 1394              	@ 0 "" 2
 1395              	.LVL119:
 1396              		.thumb
 1397              		.syntax unified
 1398              	.L105:
 1399              		.loc 2 197 9 is_stmt 0 view .LVU400
 1400              	.LBE124:
 1401              	.LBE123:
1863:FreeRTOS/tasks.c **** 
 1402              		.loc 1 1863 9 is_stmt 1 discriminator 1 view .LVU401
1863:FreeRTOS/tasks.c **** 
 1403              		.loc 1 1863 9 discriminator 1 view .LVU402
1863:FreeRTOS/tasks.c **** 
 1404              		.loc 1 1863 9 discriminator 1 view .LVU403
 1405 0030 FEE7     		b	.L105
 1406              	.LVL120:
 1407              	.L110:
1873:FreeRTOS/tasks.c **** 
 1408              		.loc 1 1873 21 view .LVU404
 1409 0032 2046     		mov	r0, r4
 1410 0034 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1411              	.LVL121:
 1412 0038 0146     		mov	r1, r0
 1413 003a 2A20     		movs	r0, #42
 1414 003c FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
 1415              	.LVL122:
1877:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1416              		.loc 1 1877 21 view .LVU405
1877:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1417              		.loc 1 1877 30 is_stmt 0 view .LVU406
 1418 0040 251D     		adds	r5, r4, #4
 1419 0042 2846     		mov	r0, r5
 1420 0044 FFF7FEFF 		bl	uxListRemove
 1421              	.LVL123:
1878:FreeRTOS/tasks.c **** 
 1422              		.loc 1 1878 21 is_stmt 1 view .LVU407
 1423 0048 2046     		mov	r0, r4
 1424 004a FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 1425              	.LVL124:
1878:FreeRTOS/tasks.c **** 
 1426              		.loc 1 1878 21 view .LVU408
 1427 004e E06A     		ldr	r0, [r4, #44]
 1428 0050 0123     		movs	r3, #1
 1429 0052 8340     		lsls	r3, r3, r0
 1430 0054 0F4A     		ldr	r2, .L111+4
 1431 0056 1168     		ldr	r1, [r2]
 1432 0058 0B43     		orrs	r3, r3, r1
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 129


 1433 005a 1360     		str	r3, [r2]
1878:FreeRTOS/tasks.c **** 
 1434              		.loc 1 1878 21 view .LVU409
 1435 005c 00EB8000 		add	r0, r0, r0, lsl #2
 1436 0060 2946     		mov	r1, r5
 1437 0062 0D4B     		ldr	r3, .L111+8
 1438 0064 03EB8000 		add	r0, r3, r0, lsl #2
 1439 0068 FFF7FEFF 		bl	vListInsertEnd
 1440              	.LVL125:
1878:FreeRTOS/tasks.c **** 
 1441              		.loc 1 1878 51 view .LVU410
1881:FreeRTOS/tasks.c ****                     {
 1442              		.loc 1 1881 21 view .LVU411
1881:FreeRTOS/tasks.c ****                     {
 1443              		.loc 1 1881 30 is_stmt 0 view .LVU412
 1444 006c E26A     		ldr	r2, [r4, #44]
1881:FreeRTOS/tasks.c ****                     {
 1445              		.loc 1 1881 58 view .LVU413
 1446 006e 084B     		ldr	r3, .L111
 1447 0070 1B68     		ldr	r3, [r3]
 1448 0072 DB6A     		ldr	r3, [r3, #44]
1881:FreeRTOS/tasks.c ****                     {
 1449              		.loc 1 1881 23 view .LVU414
 1450 0074 9A42     		cmp	r2, r3
 1451 0076 D0D3     		bcc	.L107
1886:FreeRTOS/tasks.c ****                     }
 1452              		.loc 1 1886 25 is_stmt 1 view .LVU415
 1453 0078 4FF0E023 		mov	r3, #-536813568
 1454 007c 4FF08052 		mov	r2, #268435456
 1455 0080 C3F8042D 		str	r2, [r3, #3332]
1886:FreeRTOS/tasks.c ****                     }
 1456              		.loc 1 1886 25 view .LVU416
 1457              		.syntax unified
 1458              	@ 1886 "FreeRTOS/tasks.c" 1
 1459 0084 BFF34F8F 		dsb
 1460              	@ 0 "" 2
1886:FreeRTOS/tasks.c ****                     }
 1461              		.loc 1 1886 25 view .LVU417
 1462              	@ 1886 "FreeRTOS/tasks.c" 1
 1463 0088 BFF36F8F 		isb
 1464              	@ 0 "" 2
1886:FreeRTOS/tasks.c ****                     }
 1465              		.loc 1 1886 56 view .LVU418
 1466              		.thumb
 1467              		.syntax unified
 1468 008c C5E7     		b	.L107
 1469              	.L112:
 1470 008e 00BF     		.align	2
 1471              	.L111:
 1472 0090 00000000 		.word	.LANCHOR9
 1473 0094 00000000 		.word	.LANCHOR12
 1474 0098 00000000 		.word	.LANCHOR2
 1475              		.cfi_endproc
 1476              	.LFE13:
 1478              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1479              		.align	1
 1480              		.global	xTaskResumeFromISR
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 130


 1481              		.syntax unified
 1482              		.thumb
 1483              		.thumb_func
 1485              	xTaskResumeFromISR:
 1486              	.LVL126:
 1487              	.LFB14:
1913:FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1488              		.loc 1 1913 5 view -0
 1489              		.cfi_startproc
 1490              		@ args = 0, pretend = 0, frame = 0
 1491              		@ frame_needed = 0, uses_anonymous_args = 0
1913:FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1492              		.loc 1 1913 5 is_stmt 0 view .LVU420
 1493 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1494              	.LCFI16:
 1495              		.cfi_def_cfa_offset 24
 1496              		.cfi_offset 3, -24
 1497              		.cfi_offset 4, -20
 1498              		.cfi_offset 5, -16
 1499              		.cfi_offset 6, -12
 1500              		.cfi_offset 7, -8
 1501              		.cfi_offset 14, -4
1914:FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1502              		.loc 1 1914 9 is_stmt 1 view .LVU421
 1503              	.LVL127:
1915:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 1504              		.loc 1 1915 9 view .LVU422
1916:FreeRTOS/tasks.c **** 
 1505              		.loc 1 1916 9 view .LVU423
1918:FreeRTOS/tasks.c **** 
 1506              		.loc 1 1918 9 view .LVU424
 1507 0002 A8B1     		cbz	r0, .L121
 1508 0004 0446     		mov	r4, r0
1918:FreeRTOS/tasks.c **** 
 1509              		.loc 1 1918 38 discriminator 2 view .LVU425
1936:FreeRTOS/tasks.c **** 
 1510              		.loc 1 1936 9 discriminator 2 view .LVU426
 1511 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1512              	.LVL128:
1938:FreeRTOS/tasks.c ****         {
 1513              		.loc 1 1938 9 discriminator 2 view .LVU427
 1514              	.LBB125:
 1515              	.LBI125:
 198:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 199:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	mov %0, %1												\n"\
 200:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	msr basepri, %0											\n"\
 201:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	isb														\n"\
 202:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	dsb														\n"\
 203:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         );
 205:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 206:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 208:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 209:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1516              		.loc 2 209 38 discriminator 2 view .LVU428
 1517              	.LBB126:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 131


 210:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 211:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1518              		.loc 2 211 9 discriminator 2 view .LVU429
 212:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 213:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
 1519              		.loc 2 213 9 discriminator 2 view .LVU430
 1520              		.syntax unified
 1521              	@ 213 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1522 000a EFF31186 			mrs r6, basepri											
 1523 000e 4FF05003 		mov r3, #80												
 1524 0012 83F31188 		msr basepri, r3											
 1525 0016 BFF36F8F 		isb														
 1526 001a BFF34F8F 		dsb														
 1527              	
 1528              	@ 0 "" 2
 1529              	.LVL129:
 214:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 215:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	mrs %0, basepri											\n"\
 216:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	mov %1, %2												\n"\
 217:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	msr basepri, %1											\n"\
 218:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	isb														\n"\
 219:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	dsb														\n"\
 220:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 221:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         );
 222:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 223:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 224:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****          * warnings. */
 225:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         return ulOriginalBASEPRI;
 1530              		.loc 2 225 9 discriminator 2 view .LVU431
 1531              		.loc 2 225 9 is_stmt 0 discriminator 2 view .LVU432
 1532              		.thumb
 1533              		.syntax unified
 1534              	.LBE126:
 1535              	.LBE125:
1940:FreeRTOS/tasks.c ****             {
 1536              		.loc 1 1940 13 is_stmt 1 discriminator 2 view .LVU433
1940:FreeRTOS/tasks.c ****             {
 1537              		.loc 1 1940 17 is_stmt 0 discriminator 2 view .LVU434
 1538 001e 2046     		mov	r0, r4
 1539 0020 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1540              	.LVL130:
1940:FreeRTOS/tasks.c ****             {
 1541              		.loc 1 1940 15 discriminator 2 view .LVU435
 1542 0024 0546     		mov	r5, r0
 1543 0026 60B9     		cbnz	r0, .L122
 1544              	.LVL131:
 1545              	.L116:
1976:FreeRTOS/tasks.c ****             }
 1546              		.loc 1 1976 41 is_stmt 1 view .LVU436
1979:FreeRTOS/tasks.c **** 
 1547              		.loc 1 1979 9 view .LVU437
 1548              	.LBB127:
 1549              	.LBI127:
 226:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 227:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 228:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 229:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 132


 1550              		.loc 2 229 34 view .LVU438
 1551              	.LBB128:
 230:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 231:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
 1552              		.loc 2 231 9 view .LVU439
 1553              		.syntax unified
 1554              	@ 231 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1555 0028 86F31188 			msr basepri, r6	
 1556              	@ 0 "" 2
 1557              	.LVL132:
 1558              		.loc 2 231 9 is_stmt 0 view .LVU440
 1559              		.thumb
 1560              		.syntax unified
 1561              	.LBE128:
 1562              	.LBE127:
1981:FreeRTOS/tasks.c ****     }
 1563              		.loc 1 1981 9 is_stmt 1 view .LVU441
1982:FreeRTOS/tasks.c **** 
 1564              		.loc 1 1982 5 is_stmt 0 view .LVU442
 1565 002c 2846     		mov	r0, r5
 1566 002e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1567              	.LVL133:
 1568              	.L121:
1918:FreeRTOS/tasks.c **** 
 1569              		.loc 1 1918 9 is_stmt 1 view .LVU443
 1570              	.LBB129:
 1571              	.LBI129:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 1572              		.loc 2 193 34 view .LVU444
 1573              	.LBB130:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1574              		.loc 2 195 9 view .LVU445
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1575              		.loc 2 197 9 view .LVU446
 1576              		.syntax unified
 1577              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1578 0030 4FF05003 			mov r3, #80												
 1579 0034 83F31188 		msr basepri, r3											
 1580 0038 BFF36F8F 		isb														
 1581 003c BFF34F8F 		dsb														
 1582              	
 1583              	@ 0 "" 2
 1584              	.LVL134:
 1585              		.thumb
 1586              		.syntax unified
 1587              	.L115:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1588              		.loc 2 197 9 is_stmt 0 view .LVU447
 1589              	.LBE130:
 1590              	.LBE129:
1918:FreeRTOS/tasks.c **** 
 1591              		.loc 1 1918 9 is_stmt 1 discriminator 1 view .LVU448
1918:FreeRTOS/tasks.c **** 
 1592              		.loc 1 1918 9 discriminator 1 view .LVU449
1918:FreeRTOS/tasks.c **** 
 1593              		.loc 1 1918 9 discriminator 1 view .LVU450
 1594 0040 FEE7     		b	.L115
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 133


 1595              	.LVL135:
 1596              	.L122:
1942:FreeRTOS/tasks.c **** 
 1597              		.loc 1 1942 17 view .LVU451
 1598 0042 2046     		mov	r0, r4
 1599 0044 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 1600              	.LVL136:
 1601 0048 0146     		mov	r1, r0
 1602 004a 2B20     		movs	r0, #43
 1603 004c FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
 1604              	.LVL137:
1945:FreeRTOS/tasks.c ****                 {
 1605              		.loc 1 1945 17 view .LVU452
1945:FreeRTOS/tasks.c ****                 {
 1606              		.loc 1 1945 42 is_stmt 0 view .LVU453
 1607 0050 154B     		ldr	r3, .L123
 1608 0052 1B68     		ldr	r3, [r3]
1945:FreeRTOS/tasks.c ****                 {
 1609              		.loc 1 1945 19 view .LVU454
 1610 0054 0BBB     		cbnz	r3, .L117
1949:FreeRTOS/tasks.c ****                     {
 1611              		.loc 1 1949 21 is_stmt 1 view .LVU455
1949:FreeRTOS/tasks.c ****                     {
 1612              		.loc 1 1949 30 is_stmt 0 view .LVU456
 1613 0056 E26A     		ldr	r2, [r4, #44]
1949:FreeRTOS/tasks.c ****                     {
 1614              		.loc 1 1949 58 view .LVU457
 1615 0058 144B     		ldr	r3, .L123+4
 1616 005a 1B68     		ldr	r3, [r3]
 1617 005c DB6A     		ldr	r3, [r3, #44]
1949:FreeRTOS/tasks.c ****                     {
 1618              		.loc 1 1949 23 view .LVU458
 1619 005e 9A42     		cmp	r2, r3
 1620 0060 19D3     		bcc	.L119
1951:FreeRTOS/tasks.c **** 
 1621              		.loc 1 1951 25 is_stmt 1 view .LVU459
 1622              	.LVL138:
1956:FreeRTOS/tasks.c ****                     }
 1623              		.loc 1 1956 25 view .LVU460
1956:FreeRTOS/tasks.c ****                     }
 1624              		.loc 1 1956 39 is_stmt 0 view .LVU461
 1625 0062 0125     		movs	r5, #1
 1626 0064 124B     		ldr	r3, .L123+8
 1627 0066 1D60     		str	r5, [r3]
 1628              	.LVL139:
 1629              	.L118:
1960:FreeRTOS/tasks.c ****                     }
 1630              		.loc 1 1960 49 is_stmt 1 view .LVU462
1963:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1631              		.loc 1 1963 21 view .LVU463
1963:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1632              		.loc 1 1963 30 is_stmt 0 view .LVU464
 1633 0068 271D     		adds	r7, r4, #4
 1634 006a 3846     		mov	r0, r7
 1635 006c FFF7FEFF 		bl	uxListRemove
 1636              	.LVL140:
1964:FreeRTOS/tasks.c ****                 }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 134


 1637              		.loc 1 1964 21 is_stmt 1 view .LVU465
 1638 0070 2046     		mov	r0, r4
 1639 0072 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 1640              	.LVL141:
1964:FreeRTOS/tasks.c ****                 }
 1641              		.loc 1 1964 21 view .LVU466
 1642 0076 E06A     		ldr	r0, [r4, #44]
 1643 0078 0123     		movs	r3, #1
 1644 007a 8340     		lsls	r3, r3, r0
 1645 007c 0D4A     		ldr	r2, .L123+12
 1646 007e 1168     		ldr	r1, [r2]
 1647 0080 0B43     		orrs	r3, r3, r1
 1648 0082 1360     		str	r3, [r2]
1964:FreeRTOS/tasks.c ****                 }
 1649              		.loc 1 1964 21 view .LVU467
 1650 0084 00EB8000 		add	r0, r0, r0, lsl #2
 1651 0088 3946     		mov	r1, r7
 1652 008a 0B4B     		ldr	r3, .L123+16
 1653 008c 03EB8000 		add	r0, r3, r0, lsl #2
 1654 0090 FFF7FEFF 		bl	vListInsertEnd
 1655              	.LVL142:
1964:FreeRTOS/tasks.c ****                 }
 1656              		.loc 1 1964 51 view .LVU468
 1657 0094 C8E7     		b	.L116
 1658              	.LVL143:
 1659              	.L119:
1914:FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1660              		.loc 1 1914 20 is_stmt 0 view .LVU469
 1661 0096 0025     		movs	r5, #0
 1662 0098 E6E7     		b	.L118
 1663              	.L117:
1971:FreeRTOS/tasks.c ****                 }
 1664              		.loc 1 1971 21 is_stmt 1 view .LVU470
 1665 009a 04F11801 		add	r1, r4, #24
 1666 009e 0748     		ldr	r0, .L123+20
 1667 00a0 FFF7FEFF 		bl	vListInsertEnd
 1668              	.LVL144:
1914:FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1669              		.loc 1 1914 20 is_stmt 0 view .LVU471
 1670 00a4 0025     		movs	r5, #0
 1671 00a6 BFE7     		b	.L116
 1672              	.L124:
 1673              		.align	2
 1674              	.L123:
 1675 00a8 00000000 		.word	.LANCHOR14
 1676 00ac 00000000 		.word	.LANCHOR9
 1677 00b0 00000000 		.word	.LANCHOR15
 1678 00b4 00000000 		.word	.LANCHOR12
 1679 00b8 00000000 		.word	.LANCHOR2
 1680 00bc 00000000 		.word	.LANCHOR1
 1681              		.cfi_endproc
 1682              	.LFE14:
 1684              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 1685              		.align	2
 1686              	.LC0:
 1687 0000 49444C45 		.ascii	"IDLE\000"
 1687      00
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 135


 1688              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1689              		.align	1
 1690              		.global	vTaskStartScheduler
 1691              		.syntax unified
 1692              		.thumb
 1693              		.thumb_func
 1695              	vTaskStartScheduler:
 1696              	.LFB15:
1988:FreeRTOS/tasks.c ****     BaseType_t xReturn;
 1697              		.loc 1 1988 1 is_stmt 1 view -0
 1698              		.cfi_startproc
 1699              		@ args = 0, pretend = 0, frame = 0
 1700              		@ frame_needed = 0, uses_anonymous_args = 0
 1701 0000 00B5     		push	{lr}
 1702              	.LCFI17:
 1703              		.cfi_def_cfa_offset 4
 1704              		.cfi_offset 14, -4
 1705 0002 83B0     		sub	sp, sp, #12
 1706              	.LCFI18:
 1707              		.cfi_def_cfa_offset 16
1989:FreeRTOS/tasks.c **** 
 1708              		.loc 1 1989 5 view .LVU473
2021:FreeRTOS/tasks.c ****                                    configIDLE_TASK_NAME,
 1709              		.loc 1 2021 13 view .LVU474
2021:FreeRTOS/tasks.c ****                                    configIDLE_TASK_NAME,
 1710              		.loc 1 2021 23 is_stmt 0 view .LVU475
 1711 0004 1E4B     		ldr	r3, .L135
 1712 0006 0193     		str	r3, [sp, #4]
 1713 0008 0023     		movs	r3, #0
 1714 000a 0093     		str	r3, [sp]
 1715 000c 6422     		movs	r2, #100
 1716 000e 1D49     		ldr	r1, .L135+4
 1717 0010 1D48     		ldr	r0, .L135+8
 1718 0012 FFF7FEFF 		bl	xTaskCreate
 1719              	.LVL145:
2043:FreeRTOS/tasks.c ****     {
 1720              		.loc 1 2043 5 is_stmt 1 view .LVU476
2043:FreeRTOS/tasks.c ****     {
 1721              		.loc 1 2043 7 is_stmt 0 view .LVU477
 1722 0016 0128     		cmp	r0, #1
 1723 0018 07D0     		beq	.L132
2102:FreeRTOS/tasks.c ****     }
 1724              		.loc 1 2102 9 is_stmt 1 view .LVU478
 1725 001a B0F1FF3F 		cmp	r0, #-1
 1726 001e 26D0     		beq	.L133
 1727              	.LVL146:
 1728              	.L129:
2102:FreeRTOS/tasks.c ****     }
 1729              		.loc 1 2102 73 discriminator 2 view .LVU479
2107:FreeRTOS/tasks.c **** 
 1730              		.loc 1 2107 5 discriminator 2 view .LVU480
2111:FreeRTOS/tasks.c **** }
 1731              		.loc 1 2111 5 discriminator 2 view .LVU481
 1732 0020 1A4B     		ldr	r3, .L135+12
 1733 0022 1B68     		ldr	r3, [r3]
2112:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1734              		.loc 1 2112 1 is_stmt 0 discriminator 2 view .LVU482
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 136


 1735 0024 03B0     		add	sp, sp, #12
 1736              	.LCFI19:
 1737              		.cfi_remember_state
 1738              		.cfi_def_cfa_offset 4
 1739              		@ sp needed
 1740 0026 5DF804FB 		ldr	pc, [sp], #4
 1741              	.LVL147:
 1742              	.L132:
 1743              	.LCFI20:
 1744              		.cfi_restore_state
2059:FreeRTOS/tasks.c **** 
 1745              		.loc 1 2059 9 is_stmt 1 view .LVU483
 1746              	.LBB131:
 1747              	.LBI131:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 1748              		.loc 2 193 34 view .LVU484
 1749              	.LBB132:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1750              		.loc 2 195 9 view .LVU485
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1751              		.loc 2 197 9 view .LVU486
 1752              		.syntax unified
 1753              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1754 002a 4FF05003 			mov r3, #80												
 1755 002e 83F31188 		msr basepri, r3											
 1756 0032 BFF36F8F 		isb														
 1757 0036 BFF34F8F 		dsb														
 1758              	
 1759              	@ 0 "" 2
 1760              		.thumb
 1761              		.syntax unified
 1762              	.LBE132:
 1763              	.LBE131:
2071:FreeRTOS/tasks.c ****         xSchedulerRunning = pdTRUE;
 1764              		.loc 1 2071 9 view .LVU487
2071:FreeRTOS/tasks.c ****         xSchedulerRunning = pdTRUE;
 1765              		.loc 1 2071 30 is_stmt 0 view .LVU488
 1766 003a 154B     		ldr	r3, .L135+16
 1767 003c 4FF0FF32 		mov	r2, #-1
 1768 0040 1A60     		str	r2, [r3]
2072:FreeRTOS/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1769              		.loc 1 2072 9 is_stmt 1 view .LVU489
2072:FreeRTOS/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1770              		.loc 1 2072 27 is_stmt 0 view .LVU490
 1771 0042 144B     		ldr	r3, .L135+20
 1772 0044 0122     		movs	r2, #1
 1773 0046 1A60     		str	r2, [r3]
2073:FreeRTOS/tasks.c **** 
 1774              		.loc 1 2073 9 is_stmt 1 view .LVU491
2073:FreeRTOS/tasks.c **** 
 1775              		.loc 1 2073 20 is_stmt 0 view .LVU492
 1776 0048 134B     		ldr	r3, .L135+24
 1777 004a 0022     		movs	r2, #0
 1778 004c 1A60     		str	r2, [r3]
2081:FreeRTOS/tasks.c **** 
 1779              		.loc 1 2081 49 is_stmt 1 view .LVU493
2083:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 137


 1780              		.loc 1 2083 9 view .LVU494
 1781 004e 134B     		ldr	r3, .L135+28
 1782 0050 1A68     		ldr	r2, [r3]
 1783 0052 0B4B     		ldr	r3, .L135
 1784 0054 1B68     		ldr	r3, [r3]
 1785 0056 9A42     		cmp	r2, r3
 1786 0058 06D0     		beq	.L134
2083:FreeRTOS/tasks.c **** 
 1787              		.loc 1 2083 9 discriminator 2 view .LVU495
 1788 005a 104B     		ldr	r3, .L135+28
 1789 005c 1868     		ldr	r0, [r3]
 1790              	.LVL148:
2083:FreeRTOS/tasks.c **** 
 1791              		.loc 1 2083 9 is_stmt 0 discriminator 2 view .LVU496
 1792 005e FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartExec
 1793              	.LVL149:
 1794              	.L128:
2083:FreeRTOS/tasks.c **** 
 1795              		.loc 1 2083 32 is_stmt 1 discriminator 4 view .LVU497
2087:FreeRTOS/tasks.c ****         {
 1796              		.loc 1 2087 9 discriminator 4 view .LVU498
2087:FreeRTOS/tasks.c ****         {
 1797              		.loc 1 2087 13 is_stmt 0 discriminator 4 view .LVU499
 1798 0062 FFF7FEFF 		bl	xPortStartScheduler
 1799              	.LVL150:
 1800 0066 DBE7     		b	.L129
 1801              	.LVL151:
 1802              	.L134:
2083:FreeRTOS/tasks.c **** 
 1803              		.loc 1 2083 9 is_stmt 1 discriminator 1 view .LVU500
 1804 0068 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnIdle
 1805              	.LVL152:
2083:FreeRTOS/tasks.c **** 
 1806              		.loc 1 2083 9 is_stmt 0 discriminator 1 view .LVU501
 1807 006c F9E7     		b	.L128
 1808              	.LVL153:
 1809              	.L133:
2102:FreeRTOS/tasks.c ****     }
 1810              		.loc 1 2102 9 is_stmt 1 view .LVU502
 1811              	.LBB133:
 1812              	.LBI133:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 1813              		.loc 2 193 34 view .LVU503
 1814              	.LBB134:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1815              		.loc 2 195 9 view .LVU504
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1816              		.loc 2 197 9 view .LVU505
 1817              		.syntax unified
 1818              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1819 006e 4FF05003 			mov r3, #80												
 1820 0072 83F31188 		msr basepri, r3											
 1821 0076 BFF36F8F 		isb														
 1822 007a BFF34F8F 		dsb														
 1823              	
 1824              	@ 0 "" 2
 1825              	.LVL154:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 138


 1826              		.thumb
 1827              		.syntax unified
 1828              	.L130:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1829              		.loc 2 197 9 is_stmt 0 view .LVU506
 1830              	.LBE134:
 1831              	.LBE133:
2102:FreeRTOS/tasks.c ****     }
 1832              		.loc 1 2102 9 is_stmt 1 discriminator 2 view .LVU507
2102:FreeRTOS/tasks.c ****     }
 1833              		.loc 1 2102 9 discriminator 2 view .LVU508
2102:FreeRTOS/tasks.c ****     }
 1834              		.loc 1 2102 9 discriminator 2 view .LVU509
 1835 007e FEE7     		b	.L130
 1836              	.L136:
 1837              		.align	2
 1838              	.L135:
 1839 0080 00000000 		.word	.LANCHOR16
 1840 0084 00000000 		.word	.LC0
 1841 0088 00000000 		.word	prvIdleTask
 1842 008c 00000000 		.word	.LANCHOR17
 1843 0090 00000000 		.word	.LANCHOR4
 1844 0094 00000000 		.word	.LANCHOR10
 1845 0098 00000000 		.word	.LANCHOR13
 1846 009c 00000000 		.word	.LANCHOR9
 1847              		.cfi_endproc
 1848              	.LFE15:
 1850              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1851              		.align	1
 1852              		.global	vTaskEndScheduler
 1853              		.syntax unified
 1854              		.thumb
 1855              		.thumb_func
 1857              	vTaskEndScheduler:
 1858              	.LFB16:
2116:FreeRTOS/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
 1859              		.loc 1 2116 1 view -0
 1860              		.cfi_startproc
 1861              		@ args = 0, pretend = 0, frame = 0
 1862              		@ frame_needed = 0, uses_anonymous_args = 0
 1863 0000 08B5     		push	{r3, lr}
 1864              	.LCFI21:
 1865              		.cfi_def_cfa_offset 8
 1866              		.cfi_offset 3, -8
 1867              		.cfi_offset 14, -4
2120:FreeRTOS/tasks.c ****     xSchedulerRunning = pdFALSE;
 1868              		.loc 1 2120 5 view .LVU511
 1869              	.LBB135:
 1870              	.LBI135:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 1871              		.loc 2 193 34 view .LVU512
 1872              	.LBB136:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1873              		.loc 2 195 9 view .LVU513
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1874              		.loc 2 197 9 view .LVU514
 1875              		.syntax unified
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 139


 1876              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1877 0002 4FF05003 			mov r3, #80												
 1878 0006 83F31188 		msr basepri, r3											
 1879 000a BFF36F8F 		isb														
 1880 000e BFF34F8F 		dsb														
 1881              	
 1882              	@ 0 "" 2
 1883              		.thumb
 1884              		.syntax unified
 1885              	.LBE136:
 1886              	.LBE135:
2121:FreeRTOS/tasks.c ****     vPortEndScheduler();
 1887              		.loc 1 2121 5 view .LVU515
2121:FreeRTOS/tasks.c ****     vPortEndScheduler();
 1888              		.loc 1 2121 23 is_stmt 0 view .LVU516
 1889 0012 034B     		ldr	r3, .L139
 1890 0014 0022     		movs	r2, #0
 1891 0016 1A60     		str	r2, [r3]
2122:FreeRTOS/tasks.c **** }
 1892              		.loc 1 2122 5 is_stmt 1 view .LVU517
 1893 0018 FFF7FEFF 		bl	vPortEndScheduler
 1894              	.LVL155:
2123:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 1895              		.loc 1 2123 1 is_stmt 0 view .LVU518
 1896 001c 08BD     		pop	{r3, pc}
 1897              	.L140:
 1898 001e 00BF     		.align	2
 1899              	.L139:
 1900 0020 00000000 		.word	.LANCHOR10
 1901              		.cfi_endproc
 1902              	.LFE16:
 1904              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1905              		.align	1
 1906              		.global	vTaskSuspendAll
 1907              		.syntax unified
 1908              		.thumb
 1909              		.thumb_func
 1911              	vTaskSuspendAll:
 1912              	.LFB17:
2127:FreeRTOS/tasks.c ****     /* A critical section is not required as the variable is of type
 1913              		.loc 1 2127 1 is_stmt 1 view -0
 1914              		.cfi_startproc
 1915              		@ args = 0, pretend = 0, frame = 0
 1916              		@ frame_needed = 0, uses_anonymous_args = 0
 1917              		@ link register save eliminated.
2135:FreeRTOS/tasks.c **** 
 1918              		.loc 1 2135 27 view .LVU520
2139:FreeRTOS/tasks.c **** 
 1919              		.loc 1 2139 5 view .LVU521
 1920 0000 024A     		ldr	r2, .L142
 1921 0002 1368     		ldr	r3, [r2]
 1922 0004 0133     		adds	r3, r3, #1
 1923 0006 1360     		str	r3, [r2]
2143:FreeRTOS/tasks.c **** }
 1924              		.loc 1 2143 5 view .LVU522
2144:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 1925              		.loc 1 2144 1 is_stmt 0 view .LVU523
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 140


 1926 0008 7047     		bx	lr
 1927              	.L143:
 1928 000a 00BF     		.align	2
 1929              	.L142:
 1930 000c 00000000 		.word	.LANCHOR14
 1931              		.cfi_endproc
 1932              	.LFE17:
 1934              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1935              		.align	1
 1936              		.global	xTaskGetTickCount
 1937              		.syntax unified
 1938              		.thumb
 1939              		.thumb_func
 1941              	xTaskGetTickCount:
 1942              	.LFB19:
2322:FreeRTOS/tasks.c ****     TickType_t xTicks;
 1943              		.loc 1 2322 1 is_stmt 1 view -0
 1944              		.cfi_startproc
 1945              		@ args = 0, pretend = 0, frame = 0
 1946              		@ frame_needed = 0, uses_anonymous_args = 0
 1947              		@ link register save eliminated.
2323:FreeRTOS/tasks.c **** 
 1948              		.loc 1 2323 5 view .LVU525
2326:FreeRTOS/tasks.c ****     {
 1949              		.loc 1 2326 35 view .LVU526
2328:FreeRTOS/tasks.c ****     }
 1950              		.loc 1 2328 9 view .LVU527
2328:FreeRTOS/tasks.c ****     }
 1951              		.loc 1 2328 16 is_stmt 0 view .LVU528
 1952 0000 014B     		ldr	r3, .L145
 1953 0002 1868     		ldr	r0, [r3]
 1954              	.LVL156:
2330:FreeRTOS/tasks.c **** 
 1955              		.loc 1 2330 34 is_stmt 1 view .LVU529
2332:FreeRTOS/tasks.c **** }
 1956              		.loc 1 2332 5 view .LVU530
2333:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1957              		.loc 1 2333 1 is_stmt 0 view .LVU531
 1958 0004 7047     		bx	lr
 1959              	.L146:
 1960 0006 00BF     		.align	2
 1961              	.L145:
 1962 0008 00000000 		.word	.LANCHOR13
 1963              		.cfi_endproc
 1964              	.LFE19:
 1966              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1967              		.align	1
 1968              		.global	xTaskGetTickCountFromISR
 1969              		.syntax unified
 1970              		.thumb
 1971              		.thumb_func
 1973              	xTaskGetTickCountFromISR:
 1974              	.LFB20:
2337:FreeRTOS/tasks.c ****     TickType_t xReturn;
 1975              		.loc 1 2337 1 is_stmt 1 view -0
 1976              		.cfi_startproc
 1977              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 141


 1978              		@ frame_needed = 0, uses_anonymous_args = 0
 1979 0000 08B5     		push	{r3, lr}
 1980              	.LCFI22:
 1981              		.cfi_def_cfa_offset 8
 1982              		.cfi_offset 3, -8
 1983              		.cfi_offset 14, -4
2338:FreeRTOS/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
 1984              		.loc 1 2338 5 view .LVU533
2339:FreeRTOS/tasks.c **** 
 1985              		.loc 1 2339 5 view .LVU534
2355:FreeRTOS/tasks.c **** 
 1986              		.loc 1 2355 5 view .LVU535
 1987 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1988              	.LVL157:
2357:FreeRTOS/tasks.c ****     {
 1989              		.loc 1 2357 5 view .LVU536
2359:FreeRTOS/tasks.c ****     }
 1990              		.loc 1 2359 9 view .LVU537
2359:FreeRTOS/tasks.c ****     }
 1991              		.loc 1 2359 17 is_stmt 0 view .LVU538
 1992 0006 014B     		ldr	r3, .L149
 1993 0008 1868     		ldr	r0, [r3]
 1994              	.LVL158:
2361:FreeRTOS/tasks.c **** 
 1995              		.loc 1 2361 5 is_stmt 1 view .LVU539
2363:FreeRTOS/tasks.c **** }
 1996              		.loc 1 2363 5 view .LVU540
2364:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1997              		.loc 1 2364 1 is_stmt 0 view .LVU541
 1998 000a 08BD     		pop	{r3, pc}
 1999              	.L150:
 2000              		.align	2
 2001              	.L149:
 2002 000c 00000000 		.word	.LANCHOR13
 2003              		.cfi_endproc
 2004              	.LFE20:
 2006              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2007              		.align	1
 2008              		.global	uxTaskGetNumberOfTasks
 2009              		.syntax unified
 2010              		.thumb
 2011              		.thumb_func
 2013              	uxTaskGetNumberOfTasks:
 2014              	.LFB21:
2368:FreeRTOS/tasks.c ****     /* A critical section is not required because the variables are of type
 2015              		.loc 1 2368 1 is_stmt 1 view -0
 2016              		.cfi_startproc
 2017              		@ args = 0, pretend = 0, frame = 0
 2018              		@ frame_needed = 0, uses_anonymous_args = 0
 2019              		@ link register save eliminated.
2371:FreeRTOS/tasks.c **** }
 2020              		.loc 1 2371 5 view .LVU543
2371:FreeRTOS/tasks.c **** }
 2021              		.loc 1 2371 12 is_stmt 0 view .LVU544
 2022 0000 014B     		ldr	r3, .L152
 2023 0002 1868     		ldr	r0, [r3]
2372:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 142


 2024              		.loc 1 2372 1 view .LVU545
 2025 0004 7047     		bx	lr
 2026              	.L153:
 2027 0006 00BF     		.align	2
 2028              	.L152:
 2029 0008 00000000 		.word	.LANCHOR8
 2030              		.cfi_endproc
 2031              	.LFE21:
 2033              		.section	.text.pcTaskGetName,"ax",%progbits
 2034              		.align	1
 2035              		.global	pcTaskGetName
 2036              		.syntax unified
 2037              		.thumb
 2038              		.thumb_func
 2040              	pcTaskGetName:
 2041              	.LVL159:
 2042              	.LFB22:
2376:FreeRTOS/tasks.c ****     TCB_t * pxTCB;
 2043              		.loc 1 2376 1 is_stmt 1 view -0
 2044              		.cfi_startproc
 2045              		@ args = 0, pretend = 0, frame = 0
 2046              		@ frame_needed = 0, uses_anonymous_args = 0
 2047              		@ link register save eliminated.
2377:FreeRTOS/tasks.c **** 
 2048              		.loc 1 2377 5 view .LVU547
2381:FreeRTOS/tasks.c ****     configASSERT( pxTCB );
 2049              		.loc 1 2381 5 view .LVU548
2381:FreeRTOS/tasks.c ****     configASSERT( pxTCB );
 2050              		.loc 1 2381 13 is_stmt 0 view .LVU549
 2051 0000 0346     		mov	r3, r0
 2052 0002 18B1     		cbz	r0, .L158
 2053              	.LVL160:
 2054              	.L155:
2382:FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2055              		.loc 1 2382 5 is_stmt 1 discriminator 4 view .LVU550
 2056 0004 2BB1     		cbz	r3, .L159
2382:FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2057              		.loc 1 2382 26 discriminator 2 view .LVU551
2383:FreeRTOS/tasks.c **** }
 2058              		.loc 1 2383 5 discriminator 2 view .LVU552
2384:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2059              		.loc 1 2384 1 is_stmt 0 discriminator 2 view .LVU553
 2060 0006 03F13400 		add	r0, r3, #52
 2061 000a 7047     		bx	lr
 2062              	.LVL161:
 2063              	.L158:
2381:FreeRTOS/tasks.c ****     configASSERT( pxTCB );
 2064              		.loc 1 2381 13 discriminator 1 view .LVU554
 2065 000c 054B     		ldr	r3, .L160
 2066 000e 1B68     		ldr	r3, [r3]
 2067              	.LVL162:
2381:FreeRTOS/tasks.c ****     configASSERT( pxTCB );
 2068              		.loc 1 2381 13 discriminator 1 view .LVU555
 2069 0010 F8E7     		b	.L155
 2070              	.LVL163:
 2071              	.L159:
2382:FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 143


 2072              		.loc 1 2382 5 is_stmt 1 view .LVU556
 2073              	.LBB137:
 2074              	.LBI137:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 2075              		.loc 2 193 34 view .LVU557
 2076              	.LBB138:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2077              		.loc 2 195 9 view .LVU558
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2078              		.loc 2 197 9 view .LVU559
 2079              		.syntax unified
 2080              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2081 0012 4FF05003 			mov r3, #80												
 2082 0016 83F31188 		msr basepri, r3											
 2083 001a BFF36F8F 		isb														
 2084 001e BFF34F8F 		dsb														
 2085              	
 2086              	@ 0 "" 2
 2087              	.LVL164:
 2088              		.thumb
 2089              		.syntax unified
 2090              	.L157:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2091              		.loc 2 197 9 is_stmt 0 view .LVU560
 2092              	.LBE138:
 2093              	.LBE137:
2382:FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2094              		.loc 1 2382 5 is_stmt 1 discriminator 1 view .LVU561
2382:FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2095              		.loc 1 2382 5 discriminator 1 view .LVU562
2382:FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2096              		.loc 1 2382 5 discriminator 1 view .LVU563
 2097 0022 FEE7     		b	.L157
 2098              	.L161:
 2099              		.align	2
 2100              	.L160:
 2101 0024 00000000 		.word	.LANCHOR9
 2102              		.cfi_endproc
 2103              	.LFE22:
 2105              		.section	.text.xTaskGetIdleTaskHandle,"ax",%progbits
 2106              		.align	1
 2107              		.global	xTaskGetIdleTaskHandle
 2108              		.syntax unified
 2109              		.thumb
 2110              		.thumb_func
 2112              	xTaskGetIdleTaskHandle:
 2113              	.LFB26:
2598:FreeRTOS/tasks.c ****         /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
 2114              		.loc 1 2598 5 view -0
 2115              		.cfi_startproc
 2116              		@ args = 0, pretend = 0, frame = 0
 2117              		@ frame_needed = 0, uses_anonymous_args = 0
 2118              		@ link register save eliminated.
2601:FreeRTOS/tasks.c ****         return xIdleTaskHandle;
 2119              		.loc 1 2601 9 view .LVU565
 2120 0000 064B     		ldr	r3, .L166
 2121 0002 1868     		ldr	r0, [r3]
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 144


 2122 0004 00B1     		cbz	r0, .L165
2603:FreeRTOS/tasks.c **** 
 2123              		.loc 1 2603 5 is_stmt 0 view .LVU566
 2124 0006 7047     		bx	lr
 2125              	.L165:
2601:FreeRTOS/tasks.c ****         return xIdleTaskHandle;
 2126              		.loc 1 2601 9 is_stmt 1 view .LVU567
 2127              	.LBB139:
 2128              	.LBI139:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 2129              		.loc 2 193 34 view .LVU568
 2130              	.LBB140:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2131              		.loc 2 195 9 view .LVU569
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2132              		.loc 2 197 9 view .LVU570
 2133              		.syntax unified
 2134              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2135 0008 4FF05003 			mov r3, #80												
 2136 000c 83F31188 		msr basepri, r3											
 2137 0010 BFF36F8F 		isb														
 2138 0014 BFF34F8F 		dsb														
 2139              	
 2140              	@ 0 "" 2
 2141              	.LVL165:
 2142              		.thumb
 2143              		.syntax unified
 2144              	.L164:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2145              		.loc 2 197 9 is_stmt 0 view .LVU571
 2146              	.LBE140:
 2147              	.LBE139:
2601:FreeRTOS/tasks.c ****         return xIdleTaskHandle;
 2148              		.loc 1 2601 9 is_stmt 1 discriminator 1 view .LVU572
2601:FreeRTOS/tasks.c ****         return xIdleTaskHandle;
 2149              		.loc 1 2601 9 discriminator 1 view .LVU573
2601:FreeRTOS/tasks.c ****         return xIdleTaskHandle;
 2150              		.loc 1 2601 9 discriminator 1 view .LVU574
 2151 0018 FEE7     		b	.L164
 2152              	.L167:
 2153 001a 00BF     		.align	2
 2154              	.L166:
 2155 001c 00000000 		.word	.LANCHOR16
 2156              		.cfi_endproc
 2157              	.LFE26:
 2159              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2160              		.align	1
 2161              		.global	xTaskIncrementTick
 2162              		.syntax unified
 2163              		.thumb
 2164              		.thumb_func
 2166              	xTaskIncrementTick:
 2167              	.LFB28:
2726:FreeRTOS/tasks.c ****     TCB_t * pxTCB;
 2168              		.loc 1 2726 1 view -0
 2169              		.cfi_startproc
 2170              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 145


 2171              		@ frame_needed = 0, uses_anonymous_args = 0
 2172 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2173              	.LCFI23:
 2174              		.cfi_def_cfa_offset 24
 2175              		.cfi_offset 3, -24
 2176              		.cfi_offset 4, -20
 2177              		.cfi_offset 5, -16
 2178              		.cfi_offset 6, -12
 2179              		.cfi_offset 7, -8
 2180              		.cfi_offset 14, -4
2727:FreeRTOS/tasks.c ****     TickType_t xItemValue;
 2181              		.loc 1 2727 5 view .LVU576
2728:FreeRTOS/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
 2182              		.loc 1 2728 5 view .LVU577
2729:FreeRTOS/tasks.c **** 
 2183              		.loc 1 2729 5 view .LVU578
 2184              	.LVL166:
2734:FreeRTOS/tasks.c **** 
 2185              		.loc 1 2734 43 view .LVU579
2736:FreeRTOS/tasks.c ****     {
 2186              		.loc 1 2736 5 view .LVU580
2736:FreeRTOS/tasks.c ****     {
 2187              		.loc 1 2736 30 is_stmt 0 view .LVU581
 2188 0002 3C4B     		ldr	r3, .L189
 2189 0004 1B68     		ldr	r3, [r3]
2736:FreeRTOS/tasks.c ****     {
 2190              		.loc 1 2736 7 view .LVU582
 2191 0006 002B     		cmp	r3, #0
 2192 0008 6CD1     		bne	.L169
 2193              	.LBB141:
2740:FreeRTOS/tasks.c **** 
 2194              		.loc 1 2740 9 is_stmt 1 view .LVU583
2740:FreeRTOS/tasks.c **** 
 2195              		.loc 1 2740 55 is_stmt 0 view .LVU584
 2196 000a 3B4B     		ldr	r3, .L189+4
 2197 000c 1D68     		ldr	r5, [r3]
2740:FreeRTOS/tasks.c **** 
 2198              		.loc 1 2740 26 view .LVU585
 2199 000e 0135     		adds	r5, r5, #1
 2200              	.LVL167:
2744:FreeRTOS/tasks.c **** 
 2201              		.loc 1 2744 9 is_stmt 1 view .LVU586
2744:FreeRTOS/tasks.c **** 
 2202              		.loc 1 2744 20 is_stmt 0 view .LVU587
 2203 0010 1D60     		str	r5, [r3]
2746:FreeRTOS/tasks.c ****         {
 2204              		.loc 1 2746 9 is_stmt 1 view .LVU588
2746:FreeRTOS/tasks.c ****         {
 2205              		.loc 1 2746 11 is_stmt 0 view .LVU589
 2206 0012 C5B9     		cbnz	r5, .L170
 2207              	.LBB142:
2748:FreeRTOS/tasks.c ****         }
 2208              		.loc 1 2748 13 is_stmt 1 view .LVU590
2748:FreeRTOS/tasks.c ****         }
 2209              		.loc 1 2748 13 view .LVU591
 2210 0014 394B     		ldr	r3, .L189+8
 2211 0016 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 146


 2212 0018 1B68     		ldr	r3, [r3]
 2213 001a 43B1     		cbz	r3, .L171
2748:FreeRTOS/tasks.c ****         }
 2214              		.loc 1 2748 13 view .LVU592
 2215              	.LBB143:
 2216              	.LBI143:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 2217              		.loc 2 193 34 view .LVU593
 2218              	.LBB144:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2219              		.loc 2 195 9 view .LVU594
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2220              		.loc 2 197 9 view .LVU595
 2221              		.syntax unified
 2222              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2223 001c 4FF05003 			mov r3, #80												
 2224 0020 83F31188 		msr basepri, r3											
 2225 0024 BFF36F8F 		isb														
 2226 0028 BFF34F8F 		dsb														
 2227              	
 2228              	@ 0 "" 2
 2229              	.LVL168:
 2230              		.thumb
 2231              		.syntax unified
 2232              	.L172:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2233              		.loc 2 197 9 is_stmt 0 view .LVU596
 2234              	.LBE144:
 2235              	.LBE143:
2748:FreeRTOS/tasks.c ****         }
 2236              		.loc 1 2748 13 is_stmt 1 discriminator 1 view .LVU597
2748:FreeRTOS/tasks.c ****         }
 2237              		.loc 1 2748 13 discriminator 1 view .LVU598
2748:FreeRTOS/tasks.c ****         }
 2238              		.loc 1 2748 13 discriminator 1 view .LVU599
 2239 002c FEE7     		b	.L172
 2240              	.L171:
2748:FreeRTOS/tasks.c ****         }
 2241              		.loc 1 2748 13 discriminator 2 view .LVU600
2748:FreeRTOS/tasks.c ****         }
 2242              		.loc 1 2748 13 discriminator 2 view .LVU601
 2243 002e 334A     		ldr	r2, .L189+8
 2244 0030 1168     		ldr	r1, [r2]
 2245              	.LVL169:
2748:FreeRTOS/tasks.c ****         }
 2246              		.loc 1 2748 13 discriminator 2 view .LVU602
 2247 0032 334B     		ldr	r3, .L189+12
 2248 0034 1868     		ldr	r0, [r3]
 2249 0036 1060     		str	r0, [r2]
2748:FreeRTOS/tasks.c ****         }
 2250              		.loc 1 2748 13 discriminator 2 view .LVU603
 2251 0038 1960     		str	r1, [r3]
2748:FreeRTOS/tasks.c ****         }
 2252              		.loc 1 2748 13 discriminator 2 view .LVU604
 2253 003a 324A     		ldr	r2, .L189+16
 2254 003c 1368     		ldr	r3, [r2]
 2255 003e 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 147


 2256 0040 1360     		str	r3, [r2]
2748:FreeRTOS/tasks.c ****         }
 2257              		.loc 1 2748 13 discriminator 2 view .LVU605
 2258 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2259              	.LVL170:
2748:FreeRTOS/tasks.c ****         }
 2260              		.loc 1 2748 13 is_stmt 0 discriminator 2 view .LVU606
 2261              	.LBE142:
2748:FreeRTOS/tasks.c ****         }
 2262              		.loc 1 2748 39 is_stmt 1 discriminator 2 view .LVU607
 2263              	.L170:
2752:FreeRTOS/tasks.c ****         }
 2264              		.loc 1 2752 37 view .LVU608
2759:FreeRTOS/tasks.c ****         {
 2265              		.loc 1 2759 9 view .LVU609
2759:FreeRTOS/tasks.c ****         {
 2266              		.loc 1 2759 29 is_stmt 0 view .LVU610
 2267 0046 304B     		ldr	r3, .L189+20
 2268 0048 1B68     		ldr	r3, [r3]
2759:FreeRTOS/tasks.c ****         {
 2269              		.loc 1 2759 11 view .LVU611
 2270 004a AB42     		cmp	r3, r5
 2271 004c 40D9     		bls	.L182
 2272              	.LBE141:
2729:FreeRTOS/tasks.c **** 
 2273              		.loc 1 2729 16 view .LVU612
 2274 004e 0027     		movs	r7, #0
 2275              	.LVL171:
 2276              	.L174:
 2277              	.LBB145:
2842:FreeRTOS/tasks.c ****                 {
 2278              		.loc 1 2842 17 is_stmt 1 view .LVU613
2842:FreeRTOS/tasks.c ****                 {
 2279              		.loc 1 2842 21 is_stmt 0 view .LVU614
 2280 0050 2E4B     		ldr	r3, .L189+24
 2281 0052 1B68     		ldr	r3, [r3]
 2282 0054 DB6A     		ldr	r3, [r3, #44]
 2283 0056 03EB8303 		add	r3, r3, r3, lsl #2
 2284 005a 9A00     		lsls	r2, r3, #2
 2285 005c 2C4B     		ldr	r3, .L189+28
 2286 005e 9B58     		ldr	r3, [r3, r2]
2842:FreeRTOS/tasks.c ****                 {
 2287              		.loc 1 2842 19 view .LVU615
 2288 0060 012B     		cmp	r3, #1
 2289 0062 00D9     		bls	.L180
2844:FreeRTOS/tasks.c ****                 }
 2290              		.loc 1 2844 37 view .LVU616
 2291 0064 0127     		movs	r7, #1
 2292              	.LVL172:
 2293              	.L180:
2848:FreeRTOS/tasks.c ****                 }
 2294              		.loc 1 2848 45 is_stmt 1 view .LVU617
2870:FreeRTOS/tasks.c ****                 {
 2295              		.loc 1 2870 17 view .LVU618
2870:FreeRTOS/tasks.c ****                 {
 2296              		.loc 1 2870 35 is_stmt 0 view .LVU619
 2297 0066 2B4B     		ldr	r3, .L189+32
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 148


 2298 0068 1B68     		ldr	r3, [r3]
2870:FreeRTOS/tasks.c ****                 {
 2299              		.loc 1 2870 19 view .LVU620
 2300 006a 002B     		cmp	r3, #0
 2301 006c 3FD0     		beq	.L168
2872:FreeRTOS/tasks.c ****                 }
 2302              		.loc 1 2872 37 view .LVU621
 2303 006e 0127     		movs	r7, #1
 2304              	.LVL173:
2872:FreeRTOS/tasks.c ****                 }
 2305              		.loc 1 2872 37 view .LVU622
 2306              	.LBE145:
2894:FreeRTOS/tasks.c **** }
 2307              		.loc 1 2894 5 is_stmt 1 view .LVU623
2894:FreeRTOS/tasks.c **** }
 2308              		.loc 1 2894 12 is_stmt 0 view .LVU624
 2309 0070 3DE0     		b	.L168
 2310              	.LVL174:
 2311              	.L183:
 2312              	.LBB146:
2825:FreeRTOS/tasks.c ****                             }
 2313              		.loc 1 2825 49 view .LVU625
 2314 0072 0127     		movs	r7, #1
 2315              	.LVL175:
 2316              	.L173:
2761:FreeRTOS/tasks.c ****             {
 2317              		.loc 1 2761 13 is_stmt 1 view .LVU626
2763:FreeRTOS/tasks.c ****                 {
 2318              		.loc 1 2763 17 view .LVU627
2763:FreeRTOS/tasks.c ****                 {
 2319              		.loc 1 2763 21 is_stmt 0 view .LVU628
 2320 0074 214B     		ldr	r3, .L189+8
 2321 0076 1B68     		ldr	r3, [r3]
 2322 0078 1B68     		ldr	r3, [r3]
2763:FreeRTOS/tasks.c ****                 {
 2323              		.loc 1 2763 19 view .LVU629
 2324 007a 5BB3     		cbz	r3, .L187
2779:FreeRTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2325              		.loc 1 2779 21 is_stmt 1 view .LVU630
2779:FreeRTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2326              		.loc 1 2779 29 is_stmt 0 view .LVU631
 2327 007c 1F4B     		ldr	r3, .L189+8
 2328 007e 1B68     		ldr	r3, [r3]
 2329 0080 DB68     		ldr	r3, [r3, #12]
2779:FreeRTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2330              		.loc 1 2779 27 view .LVU632
 2331 0082 DC68     		ldr	r4, [r3, #12]
 2332              	.LVL176:
2780:FreeRTOS/tasks.c **** 
 2333              		.loc 1 2780 21 is_stmt 1 view .LVU633
2780:FreeRTOS/tasks.c **** 
 2334              		.loc 1 2780 32 is_stmt 0 view .LVU634
 2335 0084 6368     		ldr	r3, [r4, #4]
 2336              	.LVL177:
2782:FreeRTOS/tasks.c ****                     {
 2337              		.loc 1 2782 21 is_stmt 1 view .LVU635
2782:FreeRTOS/tasks.c ****                     {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 149


 2338              		.loc 1 2782 23 is_stmt 0 view .LVU636
 2339 0086 9D42     		cmp	r5, r3
 2340 0088 29D3     		bcc	.L188
2794:FreeRTOS/tasks.c ****                     }
 2341              		.loc 1 2794 49 is_stmt 1 view .LVU637
2798:FreeRTOS/tasks.c **** 
 2342              		.loc 1 2798 21 view .LVU638
2798:FreeRTOS/tasks.c **** 
 2343              		.loc 1 2798 30 is_stmt 0 view .LVU639
 2344 008a 261D     		adds	r6, r4, #4
 2345 008c 3046     		mov	r0, r6
 2346 008e FFF7FEFF 		bl	uxListRemove
 2347              	.LVL178:
2802:FreeRTOS/tasks.c ****                     {
 2348              		.loc 1 2802 21 is_stmt 1 view .LVU640
2802:FreeRTOS/tasks.c ****                     {
 2349              		.loc 1 2802 25 is_stmt 0 view .LVU641
 2350 0092 A36A     		ldr	r3, [r4, #40]
2802:FreeRTOS/tasks.c ****                     {
 2351              		.loc 1 2802 23 view .LVU642
 2352 0094 1BB1     		cbz	r3, .L177
2804:FreeRTOS/tasks.c ****                     }
 2353              		.loc 1 2804 25 is_stmt 1 view .LVU643
2804:FreeRTOS/tasks.c ****                     }
 2354              		.loc 1 2804 34 is_stmt 0 view .LVU644
 2355 0096 04F11800 		add	r0, r4, #24
 2356 009a FFF7FEFF 		bl	uxListRemove
 2357              	.LVL179:
 2358              	.L177:
2808:FreeRTOS/tasks.c ****                     }
 2359              		.loc 1 2808 49 is_stmt 1 view .LVU645
2813:FreeRTOS/tasks.c **** 
 2360              		.loc 1 2813 21 view .LVU646
 2361 009e 2046     		mov	r0, r4
 2362 00a0 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 2363              	.LVL180:
2813:FreeRTOS/tasks.c **** 
 2364              		.loc 1 2813 21 view .LVU647
 2365 00a4 E36A     		ldr	r3, [r4, #44]
 2366 00a6 0122     		movs	r2, #1
 2367 00a8 9A40     		lsls	r2, r2, r3
 2368 00aa 1B49     		ldr	r1, .L189+36
 2369 00ac 0868     		ldr	r0, [r1]
 2370 00ae 0243     		orrs	r2, r2, r0
 2371 00b0 0A60     		str	r2, [r1]
2813:FreeRTOS/tasks.c **** 
 2372              		.loc 1 2813 21 view .LVU648
 2373 00b2 03EB8303 		add	r3, r3, r3, lsl #2
 2374 00b6 9A00     		lsls	r2, r3, #2
 2375 00b8 3146     		mov	r1, r6
 2376 00ba 1548     		ldr	r0, .L189+28
 2377 00bc 1044     		add	r0, r0, r2
 2378 00be FFF7FEFF 		bl	vListInsertEnd
 2379              	.LVL181:
2813:FreeRTOS/tasks.c **** 
 2380              		.loc 1 2813 51 view .LVU649
2823:FreeRTOS/tasks.c ****                             {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 150


 2381              		.loc 1 2823 29 view .LVU650
2823:FreeRTOS/tasks.c ****                             {
 2382              		.loc 1 2823 38 is_stmt 0 view .LVU651
 2383 00c2 E26A     		ldr	r2, [r4, #44]
2823:FreeRTOS/tasks.c ****                             {
 2384              		.loc 1 2823 66 view .LVU652
 2385 00c4 114B     		ldr	r3, .L189+24
 2386 00c6 1B68     		ldr	r3, [r3]
 2387 00c8 DB6A     		ldr	r3, [r3, #44]
2823:FreeRTOS/tasks.c ****                             {
 2388              		.loc 1 2823 31 view .LVU653
 2389 00ca 9A42     		cmp	r2, r3
 2390 00cc D1D2     		bcs	.L183
 2391 00ce D1E7     		b	.L173
 2392              	.LVL182:
 2393              	.L182:
2823:FreeRTOS/tasks.c ****                             {
 2394              		.loc 1 2823 31 view .LVU654
 2395              	.LBE146:
2729:FreeRTOS/tasks.c **** 
 2396              		.loc 1 2729 16 view .LVU655
 2397 00d0 0027     		movs	r7, #0
 2398 00d2 CFE7     		b	.L173
 2399              	.LVL183:
 2400              	.L187:
 2401              	.LBB147:
2770:FreeRTOS/tasks.c ****                     break;
 2402              		.loc 1 2770 21 is_stmt 1 view .LVU656
2770:FreeRTOS/tasks.c ****                     break;
 2403              		.loc 1 2770 42 is_stmt 0 view .LVU657
 2404 00d4 0C4B     		ldr	r3, .L189+20
 2405 00d6 4FF0FF32 		mov	r2, #-1
 2406 00da 1A60     		str	r2, [r3]
2771:FreeRTOS/tasks.c ****                 }
 2407              		.loc 1 2771 21 is_stmt 1 view .LVU658
 2408 00dc B8E7     		b	.L174
 2409              	.LVL184:
 2410              	.L188:
2789:FreeRTOS/tasks.c ****                         break; /*lint !e9011 Code structure here is deedmed easier to understand wi
 2411              		.loc 1 2789 25 view .LVU659
2789:FreeRTOS/tasks.c ****                         break; /*lint !e9011 Code structure here is deedmed easier to understand wi
 2412              		.loc 1 2789 46 is_stmt 0 view .LVU660
 2413 00de 0A4A     		ldr	r2, .L189+20
 2414 00e0 1360     		str	r3, [r2]
2790:FreeRTOS/tasks.c ****                     }
 2415              		.loc 1 2790 25 is_stmt 1 view .LVU661
 2416 00e2 B5E7     		b	.L174
 2417              	.LVL185:
 2418              	.L169:
2790:FreeRTOS/tasks.c ****                     }
 2419              		.loc 1 2790 25 is_stmt 0 view .LVU662
 2420              	.LBE147:
2883:FreeRTOS/tasks.c **** 
 2421              		.loc 1 2883 9 is_stmt 1 view .LVU663
 2422 00e4 0D4A     		ldr	r2, .L189+40
 2423 00e6 1368     		ldr	r3, [r2]
 2424 00e8 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 151


 2425 00ea 1360     		str	r3, [r2]
2729:FreeRTOS/tasks.c **** 
 2426              		.loc 1 2729 16 is_stmt 0 view .LVU664
 2427 00ec 0027     		movs	r7, #0
 2428              	.LVL186:
 2429              	.L168:
2895:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2430              		.loc 1 2895 1 view .LVU665
 2431 00ee 3846     		mov	r0, r7
 2432 00f0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2433              	.L190:
 2434 00f2 00BF     		.align	2
 2435              	.L189:
 2436 00f4 00000000 		.word	.LANCHOR14
 2437 00f8 00000000 		.word	.LANCHOR13
 2438 00fc 00000000 		.word	.LANCHOR3
 2439 0100 00000000 		.word	.LANCHOR7
 2440 0104 00000000 		.word	.LANCHOR18
 2441 0108 00000000 		.word	.LANCHOR4
 2442 010c 00000000 		.word	.LANCHOR9
 2443 0110 00000000 		.word	.LANCHOR2
 2444 0114 00000000 		.word	.LANCHOR15
 2445 0118 00000000 		.word	.LANCHOR12
 2446 011c 00000000 		.word	.LANCHOR19
 2447              		.cfi_endproc
 2448              	.LFE28:
 2450              		.section	.text.xTaskResumeAll,"ax",%progbits
 2451              		.align	1
 2452              		.global	xTaskResumeAll
 2453              		.syntax unified
 2454              		.thumb
 2455              		.thumb_func
 2457              	xTaskResumeAll:
 2458              	.LFB18:
2211:FreeRTOS/tasks.c ****     TCB_t * pxTCB = NULL;
 2459              		.loc 1 2211 1 is_stmt 1 view -0
 2460              		.cfi_startproc
 2461              		@ args = 0, pretend = 0, frame = 0
 2462              		@ frame_needed = 0, uses_anonymous_args = 0
 2463 0000 38B5     		push	{r3, r4, r5, lr}
 2464              	.LCFI24:
 2465              		.cfi_def_cfa_offset 16
 2466              		.cfi_offset 3, -16
 2467              		.cfi_offset 4, -12
 2468              		.cfi_offset 5, -8
 2469              		.cfi_offset 14, -4
2212:FreeRTOS/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
 2470              		.loc 1 2212 5 view .LVU667
 2471              	.LVL187:
2213:FreeRTOS/tasks.c **** 
 2472              		.loc 1 2213 5 view .LVU668
2217:FreeRTOS/tasks.c **** 
 2473              		.loc 1 2217 5 view .LVU669
 2474 0002 364B     		ldr	r3, .L207
 2475 0004 1B68     		ldr	r3, [r3]
 2476 0006 43B9     		cbnz	r3, .L192
2217:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 152


 2477              		.loc 1 2217 5 view .LVU670
 2478              	.LBB148:
 2479              	.LBI148:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 2480              		.loc 2 193 34 view .LVU671
 2481              	.LBB149:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2482              		.loc 2 195 9 view .LVU672
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2483              		.loc 2 197 9 view .LVU673
 2484              		.syntax unified
 2485              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2486 0008 4FF05003 			mov r3, #80												
 2487 000c 83F31188 		msr basepri, r3											
 2488 0010 BFF36F8F 		isb														
 2489 0014 BFF34F8F 		dsb														
 2490              	
 2491              	@ 0 "" 2
 2492              	.LVL188:
 2493              		.thumb
 2494              		.syntax unified
 2495              	.L193:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2496              		.loc 2 197 9 is_stmt 0 view .LVU674
 2497              	.LBE149:
 2498              	.LBE148:
2217:FreeRTOS/tasks.c **** 
 2499              		.loc 1 2217 5 is_stmt 1 discriminator 1 view .LVU675
2217:FreeRTOS/tasks.c **** 
 2500              		.loc 1 2217 5 discriminator 1 view .LVU676
2217:FreeRTOS/tasks.c **** 
 2501              		.loc 1 2217 5 discriminator 1 view .LVU677
 2502 0018 FEE7     		b	.L193
 2503              	.L192:
2217:FreeRTOS/tasks.c **** 
 2504              		.loc 1 2217 41 discriminator 2 view .LVU678
2224:FreeRTOS/tasks.c ****     {
 2505              		.loc 1 2224 5 discriminator 2 view .LVU679
 2506 001a FFF7FEFF 		bl	vPortEnterCritical
 2507              	.LVL189:
2226:FreeRTOS/tasks.c **** 
 2508              		.loc 1 2226 9 discriminator 2 view .LVU680
 2509 001e 2F4B     		ldr	r3, .L207
 2510 0020 1A68     		ldr	r2, [r3]
 2511 0022 013A     		subs	r2, r2, #1
 2512 0024 1A60     		str	r2, [r3]
2228:FreeRTOS/tasks.c ****         {
 2513              		.loc 1 2228 9 discriminator 2 view .LVU681
2228:FreeRTOS/tasks.c ****         {
 2514              		.loc 1 2228 34 is_stmt 0 discriminator 2 view .LVU682
 2515 0026 1B68     		ldr	r3, [r3]
2228:FreeRTOS/tasks.c ****         {
 2516              		.loc 1 2228 11 discriminator 2 view .LVU683
 2517 0028 002B     		cmp	r3, #0
 2518 002a 52D1     		bne	.L202
2230:FreeRTOS/tasks.c ****             {
 2519              		.loc 1 2230 13 is_stmt 1 view .LVU684
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 153


2230:FreeRTOS/tasks.c ****             {
 2520              		.loc 1 2230 40 is_stmt 0 view .LVU685
 2521 002c 2C4B     		ldr	r3, .L207+4
 2522 002e 1B68     		ldr	r3, [r3]
2230:FreeRTOS/tasks.c ****             {
 2523              		.loc 1 2230 15 view .LVU686
 2524 0030 0BB9     		cbnz	r3, .L203
2213:FreeRTOS/tasks.c **** 
 2525              		.loc 1 2213 16 view .LVU687
 2526 0032 0024     		movs	r4, #0
 2527 0034 4EE0     		b	.L194
 2528              	.L203:
2212:FreeRTOS/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
 2529              		.loc 1 2212 13 view .LVU688
 2530 0036 0024     		movs	r4, #0
 2531              	.LVL190:
 2532              	.L195:
2249:FreeRTOS/tasks.c ****                     }
 2533              		.loc 1 2249 49 is_stmt 1 view .LVU689
2234:FreeRTOS/tasks.c ****                 {
 2534              		.loc 1 2234 22 view .LVU690
2234:FreeRTOS/tasks.c ****                 {
 2535              		.loc 1 2234 24 is_stmt 0 view .LVU691
 2536 0038 2A4B     		ldr	r3, .L207+8
 2537 003a 1B68     		ldr	r3, [r3]
2234:FreeRTOS/tasks.c ****                 {
 2538              		.loc 1 2234 22 view .LVU692
 2539 003c 33B3     		cbz	r3, .L205
2236:FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2540              		.loc 1 2236 21 is_stmt 1 view .LVU693
2236:FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2541              		.loc 1 2236 29 is_stmt 0 view .LVU694
 2542 003e 294B     		ldr	r3, .L207+8
 2543 0040 DB68     		ldr	r3, [r3, #12]
2236:FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2544              		.loc 1 2236 27 view .LVU695
 2545 0042 DC68     		ldr	r4, [r3, #12]
 2546              	.LVL191:
2237:FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2547              		.loc 1 2237 21 is_stmt 1 view .LVU696
2237:FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2548              		.loc 1 2237 30 is_stmt 0 view .LVU697
 2549 0044 04F11800 		add	r0, r4, #24
 2550 0048 FFF7FEFF 		bl	uxListRemove
 2551              	.LVL192:
2238:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2552              		.loc 1 2238 21 is_stmt 1 view .LVU698
2238:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2553              		.loc 1 2238 30 is_stmt 0 view .LVU699
 2554 004c 251D     		adds	r5, r4, #4
 2555 004e 2846     		mov	r0, r5
 2556 0050 FFF7FEFF 		bl	uxListRemove
 2557              	.LVL193:
2239:FreeRTOS/tasks.c **** 
 2558              		.loc 1 2239 21 is_stmt 1 view .LVU700
 2559 0054 2046     		mov	r0, r4
 2560 0056 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 154


 2561              	.LVL194:
2239:FreeRTOS/tasks.c **** 
 2562              		.loc 1 2239 21 view .LVU701
 2563 005a E06A     		ldr	r0, [r4, #44]
 2564 005c 0123     		movs	r3, #1
 2565 005e 8340     		lsls	r3, r3, r0
 2566 0060 214A     		ldr	r2, .L207+12
 2567 0062 1168     		ldr	r1, [r2]
 2568 0064 0B43     		orrs	r3, r3, r1
 2569 0066 1360     		str	r3, [r2]
2239:FreeRTOS/tasks.c **** 
 2570              		.loc 1 2239 21 view .LVU702
 2571 0068 00EB8000 		add	r0, r0, r0, lsl #2
 2572 006c 2946     		mov	r1, r5
 2573 006e 1F4B     		ldr	r3, .L207+16
 2574 0070 03EB8000 		add	r0, r3, r0, lsl #2
 2575 0074 FFF7FEFF 		bl	vListInsertEnd
 2576              	.LVL195:
2239:FreeRTOS/tasks.c **** 
 2577              		.loc 1 2239 51 view .LVU703
2243:FreeRTOS/tasks.c ****                     {
 2578              		.loc 1 2243 21 view .LVU704
2243:FreeRTOS/tasks.c ****                     {
 2579              		.loc 1 2243 30 is_stmt 0 view .LVU705
 2580 0078 E26A     		ldr	r2, [r4, #44]
2243:FreeRTOS/tasks.c ****                     {
 2581              		.loc 1 2243 58 view .LVU706
 2582 007a 1D4B     		ldr	r3, .L207+20
 2583 007c 1B68     		ldr	r3, [r3]
 2584 007e DB6A     		ldr	r3, [r3, #44]
2243:FreeRTOS/tasks.c ****                     {
 2585              		.loc 1 2243 23 view .LVU707
 2586 0080 9A42     		cmp	r2, r3
 2587 0082 D9D3     		bcc	.L195
2245:FreeRTOS/tasks.c ****                     }
 2588              		.loc 1 2245 25 is_stmt 1 view .LVU708
2245:FreeRTOS/tasks.c ****                     }
 2589              		.loc 1 2245 39 is_stmt 0 view .LVU709
 2590 0084 1B4B     		ldr	r3, .L207+24
 2591 0086 0122     		movs	r2, #1
 2592 0088 1A60     		str	r2, [r3]
 2593 008a D5E7     		b	.L195
 2594              	.L205:
2253:FreeRTOS/tasks.c ****                 {
 2595              		.loc 1 2253 17 is_stmt 1 view .LVU710
2253:FreeRTOS/tasks.c ****                 {
 2596              		.loc 1 2253 19 is_stmt 0 view .LVU711
 2597 008c 0CB1     		cbz	r4, .L198
2261:FreeRTOS/tasks.c ****                 }
 2598              		.loc 1 2261 21 is_stmt 1 view .LVU712
 2599 008e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2600              	.LVL196:
 2601              	.L198:
 2602              	.LBB150:
2269:FreeRTOS/tasks.c **** 
 2603              		.loc 1 2269 21 view .LVU713
2269:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 155


 2604              		.loc 1 2269 32 is_stmt 0 view .LVU714
 2605 0092 194B     		ldr	r3, .L207+28
 2606 0094 1C68     		ldr	r4, [r3]
 2607              	.LVL197:
2271:FreeRTOS/tasks.c ****                     {
 2608              		.loc 1 2271 21 is_stmt 1 view .LVU715
2271:FreeRTOS/tasks.c ****                     {
 2609              		.loc 1 2271 23 is_stmt 0 view .LVU716
 2610 0096 84B9     		cbnz	r4, .L201
 2611              	.L199:
2291:FreeRTOS/tasks.c ****                     }
 2612              		.loc 1 2291 49 is_stmt 1 view .LVU717
 2613              	.LBE150:
2295:FreeRTOS/tasks.c ****                 {
 2614              		.loc 1 2295 17 view .LVU718
2295:FreeRTOS/tasks.c ****                 {
 2615              		.loc 1 2295 35 is_stmt 0 view .LVU719
 2616 0098 164B     		ldr	r3, .L207+24
 2617 009a 1C68     		ldr	r4, [r3]
 2618              	.LVL198:
2295:FreeRTOS/tasks.c ****                 {
 2619              		.loc 1 2295 19 view .LVU720
 2620 009c D4B1     		cbz	r4, .L194
2299:FreeRTOS/tasks.c ****                         }
 2621              		.loc 1 2299 29 is_stmt 1 view .LVU721
 2622              	.LVL199:
2302:FreeRTOS/tasks.c ****                 }
 2623              		.loc 1 2302 21 view .LVU722
 2624 009e 4FF0E023 		mov	r3, #-536813568
 2625 00a2 4FF08052 		mov	r2, #268435456
 2626 00a6 C3F8042D 		str	r2, [r3, #3332]
2302:FreeRTOS/tasks.c ****                 }
 2627              		.loc 1 2302 21 view .LVU723
 2628              		.syntax unified
 2629              	@ 2302 "FreeRTOS/tasks.c" 1
 2630 00aa BFF34F8F 		dsb
 2631              	@ 0 "" 2
2302:FreeRTOS/tasks.c ****                 }
 2632              		.loc 1 2302 21 view .LVU724
 2633              	@ 2302 "FreeRTOS/tasks.c" 1
 2634 00ae BFF36F8F 		isb
 2635              	@ 0 "" 2
2302:FreeRTOS/tasks.c ****                 }
 2636              		.loc 1 2302 52 view .LVU725
2299:FreeRTOS/tasks.c ****                         }
 2637              		.loc 1 2299 45 is_stmt 0 view .LVU726
 2638              		.thumb
 2639              		.syntax unified
 2640 00b2 0124     		movs	r4, #1
 2641 00b4 0EE0     		b	.L194
 2642              	.LVL200:
 2643              	.L200:
 2644              	.LBB151:
2281:FreeRTOS/tasks.c ****                             }
 2645              		.loc 1 2281 57 is_stmt 1 view .LVU727
2284:FreeRTOS/tasks.c ****                         } while( xPendedCounts > ( TickType_t ) 0U );
 2646              		.loc 1 2284 29 view .LVU728
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 156


2285:FreeRTOS/tasks.c **** 
 2647              		.loc 1 2285 32 view .LVU729
2285:FreeRTOS/tasks.c **** 
 2648              		.loc 1 2285 25 is_stmt 0 view .LVU730
 2649 00b6 013C     		subs	r4, r4, #1
 2650              	.LVL201:
2285:FreeRTOS/tasks.c **** 
 2651              		.loc 1 2285 25 view .LVU731
 2652 00b8 07D0     		beq	.L206
 2653              	.L201:
2273:FreeRTOS/tasks.c ****                         {
 2654              		.loc 1 2273 25 is_stmt 1 view .LVU732
2275:FreeRTOS/tasks.c ****                             {
 2655              		.loc 1 2275 29 view .LVU733
2275:FreeRTOS/tasks.c ****                             {
 2656              		.loc 1 2275 33 is_stmt 0 view .LVU734
 2657 00ba FFF7FEFF 		bl	xTaskIncrementTick
 2658              	.LVL202:
2275:FreeRTOS/tasks.c ****                             {
 2659              		.loc 1 2275 31 view .LVU735
 2660 00be 0028     		cmp	r0, #0
 2661 00c0 F9D0     		beq	.L200
2277:FreeRTOS/tasks.c ****                             }
 2662              		.loc 1 2277 33 is_stmt 1 view .LVU736
2277:FreeRTOS/tasks.c ****                             }
 2663              		.loc 1 2277 47 is_stmt 0 view .LVU737
 2664 00c2 0C4B     		ldr	r3, .L207+24
 2665 00c4 0122     		movs	r2, #1
 2666 00c6 1A60     		str	r2, [r3]
 2667 00c8 F5E7     		b	.L200
 2668              	.L206:
2287:FreeRTOS/tasks.c ****                     }
 2669              		.loc 1 2287 25 is_stmt 1 view .LVU738
2287:FreeRTOS/tasks.c ****                     }
 2670              		.loc 1 2287 38 is_stmt 0 view .LVU739
 2671 00ca 0B4B     		ldr	r3, .L207+28
 2672 00cc 0022     		movs	r2, #0
 2673 00ce 1A60     		str	r2, [r3]
 2674 00d0 E2E7     		b	.L199
 2675              	.LVL203:
 2676              	.L202:
2287:FreeRTOS/tasks.c ****                     }
 2677              		.loc 1 2287 38 view .LVU740
 2678              	.LBE151:
2213:FreeRTOS/tasks.c **** 
 2679              		.loc 1 2213 16 view .LVU741
 2680 00d2 0024     		movs	r4, #0
 2681              	.LVL204:
 2682              	.L194:
2312:FreeRTOS/tasks.c ****         }
 2683              		.loc 1 2312 37 is_stmt 1 view .LVU742
2315:FreeRTOS/tasks.c **** 
 2684              		.loc 1 2315 5 view .LVU743
 2685 00d4 FFF7FEFF 		bl	vPortExitCritical
 2686              	.LVL205:
2317:FreeRTOS/tasks.c **** }
 2687              		.loc 1 2317 5 view .LVU744
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 157


2318:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2688              		.loc 1 2318 1 is_stmt 0 view .LVU745
 2689 00d8 2046     		mov	r0, r4
 2690 00da 38BD     		pop	{r3, r4, r5, pc}
 2691              	.LVL206:
 2692              	.L208:
2318:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2693              		.loc 1 2318 1 view .LVU746
 2694              		.align	2
 2695              	.L207:
 2696 00dc 00000000 		.word	.LANCHOR14
 2697 00e0 00000000 		.word	.LANCHOR8
 2698 00e4 00000000 		.word	.LANCHOR1
 2699 00e8 00000000 		.word	.LANCHOR12
 2700 00ec 00000000 		.word	.LANCHOR2
 2701 00f0 00000000 		.word	.LANCHOR9
 2702 00f4 00000000 		.word	.LANCHOR15
 2703 00f8 00000000 		.word	.LANCHOR19
 2704              		.cfi_endproc
 2705              	.LFE18:
 2707              		.section	.text.xTaskDelayUntil,"ax",%progbits
 2708              		.align	1
 2709              		.global	xTaskDelayUntil
 2710              		.syntax unified
 2711              		.thumb
 2712              		.thumb_func
 2714              	xTaskDelayUntil:
 2715              	.LVL207:
 2716              	.LFB8:
1251:FreeRTOS/tasks.c ****         TickType_t xTimeToWake;
 2717              		.loc 1 1251 5 is_stmt 1 view -0
 2718              		.cfi_startproc
 2719              		@ args = 0, pretend = 0, frame = 0
 2720              		@ frame_needed = 0, uses_anonymous_args = 0
1252:FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 2721              		.loc 1 1252 9 view .LVU748
1253:FreeRTOS/tasks.c **** 
 2722              		.loc 1 1253 9 view .LVU749
1255:FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 2723              		.loc 1 1255 9 view .LVU750
 2724 0000 60B1     		cbz	r0, .L226
1251:FreeRTOS/tasks.c ****         TickType_t xTimeToWake;
 2725              		.loc 1 1251 5 is_stmt 0 discriminator 2 view .LVU751
 2726 0002 70B5     		push	{r4, r5, r6, lr}
 2727              	.LCFI25:
 2728              		.cfi_def_cfa_offset 16
 2729              		.cfi_offset 4, -16
 2730              		.cfi_offset 5, -12
 2731              		.cfi_offset 6, -8
 2732              		.cfi_offset 14, -4
 2733 0004 0C46     		mov	r4, r1
 2734 0006 0546     		mov	r5, r0
1255:FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 2735              		.loc 1 1255 43 is_stmt 1 discriminator 2 view .LVU752
1256:FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 2736              		.loc 1 1256 9 discriminator 2 view .LVU753
 2737 0008 89B9     		cbnz	r1, .L212
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 158


1256:FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 2738              		.loc 1 1256 9 view .LVU754
 2739              	.LBB152:
 2740              	.LBI152:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 2741              		.loc 2 193 34 view .LVU755
 2742              	.LBB153:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2743              		.loc 2 195 9 view .LVU756
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2744              		.loc 2 197 9 view .LVU757
 2745              		.syntax unified
 2746              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2747 000a 4FF05003 			mov r3, #80												
 2748 000e 83F31188 		msr basepri, r3											
 2749 0012 BFF36F8F 		isb														
 2750 0016 BFF34F8F 		dsb														
 2751              	
 2752              	@ 0 "" 2
 2753              	.LVL208:
 2754              		.thumb
 2755              		.syntax unified
 2756              	.L213:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2757              		.loc 2 197 9 is_stmt 0 view .LVU758
 2758              	.LBE153:
 2759              	.LBE152:
1256:FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 2760              		.loc 1 1256 9 is_stmt 1 discriminator 2 view .LVU759
1256:FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 2761              		.loc 1 1256 9 discriminator 2 view .LVU760
1256:FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 2762              		.loc 1 1256 9 discriminator 2 view .LVU761
 2763 001a FEE7     		b	.L213
 2764              	.L226:
 2765              	.LCFI26:
 2766              		.cfi_def_cfa_offset 0
 2767              		.cfi_restore 4
 2768              		.cfi_restore 5
 2769              		.cfi_restore 6
 2770              		.cfi_restore 14
1255:FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 2771              		.loc 1 1255 9 view .LVU762
 2772              	.LBB154:
 2773              	.LBI154:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 2774              		.loc 2 193 34 view .LVU763
 2775              	.LBB155:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2776              		.loc 2 195 9 view .LVU764
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2777              		.loc 2 197 9 view .LVU765
 2778              		.syntax unified
 2779              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2780 001c 4FF05003 			mov r3, #80												
 2781 0020 83F31188 		msr basepri, r3											
 2782 0024 BFF36F8F 		isb														
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 159


 2783 0028 BFF34F8F 		dsb														
 2784              	
 2785              	@ 0 "" 2
 2786              	.LVL209:
 2787              		.thumb
 2788              		.syntax unified
 2789              	.L211:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2790              		.loc 2 197 9 is_stmt 0 view .LVU766
 2791              	.LBE155:
 2792              	.LBE154:
1255:FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 2793              		.loc 1 1255 9 is_stmt 1 discriminator 1 view .LVU767
1255:FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 2794              		.loc 1 1255 9 discriminator 1 view .LVU768
1255:FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 2795              		.loc 1 1255 9 discriminator 1 view .LVU769
 2796 002c FEE7     		b	.L211
 2797              	.L212:
 2798              	.LCFI27:
 2799              		.cfi_def_cfa_offset 16
 2800              		.cfi_offset 4, -16
 2801              		.cfi_offset 5, -12
 2802              		.cfi_offset 6, -8
 2803              		.cfi_offset 14, -4
1256:FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 2804              		.loc 1 1256 48 discriminator 2 view .LVU770
1257:FreeRTOS/tasks.c **** 
 2805              		.loc 1 1257 9 discriminator 2 view .LVU771
 2806 002e 1F4B     		ldr	r3, .L227
 2807 0030 1B68     		ldr	r3, [r3]
 2808 0032 43B1     		cbz	r3, .L214
1257:FreeRTOS/tasks.c **** 
 2809              		.loc 1 1257 9 view .LVU772
 2810              	.LBB156:
 2811              	.LBI156:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 2812              		.loc 2 193 34 view .LVU773
 2813              	.LBB157:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2814              		.loc 2 195 9 view .LVU774
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2815              		.loc 2 197 9 view .LVU775
 2816              		.syntax unified
 2817              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2818 0034 4FF05003 			mov r3, #80												
 2819 0038 83F31188 		msr basepri, r3											
 2820 003c BFF36F8F 		isb														
 2821 0040 BFF34F8F 		dsb														
 2822              	
 2823              	@ 0 "" 2
 2824              	.LVL210:
 2825              		.thumb
 2826              		.syntax unified
 2827              	.L215:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2828              		.loc 2 197 9 is_stmt 0 view .LVU776
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 160


 2829              	.LBE157:
 2830              	.LBE156:
1257:FreeRTOS/tasks.c **** 
 2831              		.loc 1 1257 9 is_stmt 1 discriminator 3 view .LVU777
1257:FreeRTOS/tasks.c **** 
 2832              		.loc 1 1257 9 discriminator 3 view .LVU778
1257:FreeRTOS/tasks.c **** 
 2833              		.loc 1 1257 9 discriminator 3 view .LVU779
 2834 0044 FEE7     		b	.L215
 2835              	.L214:
1257:FreeRTOS/tasks.c **** 
 2836              		.loc 1 1257 50 discriminator 2 view .LVU780
1259:FreeRTOS/tasks.c ****         {
 2837              		.loc 1 1259 9 discriminator 2 view .LVU781
 2838 0046 FFF7FEFF 		bl	vTaskSuspendAll
 2839              	.LVL211:
 2840              	.LBB158:
1263:FreeRTOS/tasks.c **** 
 2841              		.loc 1 1263 13 discriminator 2 view .LVU782
1263:FreeRTOS/tasks.c **** 
 2842              		.loc 1 1263 30 is_stmt 0 discriminator 2 view .LVU783
 2843 004a 194B     		ldr	r3, .L227+4
 2844 004c 1E68     		ldr	r6, [r3]
 2845              	.LVL212:
1266:FreeRTOS/tasks.c **** 
 2846              		.loc 1 1266 13 is_stmt 1 discriminator 2 view .LVU784
1266:FreeRTOS/tasks.c **** 
 2847              		.loc 1 1266 27 is_stmt 0 discriminator 2 view .LVU785
 2848 004e 2B68     		ldr	r3, [r5]
1266:FreeRTOS/tasks.c **** 
 2849              		.loc 1 1266 25 discriminator 2 view .LVU786
 2850 0050 1C44     		add	r4, r4, r3
 2851              	.LVL213:
1268:FreeRTOS/tasks.c ****             {
 2852              		.loc 1 1268 13 is_stmt 1 discriminator 2 view .LVU787
1268:FreeRTOS/tasks.c ****             {
 2853              		.loc 1 1268 15 is_stmt 0 discriminator 2 view .LVU788
 2854 0052 B342     		cmp	r3, r6
 2855 0054 0BD9     		bls	.L216
1275:FreeRTOS/tasks.c ****                 {
 2856              		.loc 1 1275 17 is_stmt 1 view .LVU789
1275:FreeRTOS/tasks.c ****                 {
 2857              		.loc 1 1275 19 is_stmt 0 view .LVU790
 2858 0056 A342     		cmp	r3, r4
 2859 0058 02D8     		bhi	.L217
1300:FreeRTOS/tasks.c **** 
 2860              		.loc 1 1300 13 is_stmt 1 view .LVU791
1300:FreeRTOS/tasks.c **** 
 2861              		.loc 1 1300 33 is_stmt 0 view .LVU792
 2862 005a 2C60     		str	r4, [r5]
1302:FreeRTOS/tasks.c ****             {
 2863              		.loc 1 1302 13 is_stmt 1 view .LVU793
 2864              	.LBE158:
1253:FreeRTOS/tasks.c **** 
 2865              		.loc 1 1253 37 is_stmt 0 view .LVU794
 2866 005c 0024     		movs	r4, #0
 2867              	.LVL214:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 161


1253:FreeRTOS/tasks.c **** 
 2868              		.loc 1 1253 37 view .LVU795
 2869 005e 13E0     		b	.L218
 2870              	.LVL215:
 2871              	.L217:
 2872              	.LBB159:
1275:FreeRTOS/tasks.c ****                 {
 2873              		.loc 1 1275 59 discriminator 1 view .LVU796
 2874 0060 A642     		cmp	r6, r4
 2875 0062 02D3     		bcc	.L219
1300:FreeRTOS/tasks.c **** 
 2876              		.loc 1 1300 13 is_stmt 1 view .LVU797
1300:FreeRTOS/tasks.c **** 
 2877              		.loc 1 1300 33 is_stmt 0 view .LVU798
 2878 0064 2C60     		str	r4, [r5]
1302:FreeRTOS/tasks.c ****             {
 2879              		.loc 1 1302 13 is_stmt 1 view .LVU799
 2880              	.LBE159:
1253:FreeRTOS/tasks.c **** 
 2881              		.loc 1 1253 37 is_stmt 0 view .LVU800
 2882 0066 0024     		movs	r4, #0
 2883              	.LVL216:
1253:FreeRTOS/tasks.c **** 
 2884              		.loc 1 1253 37 view .LVU801
 2885 0068 0EE0     		b	.L218
 2886              	.LVL217:
 2887              	.L219:
 2888              	.LBB160:
1277:FreeRTOS/tasks.c ****                 }
 2889              		.loc 1 1277 21 is_stmt 1 view .LVU802
1300:FreeRTOS/tasks.c **** 
 2890              		.loc 1 1300 13 view .LVU803
1300:FreeRTOS/tasks.c **** 
 2891              		.loc 1 1300 33 is_stmt 0 view .LVU804
 2892 006a 2C60     		str	r4, [r5]
1302:FreeRTOS/tasks.c ****             {
 2893              		.loc 1 1302 13 is_stmt 1 view .LVU805
 2894 006c 04E0     		b	.L220
 2895              	.LVL218:
 2896              	.L216:
1289:FreeRTOS/tasks.c ****                 {
 2897              		.loc 1 1289 17 view .LVU806
1289:FreeRTOS/tasks.c ****                 {
 2898              		.loc 1 1289 19 is_stmt 0 view .LVU807
 2899 006e A342     		cmp	r3, r4
 2900 0070 01D8     		bhi	.L221
1289:FreeRTOS/tasks.c ****                 {
 2901              		.loc 1 1289 59 discriminator 1 view .LVU808
 2902 0072 A642     		cmp	r6, r4
 2903 0074 17D2     		bcs	.L222
 2904              	.L221:
1291:FreeRTOS/tasks.c ****                 }
 2905              		.loc 1 1291 21 is_stmt 1 view .LVU809
 2906              	.LVL219:
1300:FreeRTOS/tasks.c **** 
 2907              		.loc 1 1300 13 view .LVU810
1300:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 162


 2908              		.loc 1 1300 33 is_stmt 0 view .LVU811
 2909 0076 2C60     		str	r4, [r5]
1302:FreeRTOS/tasks.c ****             {
 2910              		.loc 1 1302 13 is_stmt 1 view .LVU812
 2911              	.L220:
1304:FreeRTOS/tasks.c **** 
 2912              		.loc 1 1304 17 view .LVU813
 2913 0078 2420     		movs	r0, #36
 2914 007a FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordVoid
 2915              	.LVL220:
1308:FreeRTOS/tasks.c ****             }
 2916              		.loc 1 1308 17 view .LVU814
 2917 007e 0021     		movs	r1, #0
 2918 0080 A01B     		subs	r0, r4, r6
 2919 0082 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2920              	.LVL221:
 2921 0086 0124     		movs	r4, #1
 2922              	.LVL222:
 2923              	.L218:
1312:FreeRTOS/tasks.c ****             }
 2924              		.loc 1 1312 41 view .LVU815
 2925              	.LBE160:
1315:FreeRTOS/tasks.c **** 
 2926              		.loc 1 1315 9 view .LVU816
1315:FreeRTOS/tasks.c **** 
 2927              		.loc 1 1315 27 is_stmt 0 view .LVU817
 2928 0088 FFF7FEFF 		bl	xTaskResumeAll
 2929              	.LVL223:
1319:FreeRTOS/tasks.c ****         {
 2930              		.loc 1 1319 9 is_stmt 1 view .LVU818
1319:FreeRTOS/tasks.c ****         {
 2931              		.loc 1 1319 11 is_stmt 0 view .LVU819
 2932 008c 48B9     		cbnz	r0, .L209
1321:FreeRTOS/tasks.c ****         }
 2933              		.loc 1 1321 13 is_stmt 1 view .LVU820
 2934 008e 4FF0E023 		mov	r3, #-536813568
 2935 0092 4FF08052 		mov	r2, #268435456
 2936 0096 C3F8042D 		str	r2, [r3, #3332]
1321:FreeRTOS/tasks.c ****         }
 2937              		.loc 1 1321 13 view .LVU821
 2938              		.syntax unified
 2939              	@ 1321 "FreeRTOS/tasks.c" 1
 2940 009a BFF34F8F 		dsb
 2941              	@ 0 "" 2
1321:FreeRTOS/tasks.c ****         }
 2942              		.loc 1 1321 13 view .LVU822
 2943              	@ 1321 "FreeRTOS/tasks.c" 1
 2944 009e BFF36F8F 		isb
 2945              	@ 0 "" 2
1321:FreeRTOS/tasks.c ****         }
 2946              		.loc 1 1321 35 view .LVU823
1325:FreeRTOS/tasks.c ****         }
 2947              		.loc 1 1325 37 view .LVU824
1328:FreeRTOS/tasks.c ****     }
 2948              		.loc 1 1328 9 view .LVU825
 2949              		.thumb
 2950              		.syntax unified
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 163


 2951              	.L209:
1329:FreeRTOS/tasks.c **** 
 2952              		.loc 1 1329 5 is_stmt 0 view .LVU826
 2953 00a2 2046     		mov	r0, r4
 2954              	.LVL224:
1329:FreeRTOS/tasks.c **** 
 2955              		.loc 1 1329 5 view .LVU827
 2956 00a4 70BD     		pop	{r4, r5, r6, pc}
 2957              	.LVL225:
 2958              	.L222:
 2959              	.LBB161:
1300:FreeRTOS/tasks.c **** 
 2960              		.loc 1 1300 13 is_stmt 1 view .LVU828
1300:FreeRTOS/tasks.c **** 
 2961              		.loc 1 1300 33 is_stmt 0 view .LVU829
 2962 00a6 2C60     		str	r4, [r5]
1302:FreeRTOS/tasks.c ****             {
 2963              		.loc 1 1302 13 is_stmt 1 view .LVU830
 2964              	.LBE161:
1253:FreeRTOS/tasks.c **** 
 2965              		.loc 1 1253 37 is_stmt 0 view .LVU831
 2966 00a8 0024     		movs	r4, #0
 2967              	.LVL226:
1253:FreeRTOS/tasks.c **** 
 2968              		.loc 1 1253 37 view .LVU832
 2969 00aa EDE7     		b	.L218
 2970              	.L228:
 2971              		.align	2
 2972              	.L227:
 2973 00ac 00000000 		.word	.LANCHOR14
 2974 00b0 00000000 		.word	.LANCHOR13
 2975              		.cfi_endproc
 2976              	.LFE8:
 2978              		.section	.text.vTaskDelay,"ax",%progbits
 2979              		.align	1
 2980              		.global	vTaskDelay
 2981              		.syntax unified
 2982              		.thumb
 2983              		.thumb_func
 2985              	vTaskDelay:
 2986              	.LVL227:
 2987              	.LFB9:
1337:FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 2988              		.loc 1 1337 5 is_stmt 1 view -0
 2989              		.cfi_startproc
 2990              		@ args = 0, pretend = 0, frame = 0
 2991              		@ frame_needed = 0, uses_anonymous_args = 0
1337:FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 2992              		.loc 1 1337 5 is_stmt 0 view .LVU834
 2993 0000 10B5     		push	{r4, lr}
 2994              	.LCFI28:
 2995              		.cfi_def_cfa_offset 8
 2996              		.cfi_offset 4, -8
 2997              		.cfi_offset 14, -4
1338:FreeRTOS/tasks.c **** 
 2998              		.loc 1 1338 9 is_stmt 1 view .LVU835
 2999              	.LVL228:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 164


1341:FreeRTOS/tasks.c ****         {
 3000              		.loc 1 1341 9 view .LVU836
1341:FreeRTOS/tasks.c ****         {
 3001              		.loc 1 1341 11 is_stmt 0 view .LVU837
 3002 0002 C8B1     		cbz	r0, .L230
 3003 0004 0446     		mov	r4, r0
1343:FreeRTOS/tasks.c ****             vTaskSuspendAll();
 3004              		.loc 1 1343 13 is_stmt 1 view .LVU838
 3005 0006 124B     		ldr	r3, .L235
 3006 0008 1B68     		ldr	r3, [r3]
 3007 000a 43B1     		cbz	r3, .L231
1343:FreeRTOS/tasks.c ****             vTaskSuspendAll();
 3008              		.loc 1 1343 13 view .LVU839
 3009              	.LBB162:
 3010              	.LBI162:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3011              		.loc 2 193 34 view .LVU840
 3012              	.LBB163:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3013              		.loc 2 195 9 view .LVU841
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3014              		.loc 2 197 9 view .LVU842
 3015              		.syntax unified
 3016              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3017 000c 4FF05003 			mov r3, #80												
 3018 0010 83F31188 		msr basepri, r3											
 3019 0014 BFF36F8F 		isb														
 3020 0018 BFF34F8F 		dsb														
 3021              	
 3022              	@ 0 "" 2
 3023              	.LVL229:
 3024              		.thumb
 3025              		.syntax unified
 3026              	.L232:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3027              		.loc 2 197 9 is_stmt 0 view .LVU843
 3028              	.LBE163:
 3029              	.LBE162:
1343:FreeRTOS/tasks.c ****             vTaskSuspendAll();
 3030              		.loc 1 1343 13 is_stmt 1 discriminator 1 view .LVU844
1343:FreeRTOS/tasks.c ****             vTaskSuspendAll();
 3031              		.loc 1 1343 13 discriminator 1 view .LVU845
1343:FreeRTOS/tasks.c ****             vTaskSuspendAll();
 3032              		.loc 1 1343 13 discriminator 1 view .LVU846
 3033 001c FEE7     		b	.L232
 3034              	.L231:
1343:FreeRTOS/tasks.c ****             vTaskSuspendAll();
 3035              		.loc 1 1343 54 discriminator 2 view .LVU847
1344:FreeRTOS/tasks.c ****             {
 3036              		.loc 1 1344 13 discriminator 2 view .LVU848
 3037 001e FFF7FEFF 		bl	vTaskSuspendAll
 3038              	.LVL230:
1346:FreeRTOS/tasks.c **** 
 3039              		.loc 1 1346 17 discriminator 2 view .LVU849
 3040 0022 2146     		mov	r1, r4
 3041 0024 2320     		movs	r0, #35
 3042 0026 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 165


 3043              	.LVL231:
1355:FreeRTOS/tasks.c ****             }
 3044              		.loc 1 1355 17 discriminator 2 view .LVU850
 3045 002a 0021     		movs	r1, #0
 3046 002c 2046     		mov	r0, r4
 3047 002e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3048              	.LVL232:
1357:FreeRTOS/tasks.c ****         }
 3049              		.loc 1 1357 13 discriminator 2 view .LVU851
1357:FreeRTOS/tasks.c ****         }
 3050              		.loc 1 1357 31 is_stmt 0 discriminator 2 view .LVU852
 3051 0032 FFF7FEFF 		bl	xTaskResumeAll
 3052              	.LVL233:
1361:FreeRTOS/tasks.c ****         }
 3053              		.loc 1 1361 37 is_stmt 1 discriminator 2 view .LVU853
1366:FreeRTOS/tasks.c ****         {
 3054              		.loc 1 1366 9 discriminator 2 view .LVU854
1366:FreeRTOS/tasks.c ****         {
 3055              		.loc 1 1366 11 is_stmt 0 discriminator 2 view .LVU855
 3056 0036 48B9     		cbnz	r0, .L229
 3057              	.LVL234:
 3058              	.L230:
1368:FreeRTOS/tasks.c ****         }
 3059              		.loc 1 1368 13 is_stmt 1 view .LVU856
 3060 0038 4FF0E023 		mov	r3, #-536813568
 3061 003c 4FF08052 		mov	r2, #268435456
 3062 0040 C3F8042D 		str	r2, [r3, #3332]
1368:FreeRTOS/tasks.c ****         }
 3063              		.loc 1 1368 13 view .LVU857
 3064              		.syntax unified
 3065              	@ 1368 "FreeRTOS/tasks.c" 1
 3066 0044 BFF34F8F 		dsb
 3067              	@ 0 "" 2
1368:FreeRTOS/tasks.c ****         }
 3068              		.loc 1 1368 13 view .LVU858
 3069              	@ 1368 "FreeRTOS/tasks.c" 1
 3070 0048 BFF36F8F 		isb
 3071              	@ 0 "" 2
1368:FreeRTOS/tasks.c ****         }
 3072              		.loc 1 1368 35 view .LVU859
1372:FreeRTOS/tasks.c ****         }
 3073              		.loc 1 1372 37 view .LVU860
 3074              		.thumb
 3075              		.syntax unified
 3076              	.L229:
1374:FreeRTOS/tasks.c **** 
 3077              		.loc 1 1374 5 is_stmt 0 view .LVU861
 3078 004c 10BD     		pop	{r4, pc}
 3079              	.L236:
 3080 004e 00BF     		.align	2
 3081              	.L235:
 3082 0050 00000000 		.word	.LANCHOR14
 3083              		.cfi_endproc
 3084              	.LFE9:
 3086              		.section	.text.xTaskGetHandle,"ax",%progbits
 3087              		.align	1
 3088              		.global	xTaskGetHandle
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 166


 3089              		.syntax unified
 3090              		.thumb
 3091              		.thumb_func
 3093              	xTaskGetHandle:
 3094              	.LVL235:
 3095              	.LFB24:
2459:FreeRTOS/tasks.c ****         UBaseType_t uxQueue = configMAX_PRIORITIES;
 3096              		.loc 1 2459 5 is_stmt 1 view -0
 3097              		.cfi_startproc
 3098              		@ args = 0, pretend = 0, frame = 0
 3099              		@ frame_needed = 0, uses_anonymous_args = 0
2459:FreeRTOS/tasks.c ****         UBaseType_t uxQueue = configMAX_PRIORITIES;
 3100              		.loc 1 2459 5 is_stmt 0 view .LVU863
 3101 0000 70B5     		push	{r4, r5, r6, lr}
 3102              	.LCFI29:
 3103              		.cfi_def_cfa_offset 16
 3104              		.cfi_offset 4, -16
 3105              		.cfi_offset 5, -12
 3106              		.cfi_offset 6, -8
 3107              		.cfi_offset 14, -4
 3108 0002 0546     		mov	r5, r0
2460:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 3109              		.loc 1 2460 9 is_stmt 1 view .LVU864
 3110              	.LVL236:
2461:FreeRTOS/tasks.c **** 
 3111              		.loc 1 2461 9 view .LVU865
2464:FreeRTOS/tasks.c **** 
 3112              		.loc 1 2464 9 view .LVU866
 3113 0004 FFF7FEFF 		bl	strlen
 3114              	.LVL237:
2464:FreeRTOS/tasks.c **** 
 3115              		.loc 1 2464 9 is_stmt 0 view .LVU867
 3116 0008 1328     		cmp	r0, #19
 3117 000a 08D9     		bls	.L238
2464:FreeRTOS/tasks.c **** 
 3118              		.loc 1 2464 9 is_stmt 1 view .LVU868
 3119              	.LBB164:
 3120              	.LBI164:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3121              		.loc 2 193 34 view .LVU869
 3122              	.LBB165:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3123              		.loc 2 195 9 view .LVU870
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3124              		.loc 2 197 9 view .LVU871
 3125              		.syntax unified
 3126              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3127 000c 4FF05003 			mov r3, #80												
 3128 0010 83F31188 		msr basepri, r3											
 3129 0014 BFF36F8F 		isb														
 3130 0018 BFF34F8F 		dsb														
 3131              	
 3132              	@ 0 "" 2
 3133              	.LVL238:
 3134              		.thumb
 3135              		.syntax unified
 3136              	.L239:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 167


 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3137              		.loc 2 197 9 is_stmt 0 view .LVU872
 3138              	.LBE165:
 3139              	.LBE164:
2464:FreeRTOS/tasks.c **** 
 3140              		.loc 1 2464 9 is_stmt 1 discriminator 1 view .LVU873
2464:FreeRTOS/tasks.c **** 
 3141              		.loc 1 2464 9 discriminator 1 view .LVU874
2464:FreeRTOS/tasks.c **** 
 3142              		.loc 1 2464 9 discriminator 1 view .LVU875
 3143 001c FEE7     		b	.L239
 3144              	.L238:
2464:FreeRTOS/tasks.c **** 
 3145              		.loc 1 2464 74 discriminator 2 view .LVU876
2466:FreeRTOS/tasks.c ****         {
 3146              		.loc 1 2466 9 discriminator 2 view .LVU877
 3147 001e FFF7FEFF 		bl	vTaskSuspendAll
 3148              	.LVL239:
2460:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 3149              		.loc 1 2460 21 is_stmt 0 discriminator 2 view .LVU878
 3150 0022 0524     		movs	r4, #5
 3151              	.LVL240:
 3152              	.L241:
2469:FreeRTOS/tasks.c ****             {
 3153              		.loc 1 2469 13 is_stmt 1 view .LVU879
2471:FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueu
 3154              		.loc 1 2471 17 view .LVU880
2471:FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueu
 3155              		.loc 1 2471 24 is_stmt 0 view .LVU881
 3156 0024 013C     		subs	r4, r4, #1
 3157              	.LVL241:
2472:FreeRTOS/tasks.c **** 
 3158              		.loc 1 2472 17 is_stmt 1 view .LVU882
2472:FreeRTOS/tasks.c **** 
 3159              		.loc 1 2472 25 is_stmt 0 view .LVU883
 3160 0026 04EB8400 		add	r0, r4, r4, lsl #2
 3161 002a 2946     		mov	r1, r5
 3162 002c 114B     		ldr	r3, .L249
 3163 002e 03EB8000 		add	r0, r3, r0, lsl #2
 3164 0032 FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 3165              	.LVL242:
2474:FreeRTOS/tasks.c ****                 {
 3166              		.loc 1 2474 17 is_stmt 1 view .LVU884
2474:FreeRTOS/tasks.c ****                 {
 3167              		.loc 1 2474 19 is_stmt 0 view .LVU885
 3168 0036 0646     		mov	r6, r0
 3169 0038 08B9     		cbnz	r0, .L240
2479:FreeRTOS/tasks.c **** 
 3170              		.loc 1 2479 20 is_stmt 1 view .LVU886
2479:FreeRTOS/tasks.c **** 
 3171              		.loc 1 2479 13 is_stmt 0 view .LVU887
 3172 003a 002C     		cmp	r4, #0
 3173 003c F2D1     		bne	.L241
 3174              	.L240:
2482:FreeRTOS/tasks.c ****             {
 3175              		.loc 1 2482 13 is_stmt 1 view .LVU888
2482:FreeRTOS/tasks.c ****             {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 168


 3176              		.loc 1 2482 15 is_stmt 0 view .LVU889
 3177 003e 2EB1     		cbz	r6, .L246
 3178              	.L242:
2487:FreeRTOS/tasks.c ****             {
 3179              		.loc 1 2487 13 is_stmt 1 view .LVU890
2487:FreeRTOS/tasks.c ****             {
 3180              		.loc 1 2487 15 is_stmt 0 view .LVU891
 3181 0040 5EB1     		cbz	r6, .L247
 3182              	.L243:
2494:FreeRTOS/tasks.c ****                     {
 3183              		.loc 1 2494 21 is_stmt 1 view .LVU892
2494:FreeRTOS/tasks.c ****                     {
 3184              		.loc 1 2494 23 is_stmt 0 view .LVU893
 3185 0042 8EB1     		cbz	r6, .L248
 3186              	.L244:
2512:FreeRTOS/tasks.c **** 
 3187              		.loc 1 2512 9 is_stmt 1 view .LVU894
2512:FreeRTOS/tasks.c **** 
 3188              		.loc 1 2512 18 is_stmt 0 view .LVU895
 3189 0044 FFF7FEFF 		bl	xTaskResumeAll
 3190              	.LVL243:
2514:FreeRTOS/tasks.c ****     }
 3191              		.loc 1 2514 9 is_stmt 1 view .LVU896
2515:FreeRTOS/tasks.c **** 
 3192              		.loc 1 2515 5 is_stmt 0 view .LVU897
 3193 0048 3046     		mov	r0, r6
 3194 004a 70BD     		pop	{r4, r5, r6, pc}
 3195              	.LVL244:
 3196              	.L246:
2484:FreeRTOS/tasks.c ****             }
 3197              		.loc 1 2484 17 is_stmt 1 view .LVU898
2484:FreeRTOS/tasks.c ****             }
 3198              		.loc 1 2484 25 is_stmt 0 view .LVU899
 3199 004c 0A4B     		ldr	r3, .L249+4
 3200 004e 1868     		ldr	r0, [r3]
 3201              	.LVL245:
2484:FreeRTOS/tasks.c ****             }
 3202              		.loc 1 2484 25 view .LVU900
 3203 0050 2946     		mov	r1, r5
 3204 0052 FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 3205              	.LVL246:
 3206 0056 0646     		mov	r6, r0
 3207              	.LVL247:
2484:FreeRTOS/tasks.c ****             }
 3208              		.loc 1 2484 25 view .LVU901
 3209 0058 F2E7     		b	.L242
 3210              	.L247:
2489:FreeRTOS/tasks.c ****             }
 3211              		.loc 1 2489 17 is_stmt 1 view .LVU902
2489:FreeRTOS/tasks.c ****             }
 3212              		.loc 1 2489 25 is_stmt 0 view .LVU903
 3213 005a 084B     		ldr	r3, .L249+8
 3214 005c 1868     		ldr	r0, [r3]
 3215              	.LVL248:
2489:FreeRTOS/tasks.c ****             }
 3216              		.loc 1 2489 25 view .LVU904
 3217 005e 2946     		mov	r1, r5
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 169


 3218 0060 FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 3219              	.LVL249:
 3220 0064 0646     		mov	r6, r0
 3221              	.LVL250:
2489:FreeRTOS/tasks.c ****             }
 3222              		.loc 1 2489 25 view .LVU905
 3223 0066 ECE7     		b	.L243
 3224              	.L248:
2497:FreeRTOS/tasks.c ****                     }
 3225              		.loc 1 2497 25 is_stmt 1 view .LVU906
2497:FreeRTOS/tasks.c ****                     }
 3226              		.loc 1 2497 33 is_stmt 0 view .LVU907
 3227 0068 2946     		mov	r1, r5
 3228 006a 0548     		ldr	r0, .L249+12
 3229              	.LVL251:
2497:FreeRTOS/tasks.c ****                     }
 3230              		.loc 1 2497 33 view .LVU908
 3231 006c FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 3232              	.LVL252:
 3233 0070 0646     		mov	r6, r0
 3234              	.LVL253:
2497:FreeRTOS/tasks.c ****                     }
 3235              		.loc 1 2497 33 view .LVU909
 3236 0072 E7E7     		b	.L244
 3237              	.L250:
 3238              		.align	2
 3239              	.L249:
 3240 0074 00000000 		.word	.LANCHOR2
 3241 0078 00000000 		.word	.LANCHOR3
 3242 007c 00000000 		.word	.LANCHOR7
 3243 0080 00000000 		.word	.LANCHOR0
 3244              		.cfi_endproc
 3245              	.LFE24:
 3247              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 3248              		.align	1
 3249              		.global	xTaskCatchUpTicks
 3250              		.syntax unified
 3251              		.thumb
 3252              		.thumb_func
 3254              	xTaskCatchUpTicks:
 3255              	.LVL254:
 3256              	.LFB27:
2628:FreeRTOS/tasks.c ****     BaseType_t xYieldOccurred;
 3257              		.loc 1 2628 1 is_stmt 1 view -0
 3258              		.cfi_startproc
 3259              		@ args = 0, pretend = 0, frame = 0
 3260              		@ frame_needed = 0, uses_anonymous_args = 0
2629:FreeRTOS/tasks.c **** 
 3261              		.loc 1 2629 5 view .LVU911
2633:FreeRTOS/tasks.c **** 
 3262              		.loc 1 2633 5 view .LVU912
 3263 0000 0B4B     		ldr	r3, .L256
 3264 0002 1B68     		ldr	r3, [r3]
 3265 0004 43B1     		cbz	r3, .L252
2633:FreeRTOS/tasks.c **** 
 3266              		.loc 1 2633 5 view .LVU913
 3267              	.LBB166:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 170


 3268              	.LBI166:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3269              		.loc 2 193 34 view .LVU914
 3270              	.LBB167:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3271              		.loc 2 195 9 view .LVU915
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3272              		.loc 2 197 9 view .LVU916
 3273              		.syntax unified
 3274              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3275 0006 4FF05003 			mov r3, #80												
 3276 000a 83F31188 		msr basepri, r3											
 3277 000e BFF36F8F 		isb														
 3278 0012 BFF34F8F 		dsb														
 3279              	
 3280              	@ 0 "" 2
 3281              	.LVL255:
 3282              		.thumb
 3283              		.syntax unified
 3284              	.L253:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3285              		.loc 2 197 9 is_stmt 0 view .LVU917
 3286              	.LBE167:
 3287              	.LBE166:
2633:FreeRTOS/tasks.c **** 
 3288              		.loc 1 2633 5 is_stmt 1 discriminator 1 view .LVU918
2633:FreeRTOS/tasks.c **** 
 3289              		.loc 1 2633 5 discriminator 1 view .LVU919
2633:FreeRTOS/tasks.c **** 
 3290              		.loc 1 2633 5 discriminator 1 view .LVU920
 3291 0016 FEE7     		b	.L253
 3292              	.L252:
2628:FreeRTOS/tasks.c ****     BaseType_t xYieldOccurred;
 3293              		.loc 1 2628 1 is_stmt 0 discriminator 2 view .LVU921
 3294 0018 10B5     		push	{r4, lr}
 3295              	.LCFI30:
 3296              		.cfi_def_cfa_offset 8
 3297              		.cfi_offset 4, -8
 3298              		.cfi_offset 14, -4
 3299 001a 0446     		mov	r4, r0
2633:FreeRTOS/tasks.c **** 
 3300              		.loc 1 2633 46 is_stmt 1 discriminator 2 view .LVU922
2637:FreeRTOS/tasks.c ****     xPendedTicks += xTicksToCatchUp;
 3301              		.loc 1 2637 5 discriminator 2 view .LVU923
 3302 001c FFF7FEFF 		bl	vTaskSuspendAll
 3303              	.LVL256:
2638:FreeRTOS/tasks.c ****     xYieldOccurred = xTaskResumeAll();
 3304              		.loc 1 2638 5 discriminator 2 view .LVU924
2638:FreeRTOS/tasks.c ****     xYieldOccurred = xTaskResumeAll();
 3305              		.loc 1 2638 18 is_stmt 0 discriminator 2 view .LVU925
 3306 0020 044B     		ldr	r3, .L256+4
 3307 0022 1868     		ldr	r0, [r3]
 3308 0024 2044     		add	r0, r0, r4
 3309 0026 1860     		str	r0, [r3]
2639:FreeRTOS/tasks.c **** 
 3310              		.loc 1 2639 5 is_stmt 1 discriminator 2 view .LVU926
2639:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 171


 3311              		.loc 1 2639 22 is_stmt 0 discriminator 2 view .LVU927
 3312 0028 FFF7FEFF 		bl	xTaskResumeAll
 3313              	.LVL257:
2641:FreeRTOS/tasks.c **** }
 3314              		.loc 1 2641 5 is_stmt 1 discriminator 2 view .LVU928
2642:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 3315              		.loc 1 2642 1 is_stmt 0 discriminator 2 view .LVU929
 3316 002c 10BD     		pop	{r4, pc}
 3317              	.LVL258:
 3318              	.L257:
2642:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 3319              		.loc 1 2642 1 discriminator 2 view .LVU930
 3320 002e 00BF     		.align	2
 3321              	.L256:
 3322 0030 00000000 		.word	.LANCHOR14
 3323 0034 00000000 		.word	.LANCHOR19
 3324              		.cfi_endproc
 3325              	.LFE27:
 3327              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3328              		.align	1
 3329              		.global	vTaskSwitchContext
 3330              		.syntax unified
 3331              		.thumb
 3332              		.thumb_func
 3334              	vTaskSwitchContext:
 3335              	.LFB29:
3011:FreeRTOS/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3336              		.loc 1 3011 1 is_stmt 1 view -0
 3337              		.cfi_startproc
 3338              		@ args = 0, pretend = 0, frame = 0
 3339              		@ frame_needed = 0, uses_anonymous_args = 0
 3340 0000 08B5     		push	{r3, lr}
 3341              	.LCFI31:
 3342              		.cfi_def_cfa_offset 8
 3343              		.cfi_offset 3, -8
 3344              		.cfi_offset 14, -4
3012:FreeRTOS/tasks.c ****     {
 3345              		.loc 1 3012 5 view .LVU932
3012:FreeRTOS/tasks.c ****     {
 3346              		.loc 1 3012 30 is_stmt 0 view .LVU933
 3347 0002 264B     		ldr	r3, .L268
 3348 0004 1B68     		ldr	r3, [r3]
3012:FreeRTOS/tasks.c ****     {
 3349              		.loc 1 3012 7 view .LVU934
 3350 0006 1BB1     		cbz	r3, .L259
3016:FreeRTOS/tasks.c ****     }
 3351              		.loc 1 3016 9 is_stmt 1 view .LVU935
3016:FreeRTOS/tasks.c ****     }
 3352              		.loc 1 3016 23 is_stmt 0 view .LVU936
 3353 0008 254B     		ldr	r3, .L268+4
 3354 000a 0122     		movs	r2, #1
 3355 000c 1A60     		str	r2, [r3]
 3356              	.L258:
3083:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3357              		.loc 1 3083 1 view .LVU937
 3358 000e 08BD     		pop	{r3, pc}
 3359              	.L259:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 172


3020:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_OUT();
 3360              		.loc 1 3020 9 is_stmt 1 view .LVU938
3020:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_OUT();
 3361              		.loc 1 3020 23 is_stmt 0 view .LVU939
 3362 0010 234B     		ldr	r3, .L268+4
 3363 0012 0022     		movs	r2, #0
 3364 0014 1A60     		str	r2, [r3]
3021:FreeRTOS/tasks.c **** 
 3365              		.loc 1 3021 33 is_stmt 1 view .LVU940
3052:FreeRTOS/tasks.c **** 
 3366              		.loc 1 3052 39 view .LVU941
 3367              	.LBB168:
3063:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3368              		.loc 1 3063 9 view .LVU942
3063:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3369              		.loc 1 3063 9 view .LVU943
 3370 0016 234B     		ldr	r3, .L268+8
 3371 0018 1B68     		ldr	r3, [r3]
 3372              	.LVL259:
 3373              	.LBB169:
 3374              	.LBI169:
 131:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 3375              		.loc 2 131 66 view .LVU944
 3376              	.LBB170:
 133:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3377              		.loc 2 133 13 view .LVU945
 135:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3378              		.loc 2 135 13 view .LVU946
 3379              		.syntax unified
 3380              	@ 135 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3381 001a B3FA83F3 		clz r3, r3
 3382              	@ 0 "" 2
 3383              	.LVL260:
 135:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3384              		.loc 2 135 13 is_stmt 0 view .LVU947
 3385              		.thumb
 3386              		.syntax unified
 3387 001e DBB2     		uxtb	r3, r3
 3388              	.LVL261:
 137:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 3389              		.loc 2 137 13 is_stmt 1 view .LVU948
 137:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 3390              		.loc 2 137 13 is_stmt 0 view .LVU949
 3391              	.LBE170:
 3392              	.LBE169:
3063:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3393              		.loc 1 3063 9 view .LVU950
 3394 0020 C3F11F03 		rsb	r3, r3, #31
 3395              	.LVL262:
3063:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3396              		.loc 1 3063 9 is_stmt 1 view .LVU951
 3397 0024 03EB8301 		add	r1, r3, r3, lsl #2
 3398 0028 8A00     		lsls	r2, r1, #2
 3399 002a 1F49     		ldr	r1, .L268+12
 3400 002c 8A58     		ldr	r2, [r1, r2]
 3401 002e 42B9     		cbnz	r2, .L261
3063:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 173


 3402              		.loc 1 3063 9 view .LVU952
 3403              	.LBB171:
 3404              	.LBI171:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3405              		.loc 2 193 34 view .LVU953
 3406              	.LBB172:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3407              		.loc 2 195 9 view .LVU954
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3408              		.loc 2 197 9 view .LVU955
 3409              		.syntax unified
 3410              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3411 0030 4FF05003 			mov r3, #80												
 3412 0034 83F31188 		msr basepri, r3											
 3413 0038 BFF36F8F 		isb														
 3414 003c BFF34F8F 		dsb														
 3415              	
 3416              	@ 0 "" 2
 3417              	.LVL263:
 3418              		.thumb
 3419              		.syntax unified
 3420              	.L262:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3421              		.loc 2 197 9 is_stmt 0 view .LVU956
 3422              	.LBE172:
 3423              	.LBE171:
3063:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3424              		.loc 1 3063 9 is_stmt 1 discriminator 1 view .LVU957
3063:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3425              		.loc 1 3063 9 discriminator 1 view .LVU958
3063:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3426              		.loc 1 3063 9 discriminator 1 view .LVU959
 3427 0040 FEE7     		b	.L262
 3428              	.LVL264:
 3429              	.L261:
3063:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3430              		.loc 1 3063 9 discriminator 2 view .LVU960
 3431              	.LBB173:
3063:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3432              		.loc 1 3063 9 discriminator 2 view .LVU961
3063:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3433              		.loc 1 3063 9 discriminator 2 view .LVU962
 3434 0042 1949     		ldr	r1, .L268+12
 3435 0044 03EB8300 		add	r0, r3, r3, lsl #2
 3436 0048 8200     		lsls	r2, r0, #2
 3437 004a 0A44     		add	r2, r2, r1
 3438 004c 5068     		ldr	r0, [r2, #4]
 3439 004e 4068     		ldr	r0, [r0, #4]
 3440 0050 5060     		str	r0, [r2, #4]
3063:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3441              		.loc 1 3063 9 discriminator 2 view .LVU963
 3442 0052 03EB830C 		add	ip, r3, r3, lsl #2
 3443 0056 4FEA8C02 		lsl	r2, ip, #2
 3444 005a 0832     		adds	r2, r2, #8
 3445 005c 1144     		add	r1, r1, r2
 3446 005e 8842     		cmp	r0, r1
 3447 0060 12D0     		beq	.L266
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 174


 3448              	.L263:
3063:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3449              		.loc 1 3063 9 discriminator 6 view .LVU964
 3450 0062 03EB8303 		add	r3, r3, r3, lsl #2
 3451              	.LVL265:
3063:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3452              		.loc 1 3063 9 is_stmt 0 discriminator 6 view .LVU965
 3453 0066 9A00     		lsls	r2, r3, #2
 3454 0068 0F4B     		ldr	r3, .L268+12
 3455 006a 1344     		add	r3, r3, r2
 3456 006c 5B68     		ldr	r3, [r3, #4]
 3457 006e DA68     		ldr	r2, [r3, #12]
 3458 0070 0E4B     		ldr	r3, .L268+16
 3459 0072 1A60     		str	r2, [r3]
 3460              	.LBE173:
3063:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3461              		.loc 1 3063 9 is_stmt 1 discriminator 6 view .LVU966
 3462              	.LBE168:
3063:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3463              		.loc 1 3063 43 discriminator 6 view .LVU967
3064:FreeRTOS/tasks.c **** 
 3464              		.loc 1 3064 9 discriminator 6 view .LVU968
 3465 0074 1A68     		ldr	r2, [r3]
 3466 0076 0E4B     		ldr	r3, .L268+20
 3467 0078 1B68     		ldr	r3, [r3]
 3468 007a 9A42     		cmp	r2, r3
 3469 007c 0BD0     		beq	.L267
3064:FreeRTOS/tasks.c **** 
 3470              		.loc 1 3064 9 discriminator 2 view .LVU969
 3471 007e 0B4B     		ldr	r3, .L268+16
 3472 0080 1868     		ldr	r0, [r3]
 3473 0082 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartExec
 3474              	.LVL266:
3064:FreeRTOS/tasks.c **** 
 3475              		.loc 1 3064 32 discriminator 2 view .LVU970
3083:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3476              		.loc 1 3083 1 is_stmt 0 discriminator 2 view .LVU971
 3477 0086 C2E7     		b	.L258
 3478              	.LVL267:
 3479              	.L266:
 3480              	.LBB175:
 3481              	.LBB174:
3063:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3482              		.loc 1 3063 9 is_stmt 1 discriminator 4 view .LVU972
 3483 0088 4068     		ldr	r0, [r0, #4]
 3484 008a 6246     		mov	r2, ip
 3485 008c 9100     		lsls	r1, r2, #2
 3486 008e 064A     		ldr	r2, .L268+12
 3487 0090 0A44     		add	r2, r2, r1
 3488 0092 5060     		str	r0, [r2, #4]
 3489 0094 E5E7     		b	.L263
 3490              	.LVL268:
 3491              	.L267:
3063:FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3492              		.loc 1 3063 9 is_stmt 0 discriminator 4 view .LVU973
 3493              	.LBE174:
 3494              	.LBE175:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 175


3064:FreeRTOS/tasks.c **** 
 3495              		.loc 1 3064 9 is_stmt 1 discriminator 1 view .LVU974
 3496 0096 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnIdle
 3497              	.LVL269:
 3498 009a B8E7     		b	.L258
 3499              	.L269:
 3500              		.align	2
 3501              	.L268:
 3502 009c 00000000 		.word	.LANCHOR14
 3503 00a0 00000000 		.word	.LANCHOR15
 3504 00a4 00000000 		.word	.LANCHOR12
 3505 00a8 00000000 		.word	.LANCHOR2
 3506 00ac 00000000 		.word	.LANCHOR9
 3507 00b0 00000000 		.word	.LANCHOR16
 3508              		.cfi_endproc
 3509              	.LFE29:
 3511              		.section	.text.vTaskSuspend,"ax",%progbits
 3512              		.align	1
 3513              		.global	vTaskSuspend
 3514              		.syntax unified
 3515              		.thumb
 3516              		.thumb_func
 3518              	vTaskSuspend:
 3519              	.LVL270:
 3520              	.LFB11:
1707:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 3521              		.loc 1 1707 5 view -0
 3522              		.cfi_startproc
 3523              		@ args = 0, pretend = 0, frame = 0
 3524              		@ frame_needed = 0, uses_anonymous_args = 0
1707:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 3525              		.loc 1 1707 5 is_stmt 0 view .LVU976
 3526 0000 70B5     		push	{r4, r5, r6, lr}
 3527              	.LCFI32:
 3528              		.cfi_def_cfa_offset 16
 3529              		.cfi_offset 4, -16
 3530              		.cfi_offset 5, -12
 3531              		.cfi_offset 6, -8
 3532              		.cfi_offset 14, -4
 3533 0002 0446     		mov	r4, r0
1708:FreeRTOS/tasks.c **** 
 3534              		.loc 1 1708 9 is_stmt 1 view .LVU977
1710:FreeRTOS/tasks.c ****         {
 3535              		.loc 1 1710 9 view .LVU978
 3536 0004 FFF7FEFF 		bl	vPortEnterCritical
 3537              	.LVL271:
1714:FreeRTOS/tasks.c **** 
 3538              		.loc 1 1714 13 view .LVU979
1714:FreeRTOS/tasks.c **** 
 3539              		.loc 1 1714 21 is_stmt 0 view .LVU980
 3540 0008 002C     		cmp	r4, #0
 3541 000a 35D0     		beq	.L284
 3542              	.LVL272:
 3543              	.L271:
1716:FreeRTOS/tasks.c **** 
 3544              		.loc 1 1716 13 is_stmt 1 discriminator 4 view .LVU981
 3545 000c 2646     		mov	r6, r4
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 176


 3546 000e 2046     		mov	r0, r4
 3547 0010 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 3548              	.LVL273:
 3549 0014 0146     		mov	r1, r0
 3550 0016 2920     		movs	r0, #41
 3551 0018 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32
 3552              	.LVL274:
1720:FreeRTOS/tasks.c ****             {
 3553              		.loc 1 1720 13 discriminator 4 view .LVU982
1720:FreeRTOS/tasks.c ****             {
 3554              		.loc 1 1720 17 is_stmt 0 discriminator 4 view .LVU983
 3555 001c 251D     		adds	r5, r4, #4
 3556 001e 2846     		mov	r0, r5
 3557 0020 FFF7FEFF 		bl	uxListRemove
 3558              	.LVL275:
1720:FreeRTOS/tasks.c ****             {
 3559              		.loc 1 1720 15 discriminator 4 view .LVU984
 3560 0024 68B9     		cbnz	r0, .L272
1722:FreeRTOS/tasks.c ****             }
 3561              		.loc 1 1722 17 is_stmt 1 view .LVU985
 3562 0026 E26A     		ldr	r2, [r4, #44]
 3563 0028 02EB8203 		add	r3, r2, r2, lsl #2
 3564 002c 9B00     		lsls	r3, r3, #2
 3565 002e 3149     		ldr	r1, .L288
 3566 0030 CB58     		ldr	r3, [r1, r3]
 3567 0032 33B9     		cbnz	r3, .L272
1722:FreeRTOS/tasks.c ****             }
 3568              		.loc 1 1722 17 discriminator 1 view .LVU986
 3569 0034 0123     		movs	r3, #1
 3570 0036 9340     		lsls	r3, r3, r2
 3571 0038 2F49     		ldr	r1, .L288+4
 3572 003a 0A68     		ldr	r2, [r1]
 3573 003c 22EA0302 		bic	r2, r2, r3
 3574 0040 0A60     		str	r2, [r1]
 3575              	.L272:
1726:FreeRTOS/tasks.c ****             }
 3576              		.loc 1 1726 41 view .LVU987
1730:FreeRTOS/tasks.c ****             {
 3577              		.loc 1 1730 13 view .LVU988
1730:FreeRTOS/tasks.c ****             {
 3578              		.loc 1 1730 17 is_stmt 0 view .LVU989
 3579 0042 A36A     		ldr	r3, [r4, #40]
1730:FreeRTOS/tasks.c ****             {
 3580              		.loc 1 1730 15 view .LVU990
 3581 0044 1BB1     		cbz	r3, .L273
1732:FreeRTOS/tasks.c ****             }
 3582              		.loc 1 1732 17 is_stmt 1 view .LVU991
1732:FreeRTOS/tasks.c ****             }
 3583              		.loc 1 1732 26 is_stmt 0 view .LVU992
 3584 0046 04F11800 		add	r0, r4, #24
 3585 004a FFF7FEFF 		bl	uxListRemove
 3586              	.LVL276:
 3587              	.L273:
1736:FreeRTOS/tasks.c ****             }
 3588              		.loc 1 1736 41 is_stmt 1 view .LVU993
1738:FreeRTOS/tasks.c ****             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 3589              		.loc 1 1738 13 view .LVU994
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 177


 3590 004e 1B21     		movs	r1, #27
 3591 0050 3046     		mov	r0, r6
 3592 0052 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStopReady
 3593              	.LVL277:
1739:FreeRTOS/tasks.c **** 
 3594              		.loc 1 1739 13 view .LVU995
 3595 0056 2946     		mov	r1, r5
 3596 0058 2848     		ldr	r0, .L288+8
 3597 005a FFF7FEFF 		bl	vListInsertEnd
 3598              	.LVL278:
 3599              	.LBB176:
1743:FreeRTOS/tasks.c **** 
 3600              		.loc 1 1743 21 view .LVU996
1745:FreeRTOS/tasks.c ****                     {
 3601              		.loc 1 1745 21 view .LVU997
1745:FreeRTOS/tasks.c ****                     {
 3602              		.loc 1 1745 28 is_stmt 0 view .LVU998
 3603 005e 0023     		movs	r3, #0
 3604              	.LVL279:
 3605              	.L274:
1745:FreeRTOS/tasks.c ****                     {
 3606              		.loc 1 1745 33 is_stmt 1 discriminator 1 view .LVU999
1745:FreeRTOS/tasks.c ****                     {
 3607              		.loc 1 1745 21 is_stmt 0 discriminator 1 view .LVU1000
 3608 0060 002B     		cmp	r3, #0
 3609 0062 0CDD     		ble	.L276
 3610              	.LBE176:
1757:FreeRTOS/tasks.c **** 
 3611              		.loc 1 1757 9 is_stmt 1 view .LVU1001
 3612 0064 FFF7FEFF 		bl	vPortExitCritical
 3613              	.LVL280:
1759:FreeRTOS/tasks.c ****         {
 3614              		.loc 1 1759 9 view .LVU1002
1759:FreeRTOS/tasks.c ****         {
 3615              		.loc 1 1759 31 is_stmt 0 view .LVU1003
 3616 0068 254B     		ldr	r3, .L288+12
 3617 006a 1B68     		ldr	r3, [r3]
1759:FreeRTOS/tasks.c ****         {
 3618              		.loc 1 1759 11 view .LVU1004
 3619 006c A3B9     		cbnz	r3, .L285
 3620              	.L277:
1771:FreeRTOS/tasks.c ****         }
 3621              		.loc 1 1771 37 is_stmt 1 view .LVU1005
1774:FreeRTOS/tasks.c ****         {
 3622              		.loc 1 1774 9 view .LVU1006
1774:FreeRTOS/tasks.c ****         {
 3623              		.loc 1 1774 19 is_stmt 0 view .LVU1007
 3624 006e 254B     		ldr	r3, .L288+16
 3625 0070 1B68     		ldr	r3, [r3]
1774:FreeRTOS/tasks.c ****         {
 3626              		.loc 1 1774 11 view .LVU1008
 3627 0072 A342     		cmp	r3, r4
 3628 0074 17D0     		beq	.L286
 3629              	.L270:
1805:FreeRTOS/tasks.c **** 
 3630              		.loc 1 1805 5 view .LVU1009
 3631 0076 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 178


 3632              	.LVL281:
 3633              	.L284:
1714:FreeRTOS/tasks.c **** 
 3634              		.loc 1 1714 21 discriminator 1 view .LVU1010
 3635 0078 224B     		ldr	r3, .L288+16
 3636 007a 1C68     		ldr	r4, [r3]
 3637              	.LVL282:
1714:FreeRTOS/tasks.c **** 
 3638              		.loc 1 1714 21 discriminator 1 view .LVU1011
 3639 007c C6E7     		b	.L271
 3640              	.LVL283:
 3641              	.L276:
 3642              	.LBB177:
1747:FreeRTOS/tasks.c ****                         {
 3643              		.loc 1 1747 25 is_stmt 1 view .LVU1012
1747:FreeRTOS/tasks.c ****                         {
 3644              		.loc 1 1747 49 is_stmt 0 view .LVU1013
 3645 007e E218     		adds	r2, r4, r3
 3646 0080 92F85420 		ldrb	r2, [r2, #84]	@ zero_extendqisi2
 3647 0084 D2B2     		uxtb	r2, r2
1747:FreeRTOS/tasks.c ****                         {
 3648              		.loc 1 1747 27 view .LVU1014
 3649 0086 012A     		cmp	r2, #1
 3650 0088 01D0     		beq	.L287
 3651              	.L275:
1745:FreeRTOS/tasks.c ****                     {
 3652              		.loc 1 1745 76 is_stmt 1 discriminator 2 view .LVU1015
1745:FreeRTOS/tasks.c ****                     {
 3653              		.loc 1 1745 77 is_stmt 0 discriminator 2 view .LVU1016
 3654 008a 0133     		adds	r3, r3, #1
 3655              	.LVL284:
1745:FreeRTOS/tasks.c ****                     {
 3656              		.loc 1 1745 77 discriminator 2 view .LVU1017
 3657 008c E8E7     		b	.L274
 3658              	.L287:
1751:FreeRTOS/tasks.c ****                         }
 3659              		.loc 1 1751 29 is_stmt 1 view .LVU1018
1751:FreeRTOS/tasks.c ****                         }
 3660              		.loc 1 1751 55 is_stmt 0 view .LVU1019
 3661 008e E218     		adds	r2, r4, r3
 3662 0090 0021     		movs	r1, #0
 3663 0092 82F85410 		strb	r1, [r2, #84]
 3664 0096 F8E7     		b	.L275
 3665              	.LVL285:
 3666              	.L285:
1751:FreeRTOS/tasks.c ****                         }
 3667              		.loc 1 1751 55 view .LVU1020
 3668              	.LBE177:
1763:FreeRTOS/tasks.c ****             {
 3669              		.loc 1 1763 13 is_stmt 1 view .LVU1021
 3670 0098 FFF7FEFF 		bl	vPortEnterCritical
 3671              	.LVL286:
1765:FreeRTOS/tasks.c ****             }
 3672              		.loc 1 1765 17 view .LVU1022
 3673 009c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3674              	.LVL287:
1767:FreeRTOS/tasks.c ****         }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 179


 3675              		.loc 1 1767 13 view .LVU1023
 3676 00a0 FFF7FEFF 		bl	vPortExitCritical
 3677              	.LVL288:
 3678 00a4 E3E7     		b	.L277
 3679              	.L286:
1776:FreeRTOS/tasks.c ****             {
 3680              		.loc 1 1776 13 view .LVU1024
1776:FreeRTOS/tasks.c ****             {
 3681              		.loc 1 1776 35 is_stmt 0 view .LVU1025
 3682 00a6 164B     		ldr	r3, .L288+12
 3683 00a8 1B68     		ldr	r3, [r3]
1776:FreeRTOS/tasks.c ****             {
 3684              		.loc 1 1776 15 view .LVU1026
 3685 00aa B3B1     		cbz	r3, .L279
1779:FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 3686              		.loc 1 1779 17 is_stmt 1 view .LVU1027
 3687 00ac 164B     		ldr	r3, .L288+20
 3688 00ae 1B68     		ldr	r3, [r3]
 3689 00b0 43B1     		cbz	r3, .L280
1779:FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 3690              		.loc 1 1779 17 view .LVU1028
 3691              	.LBB178:
 3692              	.LBI178:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3693              		.loc 2 193 34 view .LVU1029
 3694              	.LBB179:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3695              		.loc 2 195 9 view .LVU1030
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3696              		.loc 2 197 9 view .LVU1031
 3697              		.syntax unified
 3698              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3699 00b2 4FF05003 			mov r3, #80												
 3700 00b6 83F31188 		msr basepri, r3											
 3701 00ba BFF36F8F 		isb														
 3702 00be BFF34F8F 		dsb														
 3703              	
 3704              	@ 0 "" 2
 3705              	.LVL289:
 3706              		.thumb
 3707              		.syntax unified
 3708              	.L281:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3709              		.loc 2 197 9 is_stmt 0 view .LVU1032
 3710              	.LBE179:
 3711              	.LBE178:
1779:FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 3712              		.loc 1 1779 17 is_stmt 1 discriminator 1 view .LVU1033
1779:FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 3713              		.loc 1 1779 17 discriminator 1 view .LVU1034
1779:FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 3714              		.loc 1 1779 17 discriminator 1 view .LVU1035
 3715 00c2 FEE7     		b	.L281
 3716              	.L280:
1779:FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 3717              		.loc 1 1779 58 discriminator 2 view .LVU1036
1780:FreeRTOS/tasks.c ****             }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 180


 3718              		.loc 1 1780 17 discriminator 2 view .LVU1037
 3719 00c4 4FF0E023 		mov	r3, #-536813568
 3720 00c8 4FF08052 		mov	r2, #268435456
 3721 00cc C3F8042D 		str	r2, [r3, #3332]
1780:FreeRTOS/tasks.c ****             }
 3722              		.loc 1 1780 17 discriminator 2 view .LVU1038
 3723              		.syntax unified
 3724              	@ 1780 "FreeRTOS/tasks.c" 1
 3725 00d0 BFF34F8F 		dsb
 3726              	@ 0 "" 2
1780:FreeRTOS/tasks.c ****             }
 3727              		.loc 1 1780 17 discriminator 2 view .LVU1039
 3728              	@ 1780 "FreeRTOS/tasks.c" 1
 3729 00d4 BFF36F8F 		isb
 3730              	@ 0 "" 2
1780:FreeRTOS/tasks.c ****             }
 3731              		.loc 1 1780 39 discriminator 2 view .LVU1040
 3732              		.thumb
 3733              		.syntax unified
 3734 00d8 CDE7     		b	.L270
 3735              	.L279:
1787:FreeRTOS/tasks.c ****                 {
 3736              		.loc 1 1787 17 view .LVU1041
1787:FreeRTOS/tasks.c ****                 {
 3737              		.loc 1 1787 21 is_stmt 0 view .LVU1042
 3738 00da 084B     		ldr	r3, .L288+8
 3739 00dc 1A68     		ldr	r2, [r3]
1787:FreeRTOS/tasks.c ****                 {
 3740              		.loc 1 1787 68 view .LVU1043
 3741 00de 0B4B     		ldr	r3, .L288+24
 3742 00e0 1B68     		ldr	r3, [r3]
1787:FreeRTOS/tasks.c ****                 {
 3743              		.loc 1 1787 19 view .LVU1044
 3744 00e2 9A42     		cmp	r2, r3
 3745 00e4 03D1     		bne	.L282
1793:FreeRTOS/tasks.c ****                 }
 3746              		.loc 1 1793 21 is_stmt 1 view .LVU1045
1793:FreeRTOS/tasks.c ****                 }
 3747              		.loc 1 1793 34 is_stmt 0 view .LVU1046
 3748 00e6 074B     		ldr	r3, .L288+16
 3749 00e8 0022     		movs	r2, #0
 3750 00ea 1A60     		str	r2, [r3]
 3751 00ec C3E7     		b	.L270
 3752              	.L282:
1797:FreeRTOS/tasks.c ****                 }
 3753              		.loc 1 1797 21 is_stmt 1 view .LVU1047
 3754 00ee FFF7FEFF 		bl	vTaskSwitchContext
 3755              	.LVL290:
1803:FreeRTOS/tasks.c ****         }
 3756              		.loc 1 1803 37 view .LVU1048
1805:FreeRTOS/tasks.c **** 
 3757              		.loc 1 1805 5 is_stmt 0 view .LVU1049
 3758 00f2 C0E7     		b	.L270
 3759              	.L289:
 3760              		.align	2
 3761              	.L288:
 3762 00f4 00000000 		.word	.LANCHOR2
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 181


 3763 00f8 00000000 		.word	.LANCHOR12
 3764 00fc 00000000 		.word	.LANCHOR0
 3765 0100 00000000 		.word	.LANCHOR10
 3766 0104 00000000 		.word	.LANCHOR9
 3767 0108 00000000 		.word	.LANCHOR14
 3768 010c 00000000 		.word	.LANCHOR8
 3769              		.cfi_endproc
 3770              	.LFE11:
 3772              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3773              		.align	1
 3774              		.global	vTaskPlaceOnEventList
 3775              		.syntax unified
 3776              		.thumb
 3777              		.thumb_func
 3779              	vTaskPlaceOnEventList:
 3780              	.LVL291:
 3781              	.LFB30:
3088:FreeRTOS/tasks.c ****     configASSERT( pxEventList );
 3782              		.loc 1 3088 1 is_stmt 1 view -0
 3783              		.cfi_startproc
 3784              		@ args = 0, pretend = 0, frame = 0
 3785              		@ frame_needed = 0, uses_anonymous_args = 0
3089:FreeRTOS/tasks.c **** 
 3786              		.loc 1 3089 5 view .LVU1051
 3787 0000 58B1     		cbz	r0, .L295
3088:FreeRTOS/tasks.c ****     configASSERT( pxEventList );
 3788              		.loc 1 3088 1 is_stmt 0 discriminator 2 view .LVU1052
 3789 0002 10B5     		push	{r4, lr}
 3790              	.LCFI33:
 3791              		.cfi_def_cfa_offset 8
 3792              		.cfi_offset 4, -8
 3793              		.cfi_offset 14, -4
 3794 0004 0C46     		mov	r4, r1
3089:FreeRTOS/tasks.c **** 
 3795              		.loc 1 3089 32 is_stmt 1 discriminator 2 view .LVU1053
3098:FreeRTOS/tasks.c **** 
 3796              		.loc 1 3098 5 discriminator 2 view .LVU1054
3098:FreeRTOS/tasks.c **** 
 3797              		.loc 1 3098 46 is_stmt 0 discriminator 2 view .LVU1055
 3798 0006 094A     		ldr	r2, .L296
 3799 0008 1168     		ldr	r1, [r2]
 3800              	.LVL292:
3098:FreeRTOS/tasks.c **** 
 3801              		.loc 1 3098 5 discriminator 2 view .LVU1056
 3802 000a 1831     		adds	r1, r1, #24
 3803 000c FFF7FEFF 		bl	vListInsert
 3804              	.LVL293:
3100:FreeRTOS/tasks.c **** }
 3805              		.loc 1 3100 5 is_stmt 1 discriminator 2 view .LVU1057
 3806 0010 0121     		movs	r1, #1
 3807 0012 2046     		mov	r0, r4
 3808 0014 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3809              	.LVL294:
3101:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3810              		.loc 1 3101 1 is_stmt 0 discriminator 2 view .LVU1058
 3811 0018 10BD     		pop	{r4, pc}
 3812              	.LVL295:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 182


 3813              	.L295:
 3814              	.LCFI34:
 3815              		.cfi_def_cfa_offset 0
 3816              		.cfi_restore 4
 3817              		.cfi_restore 14
3089:FreeRTOS/tasks.c **** 
 3818              		.loc 1 3089 5 is_stmt 1 view .LVU1059
 3819              	.LBB180:
 3820              	.LBI180:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3821              		.loc 2 193 34 view .LVU1060
 3822              	.LBB181:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3823              		.loc 2 195 9 view .LVU1061
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3824              		.loc 2 197 9 view .LVU1062
 3825              		.syntax unified
 3826              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3827 001a 4FF05003 			mov r3, #80												
 3828 001e 83F31188 		msr basepri, r3											
 3829 0022 BFF36F8F 		isb														
 3830 0026 BFF34F8F 		dsb														
 3831              	
 3832              	@ 0 "" 2
 3833              	.LVL296:
 3834              		.thumb
 3835              		.syntax unified
 3836              	.L292:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3837              		.loc 2 197 9 is_stmt 0 view .LVU1063
 3838              	.LBE181:
 3839              	.LBE180:
3089:FreeRTOS/tasks.c **** 
 3840              		.loc 1 3089 5 is_stmt 1 discriminator 1 view .LVU1064
3089:FreeRTOS/tasks.c **** 
 3841              		.loc 1 3089 5 discriminator 1 view .LVU1065
3089:FreeRTOS/tasks.c **** 
 3842              		.loc 1 3089 5 discriminator 1 view .LVU1066
 3843 002a FEE7     		b	.L292
 3844              	.L297:
 3845              		.align	2
 3846              	.L296:
 3847 002c 00000000 		.word	.LANCHOR9
 3848              		.cfi_endproc
 3849              	.LFE30:
 3851              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3852              		.align	1
 3853              		.global	vTaskPlaceOnUnorderedEventList
 3854              		.syntax unified
 3855              		.thumb
 3856              		.thumb_func
 3858              	vTaskPlaceOnUnorderedEventList:
 3859              	.LVL297:
 3860              	.LFB31:
3107:FreeRTOS/tasks.c ****     configASSERT( pxEventList );
 3861              		.loc 1 3107 1 view -0
 3862              		.cfi_startproc
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 183


 3863              		@ args = 0, pretend = 0, frame = 0
 3864              		@ frame_needed = 0, uses_anonymous_args = 0
3108:FreeRTOS/tasks.c **** 
 3865              		.loc 1 3108 5 view .LVU1068
 3866 0000 70B1     		cbz	r0, .L305
3107:FreeRTOS/tasks.c ****     configASSERT( pxEventList );
 3867              		.loc 1 3107 1 is_stmt 0 discriminator 2 view .LVU1069
 3868 0002 10B5     		push	{r4, lr}
 3869              	.LCFI35:
 3870              		.cfi_def_cfa_offset 8
 3871              		.cfi_offset 4, -8
 3872              		.cfi_offset 14, -4
 3873 0004 1446     		mov	r4, r2
 3874 0006 0246     		mov	r2, r0
 3875              	.LVL298:
3108:FreeRTOS/tasks.c **** 
 3876              		.loc 1 3108 32 is_stmt 1 discriminator 2 view .LVU1070
3112:FreeRTOS/tasks.c **** 
 3877              		.loc 1 3112 5 discriminator 2 view .LVU1071
 3878 0008 114B     		ldr	r3, .L306
 3879 000a 1B68     		ldr	r3, [r3]
 3880 000c 8BB9     		cbnz	r3, .L301
3112:FreeRTOS/tasks.c **** 
 3881              		.loc 1 3112 5 view .LVU1072
 3882              	.LBB182:
 3883              	.LBI182:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3884              		.loc 2 193 34 view .LVU1073
 3885              	.LBB183:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3886              		.loc 2 195 9 view .LVU1074
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3887              		.loc 2 197 9 view .LVU1075
 3888              		.syntax unified
 3889              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3890 000e 4FF05003 			mov r3, #80												
 3891 0012 83F31188 		msr basepri, r3											
 3892 0016 BFF36F8F 		isb														
 3893 001a BFF34F8F 		dsb														
 3894              	
 3895              	@ 0 "" 2
 3896              	.LVL299:
 3897              		.thumb
 3898              		.syntax unified
 3899              	.L302:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3900              		.loc 2 197 9 is_stmt 0 view .LVU1076
 3901              	.LBE183:
 3902              	.LBE182:
3112:FreeRTOS/tasks.c **** 
 3903              		.loc 1 3112 5 is_stmt 1 discriminator 2 view .LVU1077
3112:FreeRTOS/tasks.c **** 
 3904              		.loc 1 3112 5 discriminator 2 view .LVU1078
3112:FreeRTOS/tasks.c **** 
 3905              		.loc 1 3112 5 discriminator 2 view .LVU1079
 3906 001e FEE7     		b	.L302
 3907              	.LVL300:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 184


 3908              	.L305:
 3909              	.LCFI36:
 3910              		.cfi_def_cfa_offset 0
 3911              		.cfi_restore 4
 3912              		.cfi_restore 14
3108:FreeRTOS/tasks.c **** 
 3913              		.loc 1 3108 5 view .LVU1080
 3914              	.LBB184:
 3915              	.LBI184:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 3916              		.loc 2 193 34 view .LVU1081
 3917              	.LBB185:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3918              		.loc 2 195 9 view .LVU1082
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3919              		.loc 2 197 9 view .LVU1083
 3920              		.syntax unified
 3921              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3922 0020 4FF05003 			mov r3, #80												
 3923 0024 83F31188 		msr basepri, r3											
 3924 0028 BFF36F8F 		isb														
 3925 002c BFF34F8F 		dsb														
 3926              	
 3927              	@ 0 "" 2
 3928              	.LVL301:
 3929              		.thumb
 3930              		.syntax unified
 3931              	.L300:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3932              		.loc 2 197 9 is_stmt 0 view .LVU1084
 3933              	.LBE185:
 3934              	.LBE184:
3108:FreeRTOS/tasks.c **** 
 3935              		.loc 1 3108 5 is_stmt 1 discriminator 1 view .LVU1085
3108:FreeRTOS/tasks.c **** 
 3936              		.loc 1 3108 5 discriminator 1 view .LVU1086
3108:FreeRTOS/tasks.c **** 
 3937              		.loc 1 3108 5 discriminator 1 view .LVU1087
 3938 0030 FEE7     		b	.L300
 3939              	.LVL302:
 3940              	.L301:
 3941              	.LCFI37:
 3942              		.cfi_def_cfa_offset 8
 3943              		.cfi_offset 4, -8
 3944              		.cfi_offset 14, -4
3112:FreeRTOS/tasks.c **** 
 3945              		.loc 1 3112 46 discriminator 2 view .LVU1088
3117:FreeRTOS/tasks.c **** 
 3946              		.loc 1 3117 5 discriminator 2 view .LVU1089
 3947 0032 084B     		ldr	r3, .L306+4
 3948 0034 1868     		ldr	r0, [r3]
 3949              	.LVL303:
3117:FreeRTOS/tasks.c **** 
 3950              		.loc 1 3117 5 is_stmt 0 discriminator 2 view .LVU1090
 3951 0036 41F00041 		orr	r1, r1, #-2147483648
 3952              	.LVL304:
3117:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 185


 3953              		.loc 1 3117 5 discriminator 2 view .LVU1091
 3954 003a 8161     		str	r1, [r0, #24]
3124:FreeRTOS/tasks.c **** 
 3955              		.loc 1 3124 5 is_stmt 1 discriminator 2 view .LVU1092
3124:FreeRTOS/tasks.c **** 
 3956              		.loc 1 3124 49 is_stmt 0 discriminator 2 view .LVU1093
 3957 003c 1968     		ldr	r1, [r3]
3124:FreeRTOS/tasks.c **** 
 3958              		.loc 1 3124 5 discriminator 2 view .LVU1094
 3959 003e 1831     		adds	r1, r1, #24
 3960 0040 1046     		mov	r0, r2
 3961 0042 FFF7FEFF 		bl	vListInsertEnd
 3962              	.LVL305:
3126:FreeRTOS/tasks.c **** }
 3963              		.loc 1 3126 5 is_stmt 1 discriminator 2 view .LVU1095
 3964 0046 0121     		movs	r1, #1
 3965 0048 2046     		mov	r0, r4
 3966 004a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3967              	.LVL306:
3127:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3968              		.loc 1 3127 1 is_stmt 0 discriminator 2 view .LVU1096
 3969 004e 10BD     		pop	{r4, pc}
 3970              	.LVL307:
 3971              	.L307:
3127:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3972              		.loc 1 3127 1 discriminator 2 view .LVU1097
 3973              		.align	2
 3974              	.L306:
 3975 0050 00000000 		.word	.LANCHOR14
 3976 0054 00000000 		.word	.LANCHOR9
 3977              		.cfi_endproc
 3978              	.LFE31:
 3980              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3981              		.align	1
 3982              		.global	xTaskRemoveFromEventList
 3983              		.syntax unified
 3984              		.thumb
 3985              		.thumb_func
 3987              	xTaskRemoveFromEventList:
 3988              	.LVL308:
 3989              	.LFB32:
3166:FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
 3990              		.loc 1 3166 1 is_stmt 1 view -0
 3991              		.cfi_startproc
 3992              		@ args = 0, pretend = 0, frame = 0
 3993              		@ frame_needed = 0, uses_anonymous_args = 0
3166:FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
 3994              		.loc 1 3166 1 is_stmt 0 view .LVU1099
 3995 0000 38B5     		push	{r3, r4, r5, lr}
 3996              	.LCFI38:
 3997              		.cfi_def_cfa_offset 16
 3998              		.cfi_offset 3, -16
 3999              		.cfi_offset 4, -12
 4000              		.cfi_offset 5, -8
 4001              		.cfi_offset 14, -4
3167:FreeRTOS/tasks.c ****     BaseType_t xReturn;
 4002              		.loc 1 3167 5 is_stmt 1 view .LVU1100
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 186


3168:FreeRTOS/tasks.c **** 
 4003              		.loc 1 3168 5 view .LVU1101
3183:FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4004              		.loc 1 3183 5 view .LVU1102
3183:FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4005              		.loc 1 3183 22 is_stmt 0 view .LVU1103
 4006 0002 C368     		ldr	r3, [r0, #12]
3183:FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4007              		.loc 1 3183 20 view .LVU1104
 4008 0004 DC68     		ldr	r4, [r3, #12]
 4009              	.LVL309:
3184:FreeRTOS/tasks.c ****     ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4010              		.loc 1 3184 5 is_stmt 1 view .LVU1105
 4011 0006 3CB3     		cbz	r4, .L316
3184:FreeRTOS/tasks.c ****     ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4012              		.loc 1 3184 35 discriminator 2 view .LVU1106
3185:FreeRTOS/tasks.c **** 
 4013              		.loc 1 3185 5 discriminator 2 view .LVU1107
3185:FreeRTOS/tasks.c **** 
 4014              		.loc 1 3185 14 is_stmt 0 discriminator 2 view .LVU1108
 4015 0008 04F11805 		add	r5, r4, #24
 4016 000c 2846     		mov	r0, r5
 4017              	.LVL310:
3185:FreeRTOS/tasks.c **** 
 4018              		.loc 1 3185 14 discriminator 2 view .LVU1109
 4019 000e FFF7FEFF 		bl	uxListRemove
 4020              	.LVL311:
3187:FreeRTOS/tasks.c ****     {
 4021              		.loc 1 3187 5 is_stmt 1 discriminator 2 view .LVU1110
3187:FreeRTOS/tasks.c ****     {
 4022              		.loc 1 3187 30 is_stmt 0 discriminator 2 view .LVU1111
 4023 0012 194B     		ldr	r3, .L317
 4024 0014 1B68     		ldr	r3, [r3]
3187:FreeRTOS/tasks.c ****     {
 4025              		.loc 1 3187 7 discriminator 2 view .LVU1112
 4026 0016 43BB     		cbnz	r3, .L311
3189:FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4027              		.loc 1 3189 9 is_stmt 1 view .LVU1113
3189:FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4028              		.loc 1 3189 18 is_stmt 0 view .LVU1114
 4029 0018 251D     		adds	r5, r4, #4
 4030 001a 2846     		mov	r0, r5
 4031 001c FFF7FEFF 		bl	uxListRemove
 4032              	.LVL312:
3190:FreeRTOS/tasks.c **** 
 4033              		.loc 1 3190 9 is_stmt 1 view .LVU1115
 4034 0020 2046     		mov	r0, r4
 4035 0022 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 4036              	.LVL313:
3190:FreeRTOS/tasks.c **** 
 4037              		.loc 1 3190 9 view .LVU1116
 4038 0026 E06A     		ldr	r0, [r4, #44]
 4039 0028 0123     		movs	r3, #1
 4040 002a 8340     		lsls	r3, r3, r0
 4041 002c 134A     		ldr	r2, .L317+4
 4042 002e 1168     		ldr	r1, [r2]
 4043 0030 0B43     		orrs	r3, r3, r1
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 187


 4044 0032 1360     		str	r3, [r2]
3190:FreeRTOS/tasks.c **** 
 4045              		.loc 1 3190 9 view .LVU1117
 4046 0034 00EB8000 		add	r0, r0, r0, lsl #2
 4047 0038 2946     		mov	r1, r5
 4048 003a 114B     		ldr	r3, .L317+8
 4049 003c 03EB8000 		add	r0, r3, r0, lsl #2
 4050 0040 FFF7FEFF 		bl	vListInsertEnd
 4051              	.LVL314:
3190:FreeRTOS/tasks.c **** 
 4052              		.loc 1 3190 48 view .LVU1118
 4053              	.L312:
3213:FreeRTOS/tasks.c ****     {
 4054              		.loc 1 3213 5 view .LVU1119
3213:FreeRTOS/tasks.c ****     {
 4055              		.loc 1 3213 23 is_stmt 0 view .LVU1120
 4056 0044 E26A     		ldr	r2, [r4, #44]
3213:FreeRTOS/tasks.c ****     {
 4057              		.loc 1 3213 50 view .LVU1121
 4058 0046 0F4B     		ldr	r3, .L317+12
 4059 0048 1B68     		ldr	r3, [r3]
 4060 004a DB6A     		ldr	r3, [r3, #44]
3213:FreeRTOS/tasks.c ****     {
 4061              		.loc 1 3213 7 view .LVU1122
 4062 004c 9A42     		cmp	r2, r3
 4063 004e 11D9     		bls	.L314
3218:FreeRTOS/tasks.c **** 
 4064              		.loc 1 3218 9 is_stmt 1 view .LVU1123
 4065              	.LVL315:
3222:FreeRTOS/tasks.c ****     }
 4066              		.loc 1 3222 9 view .LVU1124
3222:FreeRTOS/tasks.c ****     }
 4067              		.loc 1 3222 23 is_stmt 0 view .LVU1125
 4068 0050 0120     		movs	r0, #1
 4069 0052 0D4B     		ldr	r3, .L317+16
 4070 0054 1860     		str	r0, [r3]
 4071              	.LVL316:
 4072              	.L308:
3230:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4073              		.loc 1 3230 1 view .LVU1126
 4074 0056 38BD     		pop	{r3, r4, r5, pc}
 4075              	.LVL317:
 4076              	.L316:
3184:FreeRTOS/tasks.c ****     ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4077              		.loc 1 3184 5 is_stmt 1 view .LVU1127
 4078              	.LBB186:
 4079              	.LBI186:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 4080              		.loc 2 193 34 view .LVU1128
 4081              	.LBB187:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4082              		.loc 2 195 9 view .LVU1129
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4083              		.loc 2 197 9 view .LVU1130
 4084              		.syntax unified
 4085              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4086 0058 4FF05003 			mov r3, #80												
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 188


 4087 005c 83F31188 		msr basepri, r3											
 4088 0060 BFF36F8F 		isb														
 4089 0064 BFF34F8F 		dsb														
 4090              	
 4091              	@ 0 "" 2
 4092              	.LVL318:
 4093              		.thumb
 4094              		.syntax unified
 4095              	.L310:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4096              		.loc 2 197 9 is_stmt 0 view .LVU1131
 4097              	.LBE187:
 4098              	.LBE186:
3184:FreeRTOS/tasks.c ****     ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4099              		.loc 1 3184 5 is_stmt 1 discriminator 1 view .LVU1132
3184:FreeRTOS/tasks.c ****     ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4100              		.loc 1 3184 5 discriminator 1 view .LVU1133
3184:FreeRTOS/tasks.c ****     ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4101              		.loc 1 3184 5 discriminator 1 view .LVU1134
 4102 0068 FEE7     		b	.L310
 4103              	.LVL319:
 4104              	.L311:
3210:FreeRTOS/tasks.c ****     }
 4105              		.loc 1 3210 9 view .LVU1135
 4106 006a 2946     		mov	r1, r5
 4107 006c 0748     		ldr	r0, .L317+20
 4108 006e FFF7FEFF 		bl	vListInsertEnd
 4109              	.LVL320:
 4110 0072 E7E7     		b	.L312
 4111              	.L314:
3226:FreeRTOS/tasks.c ****     }
 4112              		.loc 1 3226 17 is_stmt 0 view .LVU1136
 4113 0074 0020     		movs	r0, #0
 4114              	.LVL321:
3229:FreeRTOS/tasks.c **** }
 4115              		.loc 1 3229 5 is_stmt 1 view .LVU1137
3229:FreeRTOS/tasks.c **** }
 4116              		.loc 1 3229 12 is_stmt 0 view .LVU1138
 4117 0076 EEE7     		b	.L308
 4118              	.L318:
 4119              		.align	2
 4120              	.L317:
 4121 0078 00000000 		.word	.LANCHOR14
 4122 007c 00000000 		.word	.LANCHOR12
 4123 0080 00000000 		.word	.LANCHOR2
 4124 0084 00000000 		.word	.LANCHOR9
 4125 0088 00000000 		.word	.LANCHOR15
 4126 008c 00000000 		.word	.LANCHOR1
 4127              		.cfi_endproc
 4128              	.LFE32:
 4130              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4131              		.align	1
 4132              		.global	vTaskRemoveFromUnorderedEventList
 4133              		.syntax unified
 4134              		.thumb
 4135              		.thumb_func
 4137              	vTaskRemoveFromUnorderedEventList:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 189


 4138              	.LVL322:
 4139              	.LFB33:
3235:FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
 4140              		.loc 1 3235 1 is_stmt 1 view -0
 4141              		.cfi_startproc
 4142              		@ args = 0, pretend = 0, frame = 0
 4143              		@ frame_needed = 0, uses_anonymous_args = 0
3235:FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
 4144              		.loc 1 3235 1 is_stmt 0 view .LVU1140
 4145 0000 38B5     		push	{r3, r4, r5, lr}
 4146              	.LCFI39:
 4147              		.cfi_def_cfa_offset 16
 4148              		.cfi_offset 3, -16
 4149              		.cfi_offset 4, -12
 4150              		.cfi_offset 5, -8
 4151              		.cfi_offset 14, -4
3236:FreeRTOS/tasks.c **** 
 4152              		.loc 1 3236 5 is_stmt 1 view .LVU1141
3240:FreeRTOS/tasks.c **** 
 4153              		.loc 1 3240 5 view .LVU1142
 4154 0002 1E4B     		ldr	r3, .L327
 4155 0004 1B68     		ldr	r3, [r3]
 4156 0006 43B9     		cbnz	r3, .L320
3240:FreeRTOS/tasks.c **** 
 4157              		.loc 1 3240 5 view .LVU1143
 4158              	.LBB188:
 4159              	.LBI188:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 4160              		.loc 2 193 34 view .LVU1144
 4161              	.LBB189:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4162              		.loc 2 195 9 view .LVU1145
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4163              		.loc 2 197 9 view .LVU1146
 4164              		.syntax unified
 4165              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4166 0008 4FF05003 			mov r3, #80												
 4167 000c 83F31188 		msr basepri, r3											
 4168 0010 BFF36F8F 		isb														
 4169 0014 BFF34F8F 		dsb														
 4170              	
 4171              	@ 0 "" 2
 4172              	.LVL323:
 4173              		.thumb
 4174              		.syntax unified
 4175              	.L321:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4176              		.loc 2 197 9 is_stmt 0 view .LVU1147
 4177              	.LBE189:
 4178              	.LBE188:
3240:FreeRTOS/tasks.c **** 
 4179              		.loc 1 3240 5 is_stmt 1 discriminator 1 view .LVU1148
3240:FreeRTOS/tasks.c **** 
 4180              		.loc 1 3240 5 discriminator 1 view .LVU1149
3240:FreeRTOS/tasks.c **** 
 4181              		.loc 1 3240 5 discriminator 1 view .LVU1150
 4182 0018 FEE7     		b	.L321
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 190


 4183              	.L320:
3240:FreeRTOS/tasks.c **** 
 4184              		.loc 1 3240 52 discriminator 2 view .LVU1151
3243:FreeRTOS/tasks.c **** 
 4185              		.loc 1 3243 5 discriminator 2 view .LVU1152
 4186 001a 41F00041 		orr	r1, r1, #-2147483648
 4187              	.LVL324:
3243:FreeRTOS/tasks.c **** 
 4188              		.loc 1 3243 5 is_stmt 0 discriminator 2 view .LVU1153
 4189 001e 0160     		str	r1, [r0]
3247:FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4190              		.loc 1 3247 5 is_stmt 1 discriminator 2 view .LVU1154
3247:FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4191              		.loc 1 3247 20 is_stmt 0 discriminator 2 view .LVU1155
 4192 0020 C468     		ldr	r4, [r0, #12]
 4193              	.LVL325:
3248:FreeRTOS/tasks.c ****     ( void ) uxListRemove( pxEventListItem );
 4194              		.loc 1 3248 5 is_stmt 1 discriminator 2 view .LVU1156
 4195 0022 0CB3     		cbz	r4, .L326
3248:FreeRTOS/tasks.c ****     ( void ) uxListRemove( pxEventListItem );
 4196              		.loc 1 3248 35 discriminator 2 view .LVU1157
3249:FreeRTOS/tasks.c **** 
 4197              		.loc 1 3249 5 discriminator 2 view .LVU1158
3249:FreeRTOS/tasks.c **** 
 4198              		.loc 1 3249 14 is_stmt 0 discriminator 2 view .LVU1159
 4199 0024 FFF7FEFF 		bl	uxListRemove
 4200              	.LVL326:
3268:FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4201              		.loc 1 3268 5 is_stmt 1 discriminator 2 view .LVU1160
3268:FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4202              		.loc 1 3268 14 is_stmt 0 discriminator 2 view .LVU1161
 4203 0028 251D     		adds	r5, r4, #4
 4204 002a 2846     		mov	r0, r5
 4205 002c FFF7FEFF 		bl	uxListRemove
 4206              	.LVL327:
3269:FreeRTOS/tasks.c **** 
 4207              		.loc 1 3269 5 is_stmt 1 discriminator 2 view .LVU1162
 4208 0030 2046     		mov	r0, r4
 4209 0032 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 4210              	.LVL328:
3269:FreeRTOS/tasks.c **** 
 4211              		.loc 1 3269 5 discriminator 2 view .LVU1163
 4212 0036 E06A     		ldr	r0, [r4, #44]
 4213 0038 0123     		movs	r3, #1
 4214 003a 8340     		lsls	r3, r3, r0
 4215 003c 104A     		ldr	r2, .L327+4
 4216 003e 1168     		ldr	r1, [r2]
 4217 0040 0B43     		orrs	r3, r3, r1
 4218 0042 1360     		str	r3, [r2]
3269:FreeRTOS/tasks.c **** 
 4219              		.loc 1 3269 5 discriminator 2 view .LVU1164
 4220 0044 00EB8000 		add	r0, r0, r0, lsl #2
 4221 0048 2946     		mov	r1, r5
 4222 004a 0E4B     		ldr	r3, .L327+8
 4223 004c 03EB8000 		add	r0, r3, r0, lsl #2
 4224 0050 FFF7FEFF 		bl	vListInsertEnd
 4225              	.LVL329:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 191


3269:FreeRTOS/tasks.c **** 
 4226              		.loc 1 3269 44 discriminator 2 view .LVU1165
3271:FreeRTOS/tasks.c ****     {
 4227              		.loc 1 3271 5 discriminator 2 view .LVU1166
3271:FreeRTOS/tasks.c ****     {
 4228              		.loc 1 3271 23 is_stmt 0 discriminator 2 view .LVU1167
 4229 0054 E26A     		ldr	r2, [r4, #44]
3271:FreeRTOS/tasks.c ****     {
 4230              		.loc 1 3271 50 discriminator 2 view .LVU1168
 4231 0056 0C4B     		ldr	r3, .L327+12
 4232 0058 1B68     		ldr	r3, [r3]
 4233 005a DB6A     		ldr	r3, [r3, #44]
3271:FreeRTOS/tasks.c ****     {
 4234              		.loc 1 3271 7 discriminator 2 view .LVU1169
 4235 005c 9A42     		cmp	r2, r3
 4236 005e 02D9     		bls	.L319
3277:FreeRTOS/tasks.c ****     }
 4237              		.loc 1 3277 9 is_stmt 1 view .LVU1170
3277:FreeRTOS/tasks.c ****     }
 4238              		.loc 1 3277 23 is_stmt 0 view .LVU1171
 4239 0060 0A4B     		ldr	r3, .L327+16
 4240 0062 0122     		movs	r2, #1
 4241 0064 1A60     		str	r2, [r3]
 4242              	.L319:
3279:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4243              		.loc 1 3279 1 view .LVU1172
 4244 0066 38BD     		pop	{r3, r4, r5, pc}
 4245              	.LVL330:
 4246              	.L326:
3248:FreeRTOS/tasks.c ****     ( void ) uxListRemove( pxEventListItem );
 4247              		.loc 1 3248 5 is_stmt 1 view .LVU1173
 4248              	.LBB190:
 4249              	.LBI190:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 4250              		.loc 2 193 34 view .LVU1174
 4251              	.LBB191:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4252              		.loc 2 195 9 view .LVU1175
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4253              		.loc 2 197 9 view .LVU1176
 4254              		.syntax unified
 4255              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4256 0068 4FF05003 			mov r3, #80												
 4257 006c 83F31188 		msr basepri, r3											
 4258 0070 BFF36F8F 		isb														
 4259 0074 BFF34F8F 		dsb														
 4260              	
 4261              	@ 0 "" 2
 4262              	.LVL331:
 4263              		.thumb
 4264              		.syntax unified
 4265              	.L323:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4266              		.loc 2 197 9 is_stmt 0 view .LVU1177
 4267              	.LBE191:
 4268              	.LBE190:
3248:FreeRTOS/tasks.c ****     ( void ) uxListRemove( pxEventListItem );
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 192


 4269              		.loc 1 3248 5 is_stmt 1 discriminator 2 view .LVU1178
3248:FreeRTOS/tasks.c ****     ( void ) uxListRemove( pxEventListItem );
 4270              		.loc 1 3248 5 discriminator 2 view .LVU1179
3248:FreeRTOS/tasks.c ****     ( void ) uxListRemove( pxEventListItem );
 4271              		.loc 1 3248 5 discriminator 2 view .LVU1180
 4272 0078 FEE7     		b	.L323
 4273              	.L328:
 4274 007a 00BF     		.align	2
 4275              	.L327:
 4276 007c 00000000 		.word	.LANCHOR14
 4277 0080 00000000 		.word	.LANCHOR12
 4278 0084 00000000 		.word	.LANCHOR2
 4279 0088 00000000 		.word	.LANCHOR9
 4280 008c 00000000 		.word	.LANCHOR15
 4281              		.cfi_endproc
 4282              	.LFE33:
 4284              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4285              		.align	1
 4286              		.global	vTaskSetTimeOutState
 4287              		.syntax unified
 4288              		.thumb
 4289              		.thumb_func
 4291              	vTaskSetTimeOutState:
 4292              	.LVL332:
 4293              	.LFB34:
3283:FreeRTOS/tasks.c ****     configASSERT( pxTimeOut );
 4294              		.loc 1 3283 1 view -0
 4295              		.cfi_startproc
 4296              		@ args = 0, pretend = 0, frame = 0
 4297              		@ frame_needed = 0, uses_anonymous_args = 0
3284:FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 4298              		.loc 1 3284 5 view .LVU1182
 4299 0000 60B1     		cbz	r0, .L334
3283:FreeRTOS/tasks.c ****     configASSERT( pxTimeOut );
 4300              		.loc 1 3283 1 is_stmt 0 discriminator 2 view .LVU1183
 4301 0002 10B5     		push	{r4, lr}
 4302              	.LCFI40:
 4303              		.cfi_def_cfa_offset 8
 4304              		.cfi_offset 4, -8
 4305              		.cfi_offset 14, -4
 4306 0004 0446     		mov	r4, r0
3284:FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 4307              		.loc 1 3284 30 is_stmt 1 discriminator 2 view .LVU1184
3285:FreeRTOS/tasks.c ****     {
 4308              		.loc 1 3285 5 discriminator 2 view .LVU1185
 4309 0006 FFF7FEFF 		bl	vPortEnterCritical
 4310              	.LVL333:
3287:FreeRTOS/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 4311              		.loc 1 3287 9 discriminator 2 view .LVU1186
3287:FreeRTOS/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 4312              		.loc 1 3287 35 is_stmt 0 discriminator 2 view .LVU1187
 4313 000a 094B     		ldr	r3, .L335
 4314 000c 1B68     		ldr	r3, [r3]
 4315 000e 2360     		str	r3, [r4]
3288:FreeRTOS/tasks.c ****     }
 4316              		.loc 1 3288 9 is_stmt 1 discriminator 2 view .LVU1188
3288:FreeRTOS/tasks.c ****     }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 193


 4317              		.loc 1 3288 36 is_stmt 0 discriminator 2 view .LVU1189
 4318 0010 084B     		ldr	r3, .L335+4
 4319 0012 1B68     		ldr	r3, [r3]
 4320 0014 6360     		str	r3, [r4, #4]
3290:FreeRTOS/tasks.c **** }
 4321              		.loc 1 3290 5 is_stmt 1 discriminator 2 view .LVU1190
 4322 0016 FFF7FEFF 		bl	vPortExitCritical
 4323              	.LVL334:
3291:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4324              		.loc 1 3291 1 is_stmt 0 discriminator 2 view .LVU1191
 4325 001a 10BD     		pop	{r4, pc}
 4326              	.LVL335:
 4327              	.L334:
 4328              	.LCFI41:
 4329              		.cfi_def_cfa_offset 0
 4330              		.cfi_restore 4
 4331              		.cfi_restore 14
3284:FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 4332              		.loc 1 3284 5 is_stmt 1 view .LVU1192
 4333              	.LBB192:
 4334              	.LBI192:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 4335              		.loc 2 193 34 view .LVU1193
 4336              	.LBB193:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4337              		.loc 2 195 9 view .LVU1194
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4338              		.loc 2 197 9 view .LVU1195
 4339              		.syntax unified
 4340              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4341 001c 4FF05003 			mov r3, #80												
 4342 0020 83F31188 		msr basepri, r3											
 4343 0024 BFF36F8F 		isb														
 4344 0028 BFF34F8F 		dsb														
 4345              	
 4346              	@ 0 "" 2
 4347              	.LVL336:
 4348              		.thumb
 4349              		.syntax unified
 4350              	.L331:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4351              		.loc 2 197 9 is_stmt 0 view .LVU1196
 4352              	.LBE193:
 4353              	.LBE192:
3284:FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 4354              		.loc 1 3284 5 is_stmt 1 discriminator 1 view .LVU1197
3284:FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 4355              		.loc 1 3284 5 discriminator 1 view .LVU1198
3284:FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 4356              		.loc 1 3284 5 discriminator 1 view .LVU1199
 4357 002c FEE7     		b	.L331
 4358              	.L336:
 4359 002e 00BF     		.align	2
 4360              	.L335:
 4361 0030 00000000 		.word	.LANCHOR18
 4362 0034 00000000 		.word	.LANCHOR13
 4363              		.cfi_endproc
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 194


 4364              	.LFE34:
 4366              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4367              		.align	1
 4368              		.global	vTaskInternalSetTimeOutState
 4369              		.syntax unified
 4370              		.thumb
 4371              		.thumb_func
 4373              	vTaskInternalSetTimeOutState:
 4374              	.LVL337:
 4375              	.LFB35:
3295:FreeRTOS/tasks.c ****     /* For internal use only as it does not use a critical section. */
 4376              		.loc 1 3295 1 view -0
 4377              		.cfi_startproc
 4378              		@ args = 0, pretend = 0, frame = 0
 4379              		@ frame_needed = 0, uses_anonymous_args = 0
 4380              		@ link register save eliminated.
3297:FreeRTOS/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 4381              		.loc 1 3297 5 view .LVU1201
3297:FreeRTOS/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 4382              		.loc 1 3297 31 is_stmt 0 view .LVU1202
 4383 0000 034B     		ldr	r3, .L338
 4384 0002 1B68     		ldr	r3, [r3]
 4385 0004 0360     		str	r3, [r0]
3298:FreeRTOS/tasks.c **** }
 4386              		.loc 1 3298 5 is_stmt 1 view .LVU1203
3298:FreeRTOS/tasks.c **** }
 4387              		.loc 1 3298 32 is_stmt 0 view .LVU1204
 4388 0006 034B     		ldr	r3, .L338+4
 4389 0008 1B68     		ldr	r3, [r3]
 4390 000a 4360     		str	r3, [r0, #4]
3299:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4391              		.loc 1 3299 1 view .LVU1205
 4392 000c 7047     		bx	lr
 4393              	.L339:
 4394 000e 00BF     		.align	2
 4395              	.L338:
 4396 0010 00000000 		.word	.LANCHOR18
 4397 0014 00000000 		.word	.LANCHOR13
 4398              		.cfi_endproc
 4399              	.LFE35:
 4401              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4402              		.align	1
 4403              		.global	xTaskCheckForTimeOut
 4404              		.syntax unified
 4405              		.thumb
 4406              		.thumb_func
 4408              	xTaskCheckForTimeOut:
 4409              	.LVL338:
 4410              	.LFB36:
3304:FreeRTOS/tasks.c ****     BaseType_t xReturn;
 4411              		.loc 1 3304 1 is_stmt 1 view -0
 4412              		.cfi_startproc
 4413              		@ args = 0, pretend = 0, frame = 0
 4414              		@ frame_needed = 0, uses_anonymous_args = 0
3304:FreeRTOS/tasks.c ****     BaseType_t xReturn;
 4415              		.loc 1 3304 1 is_stmt 0 view .LVU1207
 4416 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 195


 4417              	.LCFI42:
 4418              		.cfi_def_cfa_offset 24
 4419              		.cfi_offset 3, -24
 4420              		.cfi_offset 4, -20
 4421              		.cfi_offset 5, -16
 4422              		.cfi_offset 6, -12
 4423              		.cfi_offset 7, -8
 4424              		.cfi_offset 14, -4
3305:FreeRTOS/tasks.c **** 
 4425              		.loc 1 3305 5 is_stmt 1 view .LVU1208
3307:FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 4426              		.loc 1 3307 5 view .LVU1209
 4427 0002 B8B1     		cbz	r0, .L350
 4428 0004 0C46     		mov	r4, r1
 4429 0006 0546     		mov	r5, r0
3307:FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 4430              		.loc 1 3307 30 discriminator 2 view .LVU1210
3308:FreeRTOS/tasks.c **** 
 4431              		.loc 1 3308 5 discriminator 2 view .LVU1211
 4432 0008 E9B1     		cbz	r1, .L351
3308:FreeRTOS/tasks.c **** 
 4433              		.loc 1 3308 34 discriminator 2 view .LVU1212
3310:FreeRTOS/tasks.c ****     {
 4434              		.loc 1 3310 5 discriminator 2 view .LVU1213
 4435 000a FFF7FEFF 		bl	vPortEnterCritical
 4436              	.LVL339:
 4437              	.LBB194:
3313:FreeRTOS/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4438              		.loc 1 3313 9 discriminator 2 view .LVU1214
3313:FreeRTOS/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4439              		.loc 1 3313 26 is_stmt 0 discriminator 2 view .LVU1215
 4440 000e 1C4B     		ldr	r3, .L353
 4441 0010 1968     		ldr	r1, [r3]
 4442              	.LVL340:
3314:FreeRTOS/tasks.c **** 
 4443              		.loc 1 3314 9 is_stmt 1 discriminator 2 view .LVU1216
3314:FreeRTOS/tasks.c **** 
 4444              		.loc 1 3314 68 is_stmt 0 discriminator 2 view .LVU1217
 4445 0012 6B68     		ldr	r3, [r5, #4]
3314:FreeRTOS/tasks.c **** 
 4446              		.loc 1 3314 26 discriminator 2 view .LVU1218
 4447 0014 C81A     		subs	r0, r1, r3
 4448              	.LVL341:
3328:FreeRTOS/tasks.c ****             {
 4449              		.loc 1 3328 13 is_stmt 1 discriminator 2 view .LVU1219
3328:FreeRTOS/tasks.c ****             {
 4450              		.loc 1 3328 17 is_stmt 0 discriminator 2 view .LVU1220
 4451 0016 2268     		ldr	r2, [r4]
3328:FreeRTOS/tasks.c ****             {
 4452              		.loc 1 3328 15 discriminator 2 view .LVU1221
 4453 0018 B2F1FF3F 		cmp	r2, #-1
 4454 001c 2AD0     		beq	.L348
3338:FreeRTOS/tasks.c ****         {
 4455              		.loc 1 3338 9 is_stmt 1 view .LVU1222
3338:FreeRTOS/tasks.c ****         {
 4456              		.loc 1 3338 31 is_stmt 0 view .LVU1223
 4457 001e 194E     		ldr	r6, .L353+4
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 196


 4458 0020 3668     		ldr	r6, [r6]
3338:FreeRTOS/tasks.c ****         {
 4459              		.loc 1 3338 11 view .LVU1224
 4460 0022 2F68     		ldr	r7, [r5]
 4461 0024 B742     		cmp	r7, r6
 4462 0026 17D0     		beq	.L346
3338:FreeRTOS/tasks.c ****         {
 4463              		.loc 1 3338 62 discriminator 1 view .LVU1225
 4464 0028 8B42     		cmp	r3, r1
 4465 002a 15D8     		bhi	.L346
3345:FreeRTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 4466              		.loc 1 3345 13 is_stmt 1 view .LVU1226
 4467              	.LVL342:
3346:FreeRTOS/tasks.c ****         }
 4468              		.loc 1 3346 13 view .LVU1227
3346:FreeRTOS/tasks.c ****         }
 4469              		.loc 1 3346 28 is_stmt 0 view .LVU1228
 4470 002c 0023     		movs	r3, #0
 4471 002e 2360     		str	r3, [r4]
3345:FreeRTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 4472              		.loc 1 3345 21 view .LVU1229
 4473 0030 0124     		movs	r4, #1
 4474              	.LVL343:
3346:FreeRTOS/tasks.c ****         }
 4475              		.loc 1 3346 28 view .LVU1230
 4476 0032 20E0     		b	.L345
 4477              	.LVL344:
 4478              	.L350:
3346:FreeRTOS/tasks.c ****         }
 4479              		.loc 1 3346 28 view .LVU1231
 4480              	.LBE194:
3307:FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 4481              		.loc 1 3307 5 is_stmt 1 view .LVU1232
 4482              	.LBB195:
 4483              	.LBI195:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 4484              		.loc 2 193 34 view .LVU1233
 4485              	.LBB196:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4486              		.loc 2 195 9 view .LVU1234
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4487              		.loc 2 197 9 view .LVU1235
 4488              		.syntax unified
 4489              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4490 0034 4FF05003 			mov r3, #80												
 4491 0038 83F31188 		msr basepri, r3											
 4492 003c BFF36F8F 		isb														
 4493 0040 BFF34F8F 		dsb														
 4494              	
 4495              	@ 0 "" 2
 4496              	.LVL345:
 4497              		.thumb
 4498              		.syntax unified
 4499              	.L342:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4500              		.loc 2 197 9 is_stmt 0 view .LVU1236
 4501              	.LBE196:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 197


 4502              	.LBE195:
3307:FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 4503              		.loc 1 3307 5 is_stmt 1 discriminator 1 view .LVU1237
3307:FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 4504              		.loc 1 3307 5 discriminator 1 view .LVU1238
3307:FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 4505              		.loc 1 3307 5 discriminator 1 view .LVU1239
 4506 0044 FEE7     		b	.L342
 4507              	.L351:
3308:FreeRTOS/tasks.c **** 
 4508              		.loc 1 3308 5 view .LVU1240
 4509              	.LBB197:
 4510              	.LBI197:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 4511              		.loc 2 193 34 view .LVU1241
 4512              	.LBB198:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4513              		.loc 2 195 9 view .LVU1242
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4514              		.loc 2 197 9 view .LVU1243
 4515              		.syntax unified
 4516              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4517 0046 4FF05003 			mov r3, #80												
 4518 004a 83F31188 		msr basepri, r3											
 4519 004e BFF36F8F 		isb														
 4520 0052 BFF34F8F 		dsb														
 4521              	
 4522              	@ 0 "" 2
 4523              	.LVL346:
 4524              		.thumb
 4525              		.syntax unified
 4526              	.L344:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4527              		.loc 2 197 9 is_stmt 0 view .LVU1244
 4528              	.LBE198:
 4529              	.LBE197:
3308:FreeRTOS/tasks.c **** 
 4530              		.loc 1 3308 5 is_stmt 1 discriminator 2 view .LVU1245
3308:FreeRTOS/tasks.c **** 
 4531              		.loc 1 3308 5 discriminator 2 view .LVU1246
3308:FreeRTOS/tasks.c **** 
 4532              		.loc 1 3308 5 discriminator 2 view .LVU1247
 4533 0056 FEE7     		b	.L344
 4534              	.LVL347:
 4535              	.L346:
 4536              	.LBB199:
3348:FreeRTOS/tasks.c ****         {
 4537              		.loc 1 3348 14 view .LVU1248
3348:FreeRTOS/tasks.c ****         {
 4538              		.loc 1 3348 16 is_stmt 0 view .LVU1249
 4539 0058 8242     		cmp	r2, r0
 4540 005a 03D8     		bhi	.L352
3357:FreeRTOS/tasks.c ****             xReturn = pdTRUE;
 4541              		.loc 1 3357 13 is_stmt 1 view .LVU1250
3357:FreeRTOS/tasks.c ****             xReturn = pdTRUE;
 4542              		.loc 1 3357 28 is_stmt 0 view .LVU1251
 4543 005c 0023     		movs	r3, #0
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 198


 4544 005e 2360     		str	r3, [r4]
3358:FreeRTOS/tasks.c ****         }
 4545              		.loc 1 3358 13 is_stmt 1 view .LVU1252
 4546              	.LVL348:
3358:FreeRTOS/tasks.c ****         }
 4547              		.loc 1 3358 21 is_stmt 0 view .LVU1253
 4548 0060 0124     		movs	r4, #1
 4549              	.LVL349:
3358:FreeRTOS/tasks.c ****         }
 4550              		.loc 1 3358 21 view .LVU1254
 4551 0062 08E0     		b	.L345
 4552              	.LVL350:
 4553              	.L352:
3351:FreeRTOS/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 4554              		.loc 1 3351 13 is_stmt 1 view .LVU1255
3351:FreeRTOS/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 4555              		.loc 1 3351 28 is_stmt 0 view .LVU1256
 4556 0064 5B1A     		subs	r3, r3, r1
 4557 0066 1344     		add	r3, r3, r2
 4558 0068 2360     		str	r3, [r4]
3352:FreeRTOS/tasks.c ****             xReturn = pdFALSE;
 4559              		.loc 1 3352 13 is_stmt 1 view .LVU1257
 4560 006a 2846     		mov	r0, r5
 4561              	.LVL351:
3352:FreeRTOS/tasks.c ****             xReturn = pdFALSE;
 4562              		.loc 1 3352 13 is_stmt 0 view .LVU1258
 4563 006c FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 4564              	.LVL352:
3353:FreeRTOS/tasks.c ****         }
 4565              		.loc 1 3353 13 is_stmt 1 view .LVU1259
3353:FreeRTOS/tasks.c ****         }
 4566              		.loc 1 3353 21 is_stmt 0 view .LVU1260
 4567 0070 0024     		movs	r4, #0
 4568              	.LVL353:
3353:FreeRTOS/tasks.c ****         }
 4569              		.loc 1 3353 21 view .LVU1261
 4570 0072 00E0     		b	.L345
 4571              	.LVL354:
 4572              	.L348:
3333:FreeRTOS/tasks.c ****             }
 4573              		.loc 1 3333 25 view .LVU1262
 4574 0074 0024     		movs	r4, #0
 4575              	.LVL355:
 4576              	.L345:
3333:FreeRTOS/tasks.c ****             }
 4577              		.loc 1 3333 25 view .LVU1263
 4578              	.LBE199:
3361:FreeRTOS/tasks.c **** 
 4579              		.loc 1 3361 5 is_stmt 1 view .LVU1264
 4580 0076 FFF7FEFF 		bl	vPortExitCritical
 4581              	.LVL356:
3363:FreeRTOS/tasks.c **** }
 4582              		.loc 1 3363 5 view .LVU1265
3364:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4583              		.loc 1 3364 1 is_stmt 0 view .LVU1266
 4584 007a 2046     		mov	r0, r4
 4585 007c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 199


 4586              	.LVL357:
 4587              	.L354:
3364:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4588              		.loc 1 3364 1 view .LVU1267
 4589 007e 00BF     		.align	2
 4590              	.L353:
 4591 0080 00000000 		.word	.LANCHOR13
 4592 0084 00000000 		.word	.LANCHOR18
 4593              		.cfi_endproc
 4594              	.LFE36:
 4596              		.section	.text.vTaskMissedYield,"ax",%progbits
 4597              		.align	1
 4598              		.global	vTaskMissedYield
 4599              		.syntax unified
 4600              		.thumb
 4601              		.thumb_func
 4603              	vTaskMissedYield:
 4604              	.LFB37:
3368:FreeRTOS/tasks.c ****     xYieldPending = pdTRUE;
 4605              		.loc 1 3368 1 is_stmt 1 view -0
 4606              		.cfi_startproc
 4607              		@ args = 0, pretend = 0, frame = 0
 4608              		@ frame_needed = 0, uses_anonymous_args = 0
 4609              		@ link register save eliminated.
3369:FreeRTOS/tasks.c **** }
 4610              		.loc 1 3369 5 view .LVU1269
3369:FreeRTOS/tasks.c **** }
 4611              		.loc 1 3369 19 is_stmt 0 view .LVU1270
 4612 0000 014B     		ldr	r3, .L356
 4613 0002 0122     		movs	r2, #1
 4614 0004 1A60     		str	r2, [r3]
3370:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4615              		.loc 1 3370 1 view .LVU1271
 4616 0006 7047     		bx	lr
 4617              	.L357:
 4618              		.align	2
 4619              	.L356:
 4620 0008 00000000 		.word	.LANCHOR15
 4621              		.cfi_endproc
 4622              	.LFE37:
 4624              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4625              		.align	1
 4626              		.global	uxTaskGetTaskNumber
 4627              		.syntax unified
 4628              		.thumb
 4629              		.thumb_func
 4631              	uxTaskGetTaskNumber:
 4632              	.LVL358:
 4633              	.LFB38:
3376:FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
 4634              		.loc 1 3376 5 is_stmt 1 view -0
 4635              		.cfi_startproc
 4636              		@ args = 0, pretend = 0, frame = 0
 4637              		@ frame_needed = 0, uses_anonymous_args = 0
 4638              		@ link register save eliminated.
3377:FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
 4639              		.loc 1 3377 9 view .LVU1273
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 200


3378:FreeRTOS/tasks.c **** 
 4640              		.loc 1 3378 9 view .LVU1274
3380:FreeRTOS/tasks.c ****         {
 4641              		.loc 1 3380 9 view .LVU1275
3380:FreeRTOS/tasks.c ****         {
 4642              		.loc 1 3380 11 is_stmt 0 view .LVU1276
 4643 0000 08B1     		cbz	r0, .L360
3382:FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxTaskNumber;
 4644              		.loc 1 3382 13 is_stmt 1 view .LVU1277
 4645              	.LVL359:
3383:FreeRTOS/tasks.c ****         }
 4646              		.loc 1 3383 13 view .LVU1278
3383:FreeRTOS/tasks.c ****         }
 4647              		.loc 1 3383 22 is_stmt 0 view .LVU1279
 4648 0002 C06C     		ldr	r0, [r0, #76]
 4649              	.LVL360:
3383:FreeRTOS/tasks.c ****         }
 4650              		.loc 1 3383 22 view .LVU1280
 4651 0004 7047     		bx	lr
 4652              	.LVL361:
 4653              	.L360:
3387:FreeRTOS/tasks.c ****         }
 4654              		.loc 1 3387 22 view .LVU1281
 4655 0006 0020     		movs	r0, #0
 4656              	.LVL362:
3390:FreeRTOS/tasks.c ****     }
 4657              		.loc 1 3390 9 is_stmt 1 view .LVU1282
3391:FreeRTOS/tasks.c **** 
 4658              		.loc 1 3391 5 is_stmt 0 view .LVU1283
 4659 0008 7047     		bx	lr
 4660              		.cfi_endproc
 4661              	.LFE38:
 4663              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 4664              		.align	1
 4665              		.global	vTaskSetTaskNumber
 4666              		.syntax unified
 4667              		.thumb
 4668              		.thumb_func
 4670              	vTaskSetTaskNumber:
 4671              	.LVL363:
 4672              	.LFB39:
3400:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 4673              		.loc 1 3400 5 is_stmt 1 view -0
 4674              		.cfi_startproc
 4675              		@ args = 0, pretend = 0, frame = 0
 4676              		@ frame_needed = 0, uses_anonymous_args = 0
 4677              		@ link register save eliminated.
3401:FreeRTOS/tasks.c **** 
 4678              		.loc 1 3401 9 view .LVU1285
3403:FreeRTOS/tasks.c ****         {
 4679              		.loc 1 3403 9 view .LVU1286
3403:FreeRTOS/tasks.c ****         {
 4680              		.loc 1 3403 11 is_stmt 0 view .LVU1287
 4681 0000 00B1     		cbz	r0, .L361
3405:FreeRTOS/tasks.c ****             pxTCB->uxTaskNumber = uxHandle;
 4682              		.loc 1 3405 13 is_stmt 1 view .LVU1288
 4683              	.LVL364:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 201


3406:FreeRTOS/tasks.c ****         }
 4684              		.loc 1 3406 13 view .LVU1289
3406:FreeRTOS/tasks.c ****         }
 4685              		.loc 1 3406 33 is_stmt 0 view .LVU1290
 4686 0002 C164     		str	r1, [r0, #76]
 4687              	.LVL365:
 4688              	.L361:
3408:FreeRTOS/tasks.c **** 
 4689              		.loc 1 3408 5 view .LVU1291
 4690 0004 7047     		bx	lr
 4691              		.cfi_endproc
 4692              	.LFE39:
 4694              		.section	.text.vTaskGetInfo,"ax",%progbits
 4695              		.align	1
 4696              		.global	vTaskGetInfo
 4697              		.syntax unified
 4698              		.thumb
 4699              		.thumb_func
 4701              	vTaskGetInfo:
 4702              	.LVL366:
 4703              	.LFB43:
3714:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 4704              		.loc 1 3714 5 is_stmt 1 view -0
 4705              		.cfi_startproc
 4706              		@ args = 0, pretend = 0, frame = 0
 4707              		@ frame_needed = 0, uses_anonymous_args = 0
3714:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 4708              		.loc 1 3714 5 is_stmt 0 view .LVU1293
 4709 0000 70B5     		push	{r4, r5, r6, lr}
 4710              	.LCFI43:
 4711              		.cfi_def_cfa_offset 16
 4712              		.cfi_offset 4, -16
 4713              		.cfi_offset 5, -12
 4714              		.cfi_offset 6, -8
 4715              		.cfi_offset 14, -4
 4716 0002 0C46     		mov	r4, r1
 4717 0004 1646     		mov	r6, r2
3715:FreeRTOS/tasks.c **** 
 4718              		.loc 1 3715 9 is_stmt 1 view .LVU1294
3718:FreeRTOS/tasks.c **** 
 4719              		.loc 1 3718 9 view .LVU1295
3718:FreeRTOS/tasks.c **** 
 4720              		.loc 1 3718 17 is_stmt 0 view .LVU1296
 4721 0006 0546     		mov	r5, r0
 4722 0008 C8B1     		cbz	r0, .L372
 4723              	.LVL367:
 4724              	.L364:
3720:FreeRTOS/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 4725              		.loc 1 3720 9 is_stmt 1 discriminator 4 view .LVU1297
3720:FreeRTOS/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 4726              		.loc 1 3720 31 is_stmt 0 discriminator 4 view .LVU1298
 4727 000a 2560     		str	r5, [r4]
3721:FreeRTOS/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4728              		.loc 1 3721 9 is_stmt 1 discriminator 4 view .LVU1299
3721:FreeRTOS/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4729              		.loc 1 3721 53 is_stmt 0 discriminator 4 view .LVU1300
 4730 000c 05F13402 		add	r2, r5, #52
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 202


3721:FreeRTOS/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4731              		.loc 1 3721 34 discriminator 4 view .LVU1301
 4732 0010 6260     		str	r2, [r4, #4]
3722:FreeRTOS/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4733              		.loc 1 3722 9 is_stmt 1 discriminator 4 view .LVU1302
3722:FreeRTOS/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4734              		.loc 1 3722 48 is_stmt 0 discriminator 4 view .LVU1303
 4735 0012 EA6A     		ldr	r2, [r5, #44]
3722:FreeRTOS/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4736              		.loc 1 3722 41 discriminator 4 view .LVU1304
 4737 0014 2261     		str	r2, [r4, #16]
3723:FreeRTOS/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4738              		.loc 1 3723 9 is_stmt 1 discriminator 4 view .LVU1305
3723:FreeRTOS/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4739              		.loc 1 3723 42 is_stmt 0 discriminator 4 view .LVU1306
 4740 0016 2A6B     		ldr	r2, [r5, #48]
3723:FreeRTOS/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4741              		.loc 1 3723 35 discriminator 4 view .LVU1307
 4742 0018 E261     		str	r2, [r4, #28]
3724:FreeRTOS/tasks.c **** 
 4743              		.loc 1 3724 9 is_stmt 1 discriminator 4 view .LVU1308
3724:FreeRTOS/tasks.c **** 
 4744              		.loc 1 3724 42 is_stmt 0 discriminator 4 view .LVU1309
 4745 001a AA6C     		ldr	r2, [r5, #72]
3724:FreeRTOS/tasks.c **** 
 4746              		.loc 1 3724 35 discriminator 4 view .LVU1310
 4747 001c A260     		str	r2, [r4, #8]
3732:FreeRTOS/tasks.c ****             }
 4748              		.loc 1 3732 17 is_stmt 1 discriminator 4 view .LVU1311
3732:FreeRTOS/tasks.c ****             }
 4749              		.loc 1 3732 46 is_stmt 0 discriminator 4 view .LVU1312
 4750 001e 0022     		movs	r2, #0
 4751 0020 6261     		str	r2, [r4, #20]
3742:FreeRTOS/tasks.c ****             }
 4752              		.loc 1 3742 17 is_stmt 1 discriminator 4 view .LVU1313
3742:FreeRTOS/tasks.c ****             }
 4753              		.loc 1 3742 48 is_stmt 0 discriminator 4 view .LVU1314
 4754 0022 A261     		str	r2, [r4, #24]
3749:FreeRTOS/tasks.c ****         {
 4755              		.loc 1 3749 9 is_stmt 1 discriminator 4 view .LVU1315
3749:FreeRTOS/tasks.c ****         {
 4756              		.loc 1 3749 11 is_stmt 0 discriminator 4 view .LVU1316
 4757 0024 052B     		cmp	r3, #5
 4758 0026 19D0     		beq	.L365
3751:FreeRTOS/tasks.c ****             {
 4759              		.loc 1 3751 13 is_stmt 1 view .LVU1317
3751:FreeRTOS/tasks.c ****             {
 4760              		.loc 1 3751 23 is_stmt 0 view .LVU1318
 4761 0028 114A     		ldr	r2, .L376
 4762 002a 1268     		ldr	r2, [r2]
3751:FreeRTOS/tasks.c ****             {
 4763              		.loc 1 3751 15 view .LVU1319
 4764 002c AA42     		cmp	r2, r5
 4765 002e 09D0     		beq	.L373
3757:FreeRTOS/tasks.c **** 
 4766              		.loc 1 3757 17 is_stmt 1 view .LVU1320
3757:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 203


 4767              		.loc 1 3757 45 is_stmt 0 view .LVU1321
 4768 0030 2373     		strb	r3, [r4, #12]
3764:FreeRTOS/tasks.c ****                         {
 4769              		.loc 1 3764 25 is_stmt 1 view .LVU1322
3764:FreeRTOS/tasks.c ****                         {
 4770              		.loc 1 3764 27 is_stmt 0 view .LVU1323
 4771 0032 032B     		cmp	r3, #3
 4772 0034 09D0     		beq	.L374
 4773              	.LVL368:
 4774              	.L367:
3786:FreeRTOS/tasks.c ****         {
 4775              		.loc 1 3786 9 is_stmt 1 view .LVU1324
3786:FreeRTOS/tasks.c ****         {
 4776              		.loc 1 3786 11 is_stmt 0 view .LVU1325
 4777 0036 B6B9     		cbnz	r6, .L375
3800:FreeRTOS/tasks.c ****         }
 4778              		.loc 1 3800 13 is_stmt 1 view .LVU1326
3800:FreeRTOS/tasks.c ****         }
 4779              		.loc 1 3800 48 is_stmt 0 view .LVU1327
 4780 0038 0023     		movs	r3, #0
 4781 003a 2384     		strh	r3, [r4, #32]	@ movhi
 4782              	.L363:
3802:FreeRTOS/tasks.c **** 
 4783              		.loc 1 3802 5 view .LVU1328
 4784 003c 70BD     		pop	{r4, r5, r6, pc}
 4785              	.LVL369:
 4786              	.L372:
3718:FreeRTOS/tasks.c **** 
 4787              		.loc 1 3718 17 discriminator 1 view .LVU1329
 4788 003e 0C4A     		ldr	r2, .L376
 4789              	.LVL370:
3718:FreeRTOS/tasks.c **** 
 4790              		.loc 1 3718 17 discriminator 1 view .LVU1330
 4791 0040 1568     		ldr	r5, [r2]
 4792              	.LVL371:
3718:FreeRTOS/tasks.c **** 
 4793              		.loc 1 3718 17 discriminator 1 view .LVU1331
 4794 0042 E2E7     		b	.L364
 4795              	.LVL372:
 4796              	.L373:
3753:FreeRTOS/tasks.c ****             }
 4797              		.loc 1 3753 17 is_stmt 1 view .LVU1332
3753:FreeRTOS/tasks.c ****             }
 4798              		.loc 1 3753 45 is_stmt 0 view .LVU1333
 4799 0044 0023     		movs	r3, #0
 4800              	.LVL373:
3753:FreeRTOS/tasks.c ****             }
 4801              		.loc 1 3753 45 view .LVU1334
 4802 0046 2373     		strb	r3, [r4, #12]
 4803 0048 F5E7     		b	.L367
 4804              	.LVL374:
 4805              	.L374:
3766:FreeRTOS/tasks.c ****                             {
 4806              		.loc 1 3766 29 is_stmt 1 view .LVU1335
 4807 004a FFF7FEFF 		bl	vTaskSuspendAll
 4808              	.LVL375:
3768:FreeRTOS/tasks.c ****                                 {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 204


 4809              		.loc 1 3768 33 view .LVU1336
3768:FreeRTOS/tasks.c ****                                 {
 4810              		.loc 1 3768 37 is_stmt 0 view .LVU1337
 4811 004e AB6A     		ldr	r3, [r5, #40]
3768:FreeRTOS/tasks.c ****                                 {
 4812              		.loc 1 3768 35 view .LVU1338
 4813 0050 0BB1     		cbz	r3, .L368
3770:FreeRTOS/tasks.c ****                                 }
 4814              		.loc 1 3770 37 is_stmt 1 view .LVU1339
3770:FreeRTOS/tasks.c ****                                 }
 4815              		.loc 1 3770 65 is_stmt 0 view .LVU1340
 4816 0052 0223     		movs	r3, #2
 4817 0054 2373     		strb	r3, [r4, #12]
 4818              	.L368:
3773:FreeRTOS/tasks.c ****                         }
 4819              		.loc 1 3773 29 is_stmt 1 view .LVU1341
3773:FreeRTOS/tasks.c ****                         }
 4820              		.loc 1 3773 38 is_stmt 0 view .LVU1342
 4821 0056 FFF7FEFF 		bl	xTaskResumeAll
 4822              	.LVL376:
 4823 005a ECE7     		b	.L367
 4824              	.LVL377:
 4825              	.L365:
3781:FreeRTOS/tasks.c ****         }
 4826              		.loc 1 3781 13 is_stmt 1 view .LVU1343
3781:FreeRTOS/tasks.c ****         }
 4827              		.loc 1 3781 43 is_stmt 0 view .LVU1344
 4828 005c 2846     		mov	r0, r5
 4829 005e FFF7FEFF 		bl	eTaskGetState
 4830              	.LVL378:
3781:FreeRTOS/tasks.c ****         }
 4831              		.loc 1 3781 41 view .LVU1345
 4832 0062 2073     		strb	r0, [r4, #12]
 4833 0064 E7E7     		b	.L367
 4834              	.L375:
3794:FreeRTOS/tasks.c ****                 }
 4835              		.loc 1 3794 21 is_stmt 1 view .LVU1346
3794:FreeRTOS/tasks.c ****                 }
 4836              		.loc 1 3794 58 is_stmt 0 view .LVU1347
 4837 0066 286B     		ldr	r0, [r5, #48]
 4838 0068 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4839              	.LVL379:
3794:FreeRTOS/tasks.c ****                 }
 4840              		.loc 1 3794 56 view .LVU1348
 4841 006c 2084     		strh	r0, [r4, #32]	@ movhi
 4842 006e E5E7     		b	.L363
 4843              	.L377:
 4844              		.align	2
 4845              	.L376:
 4846 0070 00000000 		.word	.LANCHOR9
 4847              		.cfi_endproc
 4848              	.LFE43:
 4850              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 4851              		.align	1
 4852              		.syntax unified
 4853              		.thumb
 4854              		.thumb_func
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 205


 4856              	prvListTasksWithinSingleList:
 4857              	.LVL380:
 4858              	.LFB44:
3812:FreeRTOS/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB, * pxFirstTCB;
 4859              		.loc 1 3812 5 is_stmt 1 view -0
 4860              		.cfi_startproc
 4861              		@ args = 0, pretend = 0, frame = 0
 4862              		@ frame_needed = 0, uses_anonymous_args = 0
3812:FreeRTOS/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB, * pxFirstTCB;
 4863              		.loc 1 3812 5 is_stmt 0 view .LVU1350
 4864 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 4865              	.LCFI44:
 4866              		.cfi_def_cfa_offset 32
 4867              		.cfi_offset 4, -32
 4868              		.cfi_offset 5, -28
 4869              		.cfi_offset 6, -24
 4870              		.cfi_offset 7, -20
 4871              		.cfi_offset 8, -16
 4872              		.cfi_offset 9, -12
 4873              		.cfi_offset 10, -8
 4874              		.cfi_offset 14, -4
3813:FreeRTOS/tasks.c ****         UBaseType_t uxTask = 0;
 4875              		.loc 1 3813 29 is_stmt 1 view .LVU1351
3814:FreeRTOS/tasks.c **** 
 4876              		.loc 1 3814 9 view .LVU1352
 4877              	.LVL381:
3816:FreeRTOS/tasks.c ****         {
 4878              		.loc 1 3816 9 view .LVU1353
3816:FreeRTOS/tasks.c ****         {
 4879              		.loc 1 3816 13 is_stmt 0 view .LVU1354
 4880 0004 0C68     		ldr	r4, [r1]
3816:FreeRTOS/tasks.c ****         {
 4881              		.loc 1 3816 11 view .LVU1355
 4882 0006 3CB3     		cbz	r4, .L378
 4883 0008 0746     		mov	r7, r0
 4884 000a 0D46     		mov	r5, r1
 4885 000c 9046     		mov	r8, r2
 4886              	.LBB200:
3818:FreeRTOS/tasks.c **** 
 4887              		.loc 1 3818 13 is_stmt 1 view .LVU1356
 4888              	.LVL382:
3818:FreeRTOS/tasks.c **** 
 4889              		.loc 1 3818 13 view .LVU1357
 4890 000e 4B68     		ldr	r3, [r1, #4]
 4891 0010 5B68     		ldr	r3, [r3, #4]
 4892 0012 4B60     		str	r3, [r1, #4]
3818:FreeRTOS/tasks.c **** 
 4893              		.loc 1 3818 13 view .LVU1358
 4894 0014 01F10809 		add	r9, r1, #8
 4895 0018 4B45     		cmp	r3, r9
 4896 001a 04D0     		beq	.L384
 4897              	.L380:
3818:FreeRTOS/tasks.c **** 
 4898              		.loc 1 3818 13 discriminator 3 view .LVU1359
 4899 001c 6B68     		ldr	r3, [r5, #4]
 4900 001e D3F80CA0 		ldr	r10, [r3, #12]
 4901              	.LVL383:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 206


3818:FreeRTOS/tasks.c **** 
 4902              		.loc 1 3818 13 is_stmt 0 discriminator 3 view .LVU1360
 4903              	.LBE200:
3814:FreeRTOS/tasks.c **** 
 4904              		.loc 1 3814 21 discriminator 3 view .LVU1361
 4905 0022 0024     		movs	r4, #0
 4906 0024 10E0     		b	.L382
 4907              	.LVL384:
 4908              	.L384:
 4909              	.LBB201:
3818:FreeRTOS/tasks.c **** 
 4910              		.loc 1 3818 13 is_stmt 1 discriminator 1 view .LVU1362
 4911 0026 5B68     		ldr	r3, [r3, #4]
 4912 0028 4B60     		str	r3, [r1, #4]
 4913 002a F7E7     		b	.L380
 4914              	.LVL385:
 4915              	.L381:
3818:FreeRTOS/tasks.c **** 
 4916              		.loc 1 3818 13 is_stmt 0 discriminator 1 view .LVU1363
 4917              	.LBE201:
 4918              	.LBB202:
3826:FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 4919              		.loc 1 3826 17 is_stmt 1 discriminator 3 view .LVU1364
 4920 002c 6B68     		ldr	r3, [r5, #4]
 4921 002e DE68     		ldr	r6, [r3, #12]
 4922              	.LVL386:
3826:FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 4923              		.loc 1 3826 17 is_stmt 0 discriminator 3 view .LVU1365
 4924              	.LBE202:
3826:FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 4925              		.loc 1 3826 65 is_stmt 1 discriminator 3 view .LVU1366
3827:FreeRTOS/tasks.c ****                 uxTask++;
 4926              		.loc 1 3827 17 discriminator 3 view .LVU1367
3827:FreeRTOS/tasks.c ****                 uxTask++;
 4927              		.loc 1 3827 79 is_stmt 0 discriminator 3 view .LVU1368
 4928 0030 04EBC401 		add	r1, r4, r4, lsl #3
3827:FreeRTOS/tasks.c ****                 uxTask++;
 4929              		.loc 1 3827 17 discriminator 3 view .LVU1369
 4930 0034 4346     		mov	r3, r8
 4931 0036 0122     		movs	r2, #1
 4932 0038 07EB8101 		add	r1, r7, r1, lsl #2
 4933 003c 3046     		mov	r0, r6
 4934 003e FFF7FEFF 		bl	vTaskGetInfo
 4935              	.LVL387:
3828:FreeRTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
 4936              		.loc 1 3828 17 is_stmt 1 discriminator 3 view .LVU1370
3828:FreeRTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
 4937              		.loc 1 3828 23 is_stmt 0 discriminator 3 view .LVU1371
 4938 0042 0134     		adds	r4, r4, #1
 4939              	.LVL388:
3829:FreeRTOS/tasks.c ****         }
 4940              		.loc 1 3829 20 is_stmt 1 discriminator 3 view .LVU1372
3829:FreeRTOS/tasks.c ****         }
 4941              		.loc 1 3829 13 is_stmt 0 discriminator 3 view .LVU1373
 4942 0044 B245     		cmp	r10, r6
 4943 0046 07D0     		beq	.L378
 4944              	.LVL389:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 207


 4945              	.L382:
3818:FreeRTOS/tasks.c **** 
 4946              		.loc 1 3818 62 is_stmt 1 discriminator 4 view .LVU1374
3824:FreeRTOS/tasks.c ****             {
 4947              		.loc 1 3824 13 discriminator 4 view .LVU1375
 4948              	.LBB203:
3826:FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 4949              		.loc 1 3826 17 discriminator 4 view .LVU1376
3826:FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 4950              		.loc 1 3826 17 discriminator 4 view .LVU1377
 4951 0048 6B68     		ldr	r3, [r5, #4]
 4952 004a 5968     		ldr	r1, [r3, #4]
 4953 004c 6960     		str	r1, [r5, #4]
3826:FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 4954              		.loc 1 3826 17 discriminator 4 view .LVU1378
 4955 004e 8945     		cmp	r9, r1
 4956 0050 ECD1     		bne	.L381
3826:FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 4957              		.loc 1 3826 17 discriminator 1 view .LVU1379
 4958 0052 4B68     		ldr	r3, [r1, #4]
 4959 0054 6B60     		str	r3, [r5, #4]
 4960 0056 E9E7     		b	.L381
 4961              	.LVL390:
 4962              	.L378:
3826:FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 4963              		.loc 1 3826 17 is_stmt 0 discriminator 1 view .LVU1380
 4964              	.LBE203:
3837:FreeRTOS/tasks.c **** 
 4965              		.loc 1 3837 5 view .LVU1381
 4966 0058 2046     		mov	r0, r4
 4967 005a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4968              		.cfi_endproc
 4969              	.LFE44:
 4971              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 4972              		.align	1
 4973              		.global	uxTaskGetSystemState
 4974              		.syntax unified
 4975              		.thumb
 4976              		.thumb_func
 4978              	uxTaskGetSystemState:
 4979              	.LVL391:
 4980              	.LFB25:
2525:FreeRTOS/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4981              		.loc 1 2525 5 is_stmt 1 view -0
 4982              		.cfi_startproc
 4983              		@ args = 0, pretend = 0, frame = 0
 4984              		@ frame_needed = 0, uses_anonymous_args = 0
2525:FreeRTOS/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4985              		.loc 1 2525 5 is_stmt 0 view .LVU1383
 4986 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4987              	.LCFI45:
 4988              		.cfi_def_cfa_offset 24
 4989              		.cfi_offset 3, -24
 4990              		.cfi_offset 4, -20
 4991              		.cfi_offset 5, -16
 4992              		.cfi_offset 6, -12
 4993              		.cfi_offset 7, -8
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 208


 4994              		.cfi_offset 14, -4
 4995 0002 0646     		mov	r6, r0
 4996 0004 0C46     		mov	r4, r1
 4997 0006 1746     		mov	r7, r2
2526:FreeRTOS/tasks.c **** 
 4998              		.loc 1 2526 9 is_stmt 1 view .LVU1384
 4999              	.LVL392:
2528:FreeRTOS/tasks.c ****         {
 5000              		.loc 1 2528 9 view .LVU1385
 5001 0008 FFF7FEFF 		bl	vTaskSuspendAll
 5002              	.LVL393:
2531:FreeRTOS/tasks.c ****             {
 5003              		.loc 1 2531 13 view .LVU1386
2531:FreeRTOS/tasks.c ****             {
 5004              		.loc 1 2531 29 is_stmt 0 view .LVU1387
 5005 000c 1D4B     		ldr	r3, .L390
 5006 000e 1B68     		ldr	r3, [r3]
2531:FreeRTOS/tasks.c ****             {
 5007              		.loc 1 2531 15 view .LVU1388
 5008 0010 A342     		cmp	r3, r4
 5009 0012 32D8     		bhi	.L388
2526:FreeRTOS/tasks.c **** 
 5010              		.loc 1 2526 33 view .LVU1389
 5011 0014 0525     		movs	r5, #5
2526:FreeRTOS/tasks.c **** 
 5012              		.loc 1 2526 21 view .LVU1390
 5013 0016 0024     		movs	r4, #0
 5014              	.LVL394:
 5015              	.L387:
2535:FreeRTOS/tasks.c ****                 {
 5016              		.loc 1 2535 17 is_stmt 1 discriminator 1 view .LVU1391
2537:FreeRTOS/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
 5017              		.loc 1 2537 21 discriminator 1 view .LVU1392
2537:FreeRTOS/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
 5018              		.loc 1 2537 28 is_stmt 0 discriminator 1 view .LVU1393
 5019 0018 013D     		subs	r5, r5, #1
 5020              	.LVL395:
2538:FreeRTOS/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 5021              		.loc 1 2538 21 is_stmt 1 discriminator 1 view .LVU1394
2538:FreeRTOS/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 5022              		.loc 1 2538 81 is_stmt 0 discriminator 1 view .LVU1395
 5023 001a 04EBC400 		add	r0, r4, r4, lsl #3
2538:FreeRTOS/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 5024              		.loc 1 2538 31 discriminator 1 view .LVU1396
 5025 001e 05EB8501 		add	r1, r5, r5, lsl #2
 5026 0022 0122     		movs	r2, #1
 5027 0024 184B     		ldr	r3, .L390+4
 5028 0026 03EB8101 		add	r1, r3, r1, lsl #2
 5029 002a 06EB8000 		add	r0, r6, r0, lsl #2
 5030 002e FFF7FEFF 		bl	prvListTasksWithinSingleList
 5031              	.LVL396:
2538:FreeRTOS/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 5032              		.loc 1 2538 28 discriminator 1 view .LVU1397
 5033 0032 0444     		add	r4, r4, r0
 5034              	.LVL397:
2539:FreeRTOS/tasks.c **** 
 5035              		.loc 1 2539 24 is_stmt 1 discriminator 1 view .LVU1398
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 209


2539:FreeRTOS/tasks.c **** 
 5036              		.loc 1 2539 17 is_stmt 0 discriminator 1 view .LVU1399
 5037 0034 002D     		cmp	r5, #0
 5038 0036 EFD1     		bne	.L387
2543:FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 5039              		.loc 1 2543 17 is_stmt 1 view .LVU1400
2543:FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 5040              		.loc 1 2543 77 is_stmt 0 view .LVU1401
 5041 0038 04EBC400 		add	r0, r4, r4, lsl #3
2543:FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 5042              		.loc 1 2543 27 view .LVU1402
 5043 003c 134B     		ldr	r3, .L390+8
 5044 003e 1968     		ldr	r1, [r3]
 5045 0040 0222     		movs	r2, #2
 5046 0042 06EB8000 		add	r0, r6, r0, lsl #2
 5047 0046 FFF7FEFF 		bl	prvListTasksWithinSingleList
 5048              	.LVL398:
2543:FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 5049              		.loc 1 2543 24 view .LVU1403
 5050 004a 0444     		add	r4, r4, r0
 5051              	.LVL399:
2544:FreeRTOS/tasks.c **** 
 5052              		.loc 1 2544 17 is_stmt 1 view .LVU1404
2544:FreeRTOS/tasks.c **** 
 5053              		.loc 1 2544 77 is_stmt 0 view .LVU1405
 5054 004c 04EBC400 		add	r0, r4, r4, lsl #3
2544:FreeRTOS/tasks.c **** 
 5055              		.loc 1 2544 27 view .LVU1406
 5056 0050 0F4B     		ldr	r3, .L390+12
 5057 0052 1968     		ldr	r1, [r3]
 5058 0054 0222     		movs	r2, #2
 5059 0056 06EB8000 		add	r0, r6, r0, lsl #2
 5060 005a FFF7FEFF 		bl	prvListTasksWithinSingleList
 5061              	.LVL400:
2544:FreeRTOS/tasks.c **** 
 5062              		.loc 1 2544 24 view .LVU1407
 5063 005e 0444     		add	r4, r4, r0
 5064              	.LVL401:
2558:FreeRTOS/tasks.c ****                     }
 5065              		.loc 1 2558 25 is_stmt 1 view .LVU1408
2558:FreeRTOS/tasks.c ****                     }
 5066              		.loc 1 2558 85 is_stmt 0 view .LVU1409
 5067 0060 04EBC400 		add	r0, r4, r4, lsl #3
2558:FreeRTOS/tasks.c ****                     }
 5068              		.loc 1 2558 35 view .LVU1410
 5069 0064 0322     		movs	r2, #3
 5070 0066 0B49     		ldr	r1, .L390+16
 5071 0068 06EB8000 		add	r0, r6, r0, lsl #2
 5072 006c FFF7FEFF 		bl	prvListTasksWithinSingleList
 5073              	.LVL402:
2558:FreeRTOS/tasks.c ****                     }
 5074              		.loc 1 2558 32 view .LVU1411
 5075 0070 0444     		add	r4, r4, r0
 5076              	.LVL403:
2575:FreeRTOS/tasks.c ****                         {
 5077              		.loc 1 2575 25 is_stmt 1 view .LVU1412
2575:FreeRTOS/tasks.c ****                         {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 210


 5078              		.loc 1 2575 27 is_stmt 0 view .LVU1413
 5079 0072 1FB1     		cbz	r7, .L386
2577:FreeRTOS/tasks.c ****                         }
 5080              		.loc 1 2577 29 is_stmt 1 view .LVU1414
2577:FreeRTOS/tasks.c ****                         }
 5081              		.loc 1 2577 46 is_stmt 0 view .LVU1415
 5082 0074 0023     		movs	r3, #0
 5083 0076 3B60     		str	r3, [r7]
 5084 0078 00E0     		b	.L386
 5085              	.LVL404:
 5086              	.L388:
2526:FreeRTOS/tasks.c **** 
 5087              		.loc 1 2526 21 view .LVU1416
 5088 007a 0024     		movs	r4, #0
 5089              	.LVL405:
 5090              	.L386:
2584:FreeRTOS/tasks.c ****             }
 5091              		.loc 1 2584 41 is_stmt 1 view .LVU1417
2587:FreeRTOS/tasks.c **** 
 5092              		.loc 1 2587 9 view .LVU1418
2587:FreeRTOS/tasks.c **** 
 5093              		.loc 1 2587 18 is_stmt 0 view .LVU1419
 5094 007c FFF7FEFF 		bl	xTaskResumeAll
 5095              	.LVL406:
2589:FreeRTOS/tasks.c ****     }
 5096              		.loc 1 2589 9 is_stmt 1 view .LVU1420
2590:FreeRTOS/tasks.c **** 
 5097              		.loc 1 2590 5 is_stmt 0 view .LVU1421
 5098 0080 2046     		mov	r0, r4
 5099 0082 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5100              	.LVL407:
 5101              	.L391:
2590:FreeRTOS/tasks.c **** 
 5102              		.loc 1 2590 5 view .LVU1422
 5103              		.align	2
 5104              	.L390:
 5105 0084 00000000 		.word	.LANCHOR8
 5106 0088 00000000 		.word	.LANCHOR2
 5107 008c 00000000 		.word	.LANCHOR3
 5108 0090 00000000 		.word	.LANCHOR7
 5109 0094 00000000 		.word	.LANCHOR0
 5110              		.cfi_endproc
 5111              	.LFE25:
 5113              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 5114              		.align	1
 5115              		.global	uxTaskGetStackHighWaterMark
 5116              		.syntax unified
 5117              		.thumb
 5118              		.thumb_func
 5120              	uxTaskGetStackHighWaterMark:
 5121              	.LVL408:
 5122              	.LFB46:
3905:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 5123              		.loc 1 3905 5 is_stmt 1 view -0
 5124              		.cfi_startproc
 5125              		@ args = 0, pretend = 0, frame = 0
 5126              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 211


3905:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 5127              		.loc 1 3905 5 is_stmt 0 view .LVU1424
 5128 0000 08B5     		push	{r3, lr}
 5129              	.LCFI46:
 5130              		.cfi_def_cfa_offset 8
 5131              		.cfi_offset 3, -8
 5132              		.cfi_offset 14, -4
3906:FreeRTOS/tasks.c ****         uint8_t * pucEndOfStack;
 5133              		.loc 1 3906 9 is_stmt 1 view .LVU1425
3907:FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
 5134              		.loc 1 3907 9 view .LVU1426
3908:FreeRTOS/tasks.c **** 
 5135              		.loc 1 3908 9 view .LVU1427
3910:FreeRTOS/tasks.c **** 
 5136              		.loc 1 3910 9 view .LVU1428
3910:FreeRTOS/tasks.c **** 
 5137              		.loc 1 3910 17 is_stmt 0 view .LVU1429
 5138 0002 0346     		mov	r3, r0
 5139 0004 18B1     		cbz	r0, .L395
 5140              	.LVL409:
 5141              	.L393:
3914:FreeRTOS/tasks.c ****             }
 5142              		.loc 1 3914 17 is_stmt 1 discriminator 4 view .LVU1430
3922:FreeRTOS/tasks.c **** 
 5143              		.loc 1 3922 9 discriminator 4 view .LVU1431
3922:FreeRTOS/tasks.c **** 
 5144              		.loc 1 3922 36 is_stmt 0 discriminator 4 view .LVU1432
 5145 0006 186B     		ldr	r0, [r3, #48]
 5146 0008 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5147              	.LVL410:
3924:FreeRTOS/tasks.c ****     }
 5148              		.loc 1 3924 9 is_stmt 1 discriminator 4 view .LVU1433
3925:FreeRTOS/tasks.c **** 
 5149              		.loc 1 3925 5 is_stmt 0 discriminator 4 view .LVU1434
 5150 000c 08BD     		pop	{r3, pc}
 5151              	.LVL411:
 5152              	.L395:
3910:FreeRTOS/tasks.c **** 
 5153              		.loc 1 3910 17 discriminator 1 view .LVU1435
 5154 000e 014B     		ldr	r3, .L396
 5155 0010 1B68     		ldr	r3, [r3]
 5156              	.LVL412:
3910:FreeRTOS/tasks.c **** 
 5157              		.loc 1 3910 17 discriminator 1 view .LVU1436
 5158 0012 F8E7     		b	.L393
 5159              	.L397:
 5160              		.align	2
 5161              	.L396:
 5162 0014 00000000 		.word	.LANCHOR9
 5163              		.cfi_endproc
 5164              	.LFE46:
 5166              		.section	.text.pxTaskGetStackStart,"ax",%progbits
 5167              		.align	1
 5168              		.global	pxTaskGetStackStart
 5169              		.syntax unified
 5170              		.thumb
 5171              		.thumb_func
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 212


 5173              	pxTaskGetStackStart:
 5174              	.LVL413:
 5175              	.LFB47:
3932:FreeRTOS/tasks.c **** 	    TCB_t *pxTCB;
 5176              		.loc 1 3932 2 is_stmt 1 view -0
 5177              		.cfi_startproc
 5178              		@ args = 0, pretend = 0, frame = 0
 5179              		@ frame_needed = 0, uses_anonymous_args = 0
 5180              		@ link register save eliminated.
3933:FreeRTOS/tasks.c **** 	    UBaseType_t uxReturn;
 5181              		.loc 1 3933 6 view .LVU1438
3934:FreeRTOS/tasks.c ****         (void)uxReturn;
 5182              		.loc 1 3934 6 view .LVU1439
3935:FreeRTOS/tasks.c **** 
 5183              		.loc 1 3935 9 view .LVU1440
3937:FreeRTOS/tasks.c **** 		return ( uint8_t * ) pxTCB->pxStack;
 5184              		.loc 1 3937 3 view .LVU1441
3937:FreeRTOS/tasks.c **** 		return ( uint8_t * ) pxTCB->pxStack;
 5185              		.loc 1 3937 11 is_stmt 0 view .LVU1442
 5186 0000 0346     		mov	r3, r0
 5187 0002 08B1     		cbz	r0, .L400
 5188              	.LVL414:
 5189              	.L399:
3938:FreeRTOS/tasks.c **** 	}
 5190              		.loc 1 3938 3 is_stmt 1 discriminator 4 view .LVU1443
3939:FreeRTOS/tasks.c **** 
 5191              		.loc 1 3939 2 is_stmt 0 discriminator 4 view .LVU1444
 5192 0004 186B     		ldr	r0, [r3, #48]
 5193 0006 7047     		bx	lr
 5194              	.LVL415:
 5195              	.L400:
3937:FreeRTOS/tasks.c **** 		return ( uint8_t * ) pxTCB->pxStack;
 5196              		.loc 1 3937 11 discriminator 1 view .LVU1445
 5197 0008 014B     		ldr	r3, .L401
 5198 000a 1B68     		ldr	r3, [r3]
 5199              	.LVL416:
3937:FreeRTOS/tasks.c **** 		return ( uint8_t * ) pxTCB->pxStack;
 5200              		.loc 1 3937 11 discriminator 1 view .LVU1446
 5201 000c FAE7     		b	.L399
 5202              	.L402:
 5203 000e 00BF     		.align	2
 5204              	.L401:
 5205 0010 00000000 		.word	.LANCHOR9
 5206              		.cfi_endproc
 5207              	.LFE47:
 5209              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 5210              		.align	1
 5211              		.global	xTaskGetCurrentTaskHandle
 5212              		.syntax unified
 5213              		.thumb
 5214              		.thumb_func
 5216              	xTaskGetCurrentTaskHandle:
 5217              	.LFB49:
4027:FreeRTOS/tasks.c ****         TaskHandle_t xReturn;
 5218              		.loc 1 4027 5 is_stmt 1 view -0
 5219              		.cfi_startproc
 5220              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 213


 5221              		@ frame_needed = 0, uses_anonymous_args = 0
 5222              		@ link register save eliminated.
4028:FreeRTOS/tasks.c **** 
 5223              		.loc 1 4028 9 view .LVU1448
4033:FreeRTOS/tasks.c **** 
 5224              		.loc 1 4033 9 view .LVU1449
4033:FreeRTOS/tasks.c **** 
 5225              		.loc 1 4033 17 is_stmt 0 view .LVU1450
 5226 0000 014B     		ldr	r3, .L404
 5227 0002 1868     		ldr	r0, [r3]
 5228              	.LVL417:
4035:FreeRTOS/tasks.c ****     }
 5229              		.loc 1 4035 9 is_stmt 1 view .LVU1451
4036:FreeRTOS/tasks.c **** 
 5230              		.loc 1 4036 5 is_stmt 0 view .LVU1452
 5231 0004 7047     		bx	lr
 5232              	.L405:
 5233 0006 00BF     		.align	2
 5234              	.L404:
 5235 0008 00000000 		.word	.LANCHOR9
 5236              		.cfi_endproc
 5237              	.LFE49:
 5239              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5240              		.align	1
 5241              		.global	uxTaskResetEventItemValue
 5242              		.syntax unified
 5243              		.thumb
 5244              		.thumb_func
 5246              	uxTaskResetEventItemValue:
 5247              	.LFB50:
4667:FreeRTOS/tasks.c ****     TickType_t uxReturn;
 5248              		.loc 1 4667 1 is_stmt 1 view -0
 5249              		.cfi_startproc
 5250              		@ args = 0, pretend = 0, frame = 0
 5251              		@ frame_needed = 0, uses_anonymous_args = 0
 5252              		@ link register save eliminated.
4668:FreeRTOS/tasks.c **** 
 5253              		.loc 1 4668 5 view .LVU1454
4670:FreeRTOS/tasks.c **** 
 5254              		.loc 1 4670 5 view .LVU1455
4670:FreeRTOS/tasks.c **** 
 5255              		.loc 1 4670 16 is_stmt 0 view .LVU1456
 5256 0000 044A     		ldr	r2, .L407
 5257 0002 1368     		ldr	r3, [r2]
4670:FreeRTOS/tasks.c **** 
 5258              		.loc 1 4670 14 view .LVU1457
 5259 0004 9869     		ldr	r0, [r3, #24]
 5260              	.LVL418:
4674:FreeRTOS/tasks.c **** 
 5261              		.loc 1 4674 5 is_stmt 1 view .LVU1458
 5262 0006 1368     		ldr	r3, [r2]
 5263 0008 DB6A     		ldr	r3, [r3, #44]
 5264 000a 1268     		ldr	r2, [r2]
 5265 000c C3F10503 		rsb	r3, r3, #5
 5266 0010 9361     		str	r3, [r2, #24]
4676:FreeRTOS/tasks.c **** }
 5267              		.loc 1 4676 5 view .LVU1459
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 214


4677:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 5268              		.loc 1 4677 1 is_stmt 0 view .LVU1460
 5269 0012 7047     		bx	lr
 5270              	.L408:
 5271              		.align	2
 5272              	.L407:
 5273 0014 00000000 		.word	.LANCHOR9
 5274              		.cfi_endproc
 5275              	.LFE50:
 5277              		.section	.text.ulTaskGenericNotifyTake,"ax",%progbits
 5278              		.align	1
 5279              		.global	ulTaskGenericNotifyTake
 5280              		.syntax unified
 5281              		.thumb
 5282              		.thumb_func
 5284              	ulTaskGenericNotifyTake:
 5285              	.LVL419:
 5286              	.LFB51:
4702:FreeRTOS/tasks.c ****         uint32_t ulReturn;
 5287              		.loc 1 4702 5 is_stmt 1 view -0
 5288              		.cfi_startproc
 5289              		@ args = 0, pretend = 0, frame = 0
 5290              		@ frame_needed = 0, uses_anonymous_args = 0
4703:FreeRTOS/tasks.c **** 
 5291              		.loc 1 4703 9 view .LVU1462
4705:FreeRTOS/tasks.c **** 
 5292              		.loc 1 4705 9 view .LVU1463
 5293 0000 40B1     		cbz	r0, .L410
4705:FreeRTOS/tasks.c **** 
 5294              		.loc 1 4705 9 view .LVU1464
 5295              	.LBB204:
 5296              	.LBI204:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 5297              		.loc 2 193 34 view .LVU1465
 5298              	.LBB205:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 5299              		.loc 2 195 9 view .LVU1466
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5300              		.loc 2 197 9 view .LVU1467
 5301              		.syntax unified
 5302              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 5303 0002 4FF05003 			mov r3, #80												
 5304 0006 83F31188 		msr basepri, r3											
 5305 000a BFF36F8F 		isb														
 5306 000e BFF34F8F 		dsb														
 5307              	
 5308              	@ 0 "" 2
 5309              	.LVL420:
 5310              		.thumb
 5311              		.syntax unified
 5312              	.L411:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5313              		.loc 2 197 9 is_stmt 0 view .LVU1468
 5314              	.LBE205:
 5315              	.LBE204:
4705:FreeRTOS/tasks.c **** 
 5316              		.loc 1 4705 9 is_stmt 1 discriminator 1 view .LVU1469
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 215


4705:FreeRTOS/tasks.c **** 
 5317              		.loc 1 4705 9 discriminator 1 view .LVU1470
4705:FreeRTOS/tasks.c **** 
 5318              		.loc 1 4705 9 discriminator 1 view .LVU1471
 5319 0012 FEE7     		b	.L411
 5320              	.L410:
4702:FreeRTOS/tasks.c ****         uint32_t ulReturn;
 5321              		.loc 1 4702 5 is_stmt 0 discriminator 2 view .LVU1472
 5322 0014 70B5     		push	{r4, r5, r6, lr}
 5323              	.LCFI47:
 5324              		.cfi_def_cfa_offset 16
 5325              		.cfi_offset 4, -16
 5326              		.cfi_offset 5, -12
 5327              		.cfi_offset 6, -8
 5328              		.cfi_offset 14, -4
 5329 0016 0D46     		mov	r5, r1
 5330 0018 1446     		mov	r4, r2
 5331 001a 0646     		mov	r6, r0
4705:FreeRTOS/tasks.c **** 
 5332              		.loc 1 4705 78 is_stmt 1 discriminator 2 view .LVU1473
4707:FreeRTOS/tasks.c ****         {
 5333              		.loc 1 4707 9 discriminator 2 view .LVU1474
 5334 001c FFF7FEFF 		bl	vPortEnterCritical
 5335              	.LVL421:
4710:FreeRTOS/tasks.c ****             {
 5336              		.loc 1 4710 13 discriminator 2 view .LVU1475
4710:FreeRTOS/tasks.c ****             {
 5337              		.loc 1 4710 29 is_stmt 0 discriminator 2 view .LVU1476
 5338 0020 234B     		ldr	r3, .L418
 5339 0022 1B68     		ldr	r3, [r3]
4710:FreeRTOS/tasks.c ****             {
 5340              		.loc 1 4710 46 discriminator 2 view .LVU1477
 5341 0024 06F11402 		add	r2, r6, #20
 5342 0028 53F82230 		ldr	r3, [r3, r2, lsl #2]
4710:FreeRTOS/tasks.c ****             {
 5343              		.loc 1 4710 15 discriminator 2 view .LVU1478
 5344 002c 33B9     		cbnz	r3, .L412
4713:FreeRTOS/tasks.c **** 
 5345              		.loc 1 4713 17 is_stmt 1 view .LVU1479
4713:FreeRTOS/tasks.c **** 
 5346              		.loc 1 4713 29 is_stmt 0 view .LVU1480
 5347 002e 204B     		ldr	r3, .L418
 5348 0030 1B68     		ldr	r3, [r3]
4713:FreeRTOS/tasks.c **** 
 5349              		.loc 1 4713 62 view .LVU1481
 5350 0032 3344     		add	r3, r3, r6
 5351 0034 0122     		movs	r2, #1
 5352 0036 83F85420 		strb	r2, [r3, #84]
4715:FreeRTOS/tasks.c ****                 {
 5353              		.loc 1 4715 17 is_stmt 1 view .LVU1482
4715:FreeRTOS/tasks.c ****                 {
 5354              		.loc 1 4715 19 is_stmt 0 view .LVU1483
 5355 003a 0CBB     		cbnz	r4, .L417
 5356              	.L412:
4733:FreeRTOS/tasks.c ****             }
 5357              		.loc 1 4733 41 is_stmt 1 view .LVU1484
4736:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 216


 5358              		.loc 1 4736 9 view .LVU1485
 5359 003c FFF7FEFF 		bl	vPortExitCritical
 5360              	.LVL422:
4738:FreeRTOS/tasks.c ****         {
 5361              		.loc 1 4738 9 view .LVU1486
 5362 0040 FFF7FEFF 		bl	vPortEnterCritical
 5363              	.LVL423:
4740:FreeRTOS/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 5364              		.loc 1 4740 13 view .LVU1487
 5365 0044 2246     		mov	r2, r4
 5366 0046 2946     		mov	r1, r5
 5367 0048 4220     		movs	r0, #66
 5368 004a FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
 5369              	.LVL424:
4741:FreeRTOS/tasks.c **** 
 5370              		.loc 1 4741 13 view .LVU1488
4741:FreeRTOS/tasks.c **** 
 5371              		.loc 1 4741 36 is_stmt 0 view .LVU1489
 5372 004e 184B     		ldr	r3, .L418
 5373 0050 1B68     		ldr	r3, [r3]
4741:FreeRTOS/tasks.c **** 
 5374              		.loc 1 4741 22 view .LVU1490
 5375 0052 06F11402 		add	r2, r6, #20
 5376 0056 53F82240 		ldr	r4, [r3, r2, lsl #2]
 5377              	.LVL425:
4743:FreeRTOS/tasks.c ****             {
 5378              		.loc 1 4743 13 is_stmt 1 view .LVU1491
4743:FreeRTOS/tasks.c ****             {
 5379              		.loc 1 4743 15 is_stmt 0 view .LVU1492
 5380 005a 3CB1     		cbz	r4, .L413
4745:FreeRTOS/tasks.c ****                 {
 5381              		.loc 1 4745 17 is_stmt 1 view .LVU1493
4745:FreeRTOS/tasks.c ****                 {
 5382              		.loc 1 4745 19 is_stmt 0 view .LVU1494
 5383 005c FDB1     		cbz	r5, .L414
4747:FreeRTOS/tasks.c ****                 }
 5384              		.loc 1 4747 21 is_stmt 1 view .LVU1495
4747:FreeRTOS/tasks.c ****                 }
 5385              		.loc 1 4747 33 is_stmt 0 view .LVU1496
 5386 005e 144B     		ldr	r3, .L418
 5387 0060 1A68     		ldr	r2, [r3]
4747:FreeRTOS/tasks.c ****                 }
 5388              		.loc 1 4747 68 view .LVU1497
 5389 0062 06F11403 		add	r3, r6, #20
 5390 0066 0021     		movs	r1, #0
 5391 0068 42F82310 		str	r1, [r2, r3, lsl #2]
 5392              	.L413:
4756:FreeRTOS/tasks.c ****             }
 5393              		.loc 1 4756 41 is_stmt 1 view .LVU1498
4759:FreeRTOS/tasks.c ****         }
 5394              		.loc 1 4759 13 view .LVU1499
4759:FreeRTOS/tasks.c ****         }
 5395              		.loc 1 4759 25 is_stmt 0 view .LVU1500
 5396 006c 104B     		ldr	r3, .L418
 5397 006e 1B68     		ldr	r3, [r3]
4759:FreeRTOS/tasks.c ****         }
 5398              		.loc 1 4759 58 view .LVU1501
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 217


 5399 0070 1E44     		add	r6, r6, r3
 5400              	.LVL426:
4759:FreeRTOS/tasks.c ****         }
 5401              		.loc 1 4759 58 view .LVU1502
 5402 0072 0023     		movs	r3, #0
 5403 0074 86F85430 		strb	r3, [r6, #84]
4761:FreeRTOS/tasks.c **** 
 5404              		.loc 1 4761 9 is_stmt 1 view .LVU1503
 5405 0078 FFF7FEFF 		bl	vPortExitCritical
 5406              	.LVL427:
4763:FreeRTOS/tasks.c ****     }
 5407              		.loc 1 4763 9 view .LVU1504
4764:FreeRTOS/tasks.c **** 
 5408              		.loc 1 4764 5 is_stmt 0 view .LVU1505
 5409 007c 2046     		mov	r0, r4
 5410 007e 70BD     		pop	{r4, r5, r6, pc}
 5411              	.LVL428:
 5412              	.L417:
4717:FreeRTOS/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
 5413              		.loc 1 4717 21 is_stmt 1 view .LVU1506
 5414 0080 1146     		mov	r1, r2
 5415 0082 2046     		mov	r0, r4
 5416 0084 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5417              	.LVL429:
4718:FreeRTOS/tasks.c **** 
 5418              		.loc 1 4718 65 view .LVU1507
4724:FreeRTOS/tasks.c ****                 }
 5419              		.loc 1 4724 21 view .LVU1508
 5420 0088 4FF0E023 		mov	r3, #-536813568
 5421 008c 4FF08052 		mov	r2, #268435456
 5422 0090 C3F8042D 		str	r2, [r3, #3332]
4724:FreeRTOS/tasks.c ****                 }
 5423              		.loc 1 4724 21 view .LVU1509
 5424              		.syntax unified
 5425              	@ 4724 "FreeRTOS/tasks.c" 1
 5426 0094 BFF34F8F 		dsb
 5427              	@ 0 "" 2
4724:FreeRTOS/tasks.c ****                 }
 5428              		.loc 1 4724 21 view .LVU1510
 5429              	@ 4724 "FreeRTOS/tasks.c" 1
 5430 0098 BFF36F8F 		isb
 5431              	@ 0 "" 2
4724:FreeRTOS/tasks.c ****                 }
 5432              		.loc 1 4724 43 view .LVU1511
 5433              		.thumb
 5434              		.syntax unified
 5435 009c CEE7     		b	.L412
 5436              	.LVL430:
 5437              	.L414:
4751:FreeRTOS/tasks.c ****                 }
 5438              		.loc 1 4751 21 view .LVU1512
4751:FreeRTOS/tasks.c ****                 }
 5439              		.loc 1 4751 33 is_stmt 0 view .LVU1513
 5440 009e 044B     		ldr	r3, .L418
 5441 00a0 1A68     		ldr	r2, [r3]
4751:FreeRTOS/tasks.c ****                 }
 5442              		.loc 1 4751 79 view .LVU1514
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 218


 5443 00a2 631E     		subs	r3, r4, #1
4751:FreeRTOS/tasks.c ****                 }
 5444              		.loc 1 4751 68 view .LVU1515
 5445 00a4 06F11401 		add	r1, r6, #20
 5446 00a8 42F82130 		str	r3, [r2, r1, lsl #2]
 5447 00ac DEE7     		b	.L413
 5448              	.L419:
 5449 00ae 00BF     		.align	2
 5450              	.L418:
 5451 00b0 00000000 		.word	.LANCHOR9
 5452              		.cfi_endproc
 5453              	.LFE51:
 5455              		.section	.text.xTaskGenericNotifyWait,"ax",%progbits
 5456              		.align	1
 5457              		.global	xTaskGenericNotifyWait
 5458              		.syntax unified
 5459              		.thumb
 5460              		.thumb_func
 5462              	xTaskGenericNotifyWait:
 5463              	.LVL431:
 5464              	.LFB52:
4776:FreeRTOS/tasks.c ****         BaseType_t xReturn;
 5465              		.loc 1 4776 5 is_stmt 1 view -0
 5466              		.cfi_startproc
 5467              		@ args = 4, pretend = 0, frame = 0
 5468              		@ frame_needed = 0, uses_anonymous_args = 0
4777:FreeRTOS/tasks.c **** 
 5469              		.loc 1 4777 9 view .LVU1517
4779:FreeRTOS/tasks.c **** 
 5470              		.loc 1 4779 9 view .LVU1518
 5471 0000 40B1     		cbz	r0, .L421
4779:FreeRTOS/tasks.c **** 
 5472              		.loc 1 4779 9 view .LVU1519
 5473              	.LBB206:
 5474              	.LBI206:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 5475              		.loc 2 193 34 view .LVU1520
 5476              	.LBB207:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 5477              		.loc 2 195 9 view .LVU1521
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5478              		.loc 2 197 9 view .LVU1522
 5479              		.syntax unified
 5480              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 5481 0002 4FF05003 			mov r3, #80												
 5482 0006 83F31188 		msr basepri, r3											
 5483 000a BFF36F8F 		isb														
 5484 000e BFF34F8F 		dsb														
 5485              	
 5486              	@ 0 "" 2
 5487              	.LVL432:
 5488              		.thumb
 5489              		.syntax unified
 5490              	.L422:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5491              		.loc 2 197 9 is_stmt 0 view .LVU1523
 5492              	.LBE207:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 219


 5493              	.LBE206:
4779:FreeRTOS/tasks.c **** 
 5494              		.loc 1 4779 9 is_stmt 1 discriminator 1 view .LVU1524
4779:FreeRTOS/tasks.c **** 
 5495              		.loc 1 4779 9 discriminator 1 view .LVU1525
4779:FreeRTOS/tasks.c **** 
 5496              		.loc 1 4779 9 discriminator 1 view .LVU1526
 5497 0012 FEE7     		b	.L422
 5498              	.LVL433:
 5499              	.L421:
4776:FreeRTOS/tasks.c ****         BaseType_t xReturn;
 5500              		.loc 1 4776 5 is_stmt 0 discriminator 2 view .LVU1527
 5501 0014 F0B5     		push	{r4, r5, r6, r7, lr}
 5502              	.LCFI48:
 5503              		.cfi_def_cfa_offset 20
 5504              		.cfi_offset 4, -20
 5505              		.cfi_offset 5, -16
 5506              		.cfi_offset 6, -12
 5507              		.cfi_offset 7, -8
 5508              		.cfi_offset 14, -4
 5509 0016 83B0     		sub	sp, sp, #12
 5510              	.LCFI49:
 5511              		.cfi_def_cfa_offset 32
 5512 0018 0D46     		mov	r5, r1
 5513 001a 1646     		mov	r6, r2
 5514 001c 1C46     		mov	r4, r3
 5515 001e 0746     		mov	r7, r0
4779:FreeRTOS/tasks.c **** 
 5516              		.loc 1 4779 78 is_stmt 1 discriminator 2 view .LVU1528
4781:FreeRTOS/tasks.c ****         {
 5517              		.loc 1 4781 9 discriminator 2 view .LVU1529
 5518 0020 FFF7FEFF 		bl	vPortEnterCritical
 5519              	.LVL434:
4784:FreeRTOS/tasks.c ****             {
 5520              		.loc 1 4784 13 discriminator 2 view .LVU1530
4784:FreeRTOS/tasks.c ****             {
 5521              		.loc 1 4784 29 is_stmt 0 discriminator 2 view .LVU1531
 5522 0024 2D4B     		ldr	r3, .L431
 5523 0026 1B68     		ldr	r3, [r3]
4784:FreeRTOS/tasks.c ****             {
 5524              		.loc 1 4784 44 discriminator 2 view .LVU1532
 5525 0028 3B44     		add	r3, r3, r7
 5526 002a 93F85430 		ldrb	r3, [r3, #84]	@ zero_extendqisi2
 5527 002e DBB2     		uxtb	r3, r3
4784:FreeRTOS/tasks.c ****             {
 5528              		.loc 1 4784 15 discriminator 2 view .LVU1533
 5529 0030 022B     		cmp	r3, #2
 5530 0032 10D0     		beq	.L423
4789:FreeRTOS/tasks.c **** 
 5531              		.loc 1 4789 17 is_stmt 1 view .LVU1534
4789:FreeRTOS/tasks.c **** 
 5532              		.loc 1 4789 64 is_stmt 0 view .LVU1535
 5533 0034 294A     		ldr	r2, .L431
 5534 0036 1168     		ldr	r1, [r2]
 5535 0038 07F11400 		add	r0, r7, #20
 5536 003c 51F82030 		ldr	r3, [r1, r0, lsl #2]
 5537 0040 23EA0503 		bic	r3, r3, r5
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 220


 5538 0044 41F82030 		str	r3, [r1, r0, lsl #2]
4792:FreeRTOS/tasks.c **** 
 5539              		.loc 1 4792 17 is_stmt 1 view .LVU1536
4792:FreeRTOS/tasks.c **** 
 5540              		.loc 1 4792 29 is_stmt 0 view .LVU1537
 5541 0048 1368     		ldr	r3, [r2]
4792:FreeRTOS/tasks.c **** 
 5542              		.loc 1 4792 62 view .LVU1538
 5543 004a 3B44     		add	r3, r3, r7
 5544 004c 0122     		movs	r2, #1
 5545 004e 83F85420 		strb	r2, [r3, #84]
4794:FreeRTOS/tasks.c ****                 {
 5546              		.loc 1 4794 17 is_stmt 1 view .LVU1539
4794:FreeRTOS/tasks.c ****                 {
 5547              		.loc 1 4794 19 is_stmt 0 view .LVU1540
 5548 0052 089B     		ldr	r3, [sp, #32]
 5549 0054 3BBB     		cbnz	r3, .L429
 5550              	.LVL435:
 5551              	.L423:
4812:FreeRTOS/tasks.c ****             }
 5552              		.loc 1 4812 41 is_stmt 1 view .LVU1541
4815:FreeRTOS/tasks.c **** 
 5553              		.loc 1 4815 9 view .LVU1542
 5554 0056 FFF7FEFF 		bl	vPortExitCritical
 5555              	.LVL436:
4817:FreeRTOS/tasks.c ****         {
 5556              		.loc 1 4817 9 view .LVU1543
 5557 005a FFF7FEFF 		bl	vPortEnterCritical
 5558              	.LVL437:
4819:FreeRTOS/tasks.c **** 
 5559              		.loc 1 4819 13 view .LVU1544
 5560 005e 089B     		ldr	r3, [sp, #32]
 5561 0060 0093     		str	r3, [sp]
 5562 0062 2346     		mov	r3, r4
 5563 0064 3246     		mov	r2, r6
 5564 0066 2946     		mov	r1, r5
 5565 0068 4020     		movs	r0, #64
 5566 006a FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x4
 5567              	.LVL438:
4821:FreeRTOS/tasks.c ****             {
 5568              		.loc 1 4821 13 view .LVU1545
4821:FreeRTOS/tasks.c ****             {
 5569              		.loc 1 4821 15 is_stmt 0 view .LVU1546
 5570 006e 34B1     		cbz	r4, .L424
4825:FreeRTOS/tasks.c ****             }
 5571              		.loc 1 4825 17 is_stmt 1 view .LVU1547
4825:FreeRTOS/tasks.c ****             }
 5572              		.loc 1 4825 53 is_stmt 0 view .LVU1548
 5573 0070 1A4B     		ldr	r3, .L431
 5574 0072 1B68     		ldr	r3, [r3]
4825:FreeRTOS/tasks.c ****             }
 5575              		.loc 1 4825 70 view .LVU1549
 5576 0074 07F11402 		add	r2, r7, #20
 5577 0078 53F82230 		ldr	r3, [r3, r2, lsl #2]
4825:FreeRTOS/tasks.c ****             }
 5578              		.loc 1 4825 39 view .LVU1550
 5579 007c 2360     		str	r3, [r4]
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 221


 5580              	.L424:
4832:FreeRTOS/tasks.c ****             {
 5581              		.loc 1 4832 13 is_stmt 1 view .LVU1551
4832:FreeRTOS/tasks.c ****             {
 5582              		.loc 1 4832 29 is_stmt 0 view .LVU1552
 5583 007e 174B     		ldr	r3, .L431
 5584 0080 1B68     		ldr	r3, [r3]
4832:FreeRTOS/tasks.c ****             {
 5585              		.loc 1 4832 44 view .LVU1553
 5586 0082 3B44     		add	r3, r3, r7
 5587 0084 93F85430 		ldrb	r3, [r3, #84]	@ zero_extendqisi2
 5588 0088 DBB2     		uxtb	r3, r3
4832:FreeRTOS/tasks.c ****             {
 5589              		.loc 1 4832 15 view .LVU1554
 5590 008a 022B     		cmp	r3, #2
 5591 008c 1AD0     		beq	.L430
4835:FreeRTOS/tasks.c ****             }
 5592              		.loc 1 4835 25 view .LVU1555
 5593 008e 0024     		movs	r4, #0
 5594              	.LVL439:
 5595              	.L425:
4845:FreeRTOS/tasks.c ****         }
 5596              		.loc 1 4845 13 is_stmt 1 view .LVU1556
4845:FreeRTOS/tasks.c ****         }
 5597              		.loc 1 4845 25 is_stmt 0 view .LVU1557
 5598 0090 124B     		ldr	r3, .L431
 5599 0092 1B68     		ldr	r3, [r3]
4845:FreeRTOS/tasks.c ****         }
 5600              		.loc 1 4845 58 view .LVU1558
 5601 0094 1F44     		add	r7, r7, r3
 5602              	.LVL440:
4845:FreeRTOS/tasks.c ****         }
 5603              		.loc 1 4845 58 view .LVU1559
 5604 0096 0023     		movs	r3, #0
 5605 0098 87F85430 		strb	r3, [r7, #84]
4847:FreeRTOS/tasks.c **** 
 5606              		.loc 1 4847 9 is_stmt 1 view .LVU1560
 5607 009c FFF7FEFF 		bl	vPortExitCritical
 5608              	.LVL441:
4849:FreeRTOS/tasks.c ****     }
 5609              		.loc 1 4849 9 view .LVU1561
4850:FreeRTOS/tasks.c **** 
 5610              		.loc 1 4850 5 is_stmt 0 view .LVU1562
 5611 00a0 2046     		mov	r0, r4
 5612 00a2 03B0     		add	sp, sp, #12
 5613              	.LCFI50:
 5614              		.cfi_remember_state
 5615              		.cfi_def_cfa_offset 20
 5616              		@ sp needed
 5617 00a4 F0BD     		pop	{r4, r5, r6, r7, pc}
 5618              	.LVL442:
 5619              	.L429:
 5620              	.LCFI51:
 5621              		.cfi_restore_state
4796:FreeRTOS/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
 5622              		.loc 1 4796 21 is_stmt 1 view .LVU1563
 5623 00a6 1146     		mov	r1, r2
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 222


 5624 00a8 1846     		mov	r0, r3
 5625 00aa FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5626              	.LVL443:
4797:FreeRTOS/tasks.c **** 
 5627              		.loc 1 4797 65 view .LVU1564
4803:FreeRTOS/tasks.c ****                 }
 5628              		.loc 1 4803 21 view .LVU1565
 5629 00ae 4FF0E023 		mov	r3, #-536813568
 5630 00b2 4FF08052 		mov	r2, #268435456
 5631 00b6 C3F8042D 		str	r2, [r3, #3332]
 5632              	.LVL444:
4803:FreeRTOS/tasks.c ****                 }
 5633              		.loc 1 4803 21 view .LVU1566
 5634              		.syntax unified
 5635              	@ 4803 "FreeRTOS/tasks.c" 1
 5636 00ba BFF34F8F 		dsb
 5637              	@ 0 "" 2
4803:FreeRTOS/tasks.c ****                 }
 5638              		.loc 1 4803 21 view .LVU1567
 5639              	@ 4803 "FreeRTOS/tasks.c" 1
 5640 00be BFF36F8F 		isb
 5641              	@ 0 "" 2
4803:FreeRTOS/tasks.c ****                 }
 5642              		.loc 1 4803 43 view .LVU1568
 5643              		.thumb
 5644              		.syntax unified
 5645 00c2 C8E7     		b	.L423
 5646              	.L430:
4841:FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 5647              		.loc 1 4841 17 view .LVU1569
4841:FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 5648              		.loc 1 4841 64 is_stmt 0 view .LVU1570
 5649 00c4 054B     		ldr	r3, .L431
 5650 00c6 1B68     		ldr	r3, [r3]
 5651 00c8 07F11401 		add	r1, r7, #20
 5652 00cc 53F82120 		ldr	r2, [r3, r1, lsl #2]
 5653 00d0 22EA0602 		bic	r2, r2, r6
 5654 00d4 43F82120 		str	r2, [r3, r1, lsl #2]
4842:FreeRTOS/tasks.c ****             }
 5655              		.loc 1 4842 17 is_stmt 1 view .LVU1571
 5656              	.LVL445:
4842:FreeRTOS/tasks.c ****             }
 5657              		.loc 1 4842 25 is_stmt 0 view .LVU1572
 5658 00d8 0124     		movs	r4, #1
 5659              	.LVL446:
4842:FreeRTOS/tasks.c ****             }
 5660              		.loc 1 4842 25 view .LVU1573
 5661 00da D9E7     		b	.L425
 5662              	.L432:
 5663              		.align	2
 5664              	.L431:
 5665 00dc 00000000 		.word	.LANCHOR9
 5666              		.cfi_endproc
 5667              	.LFE52:
 5669              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5670              		.align	1
 5671              		.global	xTaskGenericNotify
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 223


 5672              		.syntax unified
 5673              		.thumb
 5674              		.thumb_func
 5676              	xTaskGenericNotify:
 5677              	.LVL447:
 5678              	.LFB53:
4862:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 5679              		.loc 1 4862 5 is_stmt 1 view -0
 5680              		.cfi_startproc
 5681              		@ args = 4, pretend = 0, frame = 0
 5682              		@ frame_needed = 0, uses_anonymous_args = 0
4863:FreeRTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
 5683              		.loc 1 4863 9 view .LVU1575
4864:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 5684              		.loc 1 4864 9 view .LVU1576
4865:FreeRTOS/tasks.c **** 
 5685              		.loc 1 4865 9 view .LVU1577
4867:FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 5686              		.loc 1 4867 9 view .LVU1578
 5687 0000 41B1     		cbz	r1, .L434
4867:FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 5688              		.loc 1 4867 9 view .LVU1579
 5689              	.LBB208:
 5690              	.LBI208:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 5691              		.loc 2 193 34 view .LVU1580
 5692              	.LBB209:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 5693              		.loc 2 195 9 view .LVU1581
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5694              		.loc 2 197 9 view .LVU1582
 5695              		.syntax unified
 5696              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 5697 0002 4FF05003 			mov r3, #80												
 5698 0006 83F31188 		msr basepri, r3											
 5699 000a BFF36F8F 		isb														
 5700 000e BFF34F8F 		dsb														
 5701              	
 5702              	@ 0 "" 2
 5703              	.LVL448:
 5704              		.thumb
 5705              		.syntax unified
 5706              	.L435:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5707              		.loc 2 197 9 is_stmt 0 view .LVU1583
 5708              	.LBE209:
 5709              	.LBE208:
4867:FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 5710              		.loc 1 4867 9 is_stmt 1 discriminator 1 view .LVU1584
4867:FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 5711              		.loc 1 4867 9 discriminator 1 view .LVU1585
4867:FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 5712              		.loc 1 4867 9 discriminator 1 view .LVU1586
 5713 0012 FEE7     		b	.L435
 5714              	.LVL449:
 5715              	.L434:
4862:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 224


 5716              		.loc 1 4862 5 is_stmt 0 discriminator 2 view .LVU1587
 5717 0014 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 5718              	.LCFI52:
 5719              		.cfi_def_cfa_offset 24
 5720              		.cfi_offset 4, -24
 5721              		.cfi_offset 5, -20
 5722              		.cfi_offset 6, -16
 5723              		.cfi_offset 7, -12
 5724              		.cfi_offset 8, -8
 5725              		.cfi_offset 14, -4
 5726 0018 82B0     		sub	sp, sp, #8
 5727              	.LCFI53:
 5728              		.cfi_def_cfa_offset 32
 5729 001a 0446     		mov	r4, r0
 5730 001c 1746     		mov	r7, r2
 5731 001e 1E46     		mov	r6, r3
 5732 0020 0D46     		mov	r5, r1
4867:FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 5733              		.loc 1 4867 80 is_stmt 1 discriminator 2 view .LVU1588
4868:FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 5734              		.loc 1 4868 9 discriminator 2 view .LVU1589
 5735 0022 C0B1     		cbz	r0, .L455
4868:FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 5736              		.loc 1 4868 38 discriminator 2 view .LVU1590
4869:FreeRTOS/tasks.c **** 
 5737              		.loc 1 4869 9 discriminator 2 view .LVU1591
 5738              	.LVL450:
4871:FreeRTOS/tasks.c ****         {
 5739              		.loc 1 4871 9 discriminator 2 view .LVU1592
 5740 0024 FFF7FEFF 		bl	vPortEnterCritical
 5741              	.LVL451:
4873:FreeRTOS/tasks.c ****             {
 5742              		.loc 1 4873 13 discriminator 2 view .LVU1593
4873:FreeRTOS/tasks.c ****             {
 5743              		.loc 1 4873 15 is_stmt 0 discriminator 2 view .LVU1594
 5744 0028 089B     		ldr	r3, [sp, #32]
 5745 002a 2BB1     		cbz	r3, .L438
4875:FreeRTOS/tasks.c ****             }
 5746              		.loc 1 4875 17 is_stmt 1 view .LVU1595
4875:FreeRTOS/tasks.c ****             }
 5747              		.loc 1 4875 71 is_stmt 0 view .LVU1596
 5748 002c 05F11403 		add	r3, r5, #20
 5749 0030 54F82330 		ldr	r3, [r4, r3, lsl #2]
4875:FreeRTOS/tasks.c ****             }
 5750              		.loc 1 4875 47 view .LVU1597
 5751 0034 089A     		ldr	r2, [sp, #32]
 5752 0036 1360     		str	r3, [r2]
 5753              	.L438:
4878:FreeRTOS/tasks.c **** 
 5754              		.loc 1 4878 13 is_stmt 1 view .LVU1598
4878:FreeRTOS/tasks.c **** 
 5755              		.loc 1 4878 35 is_stmt 0 view .LVU1599
 5756 0038 6319     		adds	r3, r4, r5
 5757 003a 93F85480 		ldrb	r8, [r3, #84]	@ zero_extendqisi2
 5758 003e 5FFA88F8 		uxtb	r8, r8
 5759              	.LVL452:
4880:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 225


 5760              		.loc 1 4880 13 is_stmt 1 view .LVU1600
4880:FreeRTOS/tasks.c **** 
 5761              		.loc 1 4880 53 is_stmt 0 view .LVU1601
 5762 0042 0222     		movs	r2, #2
 5763 0044 83F85420 		strb	r2, [r3, #84]
4882:FreeRTOS/tasks.c ****             {
 5764              		.loc 1 4882 13 is_stmt 1 view .LVU1602
 5765 0048 042E     		cmp	r6, #4
 5766 004a 2AD8     		bhi	.L439
 5767 004c DFE806F0 		tbb	[pc, r6]
 5768              	.L441:
 5769 0050 35       		.byte	(.L450-.L441)/2
 5770 0051 0C       		.byte	(.L444-.L441)/2
 5771 0052 14       		.byte	(.L443-.L441)/2
 5772 0053 1C       		.byte	(.L442-.L441)/2
 5773 0054 21       		.byte	(.L440-.L441)/2
 5774              	.LVL453:
 5775 0055 00       		.p2align 1
 5776              	.L455:
4868:FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 5777              		.loc 1 4868 9 view .LVU1603
 5778              	.LBB210:
 5779              	.LBI210:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 5780              		.loc 2 193 34 view .LVU1604
 5781              	.LBB211:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 5782              		.loc 2 195 9 view .LVU1605
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5783              		.loc 2 197 9 view .LVU1606
 5784              		.syntax unified
 5785              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 5786 0056 4FF05003 			mov r3, #80												
 5787 005a 83F31188 		msr basepri, r3											
 5788 005e BFF36F8F 		isb														
 5789 0062 BFF34F8F 		dsb														
 5790              	
 5791              	@ 0 "" 2
 5792              	.LVL454:
 5793              		.thumb
 5794              		.syntax unified
 5795              	.L437:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5796              		.loc 2 197 9 is_stmt 0 view .LVU1607
 5797              	.LBE211:
 5798              	.LBE210:
4868:FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 5799              		.loc 1 4868 9 is_stmt 1 discriminator 2 view .LVU1608
4868:FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 5800              		.loc 1 4868 9 discriminator 2 view .LVU1609
4868:FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 5801              		.loc 1 4868 9 discriminator 2 view .LVU1610
 5802 0066 FEE7     		b	.L437
 5803              	.LVL455:
 5804              	.L444:
4885:FreeRTOS/tasks.c ****                     break;
 5805              		.loc 1 4885 21 view .LVU1611
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 226


4885:FreeRTOS/tasks.c ****                     break;
 5806              		.loc 1 4885 63 is_stmt 0 view .LVU1612
 5807 0068 1435     		adds	r5, r5, #20
 5808              	.LVL456:
4885:FreeRTOS/tasks.c ****                     break;
 5809              		.loc 1 4885 63 view .LVU1613
 5810 006a 54F82530 		ldr	r3, [r4, r5, lsl #2]
 5811 006e 3B43     		orrs	r3, r3, r7
 5812 0070 44F82530 		str	r3, [r4, r5, lsl #2]
4886:FreeRTOS/tasks.c **** 
 5813              		.loc 1 4886 21 is_stmt 1 view .LVU1614
4864:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 5814              		.loc 1 4864 20 is_stmt 0 view .LVU1615
 5815 0074 0125     		movs	r5, #1
 5816              	.LVL457:
4886:FreeRTOS/tasks.c **** 
 5817              		.loc 1 4886 21 view .LVU1616
 5818 0076 21E0     		b	.L445
 5819              	.LVL458:
 5820              	.L443:
4889:FreeRTOS/tasks.c ****                     break;
 5821              		.loc 1 4889 21 is_stmt 1 view .LVU1617
4889:FreeRTOS/tasks.c ****                     break;
 5822              		.loc 1 4889 45 is_stmt 0 view .LVU1618
 5823 0078 1435     		adds	r5, r5, #20
 5824              	.LVL459:
4889:FreeRTOS/tasks.c ****                     break;
 5825              		.loc 1 4889 45 view .LVU1619
 5826 007a 54F82530 		ldr	r3, [r4, r5, lsl #2]
4889:FreeRTOS/tasks.c ****                     break;
 5827              		.loc 1 4889 66 view .LVU1620
 5828 007e 0133     		adds	r3, r3, #1
 5829 0080 44F82530 		str	r3, [r4, r5, lsl #2]
4890:FreeRTOS/tasks.c **** 
 5830              		.loc 1 4890 21 is_stmt 1 view .LVU1621
4864:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 5831              		.loc 1 4864 20 is_stmt 0 view .LVU1622
 5832 0084 0125     		movs	r5, #1
 5833              	.LVL460:
4890:FreeRTOS/tasks.c **** 
 5834              		.loc 1 4890 21 view .LVU1623
 5835 0086 19E0     		b	.L445
 5836              	.LVL461:
 5837              	.L442:
4893:FreeRTOS/tasks.c ****                     break;
 5838              		.loc 1 4893 21 is_stmt 1 view .LVU1624
4893:FreeRTOS/tasks.c ****                     break;
 5839              		.loc 1 4893 63 is_stmt 0 view .LVU1625
 5840 0088 1435     		adds	r5, r5, #20
 5841              	.LVL462:
4893:FreeRTOS/tasks.c ****                     break;
 5842              		.loc 1 4893 63 view .LVU1626
 5843 008a 44F82570 		str	r7, [r4, r5, lsl #2]
4894:FreeRTOS/tasks.c **** 
 5844              		.loc 1 4894 21 is_stmt 1 view .LVU1627
4864:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 5845              		.loc 1 4864 20 is_stmt 0 view .LVU1628
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 227


 5846 008e 0125     		movs	r5, #1
 5847              	.LVL463:
4894:FreeRTOS/tasks.c **** 
 5848              		.loc 1 4894 21 view .LVU1629
 5849 0090 14E0     		b	.L445
 5850              	.LVL464:
 5851              	.L440:
4898:FreeRTOS/tasks.c ****                     {
 5852              		.loc 1 4898 21 is_stmt 1 view .LVU1630
4898:FreeRTOS/tasks.c ****                     {
 5853              		.loc 1 4898 23 is_stmt 0 view .LVU1631
 5854 0092 B8F1020F 		cmp	r8, #2
 5855 0096 25D0     		beq	.L451
4900:FreeRTOS/tasks.c ****                     }
 5856              		.loc 1 4900 25 is_stmt 1 view .LVU1632
4900:FreeRTOS/tasks.c ****                     }
 5857              		.loc 1 4900 67 is_stmt 0 view .LVU1633
 5858 0098 1435     		adds	r5, r5, #20
 5859              	.LVL465:
4900:FreeRTOS/tasks.c ****                     }
 5860              		.loc 1 4900 67 view .LVU1634
 5861 009a 44F82570 		str	r7, [r4, r5, lsl #2]
4864:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 5862              		.loc 1 4864 20 view .LVU1635
 5863 009e 0125     		movs	r5, #1
 5864              	.LVL466:
4864:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 5865              		.loc 1 4864 20 view .LVU1636
 5866 00a0 0CE0     		b	.L445
 5867              	.LVL467:
 5868              	.L439:
4921:FreeRTOS/tasks.c **** 
 5869              		.loc 1 4921 21 is_stmt 1 view .LVU1637
 5870 00a2 2B4B     		ldr	r3, .L457
 5871 00a4 1B68     		ldr	r3, [r3]
 5872 00a6 FBB1     		cbz	r3, .L452
4921:FreeRTOS/tasks.c **** 
 5873              		.loc 1 4921 21 view .LVU1638
 5874              	.LBB212:
 5875              	.LBI212:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 5876              		.loc 2 193 34 view .LVU1639
 5877              	.LBB213:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 5878              		.loc 2 195 9 view .LVU1640
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5879              		.loc 2 197 9 view .LVU1641
 5880              		.syntax unified
 5881              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 5882 00a8 4FF05003 			mov r3, #80												
 5883 00ac 83F31188 		msr basepri, r3											
 5884 00b0 BFF36F8F 		isb														
 5885 00b4 BFF34F8F 		dsb														
 5886              	
 5887              	@ 0 "" 2
 5888              	.LVL468:
 5889              		.thumb
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 228


 5890              		.syntax unified
 5891              	.L446:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5892              		.loc 2 197 9 is_stmt 0 view .LVU1642
 5893              	.LBE213:
 5894              	.LBE212:
4921:FreeRTOS/tasks.c **** 
 5895              		.loc 1 4921 21 is_stmt 1 discriminator 3 view .LVU1643
4921:FreeRTOS/tasks.c **** 
 5896              		.loc 1 4921 21 discriminator 3 view .LVU1644
4921:FreeRTOS/tasks.c **** 
 5897              		.loc 1 4921 21 discriminator 3 view .LVU1645
 5898 00b8 FEE7     		b	.L446
 5899              	.L450:
4882:FreeRTOS/tasks.c ****             {
 5900              		.loc 1 4882 13 is_stmt 0 view .LVU1646
 5901 00ba 0125     		movs	r5, #1
 5902              	.LVL469:
 5903              	.L445:
4926:FreeRTOS/tasks.c **** 
 5904              		.loc 1 4926 13 is_stmt 1 view .LVU1647
 5905 00bc 2046     		mov	r0, r4
 5906 00be FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 5907              	.LVL470:
 5908 00c2 0146     		mov	r1, r0
 5909 00c4 089B     		ldr	r3, [sp, #32]
 5910 00c6 0093     		str	r3, [sp]
 5911 00c8 3346     		mov	r3, r6
 5912 00ca 3A46     		mov	r2, r7
 5913 00cc 3E20     		movs	r0, #62
 5914 00ce FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x4
 5915              	.LVL471:
4930:FreeRTOS/tasks.c ****             {
 5916              		.loc 1 4930 13 view .LVU1648
4930:FreeRTOS/tasks.c ****             {
 5917              		.loc 1 4930 15 is_stmt 0 view .LVU1649
 5918 00d2 B8F1010F 		cmp	r8, #1
 5919 00d6 09D0     		beq	.L456
 5920              	.LVL472:
 5921              	.L447:
4967:FreeRTOS/tasks.c ****             }
 5922              		.loc 1 4967 41 is_stmt 1 view .LVU1650
4970:FreeRTOS/tasks.c **** 
 5923              		.loc 1 4970 9 view .LVU1651
 5924 00d8 FFF7FEFF 		bl	vPortExitCritical
 5925              	.LVL473:
4972:FreeRTOS/tasks.c ****     }
 5926              		.loc 1 4972 9 view .LVU1652
4973:FreeRTOS/tasks.c **** 
 5927              		.loc 1 4973 5 is_stmt 0 view .LVU1653
 5928 00dc 2846     		mov	r0, r5
 5929 00de 02B0     		add	sp, sp, #8
 5930              	.LCFI54:
 5931              		.cfi_remember_state
 5932              		.cfi_def_cfa_offset 24
 5933              		@ sp needed
 5934 00e0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 229


 5935              	.LVL474:
 5936              	.L451:
 5937              	.LCFI55:
 5938              		.cfi_restore_state
4905:FreeRTOS/tasks.c ****                     }
 5939              		.loc 1 4905 33 view .LVU1654
 5940 00e4 0025     		movs	r5, #0
 5941              	.LVL475:
4905:FreeRTOS/tasks.c ****                     }
 5942              		.loc 1 4905 33 view .LVU1655
 5943 00e6 E9E7     		b	.L445
 5944              	.LVL476:
 5945              	.L452:
4864:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 5946              		.loc 1 4864 20 view .LVU1656
 5947 00e8 0125     		movs	r5, #1
 5948              	.LVL477:
4864:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 5949              		.loc 1 4864 20 view .LVU1657
 5950 00ea E7E7     		b	.L445
 5951              	.LVL478:
 5952              	.L456:
4932:FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 5953              		.loc 1 4932 17 is_stmt 1 view .LVU1658
4932:FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 5954              		.loc 1 4932 26 is_stmt 0 view .LVU1659
 5955 00ec 261D     		adds	r6, r4, #4
 5956 00ee 3046     		mov	r0, r6
 5957 00f0 FFF7FEFF 		bl	uxListRemove
 5958              	.LVL479:
4933:FreeRTOS/tasks.c **** 
 5959              		.loc 1 4933 17 is_stmt 1 view .LVU1660
 5960 00f4 2046     		mov	r0, r4
 5961 00f6 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 5962              	.LVL480:
4933:FreeRTOS/tasks.c **** 
 5963              		.loc 1 4933 17 view .LVU1661
 5964 00fa E06A     		ldr	r0, [r4, #44]
 5965 00fc 0123     		movs	r3, #1
 5966 00fe 8340     		lsls	r3, r3, r0
 5967 0100 144A     		ldr	r2, .L457+4
 5968 0102 1168     		ldr	r1, [r2]
 5969 0104 0B43     		orrs	r3, r3, r1
 5970 0106 1360     		str	r3, [r2]
4933:FreeRTOS/tasks.c **** 
 5971              		.loc 1 4933 17 view .LVU1662
 5972 0108 00EB8000 		add	r0, r0, r0, lsl #2
 5973 010c 3146     		mov	r1, r6
 5974 010e 124B     		ldr	r3, .L457+8
 5975 0110 03EB8000 		add	r0, r3, r0, lsl #2
 5976 0114 FFF7FEFF 		bl	vListInsertEnd
 5977              	.LVL481:
4933:FreeRTOS/tasks.c **** 
 5978              		.loc 1 4933 47 view .LVU1663
4936:FreeRTOS/tasks.c **** 
 5979              		.loc 1 4936 17 view .LVU1664
 5980 0118 A36A     		ldr	r3, [r4, #40]
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 230


 5981 011a 43B1     		cbz	r3, .L448
4936:FreeRTOS/tasks.c **** 
 5982              		.loc 1 4936 17 view .LVU1665
 5983              	.LBB214:
 5984              	.LBI214:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 5985              		.loc 2 193 34 view .LVU1666
 5986              	.LBB215:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 5987              		.loc 2 195 9 view .LVU1667
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5988              		.loc 2 197 9 view .LVU1668
 5989              		.syntax unified
 5990              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 5991 011c 4FF05003 			mov r3, #80												
 5992 0120 83F31188 		msr basepri, r3											
 5993 0124 BFF36F8F 		isb														
 5994 0128 BFF34F8F 		dsb														
 5995              	
 5996              	@ 0 "" 2
 5997              	.LVL482:
 5998              		.thumb
 5999              		.syntax unified
 6000              	.L449:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6001              		.loc 2 197 9 is_stmt 0 view .LVU1669
 6002              	.LBE215:
 6003              	.LBE214:
4936:FreeRTOS/tasks.c **** 
 6004              		.loc 1 4936 17 is_stmt 1 discriminator 4 view .LVU1670
4936:FreeRTOS/tasks.c **** 
 6005              		.loc 1 4936 17 discriminator 4 view .LVU1671
4936:FreeRTOS/tasks.c **** 
 6006              		.loc 1 4936 17 discriminator 4 view .LVU1672
 6007 012c FEE7     		b	.L449
 6008              	.L448:
4936:FreeRTOS/tasks.c **** 
 6009              		.loc 1 4936 94 discriminator 2 view .LVU1673
4954:FreeRTOS/tasks.c ****                 {
 6010              		.loc 1 4954 17 discriminator 2 view .LVU1674
4954:FreeRTOS/tasks.c ****                 {
 6011              		.loc 1 4954 26 is_stmt 0 discriminator 2 view .LVU1675
 6012 012e E26A     		ldr	r2, [r4, #44]
4954:FreeRTOS/tasks.c ****                 {
 6013              		.loc 1 4954 53 discriminator 2 view .LVU1676
 6014 0130 0A4B     		ldr	r3, .L457+12
 6015 0132 1B68     		ldr	r3, [r3]
 6016 0134 DB6A     		ldr	r3, [r3, #44]
4954:FreeRTOS/tasks.c ****                 {
 6017              		.loc 1 4954 19 discriminator 2 view .LVU1677
 6018 0136 9A42     		cmp	r2, r3
 6019 0138 CED9     		bls	.L447
4958:FreeRTOS/tasks.c ****                 }
 6020              		.loc 1 4958 21 is_stmt 1 view .LVU1678
 6021 013a 4FF0E023 		mov	r3, #-536813568
 6022 013e 4FF08052 		mov	r2, #268435456
 6023 0142 C3F8042D 		str	r2, [r3, #3332]
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 231


 6024              	.LVL483:
4958:FreeRTOS/tasks.c ****                 }
 6025              		.loc 1 4958 21 view .LVU1679
 6026              		.syntax unified
 6027              	@ 4958 "FreeRTOS/tasks.c" 1
 6028 0146 BFF34F8F 		dsb
 6029              	@ 0 "" 2
4958:FreeRTOS/tasks.c ****                 }
 6030              		.loc 1 4958 21 view .LVU1680
 6031              	@ 4958 "FreeRTOS/tasks.c" 1
 6032 014a BFF36F8F 		isb
 6033              	@ 0 "" 2
4958:FreeRTOS/tasks.c ****                 }
 6034              		.loc 1 4958 52 view .LVU1681
 6035              		.thumb
 6036              		.syntax unified
 6037 014e C3E7     		b	.L447
 6038              	.L458:
 6039              		.align	2
 6040              	.L457:
 6041 0150 00000000 		.word	.LANCHOR13
 6042 0154 00000000 		.word	.LANCHOR12
 6043 0158 00000000 		.word	.LANCHOR2
 6044 015c 00000000 		.word	.LANCHOR9
 6045              		.cfi_endproc
 6046              	.LFE53:
 6048              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 6049              		.align	1
 6050              		.global	xTaskGenericNotifyFromISR
 6051              		.syntax unified
 6052              		.thumb
 6053              		.thumb_func
 6055              	xTaskGenericNotifyFromISR:
 6056              	.LVL484:
 6057              	.LFB54:
4986:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6058              		.loc 1 4986 5 view -0
 6059              		.cfi_startproc
 6060              		@ args = 8, pretend = 0, frame = 0
 6061              		@ frame_needed = 0, uses_anonymous_args = 0
4987:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 6062              		.loc 1 4987 9 view .LVU1683
4988:FreeRTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
 6063              		.loc 1 4988 9 view .LVU1684
4989:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 6064              		.loc 1 4989 9 view .LVU1685
4990:FreeRTOS/tasks.c **** 
 6065              		.loc 1 4990 9 view .LVU1686
4992:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6066              		.loc 1 4992 9 view .LVU1687
 6067 0000 80B1     		cbz	r0, .L484
4986:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6068              		.loc 1 4986 5 is_stmt 0 discriminator 2 view .LVU1688
 6069 0002 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 6070              	.LCFI56:
 6071              		.cfi_def_cfa_offset 28
 6072              		.cfi_offset 4, -28
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 232


 6073              		.cfi_offset 5, -24
 6074              		.cfi_offset 6, -20
 6075              		.cfi_offset 7, -16
 6076              		.cfi_offset 8, -12
 6077              		.cfi_offset 9, -8
 6078              		.cfi_offset 14, -4
 6079 0006 83B0     		sub	sp, sp, #12
 6080              	.LCFI57:
 6081              		.cfi_def_cfa_offset 40
 6082 0008 0C46     		mov	r4, r1
 6083 000a 1746     		mov	r7, r2
 6084 000c 1E46     		mov	r6, r3
 6085 000e 0546     		mov	r5, r0
4992:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6086              		.loc 1 4992 38 is_stmt 1 discriminator 2 view .LVU1689
4993:FreeRTOS/tasks.c **** 
 6087              		.loc 1 4993 9 discriminator 2 view .LVU1690
 6088 0010 89B1     		cbz	r1, .L462
4993:FreeRTOS/tasks.c **** 
 6089              		.loc 1 4993 9 view .LVU1691
 6090              	.LBB216:
 6091              	.LBI216:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 6092              		.loc 2 193 34 view .LVU1692
 6093              	.LBB217:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 6094              		.loc 2 195 9 view .LVU1693
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6095              		.loc 2 197 9 view .LVU1694
 6096              		.syntax unified
 6097              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6098 0012 4FF05003 			mov r3, #80												
 6099 0016 83F31188 		msr basepri, r3											
 6100 001a BFF36F8F 		isb														
 6101 001e BFF34F8F 		dsb														
 6102              	
 6103              	@ 0 "" 2
 6104              	.LVL485:
 6105              		.thumb
 6106              		.syntax unified
 6107              	.L463:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6108              		.loc 2 197 9 is_stmt 0 view .LVU1695
 6109              	.LBE217:
 6110              	.LBE216:
4993:FreeRTOS/tasks.c **** 
 6111              		.loc 1 4993 9 is_stmt 1 discriminator 2 view .LVU1696
4993:FreeRTOS/tasks.c **** 
 6112              		.loc 1 4993 9 discriminator 2 view .LVU1697
4993:FreeRTOS/tasks.c **** 
 6113              		.loc 1 4993 9 discriminator 2 view .LVU1698
 6114 0022 FEE7     		b	.L463
 6115              	.LVL486:
 6116              	.L484:
 6117              	.LCFI58:
 6118              		.cfi_def_cfa_offset 0
 6119              		.cfi_restore 4
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 233


 6120              		.cfi_restore 5
 6121              		.cfi_restore 6
 6122              		.cfi_restore 7
 6123              		.cfi_restore 8
 6124              		.cfi_restore 9
 6125              		.cfi_restore 14
4992:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6126              		.loc 1 4992 9 view .LVU1699
 6127              	.LBB218:
 6128              	.LBI218:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 6129              		.loc 2 193 34 view .LVU1700
 6130              	.LBB219:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 6131              		.loc 2 195 9 view .LVU1701
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6132              		.loc 2 197 9 view .LVU1702
 6133              		.syntax unified
 6134              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6135 0024 4FF05003 			mov r3, #80												
 6136 0028 83F31188 		msr basepri, r3											
 6137 002c BFF36F8F 		isb														
 6138 0030 BFF34F8F 		dsb														
 6139              	
 6140              	@ 0 "" 2
 6141              	.LVL487:
 6142              		.thumb
 6143              		.syntax unified
 6144              	.L461:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6145              		.loc 2 197 9 is_stmt 0 view .LVU1703
 6146              	.LBE219:
 6147              	.LBE218:
4992:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6148              		.loc 1 4992 9 is_stmt 1 discriminator 1 view .LVU1704
4992:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6149              		.loc 1 4992 9 discriminator 1 view .LVU1705
4992:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6150              		.loc 1 4992 9 discriminator 1 view .LVU1706
 6151 0034 FEE7     		b	.L461
 6152              	.LVL488:
 6153              	.L462:
 6154              	.LCFI59:
 6155              		.cfi_def_cfa_offset 40
 6156              		.cfi_offset 4, -28
 6157              		.cfi_offset 5, -24
 6158              		.cfi_offset 6, -20
 6159              		.cfi_offset 7, -16
 6160              		.cfi_offset 8, -12
 6161              		.cfi_offset 9, -8
 6162              		.cfi_offset 14, -4
4993:FreeRTOS/tasks.c **** 
 6163              		.loc 1 4993 80 discriminator 2 view .LVU1707
5011:FreeRTOS/tasks.c **** 
 6164              		.loc 1 5011 9 discriminator 2 view .LVU1708
 6165 0036 FFF7FEFF 		bl	vPortValidateInterruptPriority
 6166              	.LVL489:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 234


5013:FreeRTOS/tasks.c **** 
 6167              		.loc 1 5013 9 discriminator 2 view .LVU1709
5015:FreeRTOS/tasks.c ****         {
 6168              		.loc 1 5015 9 discriminator 2 view .LVU1710
 6169              	.LBB220:
 6170              	.LBI220:
 209:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 6171              		.loc 2 209 38 discriminator 2 view .LVU1711
 6172              	.LBB221:
 211:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 6173              		.loc 2 211 9 discriminator 2 view .LVU1712
 213:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6174              		.loc 2 213 9 discriminator 2 view .LVU1713
 6175              		.syntax unified
 6176              	@ 213 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6177 003a EFF31189 			mrs r9, basepri											
 6178 003e 4FF05003 		mov r3, #80												
 6179 0042 83F31188 		msr basepri, r3											
 6180 0046 BFF36F8F 		isb														
 6181 004a BFF34F8F 		dsb														
 6182              	
 6183              	@ 0 "" 2
 6184              	.LVL490:
 225:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 6185              		.loc 2 225 9 discriminator 2 view .LVU1714
 225:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 6186              		.loc 2 225 9 is_stmt 0 discriminator 2 view .LVU1715
 6187              		.thumb
 6188              		.syntax unified
 6189              	.LBE221:
 6190              	.LBE220:
5017:FreeRTOS/tasks.c ****             {
 6191              		.loc 1 5017 13 is_stmt 1 discriminator 2 view .LVU1716
5017:FreeRTOS/tasks.c ****             {
 6192              		.loc 1 5017 15 is_stmt 0 discriminator 2 view .LVU1717
 6193 004e 0A9B     		ldr	r3, [sp, #40]
 6194 0050 2BB1     		cbz	r3, .L464
5019:FreeRTOS/tasks.c ****             }
 6195              		.loc 1 5019 17 is_stmt 1 view .LVU1718
5019:FreeRTOS/tasks.c ****             }
 6196              		.loc 1 5019 71 is_stmt 0 view .LVU1719
 6197 0052 04F11403 		add	r3, r4, #20
 6198 0056 55F82330 		ldr	r3, [r5, r3, lsl #2]
5019:FreeRTOS/tasks.c ****             }
 6199              		.loc 1 5019 47 view .LVU1720
 6200 005a 0A9A     		ldr	r2, [sp, #40]
 6201 005c 1360     		str	r3, [r2]
 6202              	.L464:
5022:FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 6203              		.loc 1 5022 13 is_stmt 1 view .LVU1721
5022:FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 6204              		.loc 1 5022 35 is_stmt 0 view .LVU1722
 6205 005e 2B19     		adds	r3, r5, r4
 6206 0060 93F85480 		ldrb	r8, [r3, #84]	@ zero_extendqisi2
 6207 0064 5FFA88F8 		uxtb	r8, r8
 6208              	.LVL491:
5023:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 235


 6209              		.loc 1 5023 13 is_stmt 1 view .LVU1723
5023:FreeRTOS/tasks.c **** 
 6210              		.loc 1 5023 53 is_stmt 0 view .LVU1724
 6211 0068 0222     		movs	r2, #2
 6212 006a 83F85420 		strb	r2, [r3, #84]
5025:FreeRTOS/tasks.c ****             {
 6213              		.loc 1 5025 13 is_stmt 1 view .LVU1725
 6214 006e 042E     		cmp	r6, #4
 6215 0070 21D8     		bhi	.L465
 6216 0072 DFE806F0 		tbb	[pc, r6]
 6217              	.L467:
 6218 0076 2C       		.byte	(.L479-.L467)/2
 6219 0077 03       		.byte	(.L470-.L467)/2
 6220 0078 0B       		.byte	(.L469-.L467)/2
 6221 0079 13       		.byte	(.L468-.L467)/2
 6222 007a 18       		.byte	(.L466-.L467)/2
 6223 007b 00       		.p2align 1
 6224              	.L470:
5028:FreeRTOS/tasks.c ****                     break;
 6225              		.loc 1 5028 21 view .LVU1726
5028:FreeRTOS/tasks.c ****                     break;
 6226              		.loc 1 5028 63 is_stmt 0 view .LVU1727
 6227 007c 1434     		adds	r4, r4, #20
 6228              	.LVL492:
5028:FreeRTOS/tasks.c ****                     break;
 6229              		.loc 1 5028 63 view .LVU1728
 6230 007e 55F82430 		ldr	r3, [r5, r4, lsl #2]
 6231 0082 3B43     		orrs	r3, r3, r7
 6232 0084 45F82430 		str	r3, [r5, r4, lsl #2]
5029:FreeRTOS/tasks.c **** 
 6233              		.loc 1 5029 21 is_stmt 1 view .LVU1729
4989:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 6234              		.loc 1 4989 20 is_stmt 0 view .LVU1730
 6235 0088 0124     		movs	r4, #1
 6236              	.LVL493:
5029:FreeRTOS/tasks.c **** 
 6237              		.loc 1 5029 21 view .LVU1731
 6238 008a 21E0     		b	.L471
 6239              	.LVL494:
 6240              	.L469:
5032:FreeRTOS/tasks.c ****                     break;
 6241              		.loc 1 5032 21 is_stmt 1 view .LVU1732
5032:FreeRTOS/tasks.c ****                     break;
 6242              		.loc 1 5032 45 is_stmt 0 view .LVU1733
 6243 008c 1434     		adds	r4, r4, #20
 6244              	.LVL495:
5032:FreeRTOS/tasks.c ****                     break;
 6245              		.loc 1 5032 45 view .LVU1734
 6246 008e 55F82430 		ldr	r3, [r5, r4, lsl #2]
5032:FreeRTOS/tasks.c ****                     break;
 6247              		.loc 1 5032 66 view .LVU1735
 6248 0092 0133     		adds	r3, r3, #1
 6249 0094 45F82430 		str	r3, [r5, r4, lsl #2]
5033:FreeRTOS/tasks.c **** 
 6250              		.loc 1 5033 21 is_stmt 1 view .LVU1736
4989:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 6251              		.loc 1 4989 20 is_stmt 0 view .LVU1737
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 236


 6252 0098 0124     		movs	r4, #1
 6253              	.LVL496:
5033:FreeRTOS/tasks.c **** 
 6254              		.loc 1 5033 21 view .LVU1738
 6255 009a 19E0     		b	.L471
 6256              	.LVL497:
 6257              	.L468:
5036:FreeRTOS/tasks.c ****                     break;
 6258              		.loc 1 5036 21 is_stmt 1 view .LVU1739
5036:FreeRTOS/tasks.c ****                     break;
 6259              		.loc 1 5036 63 is_stmt 0 view .LVU1740
 6260 009c 1434     		adds	r4, r4, #20
 6261              	.LVL498:
5036:FreeRTOS/tasks.c ****                     break;
 6262              		.loc 1 5036 63 view .LVU1741
 6263 009e 45F82470 		str	r7, [r5, r4, lsl #2]
5037:FreeRTOS/tasks.c **** 
 6264              		.loc 1 5037 21 is_stmt 1 view .LVU1742
4989:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 6265              		.loc 1 4989 20 is_stmt 0 view .LVU1743
 6266 00a2 0124     		movs	r4, #1
 6267              	.LVL499:
5037:FreeRTOS/tasks.c **** 
 6268              		.loc 1 5037 21 view .LVU1744
 6269 00a4 14E0     		b	.L471
 6270              	.LVL500:
 6271              	.L466:
5041:FreeRTOS/tasks.c ****                     {
 6272              		.loc 1 5041 21 is_stmt 1 view .LVU1745
5041:FreeRTOS/tasks.c ****                     {
 6273              		.loc 1 5041 23 is_stmt 0 view .LVU1746
 6274 00a6 B8F1020F 		cmp	r8, #2
 6275 00aa 27D0     		beq	.L480
5043:FreeRTOS/tasks.c ****                     }
 6276              		.loc 1 5043 25 is_stmt 1 view .LVU1747
5043:FreeRTOS/tasks.c ****                     }
 6277              		.loc 1 5043 67 is_stmt 0 view .LVU1748
 6278 00ac 1434     		adds	r4, r4, #20
 6279              	.LVL501:
5043:FreeRTOS/tasks.c ****                     }
 6280              		.loc 1 5043 67 view .LVU1749
 6281 00ae 45F82470 		str	r7, [r5, r4, lsl #2]
4989:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 6282              		.loc 1 4989 20 view .LVU1750
 6283 00b2 0124     		movs	r4, #1
 6284              	.LVL502:
4989:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 6285              		.loc 1 4989 20 view .LVU1751
 6286 00b4 0CE0     		b	.L471
 6287              	.LVL503:
 6288              	.L465:
5064:FreeRTOS/tasks.c ****                     break;
 6289              		.loc 1 5064 21 is_stmt 1 view .LVU1752
 6290 00b6 304B     		ldr	r3, .L486
 6291 00b8 1B68     		ldr	r3, [r3]
 6292 00ba 0BB3     		cbz	r3, .L481
5064:FreeRTOS/tasks.c ****                     break;
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 237


 6293              		.loc 1 5064 21 view .LVU1753
 6294              	.LBB222:
 6295              	.LBI222:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 6296              		.loc 2 193 34 view .LVU1754
 6297              	.LBB223:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 6298              		.loc 2 195 9 view .LVU1755
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6299              		.loc 2 197 9 view .LVU1756
 6300              		.syntax unified
 6301              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6302 00bc 4FF05003 			mov r3, #80												
 6303 00c0 83F31188 		msr basepri, r3											
 6304 00c4 BFF36F8F 		isb														
 6305 00c8 BFF34F8F 		dsb														
 6306              	
 6307              	@ 0 "" 2
 6308              	.LVL504:
 6309              		.thumb
 6310              		.syntax unified
 6311              	.L472:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6312              		.loc 2 197 9 is_stmt 0 view .LVU1757
 6313              	.LBE223:
 6314              	.LBE222:
5064:FreeRTOS/tasks.c ****                     break;
 6315              		.loc 1 5064 21 is_stmt 1 discriminator 3 view .LVU1758
5064:FreeRTOS/tasks.c ****                     break;
 6316              		.loc 1 5064 21 discriminator 3 view .LVU1759
5064:FreeRTOS/tasks.c ****                     break;
 6317              		.loc 1 5064 21 discriminator 3 view .LVU1760
 6318 00cc FEE7     		b	.L472
 6319              	.L479:
5025:FreeRTOS/tasks.c ****             {
 6320              		.loc 1 5025 13 is_stmt 0 view .LVU1761
 6321 00ce 0124     		movs	r4, #1
 6322              	.LVL505:
 6323              	.L471:
5068:FreeRTOS/tasks.c **** 
 6324              		.loc 1 5068 13 is_stmt 1 view .LVU1762
 6325 00d0 2846     		mov	r0, r5
 6326 00d2 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 6327              	.LVL506:
 6328 00d6 0146     		mov	r1, r0
 6329 00d8 0B9B     		ldr	r3, [sp, #44]
 6330 00da 0193     		str	r3, [sp, #4]
 6331 00dc 0A9B     		ldr	r3, [sp, #40]
 6332 00de 0093     		str	r3, [sp]
 6333 00e0 3346     		mov	r3, r6
 6334 00e2 3A46     		mov	r2, r7
 6335 00e4 3F20     		movs	r0, #63
 6336 00e6 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x5
 6337              	.LVL507:
5072:FreeRTOS/tasks.c ****             {
 6338              		.loc 1 5072 13 view .LVU1763
5072:FreeRTOS/tasks.c ****             {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 238


 6339              		.loc 1 5072 15 is_stmt 0 view .LVU1764
 6340 00ea B8F1010F 		cmp	r8, #1
 6341 00ee 09D0     		beq	.L485
 6342              	.L473:
5105:FreeRTOS/tasks.c ****                 }
 6343              		.loc 1 5105 45 is_stmt 1 view .LVU1765
5109:FreeRTOS/tasks.c **** 
 6344              		.loc 1 5109 9 view .LVU1766
 6345              	.LVL508:
 6346              	.LBB224:
 6347              	.LBI224:
 229:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 6348              		.loc 2 229 34 view .LVU1767
 6349              	.LBB225:
 6350              		.loc 2 231 9 view .LVU1768
 6351              		.syntax unified
 6352              	@ 231 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6353 00f0 89F31188 			msr basepri, r9	
 6354              	@ 0 "" 2
 6355              	.LVL509:
 6356              		.loc 2 231 9 is_stmt 0 view .LVU1769
 6357              		.thumb
 6358              		.syntax unified
 6359              	.LBE225:
 6360              	.LBE224:
5111:FreeRTOS/tasks.c ****     }
 6361              		.loc 1 5111 9 is_stmt 1 view .LVU1770
5112:FreeRTOS/tasks.c **** 
 6362              		.loc 1 5112 5 is_stmt 0 view .LVU1771
 6363 00f4 2046     		mov	r0, r4
 6364 00f6 03B0     		add	sp, sp, #12
 6365              	.LCFI60:
 6366              		.cfi_remember_state
 6367              		.cfi_def_cfa_offset 28
 6368              		@ sp needed
 6369 00f8 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 6370              	.LVL510:
 6371              	.L480:
 6372              	.LCFI61:
 6373              		.cfi_restore_state
5048:FreeRTOS/tasks.c ****                     }
 6374              		.loc 1 5048 33 view .LVU1772
 6375 00fc 0024     		movs	r4, #0
 6376              	.LVL511:
5048:FreeRTOS/tasks.c ****                     }
 6377              		.loc 1 5048 33 view .LVU1773
 6378 00fe E7E7     		b	.L471
 6379              	.LVL512:
 6380              	.L481:
4989:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 6381              		.loc 1 4989 20 view .LVU1774
 6382 0100 0124     		movs	r4, #1
 6383              	.LVL513:
4989:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 6384              		.loc 1 4989 20 view .LVU1775
 6385 0102 E5E7     		b	.L471
 6386              	.LVL514:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 239


 6387              	.L485:
5075:FreeRTOS/tasks.c **** 
 6388              		.loc 1 5075 17 is_stmt 1 view .LVU1776
 6389 0104 AB6A     		ldr	r3, [r5, #40]
 6390 0106 43B1     		cbz	r3, .L474
5075:FreeRTOS/tasks.c **** 
 6391              		.loc 1 5075 17 view .LVU1777
 6392              	.LBB226:
 6393              	.LBI226:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 6394              		.loc 2 193 34 view .LVU1778
 6395              	.LBB227:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 6396              		.loc 2 195 9 view .LVU1779
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6397              		.loc 2 197 9 view .LVU1780
 6398              		.syntax unified
 6399              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6400 0108 4FF05003 			mov r3, #80												
 6401 010c 83F31188 		msr basepri, r3											
 6402 0110 BFF36F8F 		isb														
 6403 0114 BFF34F8F 		dsb														
 6404              	
 6405              	@ 0 "" 2
 6406              	.LVL515:
 6407              		.thumb
 6408              		.syntax unified
 6409              	.L475:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6410              		.loc 2 197 9 is_stmt 0 view .LVU1781
 6411              	.LBE227:
 6412              	.LBE226:
5075:FreeRTOS/tasks.c **** 
 6413              		.loc 1 5075 17 is_stmt 1 discriminator 4 view .LVU1782
5075:FreeRTOS/tasks.c **** 
 6414              		.loc 1 5075 17 discriminator 4 view .LVU1783
5075:FreeRTOS/tasks.c **** 
 6415              		.loc 1 5075 17 discriminator 4 view .LVU1784
 6416 0118 FEE7     		b	.L475
 6417              	.L474:
5075:FreeRTOS/tasks.c **** 
 6418              		.loc 1 5075 94 discriminator 2 view .LVU1785
5077:FreeRTOS/tasks.c ****                 {
 6419              		.loc 1 5077 17 discriminator 2 view .LVU1786
5077:FreeRTOS/tasks.c ****                 {
 6420              		.loc 1 5077 42 is_stmt 0 discriminator 2 view .LVU1787
 6421 011a 184B     		ldr	r3, .L486+4
 6422 011c 1B68     		ldr	r3, [r3]
5077:FreeRTOS/tasks.c ****                 {
 6423              		.loc 1 5077 19 discriminator 2 view .LVU1788
 6424 011e 23BB     		cbnz	r3, .L476
5079:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6425              		.loc 1 5079 21 is_stmt 1 view .LVU1789
5079:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6426              		.loc 1 5079 30 is_stmt 0 view .LVU1790
 6427 0120 2E1D     		adds	r6, r5, #4
 6428 0122 3046     		mov	r0, r6
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 240


 6429 0124 FFF7FEFF 		bl	uxListRemove
 6430              	.LVL516:
5080:FreeRTOS/tasks.c ****                 }
 6431              		.loc 1 5080 21 is_stmt 1 view .LVU1791
 6432 0128 2846     		mov	r0, r5
 6433 012a FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 6434              	.LVL517:
5080:FreeRTOS/tasks.c ****                 }
 6435              		.loc 1 5080 21 view .LVU1792
 6436 012e E86A     		ldr	r0, [r5, #44]
 6437 0130 0123     		movs	r3, #1
 6438 0132 8340     		lsls	r3, r3, r0
 6439 0134 124A     		ldr	r2, .L486+8
 6440 0136 1168     		ldr	r1, [r2]
 6441 0138 0B43     		orrs	r3, r3, r1
 6442 013a 1360     		str	r3, [r2]
5080:FreeRTOS/tasks.c ****                 }
 6443              		.loc 1 5080 21 view .LVU1793
 6444 013c 00EB8000 		add	r0, r0, r0, lsl #2
 6445 0140 3146     		mov	r1, r6
 6446 0142 104B     		ldr	r3, .L486+12
 6447 0144 03EB8000 		add	r0, r3, r0, lsl #2
 6448 0148 FFF7FEFF 		bl	vListInsertEnd
 6449              	.LVL518:
5080:FreeRTOS/tasks.c ****                 }
 6450              		.loc 1 5080 51 view .LVU1794
 6451              	.L477:
5089:FreeRTOS/tasks.c ****                 {
 6452              		.loc 1 5089 17 view .LVU1795
5089:FreeRTOS/tasks.c ****                 {
 6453              		.loc 1 5089 26 is_stmt 0 view .LVU1796
 6454 014c EA6A     		ldr	r2, [r5, #44]
5089:FreeRTOS/tasks.c ****                 {
 6455              		.loc 1 5089 53 view .LVU1797
 6456 014e 0E4B     		ldr	r3, .L486+16
 6457 0150 1B68     		ldr	r3, [r3]
 6458 0152 DB6A     		ldr	r3, [r3, #44]
5089:FreeRTOS/tasks.c ****                 {
 6459              		.loc 1 5089 19 view .LVU1798
 6460 0154 9A42     		cmp	r2, r3
 6461 0156 CBD9     		bls	.L473
5093:FreeRTOS/tasks.c ****                     {
 6462              		.loc 1 5093 21 is_stmt 1 view .LVU1799
5093:FreeRTOS/tasks.c ****                     {
 6463              		.loc 1 5093 23 is_stmt 0 view .LVU1800
 6464 0158 0B9B     		ldr	r3, [sp, #44]
 6465 015a 13B1     		cbz	r3, .L478
5095:FreeRTOS/tasks.c ****                     }
 6466              		.loc 1 5095 25 is_stmt 1 view .LVU1801
5095:FreeRTOS/tasks.c ****                     }
 6467              		.loc 1 5095 52 is_stmt 0 view .LVU1802
 6468 015c 0123     		movs	r3, #1
 6469 015e 0B9A     		ldr	r2, [sp, #44]
 6470 0160 1360     		str	r3, [r2]
 6471              	.L478:
5101:FreeRTOS/tasks.c ****                 }
 6472              		.loc 1 5101 21 is_stmt 1 view .LVU1803
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 241


5101:FreeRTOS/tasks.c ****                 }
 6473              		.loc 1 5101 35 is_stmt 0 view .LVU1804
 6474 0162 0A4B     		ldr	r3, .L486+20
 6475 0164 0122     		movs	r2, #1
 6476 0166 1A60     		str	r2, [r3]
 6477 0168 C2E7     		b	.L473
 6478              	.L476:
5086:FreeRTOS/tasks.c ****                 }
 6479              		.loc 1 5086 21 is_stmt 1 view .LVU1805
 6480 016a 05F11801 		add	r1, r5, #24
 6481 016e 0848     		ldr	r0, .L486+24
 6482 0170 FFF7FEFF 		bl	vListInsertEnd
 6483              	.LVL519:
 6484 0174 EAE7     		b	.L477
 6485              	.L487:
 6486 0176 00BF     		.align	2
 6487              	.L486:
 6488 0178 00000000 		.word	.LANCHOR13
 6489 017c 00000000 		.word	.LANCHOR14
 6490 0180 00000000 		.word	.LANCHOR12
 6491 0184 00000000 		.word	.LANCHOR2
 6492 0188 00000000 		.word	.LANCHOR9
 6493 018c 00000000 		.word	.LANCHOR15
 6494 0190 00000000 		.word	.LANCHOR1
 6495              		.cfi_endproc
 6496              	.LFE54:
 6498              		.section	.text.vTaskGenericNotifyGiveFromISR,"ax",%progbits
 6499              		.align	1
 6500              		.global	vTaskGenericNotifyGiveFromISR
 6501              		.syntax unified
 6502              		.thumb
 6503              		.thumb_func
 6505              	vTaskGenericNotifyGiveFromISR:
 6506              	.LVL520:
 6507              	.LFB55:
5122:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6508              		.loc 1 5122 5 view -0
 6509              		.cfi_startproc
 6510              		@ args = 0, pretend = 0, frame = 0
 6511              		@ frame_needed = 0, uses_anonymous_args = 0
5123:FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 6512              		.loc 1 5123 9 view .LVU1807
5124:FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 6513              		.loc 1 5124 9 view .LVU1808
5125:FreeRTOS/tasks.c **** 
 6514              		.loc 1 5125 9 view .LVU1809
5127:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6515              		.loc 1 5127 9 view .LVU1810
 6516 0000 70B1     		cbz	r0, .L501
5122:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6517              		.loc 1 5122 5 is_stmt 0 discriminator 2 view .LVU1811
 6518 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 6519              	.LCFI62:
 6520              		.cfi_def_cfa_offset 24
 6521              		.cfi_offset 4, -24
 6522              		.cfi_offset 5, -20
 6523              		.cfi_offset 6, -16
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 242


 6524              		.cfi_offset 7, -12
 6525              		.cfi_offset 8, -8
 6526              		.cfi_offset 14, -4
 6527 0006 0C46     		mov	r4, r1
 6528 0008 1546     		mov	r5, r2
 6529 000a 0646     		mov	r6, r0
5127:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6530              		.loc 1 5127 38 is_stmt 1 discriminator 2 view .LVU1812
5128:FreeRTOS/tasks.c **** 
 6531              		.loc 1 5128 9 discriminator 2 view .LVU1813
 6532 000c 89B1     		cbz	r1, .L491
5128:FreeRTOS/tasks.c **** 
 6533              		.loc 1 5128 9 view .LVU1814
 6534              	.LBB228:
 6535              	.LBI228:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 6536              		.loc 2 193 34 view .LVU1815
 6537              	.LBB229:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 6538              		.loc 2 195 9 view .LVU1816
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6539              		.loc 2 197 9 view .LVU1817
 6540              		.syntax unified
 6541              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6542 000e 4FF05003 			mov r3, #80												
 6543 0012 83F31188 		msr basepri, r3											
 6544 0016 BFF36F8F 		isb														
 6545 001a BFF34F8F 		dsb														
 6546              	
 6547              	@ 0 "" 2
 6548              	.LVL521:
 6549              		.thumb
 6550              		.syntax unified
 6551              	.L492:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6552              		.loc 2 197 9 is_stmt 0 view .LVU1818
 6553              	.LBE229:
 6554              	.LBE228:
5128:FreeRTOS/tasks.c **** 
 6555              		.loc 1 5128 9 is_stmt 1 discriminator 2 view .LVU1819
5128:FreeRTOS/tasks.c **** 
 6556              		.loc 1 5128 9 discriminator 2 view .LVU1820
5128:FreeRTOS/tasks.c **** 
 6557              		.loc 1 5128 9 discriminator 2 view .LVU1821
 6558 001e FEE7     		b	.L492
 6559              	.L501:
 6560              	.LCFI63:
 6561              		.cfi_def_cfa_offset 0
 6562              		.cfi_restore 4
 6563              		.cfi_restore 5
 6564              		.cfi_restore 6
 6565              		.cfi_restore 7
 6566              		.cfi_restore 8
 6567              		.cfi_restore 14
5127:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6568              		.loc 1 5127 9 view .LVU1822
 6569              	.LBB230:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 243


 6570              	.LBI230:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 6571              		.loc 2 193 34 view .LVU1823
 6572              	.LBB231:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 6573              		.loc 2 195 9 view .LVU1824
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6574              		.loc 2 197 9 view .LVU1825
 6575              		.syntax unified
 6576              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6577 0020 4FF05003 			mov r3, #80												
 6578 0024 83F31188 		msr basepri, r3											
 6579 0028 BFF36F8F 		isb														
 6580 002c BFF34F8F 		dsb														
 6581              	
 6582              	@ 0 "" 2
 6583              	.LVL522:
 6584              		.thumb
 6585              		.syntax unified
 6586              	.L490:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6587              		.loc 2 197 9 is_stmt 0 view .LVU1826
 6588              	.LBE231:
 6589              	.LBE230:
5127:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6590              		.loc 1 5127 9 is_stmt 1 discriminator 1 view .LVU1827
5127:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6591              		.loc 1 5127 9 discriminator 1 view .LVU1828
5127:FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6592              		.loc 1 5127 9 discriminator 1 view .LVU1829
 6593 0030 FEE7     		b	.L490
 6594              	.L491:
 6595              	.LCFI64:
 6596              		.cfi_def_cfa_offset 24
 6597              		.cfi_offset 4, -24
 6598              		.cfi_offset 5, -20
 6599              		.cfi_offset 6, -16
 6600              		.cfi_offset 7, -12
 6601              		.cfi_offset 8, -8
 6602              		.cfi_offset 14, -4
5128:FreeRTOS/tasks.c **** 
 6603              		.loc 1 5128 80 discriminator 2 view .LVU1830
5146:FreeRTOS/tasks.c **** 
 6604              		.loc 1 5146 9 discriminator 2 view .LVU1831
 6605 0032 FFF7FEFF 		bl	vPortValidateInterruptPriority
 6606              	.LVL523:
5148:FreeRTOS/tasks.c **** 
 6607              		.loc 1 5148 9 discriminator 2 view .LVU1832
5150:FreeRTOS/tasks.c ****         {
 6608              		.loc 1 5150 9 discriminator 2 view .LVU1833
 6609              	.LBB232:
 6610              	.LBI232:
 209:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 6611              		.loc 2 209 38 discriminator 2 view .LVU1834
 6612              	.LBB233:
 211:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 6613              		.loc 2 211 9 discriminator 2 view .LVU1835
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 244


 213:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6614              		.loc 2 213 9 discriminator 2 view .LVU1836
 6615              		.syntax unified
 6616              	@ 213 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6617 0036 EFF31188 			mrs r8, basepri											
 6618 003a 4FF05003 		mov r3, #80												
 6619 003e 83F31188 		msr basepri, r3											
 6620 0042 BFF36F8F 		isb														
 6621 0046 BFF34F8F 		dsb														
 6622              	
 6623              	@ 0 "" 2
 6624              	.LVL524:
 225:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 6625              		.loc 2 225 9 discriminator 2 view .LVU1837
 225:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 6626              		.loc 2 225 9 is_stmt 0 discriminator 2 view .LVU1838
 6627              		.thumb
 6628              		.syntax unified
 6629              	.LBE233:
 6630              	.LBE232:
5152:FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 6631              		.loc 1 5152 13 is_stmt 1 discriminator 2 view .LVU1839
5152:FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 6632              		.loc 1 5152 35 is_stmt 0 discriminator 2 view .LVU1840
 6633 004a 3319     		adds	r3, r6, r4
 6634 004c 93F85470 		ldrb	r7, [r3, #84]	@ zero_extendqisi2
 6635 0050 FFB2     		uxtb	r7, r7
 6636              	.LVL525:
5153:FreeRTOS/tasks.c **** 
 6637              		.loc 1 5153 13 is_stmt 1 discriminator 2 view .LVU1841
5153:FreeRTOS/tasks.c **** 
 6638              		.loc 1 5153 53 is_stmt 0 discriminator 2 view .LVU1842
 6639 0052 0222     		movs	r2, #2
 6640 0054 83F85420 		strb	r2, [r3, #84]
5157:FreeRTOS/tasks.c **** 
 6641              		.loc 1 5157 13 is_stmt 1 discriminator 2 view .LVU1843
5157:FreeRTOS/tasks.c **** 
 6642              		.loc 1 5157 37 is_stmt 0 discriminator 2 view .LVU1844
 6643 0058 1434     		adds	r4, r4, #20
 6644              	.LVL526:
5157:FreeRTOS/tasks.c **** 
 6645              		.loc 1 5157 37 discriminator 2 view .LVU1845
 6646 005a 56F82430 		ldr	r3, [r6, r4, lsl #2]
5157:FreeRTOS/tasks.c **** 
 6647              		.loc 1 5157 58 discriminator 2 view .LVU1846
 6648 005e 0133     		adds	r3, r3, #1
 6649 0060 46F82430 		str	r3, [r6, r4, lsl #2]
5159:FreeRTOS/tasks.c **** 
 6650              		.loc 1 5159 13 is_stmt 1 discriminator 2 view .LVU1847
 6651 0064 3046     		mov	r0, r6
 6652 0066 FFF7FEFF 		bl	SEGGER_SYSVIEW_ShrinkId
 6653              	.LVL527:
 6654 006a 0146     		mov	r1, r0
 6655 006c 2A46     		mov	r2, r5
 6656 006e 4120     		movs	r0, #65
 6657 0070 FFF7FEFF 		bl	SEGGER_SYSVIEW_RecordU32x2
 6658              	.LVL528:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 245


5163:FreeRTOS/tasks.c ****             {
 6659              		.loc 1 5163 13 discriminator 2 view .LVU1848
5163:FreeRTOS/tasks.c ****             {
 6660              		.loc 1 5163 15 is_stmt 0 discriminator 2 view .LVU1849
 6661 0074 012F     		cmp	r7, #1
 6662 0076 03D0     		beq	.L502
 6663              	.LVL529:
 6664              	.L493:
5196:FreeRTOS/tasks.c ****                 }
 6665              		.loc 1 5196 45 is_stmt 1 view .LVU1850
5200:FreeRTOS/tasks.c ****     }
 6666              		.loc 1 5200 9 view .LVU1851
 6667              	.LBB234:
 6668              	.LBI234:
 229:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 6669              		.loc 2 229 34 view .LVU1852
 6670              	.LBB235:
 6671              		.loc 2 231 9 view .LVU1853
 6672              		.syntax unified
 6673              	@ 231 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6674 0078 88F31188 			msr basepri, r8	
 6675              	@ 0 "" 2
 6676              	.LVL530:
 6677              		.loc 2 231 9 is_stmt 0 view .LVU1854
 6678              		.thumb
 6679              		.syntax unified
 6680              	.LBE235:
 6681              	.LBE234:
5201:FreeRTOS/tasks.c **** 
 6682              		.loc 1 5201 5 view .LVU1855
 6683 007c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6684              	.LVL531:
 6685              	.L502:
5166:FreeRTOS/tasks.c **** 
 6686              		.loc 1 5166 17 is_stmt 1 view .LVU1856
 6687 0080 B36A     		ldr	r3, [r6, #40]
 6688 0082 43B1     		cbz	r3, .L494
5166:FreeRTOS/tasks.c **** 
 6689              		.loc 1 5166 17 view .LVU1857
 6690              	.LBB236:
 6691              	.LBI236:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 6692              		.loc 2 193 34 view .LVU1858
 6693              	.LBB237:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 6694              		.loc 2 195 9 view .LVU1859
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6695              		.loc 2 197 9 view .LVU1860
 6696              		.syntax unified
 6697              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6698 0084 4FF05003 			mov r3, #80												
 6699 0088 83F31188 		msr basepri, r3											
 6700 008c BFF36F8F 		isb														
 6701 0090 BFF34F8F 		dsb														
 6702              	
 6703              	@ 0 "" 2
 6704              	.LVL532:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 246


 6705              		.thumb
 6706              		.syntax unified
 6707              	.L495:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6708              		.loc 2 197 9 is_stmt 0 view .LVU1861
 6709              	.LBE237:
 6710              	.LBE236:
5166:FreeRTOS/tasks.c **** 
 6711              		.loc 1 5166 17 is_stmt 1 discriminator 3 view .LVU1862
5166:FreeRTOS/tasks.c **** 
 6712              		.loc 1 5166 17 discriminator 3 view .LVU1863
5166:FreeRTOS/tasks.c **** 
 6713              		.loc 1 5166 17 discriminator 3 view .LVU1864
 6714 0094 FEE7     		b	.L495
 6715              	.L494:
5166:FreeRTOS/tasks.c **** 
 6716              		.loc 1 5166 94 discriminator 2 view .LVU1865
5168:FreeRTOS/tasks.c ****                 {
 6717              		.loc 1 5168 17 discriminator 2 view .LVU1866
5168:FreeRTOS/tasks.c ****                 {
 6718              		.loc 1 5168 42 is_stmt 0 discriminator 2 view .LVU1867
 6719 0096 164B     		ldr	r3, .L503
 6720 0098 1B68     		ldr	r3, [r3]
5168:FreeRTOS/tasks.c ****                 {
 6721              		.loc 1 5168 19 discriminator 2 view .LVU1868
 6722 009a 13BB     		cbnz	r3, .L496
5170:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6723              		.loc 1 5170 21 is_stmt 1 view .LVU1869
5170:FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6724              		.loc 1 5170 30 is_stmt 0 view .LVU1870
 6725 009c 341D     		adds	r4, r6, #4
 6726 009e 2046     		mov	r0, r4
 6727 00a0 FFF7FEFF 		bl	uxListRemove
 6728              	.LVL533:
5171:FreeRTOS/tasks.c ****                 }
 6729              		.loc 1 5171 21 is_stmt 1 view .LVU1871
 6730 00a4 3046     		mov	r0, r6
 6731 00a6 FFF7FEFF 		bl	SEGGER_SYSVIEW_OnTaskStartReady
 6732              	.LVL534:
5171:FreeRTOS/tasks.c ****                 }
 6733              		.loc 1 5171 21 view .LVU1872
 6734 00aa F06A     		ldr	r0, [r6, #44]
 6735 00ac 0123     		movs	r3, #1
 6736 00ae 8340     		lsls	r3, r3, r0
 6737 00b0 104A     		ldr	r2, .L503+4
 6738 00b2 1168     		ldr	r1, [r2]
 6739 00b4 0B43     		orrs	r3, r3, r1
 6740 00b6 1360     		str	r3, [r2]
5171:FreeRTOS/tasks.c ****                 }
 6741              		.loc 1 5171 21 view .LVU1873
 6742 00b8 00EB8000 		add	r0, r0, r0, lsl #2
 6743 00bc 2146     		mov	r1, r4
 6744 00be 0E4B     		ldr	r3, .L503+8
 6745 00c0 03EB8000 		add	r0, r3, r0, lsl #2
 6746 00c4 FFF7FEFF 		bl	vListInsertEnd
 6747              	.LVL535:
5171:FreeRTOS/tasks.c ****                 }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 247


 6748              		.loc 1 5171 51 view .LVU1874
 6749              	.L497:
5180:FreeRTOS/tasks.c ****                 {
 6750              		.loc 1 5180 17 view .LVU1875
5180:FreeRTOS/tasks.c ****                 {
 6751              		.loc 1 5180 26 is_stmt 0 view .LVU1876
 6752 00c8 F26A     		ldr	r2, [r6, #44]
5180:FreeRTOS/tasks.c ****                 {
 6753              		.loc 1 5180 53 view .LVU1877
 6754 00ca 0C4B     		ldr	r3, .L503+12
 6755 00cc 1B68     		ldr	r3, [r3]
 6756 00ce DB6A     		ldr	r3, [r3, #44]
5180:FreeRTOS/tasks.c ****                 {
 6757              		.loc 1 5180 19 view .LVU1878
 6758 00d0 9A42     		cmp	r2, r3
 6759 00d2 D1D9     		bls	.L493
5184:FreeRTOS/tasks.c ****                     {
 6760              		.loc 1 5184 21 is_stmt 1 view .LVU1879
5184:FreeRTOS/tasks.c ****                     {
 6761              		.loc 1 5184 23 is_stmt 0 view .LVU1880
 6762 00d4 0DB1     		cbz	r5, .L498
5186:FreeRTOS/tasks.c ****                     }
 6763              		.loc 1 5186 25 is_stmt 1 view .LVU1881
5186:FreeRTOS/tasks.c ****                     }
 6764              		.loc 1 5186 52 is_stmt 0 view .LVU1882
 6765 00d6 0123     		movs	r3, #1
 6766 00d8 2B60     		str	r3, [r5]
 6767              	.L498:
5192:FreeRTOS/tasks.c ****                 }
 6768              		.loc 1 5192 21 is_stmt 1 view .LVU1883
5192:FreeRTOS/tasks.c ****                 }
 6769              		.loc 1 5192 35 is_stmt 0 view .LVU1884
 6770 00da 094B     		ldr	r3, .L503+16
 6771 00dc 0122     		movs	r2, #1
 6772 00de 1A60     		str	r2, [r3]
 6773 00e0 CAE7     		b	.L493
 6774              	.L496:
5177:FreeRTOS/tasks.c ****                 }
 6775              		.loc 1 5177 21 is_stmt 1 view .LVU1885
 6776 00e2 06F11801 		add	r1, r6, #24
 6777 00e6 0748     		ldr	r0, .L503+20
 6778 00e8 FFF7FEFF 		bl	vListInsertEnd
 6779              	.LVL536:
 6780 00ec ECE7     		b	.L497
 6781              	.L504:
 6782 00ee 00BF     		.align	2
 6783              	.L503:
 6784 00f0 00000000 		.word	.LANCHOR14
 6785 00f4 00000000 		.word	.LANCHOR12
 6786 00f8 00000000 		.word	.LANCHOR2
 6787 00fc 00000000 		.word	.LANCHOR9
 6788 0100 00000000 		.word	.LANCHOR15
 6789 0104 00000000 		.word	.LANCHOR1
 6790              		.cfi_endproc
 6791              	.LFE55:
 6793              		.section	.text.xTaskGenericNotifyStateClear,"ax",%progbits
 6794              		.align	1
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 248


 6795              		.global	xTaskGenericNotifyStateClear
 6796              		.syntax unified
 6797              		.thumb
 6798              		.thumb_func
 6800              	xTaskGenericNotifyStateClear:
 6801              	.LVL537:
 6802              	.LFB56:
5210:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6803              		.loc 1 5210 5 view -0
 6804              		.cfi_startproc
 6805              		@ args = 0, pretend = 0, frame = 0
 6806              		@ frame_needed = 0, uses_anonymous_args = 0
5210:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6807              		.loc 1 5210 5 is_stmt 0 view .LVU1887
 6808 0000 38B5     		push	{r3, r4, r5, lr}
 6809              	.LCFI65:
 6810              		.cfi_def_cfa_offset 16
 6811              		.cfi_offset 3, -16
 6812              		.cfi_offset 4, -12
 6813              		.cfi_offset 5, -8
 6814              		.cfi_offset 14, -4
5211:FreeRTOS/tasks.c ****         BaseType_t xReturn;
 6815              		.loc 1 5211 9 is_stmt 1 view .LVU1888
5212:FreeRTOS/tasks.c **** 
 6816              		.loc 1 5212 9 view .LVU1889
5214:FreeRTOS/tasks.c **** 
 6817              		.loc 1 5214 9 view .LVU1890
 6818 0002 41B1     		cbz	r1, .L506
5214:FreeRTOS/tasks.c **** 
 6819              		.loc 1 5214 9 view .LVU1891
 6820              	.LBB238:
 6821              	.LBI238:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 6822              		.loc 2 193 34 view .LVU1892
 6823              	.LBB239:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 6824              		.loc 2 195 9 view .LVU1893
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6825              		.loc 2 197 9 view .LVU1894
 6826              		.syntax unified
 6827              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6828 0004 4FF05003 			mov r3, #80												
 6829 0008 83F31188 		msr basepri, r3											
 6830 000c BFF36F8F 		isb														
 6831 0010 BFF34F8F 		dsb														
 6832              	
 6833              	@ 0 "" 2
 6834              	.LVL538:
 6835              		.thumb
 6836              		.syntax unified
 6837              	.L507:
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6838              		.loc 2 197 9 is_stmt 0 view .LVU1895
 6839              	.LBE239:
 6840              	.LBE238:
5214:FreeRTOS/tasks.c **** 
 6841              		.loc 1 5214 9 is_stmt 1 discriminator 1 view .LVU1896
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 249


5214:FreeRTOS/tasks.c **** 
 6842              		.loc 1 5214 9 discriminator 1 view .LVU1897
5214:FreeRTOS/tasks.c **** 
 6843              		.loc 1 5214 9 discriminator 1 view .LVU1898
 6844 0014 FEE7     		b	.L507
 6845              	.L506:
 6846 0016 0446     		mov	r4, r0
 6847 0018 0D46     		mov	r5, r1
5214:FreeRTOS/tasks.c **** 
 6848              		.loc 1 5214 79 discriminator 2 view .LVU1899
5218:FreeRTOS/tasks.c **** 
 6849              		.loc 1 5218 9 discriminator 2 view .LVU1900
5218:FreeRTOS/tasks.c **** 
 6850              		.loc 1 5218 17 is_stmt 0 discriminator 2 view .LVU1901
 6851 001a 60B1     		cbz	r0, .L512
 6852              	.LVL539:
 6853              	.L508:
5220:FreeRTOS/tasks.c ****         {
 6854              		.loc 1 5220 9 is_stmt 1 discriminator 4 view .LVU1902
 6855 001c FFF7FEFF 		bl	vPortEnterCritical
 6856              	.LVL540:
5222:FreeRTOS/tasks.c ****             {
 6857              		.loc 1 5222 13 discriminator 4 view .LVU1903
5222:FreeRTOS/tasks.c ****             {
 6858              		.loc 1 5222 37 is_stmt 0 discriminator 4 view .LVU1904
 6859 0020 6319     		adds	r3, r4, r5
 6860 0022 93F85430 		ldrb	r3, [r3, #84]	@ zero_extendqisi2
 6861 0026 DBB2     		uxtb	r3, r3
5222:FreeRTOS/tasks.c ****             {
 6862              		.loc 1 5222 15 discriminator 4 view .LVU1905
 6863 0028 022B     		cmp	r3, #2
 6864 002a 07D0     		beq	.L513
5229:FreeRTOS/tasks.c ****             }
 6865              		.loc 1 5229 25 view .LVU1906
 6866 002c 0024     		movs	r4, #0
 6867              	.LVL541:
 6868              	.L509:
5232:FreeRTOS/tasks.c **** 
 6869              		.loc 1 5232 9 is_stmt 1 view .LVU1907
 6870 002e FFF7FEFF 		bl	vPortExitCritical
 6871              	.LVL542:
5234:FreeRTOS/tasks.c ****     }
 6872              		.loc 1 5234 9 view .LVU1908
5235:FreeRTOS/tasks.c **** 
 6873              		.loc 1 5235 5 is_stmt 0 view .LVU1909
 6874 0032 2046     		mov	r0, r4
 6875 0034 38BD     		pop	{r3, r4, r5, pc}
 6876              	.LVL543:
 6877              	.L512:
5218:FreeRTOS/tasks.c **** 
 6878              		.loc 1 5218 17 discriminator 1 view .LVU1910
 6879 0036 044B     		ldr	r3, .L514
 6880 0038 1C68     		ldr	r4, [r3]
 6881              	.LVL544:
5218:FreeRTOS/tasks.c **** 
 6882              		.loc 1 5218 17 discriminator 1 view .LVU1911
 6883 003a EFE7     		b	.L508
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 250


 6884              	.LVL545:
 6885              	.L513:
5224:FreeRTOS/tasks.c ****                 xReturn = pdPASS;
 6886              		.loc 1 5224 17 is_stmt 1 view .LVU1912
5224:FreeRTOS/tasks.c ****                 xReturn = pdPASS;
 6887              		.loc 1 5224 56 is_stmt 0 view .LVU1913
 6888 003c 2C44     		add	r4, r4, r5
 6889              	.LVL546:
5224:FreeRTOS/tasks.c ****                 xReturn = pdPASS;
 6890              		.loc 1 5224 56 view .LVU1914
 6891 003e 0023     		movs	r3, #0
 6892 0040 84F85430 		strb	r3, [r4, #84]
5225:FreeRTOS/tasks.c ****             }
 6893              		.loc 1 5225 17 is_stmt 1 view .LVU1915
 6894              	.LVL547:
5225:FreeRTOS/tasks.c ****             }
 6895              		.loc 1 5225 25 is_stmt 0 view .LVU1916
 6896 0044 0124     		movs	r4, #1
 6897 0046 F2E7     		b	.L509
 6898              	.L515:
 6899              		.align	2
 6900              	.L514:
 6901 0048 00000000 		.word	.LANCHOR9
 6902              		.cfi_endproc
 6903              	.LFE56:
 6905              		.section	.text.ulTaskGenericNotifyValueClear,"ax",%progbits
 6906              		.align	1
 6907              		.global	ulTaskGenericNotifyValueClear
 6908              		.syntax unified
 6909              		.thumb
 6910              		.thumb_func
 6912              	ulTaskGenericNotifyValueClear:
 6913              	.LVL548:
 6914              	.LFB57:
5245:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6915              		.loc 1 5245 5 is_stmt 1 view -0
 6916              		.cfi_startproc
 6917              		@ args = 0, pretend = 0, frame = 0
 6918              		@ frame_needed = 0, uses_anonymous_args = 0
5245:FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6919              		.loc 1 5245 5 is_stmt 0 view .LVU1918
 6920 0000 70B5     		push	{r4, r5, r6, lr}
 6921              	.LCFI66:
 6922              		.cfi_def_cfa_offset 16
 6923              		.cfi_offset 4, -16
 6924              		.cfi_offset 5, -12
 6925              		.cfi_offset 6, -8
 6926              		.cfi_offset 14, -4
 6927 0002 0C46     		mov	r4, r1
 6928 0004 1646     		mov	r6, r2
5246:FreeRTOS/tasks.c ****         uint32_t ulReturn;
 6929              		.loc 1 5246 9 is_stmt 1 view .LVU1919
5247:FreeRTOS/tasks.c **** 
 6930              		.loc 1 5247 9 view .LVU1920
5251:FreeRTOS/tasks.c **** 
 6931              		.loc 1 5251 9 view .LVU1921
5251:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 251


 6932              		.loc 1 5251 17 is_stmt 0 view .LVU1922
 6933 0006 0546     		mov	r5, r0
 6934 0008 78B1     		cbz	r0, .L519
 6935              	.LVL549:
 6936              	.L517:
5253:FreeRTOS/tasks.c ****         {
 6937              		.loc 1 5253 9 is_stmt 1 discriminator 4 view .LVU1923
 6938 000a FFF7FEFF 		bl	vPortEnterCritical
 6939              	.LVL550:
5257:FreeRTOS/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 6940              		.loc 1 5257 13 discriminator 4 view .LVU1924
5257:FreeRTOS/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 6941              		.loc 1 5257 22 is_stmt 0 discriminator 4 view .LVU1925
 6942 000e 04F11401 		add	r1, r4, #20
 6943 0012 55F82140 		ldr	r4, [r5, r1, lsl #2]
 6944              	.LVL551:
5258:FreeRTOS/tasks.c ****         }
 6945              		.loc 1 5258 13 is_stmt 1 discriminator 4 view .LVU1926
5258:FreeRTOS/tasks.c ****         }
 6946              		.loc 1 5258 54 is_stmt 0 discriminator 4 view .LVU1927
 6947 0016 55F82130 		ldr	r3, [r5, r1, lsl #2]
 6948 001a 23EA0603 		bic	r3, r3, r6
 6949 001e 45F82130 		str	r3, [r5, r1, lsl #2]
5260:FreeRTOS/tasks.c **** 
 6950              		.loc 1 5260 9 is_stmt 1 discriminator 4 view .LVU1928
 6951 0022 FFF7FEFF 		bl	vPortExitCritical
 6952              	.LVL552:
5262:FreeRTOS/tasks.c ****     }
 6953              		.loc 1 5262 9 discriminator 4 view .LVU1929
5263:FreeRTOS/tasks.c **** 
 6954              		.loc 1 5263 5 is_stmt 0 discriminator 4 view .LVU1930
 6955 0026 2046     		mov	r0, r4
 6956 0028 70BD     		pop	{r4, r5, r6, pc}
 6957              	.LVL553:
 6958              	.L519:
5251:FreeRTOS/tasks.c **** 
 6959              		.loc 1 5251 17 discriminator 1 view .LVU1931
 6960 002a 014B     		ldr	r3, .L520
 6961 002c 1D68     		ldr	r5, [r3]
 6962              	.LVL554:
5251:FreeRTOS/tasks.c **** 
 6963              		.loc 1 5251 17 discriminator 1 view .LVU1932
 6964 002e ECE7     		b	.L517
 6965              	.L521:
 6966              		.align	2
 6967              	.L520:
 6968 0030 00000000 		.word	.LANCHOR9
 6969              		.cfi_endproc
 6970              	.LFE57:
 6972              		.global	uxTopUsedPriority
 6973              		.global	pxCurrentTCB
 6974              		.section	.bss.pxCurrentTCB,"aw",%nobits
 6975              		.align	2
 6976              		.set	.LANCHOR9,. + 0
 6979              	pxCurrentTCB:
 6980 0000 00000000 		.space	4
 6981              		.section	.bss.pxDelayedTaskList,"aw",%nobits
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 252


 6982              		.align	2
 6983              		.set	.LANCHOR3,. + 0
 6986              	pxDelayedTaskList:
 6987 0000 00000000 		.space	4
 6988              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 6989              		.align	2
 6990              		.set	.LANCHOR7,. + 0
 6993              	pxOverflowDelayedTaskList:
 6994 0000 00000000 		.space	4
 6995              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 6996              		.align	2
 6997              		.set	.LANCHOR2,. + 0
 7000              	pxReadyTasksLists:
 7001 0000 00000000 		.space	100
 7001      00000000 
 7001      00000000 
 7001      00000000 
 7001      00000000 
 7002              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 7003              		.align	2
 7004              		.set	.LANCHOR8,. + 0
 7007              	uxCurrentNumberOfTasks:
 7008 0000 00000000 		.space	4
 7009              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 7010              		.align	2
 7011              		.set	.LANCHOR14,. + 0
 7014              	uxSchedulerSuspended:
 7015 0000 00000000 		.space	4
 7016              		.section	.bss.uxTaskNumber,"aw",%nobits
 7017              		.align	2
 7018              		.set	.LANCHOR11,. + 0
 7021              	uxTaskNumber:
 7022 0000 00000000 		.space	4
 7023              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 7024              		.align	2
 7025              		.set	.LANCHOR12,. + 0
 7028              	uxTopReadyPriority:
 7029 0000 00000000 		.space	4
 7030              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 7031              		.align	2
 7032              		.set	.LANCHOR5,. + 0
 7035              	xDelayedTaskList1:
 7036 0000 00000000 		.space	20
 7036      00000000 
 7036      00000000 
 7036      00000000 
 7036      00000000 
 7037              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 7038              		.align	2
 7039              		.set	.LANCHOR6,. + 0
 7042              	xDelayedTaskList2:
 7043 0000 00000000 		.space	20
 7043      00000000 
 7043      00000000 
 7043      00000000 
 7043      00000000 
 7044              		.section	.bss.xIdleTaskHandle,"aw",%nobits
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 253


 7045              		.align	2
 7046              		.set	.LANCHOR16,. + 0
 7049              	xIdleTaskHandle:
 7050 0000 00000000 		.space	4
 7051              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 7052              		.align	2
 7053              		.set	.LANCHOR4,. + 0
 7056              	xNextTaskUnblockTime:
 7057 0000 00000000 		.space	4
 7058              		.section	.bss.xNumOfOverflows,"aw",%nobits
 7059              		.align	2
 7060              		.set	.LANCHOR18,. + 0
 7063              	xNumOfOverflows:
 7064 0000 00000000 		.space	4
 7065              		.section	.bss.xPendedTicks,"aw",%nobits
 7066              		.align	2
 7067              		.set	.LANCHOR19,. + 0
 7070              	xPendedTicks:
 7071 0000 00000000 		.space	4
 7072              		.section	.bss.xPendingReadyList,"aw",%nobits
 7073              		.align	2
 7074              		.set	.LANCHOR1,. + 0
 7077              	xPendingReadyList:
 7078 0000 00000000 		.space	20
 7078      00000000 
 7078      00000000 
 7078      00000000 
 7078      00000000 
 7079              		.section	.bss.xSchedulerRunning,"aw",%nobits
 7080              		.align	2
 7081              		.set	.LANCHOR10,. + 0
 7084              	xSchedulerRunning:
 7085 0000 00000000 		.space	4
 7086              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 7087              		.align	2
 7088              		.set	.LANCHOR0,. + 0
 7091              	xSuspendedTaskList:
 7092 0000 00000000 		.space	20
 7092      00000000 
 7092      00000000 
 7092      00000000 
 7092      00000000 
 7093              		.section	.bss.xTickCount,"aw",%nobits
 7094              		.align	2
 7095              		.set	.LANCHOR13,. + 0
 7098              	xTickCount:
 7099 0000 00000000 		.space	4
 7100              		.section	.bss.xYieldPending,"aw",%nobits
 7101              		.align	2
 7102              		.set	.LANCHOR15,. + 0
 7105              	xYieldPending:
 7106 0000 00000000 		.space	4
 7107              		.section	.data.uxTopUsedPriority,"aw"
 7108              		.align	2
 7109              		.set	.LANCHOR17,. + 0
 7112              	uxTopUsedPriority:
 7113 0000 04000000 		.word	4
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 254


 7114              		.text
 7115              	.Letext0:
 7116              		.file 3 "d:\\gcc-arm-none-eabi-10.3-2021.10\\lib\\gcc\\arm-none-eabi\\10.3.1\\include\\stddef.h"
 7117              		.file 4 "d:\\gcc-arm-none-eabi-10.3-2021.10\\arm-none-eabi\\include\\machine\\_default_types.h"
 7118              		.file 5 "d:\\gcc-arm-none-eabi-10.3-2021.10\\arm-none-eabi\\include\\sys\\_stdint.h"
 7119              		.file 6 "FreeRTOS/include/projdefs.h"
 7120              		.file 7 "FreeRTOS/include/list.h"
 7121              		.file 8 "FreeRTOS/include/task.h"
 7122              		.file 9 "SEGGER/SEGGER/SEGGER_SYSVIEW.h"
 7123              		.file 10 "d:\\gcc-arm-none-eabi-10.3-2021.10\\arm-none-eabi\\include\\string.h"
 7124              		.file 11 "FreeRTOS/include/portable.h"
 7125              		.file 12 "SEGGER/OS/SEGGER_SYSVIEW_FreeRTOS.h"
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 255


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:20     .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:25     .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:115    .text.prvTaskIsTaskSuspended:00000038 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:121    .text.prvSearchForNameWithinSingleList:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:126    .text.prvSearchForNameWithinSingleList:00000000 prvSearchForNameWithinSingleList
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:290    .text.prvIdleTask:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:295    .text.prvIdleTask:00000000 prvIdleTask
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:336    .text.prvIdleTask:00000020 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:341    .text.prvTaskCheckFreeStackSpace:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:346    .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:389    .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:394    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:429    .text.prvResetNextTaskUnblockTime:00000020 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:435    .text.prvInitialiseNewTask:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:440    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:598    .text.prvInitialiseTaskLists:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:603    .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:674    .text.prvInitialiseTaskLists:00000040 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:685    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:690    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:859    .text.prvAddNewTaskToReadyList:000000b8 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:869    .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:874    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1008   .text.prvAddCurrentTaskToDelayedList:0000008c $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1019   .text.xTaskCreate:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1025   .text.xTaskCreate:00000000 xTaskCreate
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1147   .text.eTaskGetState:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1153   .text.eTaskGetState:00000000 eTaskGetState
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1316   .text.eTaskGetState:00000078 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1325   .text.vTaskResume:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1331   .text.vTaskResume:00000000 vTaskResume
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1472   .text.vTaskResume:00000090 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1479   .text.xTaskResumeFromISR:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1485   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1675   .text.xTaskResumeFromISR:000000a8 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1685   .rodata.vTaskStartScheduler.str1.4:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1689   .text.vTaskStartScheduler:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1695   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1839   .text.vTaskStartScheduler:00000080 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1851   .text.vTaskEndScheduler:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1857   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1900   .text.vTaskEndScheduler:00000020 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1905   .text.vTaskSuspendAll:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1911   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1930   .text.vTaskSuspendAll:0000000c $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1935   .text.xTaskGetTickCount:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1941   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1962   .text.xTaskGetTickCount:00000008 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1967   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:1973   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:2002   .text.xTaskGetTickCountFromISR:0000000c $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:2007   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:2013   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:2029   .text.uxTaskGetNumberOfTasks:00000008 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:2034   .text.pcTaskGetName:00000000 $t
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 256


C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:2040   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:2101   .text.pcTaskGetName:00000024 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:2106   .text.xTaskGetIdleTaskHandle:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:2112   .text.xTaskGetIdleTaskHandle:00000000 xTaskGetIdleTaskHandle
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:2155   .text.xTaskGetIdleTaskHandle:0000001c $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:2160   .text.xTaskIncrementTick:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:2166   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:2436   .text.xTaskIncrementTick:000000f4 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:2451   .text.xTaskResumeAll:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:2457   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:2696   .text.xTaskResumeAll:000000dc $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:2708   .text.xTaskDelayUntil:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:2714   .text.xTaskDelayUntil:00000000 xTaskDelayUntil
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:2973   .text.xTaskDelayUntil:000000ac $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:2979   .text.vTaskDelay:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:2985   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:3082   .text.vTaskDelay:00000050 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:3087   .text.xTaskGetHandle:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:3093   .text.xTaskGetHandle:00000000 xTaskGetHandle
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:3240   .text.xTaskGetHandle:00000074 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:3248   .text.xTaskCatchUpTicks:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:3254   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:3322   .text.xTaskCatchUpTicks:00000030 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:3328   .text.vTaskSwitchContext:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:3334   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:3502   .text.vTaskSwitchContext:0000009c $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:3512   .text.vTaskSuspend:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:3518   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:3762   .text.vTaskSuspend:000000f4 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:3773   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:3779   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:3847   .text.vTaskPlaceOnEventList:0000002c $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:3852   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:3858   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:3975   .text.vTaskPlaceOnUnorderedEventList:00000050 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:3981   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:3987   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4121   .text.xTaskRemoveFromEventList:00000078 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4131   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4137   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4276   .text.vTaskRemoveFromUnorderedEventList:0000007c $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4285   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4291   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4361   .text.vTaskSetTimeOutState:00000030 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4367   .text.vTaskInternalSetTimeOutState:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4373   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4396   .text.vTaskInternalSetTimeOutState:00000010 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4402   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4408   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4591   .text.xTaskCheckForTimeOut:00000080 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4597   .text.vTaskMissedYield:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4603   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4620   .text.vTaskMissedYield:00000008 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4625   .text.uxTaskGetTaskNumber:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4631   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4664   .text.vTaskSetTaskNumber:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4670   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 257


C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4695   .text.vTaskGetInfo:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4701   .text.vTaskGetInfo:00000000 vTaskGetInfo
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4846   .text.vTaskGetInfo:00000070 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4851   .text.prvListTasksWithinSingleList:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4856   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4972   .text.uxTaskGetSystemState:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:4978   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:5105   .text.uxTaskGetSystemState:00000084 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:5114   .text.uxTaskGetStackHighWaterMark:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:5120   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:5162   .text.uxTaskGetStackHighWaterMark:00000014 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:5167   .text.pxTaskGetStackStart:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:5173   .text.pxTaskGetStackStart:00000000 pxTaskGetStackStart
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:5205   .text.pxTaskGetStackStart:00000010 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:5210   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:5216   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:5235   .text.xTaskGetCurrentTaskHandle:00000008 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:5240   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:5246   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:5273   .text.uxTaskResetEventItemValue:00000014 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:5278   .text.ulTaskGenericNotifyTake:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:5284   .text.ulTaskGenericNotifyTake:00000000 ulTaskGenericNotifyTake
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:5451   .text.ulTaskGenericNotifyTake:000000b0 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:5456   .text.xTaskGenericNotifyWait:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:5462   .text.xTaskGenericNotifyWait:00000000 xTaskGenericNotifyWait
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:5665   .text.xTaskGenericNotifyWait:000000dc $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:5670   .text.xTaskGenericNotify:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:5676   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:5769   .text.xTaskGenericNotify:00000050 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:6041   .text.xTaskGenericNotify:00000150 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:6049   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:6055   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:6218   .text.xTaskGenericNotifyFromISR:00000076 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:6488   .text.xTaskGenericNotifyFromISR:00000178 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:6499   .text.vTaskGenericNotifyGiveFromISR:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:6505   .text.vTaskGenericNotifyGiveFromISR:00000000 vTaskGenericNotifyGiveFromISR
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:6784   .text.vTaskGenericNotifyGiveFromISR:000000f0 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:6794   .text.xTaskGenericNotifyStateClear:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:6800   .text.xTaskGenericNotifyStateClear:00000000 xTaskGenericNotifyStateClear
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:6901   .text.xTaskGenericNotifyStateClear:00000048 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:6906   .text.ulTaskGenericNotifyValueClear:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:6912   .text.ulTaskGenericNotifyValueClear:00000000 ulTaskGenericNotifyValueClear
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:6968   .text.ulTaskGenericNotifyValueClear:00000030 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7112   .data.uxTopUsedPriority:00000000 uxTopUsedPriority
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:6979   .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:6975   .bss.pxCurrentTCB:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:6982   .bss.pxDelayedTaskList:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:6986   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:6989   .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:6993   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:6996   .bss.pxReadyTasksLists:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7000   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7003   .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7007   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7010   .bss.uxSchedulerSuspended:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7014   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7017   .bss.uxTaskNumber:00000000 $d
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 258


C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7021   .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7024   .bss.uxTopReadyPriority:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7028   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7031   .bss.xDelayedTaskList1:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7035   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7038   .bss.xDelayedTaskList2:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7042   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7045   .bss.xIdleTaskHandle:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7049   .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7052   .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7056   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7059   .bss.xNumOfOverflows:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7063   .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7066   .bss.xPendedTicks:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7070   .bss.xPendedTicks:00000000 xPendedTicks
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7073   .bss.xPendingReadyList:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7077   .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7080   .bss.xSchedulerRunning:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7084   .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7087   .bss.xSuspendedTaskList:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7091   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7094   .bss.xTickCount:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7098   .bss.xTickCount:00000000 xTickCount
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7101   .bss.xYieldPending:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7105   .bss.xYieldPending:00000000 xYieldPending
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:7108   .data.uxTopUsedPriority:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:5775   .text.xTaskGenericNotify:00000055 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:5775   .text.xTaskGenericNotify:00000056 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:6223   .text.xTaskGenericNotifyFromISR:0000007b $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s:6223   .text.xTaskGenericNotifyFromISR:0000007c $t

UNDEFINED SYMBOLS
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
SEGGER_SYSVIEW_OnTaskCreate
SYSVIEW_AddTask
SEGGER_SYSVIEW_OnTaskStartReady
vListInsertEnd
vPortExitCritical
uxListRemove
SEGGER_SYSVIEW_OnTaskStopReady
vListInsert
pvPortMalloc
vPortFree
SEGGER_SYSVIEW_ShrinkId
SEGGER_SYSVIEW_RecordU32
vPortValidateInterruptPriority
SEGGER_SYSVIEW_OnTaskStartExec
xPortStartScheduler
SEGGER_SYSVIEW_OnIdle
vPortEndScheduler
SEGGER_SYSVIEW_RecordVoid
strlen
SEGGER_SYSVIEW_RecordU32x2
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccnYAaqD.s 			page 259


SEGGER_SYSVIEW_RecordU32x4
SEGGER_SYSVIEW_RecordU32x5
