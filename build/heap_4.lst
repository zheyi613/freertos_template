ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"heap_4.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvHeapInit,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	prvHeapInit:
  26              	.LFB10:
  27              		.file 1 "FreeRTOS/portable/MemMang/heap_4.c"
   1:FreeRTOS/portable/MemMang/heap_4.c **** /*
   2:FreeRTOS/portable/MemMang/heap_4.c ****  * FreeRTOS Kernel V10.4.3
   3:FreeRTOS/portable/MemMang/heap_4.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/portable/MemMang/heap_4.c ****  *
   5:FreeRTOS/portable/MemMang/heap_4.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/portable/MemMang/heap_4.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/portable/MemMang/heap_4.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/portable/MemMang/heap_4.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/portable/MemMang/heap_4.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/portable/MemMang/heap_4.c ****  * subject to the following conditions:
  11:FreeRTOS/portable/MemMang/heap_4.c ****  *
  12:FreeRTOS/portable/MemMang/heap_4.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/portable/MemMang/heap_4.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS/portable/MemMang/heap_4.c ****  *
  15:FreeRTOS/portable/MemMang/heap_4.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/portable/MemMang/heap_4.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/portable/MemMang/heap_4.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/portable/MemMang/heap_4.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/portable/MemMang/heap_4.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/portable/MemMang/heap_4.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/portable/MemMang/heap_4.c ****  *
  22:FreeRTOS/portable/MemMang/heap_4.c ****  * https://www.FreeRTOS.org
  23:FreeRTOS/portable/MemMang/heap_4.c ****  * https://github.com/FreeRTOS
  24:FreeRTOS/portable/MemMang/heap_4.c ****  *
  25:FreeRTOS/portable/MemMang/heap_4.c ****  */
  26:FreeRTOS/portable/MemMang/heap_4.c **** 
  27:FreeRTOS/portable/MemMang/heap_4.c **** /*
  28:FreeRTOS/portable/MemMang/heap_4.c ****  * A sample implementation of pvPortMalloc() and vPortFree() that combines
  29:FreeRTOS/portable/MemMang/heap_4.c ****  * (coalescences) adjacent memory blocks as they are freed, and in so doing
  30:FreeRTOS/portable/MemMang/heap_4.c ****  * limits memory fragmentation.
  31:FreeRTOS/portable/MemMang/heap_4.c ****  *
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 2


  32:FreeRTOS/portable/MemMang/heap_4.c ****  * See heap_1.c, heap_2.c and heap_3.c for alternative implementations, and the
  33:FreeRTOS/portable/MemMang/heap_4.c ****  * memory management pages of https://www.FreeRTOS.org for more information.
  34:FreeRTOS/portable/MemMang/heap_4.c ****  */
  35:FreeRTOS/portable/MemMang/heap_4.c **** #include <stdlib.h>
  36:FreeRTOS/portable/MemMang/heap_4.c **** 
  37:FreeRTOS/portable/MemMang/heap_4.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  38:FreeRTOS/portable/MemMang/heap_4.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  39:FreeRTOS/portable/MemMang/heap_4.c ****  * task.h is included from an application file. */
  40:FreeRTOS/portable/MemMang/heap_4.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  41:FreeRTOS/portable/MemMang/heap_4.c **** 
  42:FreeRTOS/portable/MemMang/heap_4.c **** #include "FreeRTOS.h"
  43:FreeRTOS/portable/MemMang/heap_4.c **** #include "task.h"
  44:FreeRTOS/portable/MemMang/heap_4.c **** 
  45:FreeRTOS/portable/MemMang/heap_4.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  46:FreeRTOS/portable/MemMang/heap_4.c **** 
  47:FreeRTOS/portable/MemMang/heap_4.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 0 )
  48:FreeRTOS/portable/MemMang/heap_4.c ****     #error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
  49:FreeRTOS/portable/MemMang/heap_4.c **** #endif
  50:FreeRTOS/portable/MemMang/heap_4.c **** 
  51:FreeRTOS/portable/MemMang/heap_4.c **** /* Block sizes must not get too small. */
  52:FreeRTOS/portable/MemMang/heap_4.c **** #define heapMINIMUM_BLOCK_SIZE    ( ( size_t ) ( xHeapStructSize << 1 ) )
  53:FreeRTOS/portable/MemMang/heap_4.c **** 
  54:FreeRTOS/portable/MemMang/heap_4.c **** /* Assumes 8bit bytes! */
  55:FreeRTOS/portable/MemMang/heap_4.c **** #define heapBITS_PER_BYTE         ( ( size_t ) 8 )
  56:FreeRTOS/portable/MemMang/heap_4.c **** 
  57:FreeRTOS/portable/MemMang/heap_4.c **** /* Allocate the memory for the heap. */
  58:FreeRTOS/portable/MemMang/heap_4.c **** #if ( configAPPLICATION_ALLOCATED_HEAP == 1 )
  59:FreeRTOS/portable/MemMang/heap_4.c **** 
  60:FreeRTOS/portable/MemMang/heap_4.c **** /* The application writer has already defined the array used for the RTOS
  61:FreeRTOS/portable/MemMang/heap_4.c **** * heap - probably so it can be placed in a special segment or address. */
  62:FreeRTOS/portable/MemMang/heap_4.c ****     extern uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
  63:FreeRTOS/portable/MemMang/heap_4.c **** #else
  64:FreeRTOS/portable/MemMang/heap_4.c ****     PRIVILEGED_DATA static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
  65:FreeRTOS/portable/MemMang/heap_4.c **** #endif /* configAPPLICATION_ALLOCATED_HEAP */
  66:FreeRTOS/portable/MemMang/heap_4.c **** 
  67:FreeRTOS/portable/MemMang/heap_4.c **** /* Define the linked list structure.  This is used to link free blocks in order
  68:FreeRTOS/portable/MemMang/heap_4.c ****  * of their memory address. */
  69:FreeRTOS/portable/MemMang/heap_4.c **** typedef struct A_BLOCK_LINK
  70:FreeRTOS/portable/MemMang/heap_4.c **** {
  71:FreeRTOS/portable/MemMang/heap_4.c ****     struct A_BLOCK_LINK * pxNextFreeBlock; /*<< The next free block in the list. */
  72:FreeRTOS/portable/MemMang/heap_4.c ****     size_t xBlockSize;                     /*<< The size of the free block. */
  73:FreeRTOS/portable/MemMang/heap_4.c **** } BlockLink_t;
  74:FreeRTOS/portable/MemMang/heap_4.c **** 
  75:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
  76:FreeRTOS/portable/MemMang/heap_4.c **** 
  77:FreeRTOS/portable/MemMang/heap_4.c **** /*
  78:FreeRTOS/portable/MemMang/heap_4.c ****  * Inserts a block of memory that is being freed into the correct position in
  79:FreeRTOS/portable/MemMang/heap_4.c ****  * the list of free memory blocks.  The block being freed will be merged with
  80:FreeRTOS/portable/MemMang/heap_4.c ****  * the block in front it and/or the block behind it if the memory blocks are
  81:FreeRTOS/portable/MemMang/heap_4.c ****  * adjacent to each other.
  82:FreeRTOS/portable/MemMang/heap_4.c ****  */
  83:FreeRTOS/portable/MemMang/heap_4.c **** static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) PRIVILEGED_FUNCTION;
  84:FreeRTOS/portable/MemMang/heap_4.c **** 
  85:FreeRTOS/portable/MemMang/heap_4.c **** /*
  86:FreeRTOS/portable/MemMang/heap_4.c ****  * Called automatically to setup the required heap structures the first time
  87:FreeRTOS/portable/MemMang/heap_4.c ****  * pvPortMalloc() is called.
  88:FreeRTOS/portable/MemMang/heap_4.c ****  */
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 3


  89:FreeRTOS/portable/MemMang/heap_4.c **** static void prvHeapInit( void ) PRIVILEGED_FUNCTION;
  90:FreeRTOS/portable/MemMang/heap_4.c **** 
  91:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
  92:FreeRTOS/portable/MemMang/heap_4.c **** 
  93:FreeRTOS/portable/MemMang/heap_4.c **** /* The size of the structure placed at the beginning of each allocated memory
  94:FreeRTOS/portable/MemMang/heap_4.c ****  * block must by correctly byte aligned. */
  95:FreeRTOS/portable/MemMang/heap_4.c **** static const size_t xHeapStructSize = ( sizeof( BlockLink_t ) + ( ( size_t ) ( portBYTE_ALIGNMENT -
  96:FreeRTOS/portable/MemMang/heap_4.c **** 
  97:FreeRTOS/portable/MemMang/heap_4.c **** /* Create a couple of list links to mark the start and end of the list. */
  98:FreeRTOS/portable/MemMang/heap_4.c **** PRIVILEGED_DATA static BlockLink_t xStart, * pxEnd = NULL;
  99:FreeRTOS/portable/MemMang/heap_4.c **** 
 100:FreeRTOS/portable/MemMang/heap_4.c **** /* Keeps track of the number of calls to allocate and free memory as well as the
 101:FreeRTOS/portable/MemMang/heap_4.c ****  * number of free bytes remaining, but says nothing about fragmentation. */
 102:FreeRTOS/portable/MemMang/heap_4.c **** PRIVILEGED_DATA static size_t xFreeBytesRemaining = 0U;
 103:FreeRTOS/portable/MemMang/heap_4.c **** PRIVILEGED_DATA static size_t xMinimumEverFreeBytesRemaining = 0U;
 104:FreeRTOS/portable/MemMang/heap_4.c **** PRIVILEGED_DATA static size_t xNumberOfSuccessfulAllocations = 0;
 105:FreeRTOS/portable/MemMang/heap_4.c **** PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;
 106:FreeRTOS/portable/MemMang/heap_4.c **** 
 107:FreeRTOS/portable/MemMang/heap_4.c **** /* Gets set to the top bit of an size_t type.  When this bit in the xBlockSize
 108:FreeRTOS/portable/MemMang/heap_4.c ****  * member of an BlockLink_t structure is set then the block belongs to the
 109:FreeRTOS/portable/MemMang/heap_4.c ****  * application.  When the bit is free the block is still part of the free heap
 110:FreeRTOS/portable/MemMang/heap_4.c ****  * space. */
 111:FreeRTOS/portable/MemMang/heap_4.c **** PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;
 112:FreeRTOS/portable/MemMang/heap_4.c **** 
 113:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 114:FreeRTOS/portable/MemMang/heap_4.c **** 
 115:FreeRTOS/portable/MemMang/heap_4.c **** void * pvPortMalloc( size_t xWantedSize )
 116:FreeRTOS/portable/MemMang/heap_4.c **** {
 117:FreeRTOS/portable/MemMang/heap_4.c ****     BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
 118:FreeRTOS/portable/MemMang/heap_4.c ****     void * pvReturn = NULL;
 119:FreeRTOS/portable/MemMang/heap_4.c **** 
 120:FreeRTOS/portable/MemMang/heap_4.c ****     vTaskSuspendAll();
 121:FreeRTOS/portable/MemMang/heap_4.c ****     {
 122:FreeRTOS/portable/MemMang/heap_4.c ****         /* If this is the first call to malloc then the heap will require
 123:FreeRTOS/portable/MemMang/heap_4.c ****          * initialisation to setup the list of free blocks. */
 124:FreeRTOS/portable/MemMang/heap_4.c ****         if( pxEnd == NULL )
 125:FreeRTOS/portable/MemMang/heap_4.c ****         {
 126:FreeRTOS/portable/MemMang/heap_4.c ****             prvHeapInit();
 127:FreeRTOS/portable/MemMang/heap_4.c ****         }
 128:FreeRTOS/portable/MemMang/heap_4.c ****         else
 129:FreeRTOS/portable/MemMang/heap_4.c ****         {
 130:FreeRTOS/portable/MemMang/heap_4.c ****             mtCOVERAGE_TEST_MARKER();
 131:FreeRTOS/portable/MemMang/heap_4.c ****         }
 132:FreeRTOS/portable/MemMang/heap_4.c **** 
 133:FreeRTOS/portable/MemMang/heap_4.c ****         /* Check the requested block size is not so large that the top bit is
 134:FreeRTOS/portable/MemMang/heap_4.c ****          * set.  The top bit of the block size member of the BlockLink_t structure
 135:FreeRTOS/portable/MemMang/heap_4.c ****          * is used to determine who owns the block - the application or the
 136:FreeRTOS/portable/MemMang/heap_4.c ****          * kernel, so it must be free. */
 137:FreeRTOS/portable/MemMang/heap_4.c ****         if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 138:FreeRTOS/portable/MemMang/heap_4.c ****         {
 139:FreeRTOS/portable/MemMang/heap_4.c ****             /* The wanted size must be increased so it can contain a BlockLink_t
 140:FreeRTOS/portable/MemMang/heap_4.c ****              * structure in addition to the requested amount of bytes. */
 141:FreeRTOS/portable/MemMang/heap_4.c ****             if( ( xWantedSize > 0 ) && 
 142:FreeRTOS/portable/MemMang/heap_4.c ****                 ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 143:FreeRTOS/portable/MemMang/heap_4.c ****             {
 144:FreeRTOS/portable/MemMang/heap_4.c ****                 xWantedSize += xHeapStructSize;
 145:FreeRTOS/portable/MemMang/heap_4.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 4


 146:FreeRTOS/portable/MemMang/heap_4.c ****                 /* Ensure that blocks are always aligned. */
 147:FreeRTOS/portable/MemMang/heap_4.c ****                 if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 148:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 149:FreeRTOS/portable/MemMang/heap_4.c ****                     /* Byte alignment required. Check for overflow. */
 150:FreeRTOS/portable/MemMang/heap_4.c ****                     if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_M
 151:FreeRTOS/portable/MemMang/heap_4.c ****                             > xWantedSize )
 152:FreeRTOS/portable/MemMang/heap_4.c ****                     {
 153:FreeRTOS/portable/MemMang/heap_4.c ****                         xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MA
 154:FreeRTOS/portable/MemMang/heap_4.c ****                         configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 155:FreeRTOS/portable/MemMang/heap_4.c ****                     }
 156:FreeRTOS/portable/MemMang/heap_4.c ****                     else
 157:FreeRTOS/portable/MemMang/heap_4.c ****                     {
 158:FreeRTOS/portable/MemMang/heap_4.c ****                         xWantedSize = 0;
 159:FreeRTOS/portable/MemMang/heap_4.c ****                     }  
 160:FreeRTOS/portable/MemMang/heap_4.c ****                 }
 161:FreeRTOS/portable/MemMang/heap_4.c ****                 else
 162:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 163:FreeRTOS/portable/MemMang/heap_4.c ****                     mtCOVERAGE_TEST_MARKER();
 164:FreeRTOS/portable/MemMang/heap_4.c ****                 }
 165:FreeRTOS/portable/MemMang/heap_4.c ****             } 
 166:FreeRTOS/portable/MemMang/heap_4.c ****             else 
 167:FreeRTOS/portable/MemMang/heap_4.c ****             {
 168:FreeRTOS/portable/MemMang/heap_4.c ****                 xWantedSize = 0;
 169:FreeRTOS/portable/MemMang/heap_4.c ****             }
 170:FreeRTOS/portable/MemMang/heap_4.c **** 
 171:FreeRTOS/portable/MemMang/heap_4.c ****             if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 172:FreeRTOS/portable/MemMang/heap_4.c ****             {
 173:FreeRTOS/portable/MemMang/heap_4.c ****                 /* Traverse the list from the start	(lowest address) block until
 174:FreeRTOS/portable/MemMang/heap_4.c ****                  * one of adequate size is found. */
 175:FreeRTOS/portable/MemMang/heap_4.c ****                 pxPreviousBlock = &xStart;
 176:FreeRTOS/portable/MemMang/heap_4.c ****                 pxBlock = xStart.pxNextFreeBlock;
 177:FreeRTOS/portable/MemMang/heap_4.c **** 
 178:FreeRTOS/portable/MemMang/heap_4.c ****                 while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL 
 179:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 180:FreeRTOS/portable/MemMang/heap_4.c ****                     pxPreviousBlock = pxBlock;
 181:FreeRTOS/portable/MemMang/heap_4.c ****                     pxBlock = pxBlock->pxNextFreeBlock;
 182:FreeRTOS/portable/MemMang/heap_4.c ****                 }
 183:FreeRTOS/portable/MemMang/heap_4.c **** 
 184:FreeRTOS/portable/MemMang/heap_4.c ****                 /* If the end marker was reached then a block of adequate size
 185:FreeRTOS/portable/MemMang/heap_4.c ****                  * was not found. */
 186:FreeRTOS/portable/MemMang/heap_4.c ****                 if( pxBlock != pxEnd )
 187:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 188:FreeRTOS/portable/MemMang/heap_4.c ****                     /* Return the memory space pointed to - jumping over the
 189:FreeRTOS/portable/MemMang/heap_4.c ****                      * BlockLink_t structure at its start. */
 190:FreeRTOS/portable/MemMang/heap_4.c ****                     pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xH
 191:FreeRTOS/portable/MemMang/heap_4.c **** 
 192:FreeRTOS/portable/MemMang/heap_4.c ****                     /* This block is being returned for use so must be taken out
 193:FreeRTOS/portable/MemMang/heap_4.c ****                      * of the list of free blocks. */
 194:FreeRTOS/portable/MemMang/heap_4.c ****                     pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 195:FreeRTOS/portable/MemMang/heap_4.c **** 
 196:FreeRTOS/portable/MemMang/heap_4.c ****                     /* If the block is larger than required it can be split into
 197:FreeRTOS/portable/MemMang/heap_4.c ****                      * two. */
 198:FreeRTOS/portable/MemMang/heap_4.c ****                     if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 199:FreeRTOS/portable/MemMang/heap_4.c ****                     {
 200:FreeRTOS/portable/MemMang/heap_4.c ****                         /* This block is to be split into two.  Create a new
 201:FreeRTOS/portable/MemMang/heap_4.c ****                          * block following the number of bytes requested. The void
 202:FreeRTOS/portable/MemMang/heap_4.c ****                          * cast is used to prevent byte alignment warnings from the
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 5


 203:FreeRTOS/portable/MemMang/heap_4.c ****                          * compiler. */
 204:FreeRTOS/portable/MemMang/heap_4.c ****                         pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 205:FreeRTOS/portable/MemMang/heap_4.c ****                         configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) =
 206:FreeRTOS/portable/MemMang/heap_4.c **** 
 207:FreeRTOS/portable/MemMang/heap_4.c ****                         /* Calculate the sizes of two blocks split from the
 208:FreeRTOS/portable/MemMang/heap_4.c ****                          * single block. */
 209:FreeRTOS/portable/MemMang/heap_4.c ****                         pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 210:FreeRTOS/portable/MemMang/heap_4.c ****                         pxBlock->xBlockSize = xWantedSize;
 211:FreeRTOS/portable/MemMang/heap_4.c **** 
 212:FreeRTOS/portable/MemMang/heap_4.c ****                         /* Insert the new block into the list of free blocks. */
 213:FreeRTOS/portable/MemMang/heap_4.c ****                         prvInsertBlockIntoFreeList( pxNewBlockLink );
 214:FreeRTOS/portable/MemMang/heap_4.c ****                     }
 215:FreeRTOS/portable/MemMang/heap_4.c ****                     else
 216:FreeRTOS/portable/MemMang/heap_4.c ****                     {
 217:FreeRTOS/portable/MemMang/heap_4.c ****                         mtCOVERAGE_TEST_MARKER();
 218:FreeRTOS/portable/MemMang/heap_4.c ****                     }
 219:FreeRTOS/portable/MemMang/heap_4.c **** 
 220:FreeRTOS/portable/MemMang/heap_4.c ****                     xFreeBytesRemaining -= pxBlock->xBlockSize;
 221:FreeRTOS/portable/MemMang/heap_4.c **** 
 222:FreeRTOS/portable/MemMang/heap_4.c ****                     if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 223:FreeRTOS/portable/MemMang/heap_4.c ****                     {
 224:FreeRTOS/portable/MemMang/heap_4.c ****                         xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 225:FreeRTOS/portable/MemMang/heap_4.c ****                     }
 226:FreeRTOS/portable/MemMang/heap_4.c ****                     else
 227:FreeRTOS/portable/MemMang/heap_4.c ****                     {
 228:FreeRTOS/portable/MemMang/heap_4.c ****                         mtCOVERAGE_TEST_MARKER();
 229:FreeRTOS/portable/MemMang/heap_4.c ****                     }
 230:FreeRTOS/portable/MemMang/heap_4.c **** 
 231:FreeRTOS/portable/MemMang/heap_4.c ****                     /* The block is being returned - it is allocated and owned
 232:FreeRTOS/portable/MemMang/heap_4.c ****                      * by the application and has no "next" block. */
 233:FreeRTOS/portable/MemMang/heap_4.c ****                     pxBlock->xBlockSize |= xBlockAllocatedBit;
 234:FreeRTOS/portable/MemMang/heap_4.c ****                     pxBlock->pxNextFreeBlock = NULL;
 235:FreeRTOS/portable/MemMang/heap_4.c ****                     xNumberOfSuccessfulAllocations++;
 236:FreeRTOS/portable/MemMang/heap_4.c ****                 }
 237:FreeRTOS/portable/MemMang/heap_4.c ****                 else
 238:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 239:FreeRTOS/portable/MemMang/heap_4.c ****                     mtCOVERAGE_TEST_MARKER();
 240:FreeRTOS/portable/MemMang/heap_4.c ****                 }
 241:FreeRTOS/portable/MemMang/heap_4.c ****             }
 242:FreeRTOS/portable/MemMang/heap_4.c ****             else
 243:FreeRTOS/portable/MemMang/heap_4.c ****             {
 244:FreeRTOS/portable/MemMang/heap_4.c ****                 mtCOVERAGE_TEST_MARKER();
 245:FreeRTOS/portable/MemMang/heap_4.c ****             }
 246:FreeRTOS/portable/MemMang/heap_4.c ****         }
 247:FreeRTOS/portable/MemMang/heap_4.c ****         else
 248:FreeRTOS/portable/MemMang/heap_4.c ****         {
 249:FreeRTOS/portable/MemMang/heap_4.c ****             mtCOVERAGE_TEST_MARKER();
 250:FreeRTOS/portable/MemMang/heap_4.c ****         }
 251:FreeRTOS/portable/MemMang/heap_4.c **** 
 252:FreeRTOS/portable/MemMang/heap_4.c ****         traceMALLOC( pvReturn, xWantedSize );
 253:FreeRTOS/portable/MemMang/heap_4.c ****     }
 254:FreeRTOS/portable/MemMang/heap_4.c ****     ( void ) xTaskResumeAll();
 255:FreeRTOS/portable/MemMang/heap_4.c **** 
 256:FreeRTOS/portable/MemMang/heap_4.c ****     #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
 257:FreeRTOS/portable/MemMang/heap_4.c ****         {
 258:FreeRTOS/portable/MemMang/heap_4.c ****             if( pvReturn == NULL )
 259:FreeRTOS/portable/MemMang/heap_4.c ****             {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 6


 260:FreeRTOS/portable/MemMang/heap_4.c ****                 extern void vApplicationMallocFailedHook( void );
 261:FreeRTOS/portable/MemMang/heap_4.c ****                 vApplicationMallocFailedHook();
 262:FreeRTOS/portable/MemMang/heap_4.c ****             }
 263:FreeRTOS/portable/MemMang/heap_4.c ****             else
 264:FreeRTOS/portable/MemMang/heap_4.c ****             {
 265:FreeRTOS/portable/MemMang/heap_4.c ****                 mtCOVERAGE_TEST_MARKER();
 266:FreeRTOS/portable/MemMang/heap_4.c ****             }
 267:FreeRTOS/portable/MemMang/heap_4.c ****         }
 268:FreeRTOS/portable/MemMang/heap_4.c ****     #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */
 269:FreeRTOS/portable/MemMang/heap_4.c **** 
 270:FreeRTOS/portable/MemMang/heap_4.c ****     configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 271:FreeRTOS/portable/MemMang/heap_4.c ****     return pvReturn;
 272:FreeRTOS/portable/MemMang/heap_4.c **** }
 273:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 274:FreeRTOS/portable/MemMang/heap_4.c **** 
 275:FreeRTOS/portable/MemMang/heap_4.c **** void vPortFree( void * pv )
 276:FreeRTOS/portable/MemMang/heap_4.c **** {
 277:FreeRTOS/portable/MemMang/heap_4.c ****     uint8_t * puc = ( uint8_t * ) pv;
 278:FreeRTOS/portable/MemMang/heap_4.c ****     BlockLink_t * pxLink;
 279:FreeRTOS/portable/MemMang/heap_4.c **** 
 280:FreeRTOS/portable/MemMang/heap_4.c ****     if( pv != NULL )
 281:FreeRTOS/portable/MemMang/heap_4.c ****     {
 282:FreeRTOS/portable/MemMang/heap_4.c ****         /* The memory being freed will have an BlockLink_t structure immediately
 283:FreeRTOS/portable/MemMang/heap_4.c ****          * before it. */
 284:FreeRTOS/portable/MemMang/heap_4.c ****         puc -= xHeapStructSize;
 285:FreeRTOS/portable/MemMang/heap_4.c **** 
 286:FreeRTOS/portable/MemMang/heap_4.c ****         /* This casting is to keep the compiler from issuing warnings. */
 287:FreeRTOS/portable/MemMang/heap_4.c ****         pxLink = ( void * ) puc;
 288:FreeRTOS/portable/MemMang/heap_4.c **** 
 289:FreeRTOS/portable/MemMang/heap_4.c ****         /* Check the block is actually allocated. */
 290:FreeRTOS/portable/MemMang/heap_4.c ****         configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 291:FreeRTOS/portable/MemMang/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 292:FreeRTOS/portable/MemMang/heap_4.c **** 
 293:FreeRTOS/portable/MemMang/heap_4.c ****         if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 294:FreeRTOS/portable/MemMang/heap_4.c ****         {
 295:FreeRTOS/portable/MemMang/heap_4.c ****             if( pxLink->pxNextFreeBlock == NULL )
 296:FreeRTOS/portable/MemMang/heap_4.c ****             {
 297:FreeRTOS/portable/MemMang/heap_4.c ****                 /* The block is being returned to the heap - it is no longer
 298:FreeRTOS/portable/MemMang/heap_4.c ****                  * allocated. */
 299:FreeRTOS/portable/MemMang/heap_4.c ****                 pxLink->xBlockSize &= ~xBlockAllocatedBit;
 300:FreeRTOS/portable/MemMang/heap_4.c **** 
 301:FreeRTOS/portable/MemMang/heap_4.c ****                 vTaskSuspendAll();
 302:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 303:FreeRTOS/portable/MemMang/heap_4.c ****                     /* Add this block to the list of free blocks. */
 304:FreeRTOS/portable/MemMang/heap_4.c ****                     xFreeBytesRemaining += pxLink->xBlockSize;
 305:FreeRTOS/portable/MemMang/heap_4.c ****                     traceFREE( pv, pxLink->xBlockSize );
 306:FreeRTOS/portable/MemMang/heap_4.c ****                     prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 307:FreeRTOS/portable/MemMang/heap_4.c ****                     xNumberOfSuccessfulFrees++;
 308:FreeRTOS/portable/MemMang/heap_4.c ****                 }
 309:FreeRTOS/portable/MemMang/heap_4.c ****                 ( void ) xTaskResumeAll();
 310:FreeRTOS/portable/MemMang/heap_4.c ****             }
 311:FreeRTOS/portable/MemMang/heap_4.c ****             else
 312:FreeRTOS/portable/MemMang/heap_4.c ****             {
 313:FreeRTOS/portable/MemMang/heap_4.c ****                 mtCOVERAGE_TEST_MARKER();
 314:FreeRTOS/portable/MemMang/heap_4.c ****             }
 315:FreeRTOS/portable/MemMang/heap_4.c ****         }
 316:FreeRTOS/portable/MemMang/heap_4.c ****         else
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 7


 317:FreeRTOS/portable/MemMang/heap_4.c ****         {
 318:FreeRTOS/portable/MemMang/heap_4.c ****             mtCOVERAGE_TEST_MARKER();
 319:FreeRTOS/portable/MemMang/heap_4.c ****         }
 320:FreeRTOS/portable/MemMang/heap_4.c ****     }
 321:FreeRTOS/portable/MemMang/heap_4.c **** }
 322:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 323:FreeRTOS/portable/MemMang/heap_4.c **** 
 324:FreeRTOS/portable/MemMang/heap_4.c **** size_t xPortGetFreeHeapSize( void )
 325:FreeRTOS/portable/MemMang/heap_4.c **** {
 326:FreeRTOS/portable/MemMang/heap_4.c ****     return xFreeBytesRemaining;
 327:FreeRTOS/portable/MemMang/heap_4.c **** }
 328:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 329:FreeRTOS/portable/MemMang/heap_4.c **** 
 330:FreeRTOS/portable/MemMang/heap_4.c **** size_t xPortGetMinimumEverFreeHeapSize( void )
 331:FreeRTOS/portable/MemMang/heap_4.c **** {
 332:FreeRTOS/portable/MemMang/heap_4.c ****     return xMinimumEverFreeBytesRemaining;
 333:FreeRTOS/portable/MemMang/heap_4.c **** }
 334:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 335:FreeRTOS/portable/MemMang/heap_4.c **** 
 336:FreeRTOS/portable/MemMang/heap_4.c **** void vPortInitialiseBlocks( void )
 337:FreeRTOS/portable/MemMang/heap_4.c **** {
 338:FreeRTOS/portable/MemMang/heap_4.c ****     /* This just exists to keep the linker quiet. */
 339:FreeRTOS/portable/MemMang/heap_4.c **** }
 340:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 341:FreeRTOS/portable/MemMang/heap_4.c **** 
 342:FreeRTOS/portable/MemMang/heap_4.c **** static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
 343:FreeRTOS/portable/MemMang/heap_4.c **** {
  28              		.loc 1 343 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 344:FreeRTOS/portable/MemMang/heap_4.c ****     BlockLink_t * pxFirstFreeBlock;
  33              		.loc 1 344 5 view .LVU1
 345:FreeRTOS/portable/MemMang/heap_4.c ****     uint8_t * pucAlignedHeap;
  34              		.loc 1 345 5 view .LVU2
 346:FreeRTOS/portable/MemMang/heap_4.c ****     size_t uxAddress;
  35              		.loc 1 346 5 view .LVU3
 347:FreeRTOS/portable/MemMang/heap_4.c ****     size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
  36              		.loc 1 347 5 view .LVU4
  37              	.LVL0:
 348:FreeRTOS/portable/MemMang/heap_4.c **** 
 349:FreeRTOS/portable/MemMang/heap_4.c ****     /* Ensure the heap starts on a correctly aligned boundary. */
 350:FreeRTOS/portable/MemMang/heap_4.c ****     uxAddress = ( size_t ) ucHeap;
  38              		.loc 1 350 5 view .LVU5
  39              		.loc 1 350 15 is_stmt 0 view .LVU6
  40 0000 124A     		ldr	r2, .L4
  41              	.LVL1:
 351:FreeRTOS/portable/MemMang/heap_4.c **** 
 352:FreeRTOS/portable/MemMang/heap_4.c ****     if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  42              		.loc 1 352 5 is_stmt 1 view .LVU7
  43              		.loc 1 352 7 is_stmt 0 view .LVU8
  44 0002 12F0070F 		tst	r2, #7
  45 0006 1ED0     		beq	.L3
 353:FreeRTOS/portable/MemMang/heap_4.c ****     {
 354:FreeRTOS/portable/MemMang/heap_4.c ****         uxAddress += ( portBYTE_ALIGNMENT - 1 );
  46              		.loc 1 354 9 is_stmt 1 view .LVU9
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 8


  47              		.loc 1 354 19 is_stmt 0 view .LVU10
  48 0008 D11D     		adds	r1, r2, #7
  49              	.LVL2:
 355:FreeRTOS/portable/MemMang/heap_4.c ****         uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  50              		.loc 1 355 9 is_stmt 1 view .LVU11
  51              		.loc 1 355 19 is_stmt 0 view .LVU12
  52 000a 21F00701 		bic	r1, r1, #7
  53              	.LVL3:
 356:FreeRTOS/portable/MemMang/heap_4.c ****         xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
  54              		.loc 1 356 9 is_stmt 1 view .LVU13
  55              		.loc 1 356 24 is_stmt 0 view .LVU14
  56 000e C1F58043 		rsb	r3, r1, #16384
  57 0012 1344     		add	r3, r3, r2
  58              	.LVL4:
 355:FreeRTOS/portable/MemMang/heap_4.c ****         uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  59              		.loc 1 355 19 view .LVU15
  60 0014 0A46     		mov	r2, r1
  61              	.LVL5:
  62              	.L2:
 357:FreeRTOS/portable/MemMang/heap_4.c ****     }
 358:FreeRTOS/portable/MemMang/heap_4.c **** 
 359:FreeRTOS/portable/MemMang/heap_4.c ****     pucAlignedHeap = ( uint8_t * ) uxAddress;
  63              		.loc 1 359 5 is_stmt 1 view .LVU16
 360:FreeRTOS/portable/MemMang/heap_4.c **** 
 361:FreeRTOS/portable/MemMang/heap_4.c ****     /* xStart is used to hold a pointer to the first item in the list of free
 362:FreeRTOS/portable/MemMang/heap_4.c ****      * blocks.  The void cast is used to prevent compiler warnings. */
 363:FreeRTOS/portable/MemMang/heap_4.c ****     xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
  64              		.loc 1 363 5 view .LVU17
  65              		.loc 1 363 28 is_stmt 0 view .LVU18
  66 0016 0E48     		ldr	r0, .L4+4
  67 0018 0260     		str	r2, [r0]
 364:FreeRTOS/portable/MemMang/heap_4.c ****     xStart.xBlockSize = ( size_t ) 0;
  68              		.loc 1 364 5 is_stmt 1 view .LVU19
  69              		.loc 1 364 23 is_stmt 0 view .LVU20
  70 001a 0021     		movs	r1, #0
  71 001c 4160     		str	r1, [r0, #4]
 365:FreeRTOS/portable/MemMang/heap_4.c **** 
 366:FreeRTOS/portable/MemMang/heap_4.c ****     /* pxEnd is used to mark the end of the list of free blocks and is inserted
 367:FreeRTOS/portable/MemMang/heap_4.c ****      * at the end of the heap space. */
 368:FreeRTOS/portable/MemMang/heap_4.c ****     uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
  72              		.loc 1 368 5 is_stmt 1 view .LVU21
  73              		.loc 1 368 15 is_stmt 0 view .LVU22
  74 001e 1344     		add	r3, r3, r2
  75              	.LVL6:
 369:FreeRTOS/portable/MemMang/heap_4.c ****     uxAddress -= xHeapStructSize;
  76              		.loc 1 369 5 is_stmt 1 view .LVU23
  77              		.loc 1 369 15 is_stmt 0 view .LVU24
  78 0020 083B     		subs	r3, r3, #8
  79              	.LVL7:
 370:FreeRTOS/portable/MemMang/heap_4.c ****     uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  80              		.loc 1 370 5 is_stmt 1 view .LVU25
  81              		.loc 1 370 15 is_stmt 0 view .LVU26
  82 0022 23F00703 		bic	r3, r3, #7
  83              	.LVL8:
 371:FreeRTOS/portable/MemMang/heap_4.c ****     pxEnd = ( void * ) uxAddress;
  84              		.loc 1 371 5 is_stmt 1 view .LVU27
  85              		.loc 1 371 11 is_stmt 0 view .LVU28
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 9


  86 0026 0B48     		ldr	r0, .L4+8
  87 0028 0360     		str	r3, [r0]
 372:FreeRTOS/portable/MemMang/heap_4.c ****     pxEnd->xBlockSize = 0;
  88              		.loc 1 372 5 is_stmt 1 view .LVU29
  89              		.loc 1 372 23 is_stmt 0 view .LVU30
  90 002a 5960     		str	r1, [r3, #4]
 373:FreeRTOS/portable/MemMang/heap_4.c ****     pxEnd->pxNextFreeBlock = NULL;
  91              		.loc 1 373 5 is_stmt 1 view .LVU31
  92              		.loc 1 373 28 is_stmt 0 view .LVU32
  93 002c 1960     		str	r1, [r3]
 374:FreeRTOS/portable/MemMang/heap_4.c **** 
 375:FreeRTOS/portable/MemMang/heap_4.c ****     /* To start with there is a single free block that is sized to take up the
 376:FreeRTOS/portable/MemMang/heap_4.c ****      * entire heap space, minus the space taken by pxEnd. */
 377:FreeRTOS/portable/MemMang/heap_4.c ****     pxFirstFreeBlock = ( void * ) pucAlignedHeap;
  94              		.loc 1 377 5 is_stmt 1 view .LVU33
  95              	.LVL9:
 378:FreeRTOS/portable/MemMang/heap_4.c ****     pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
  96              		.loc 1 378 5 view .LVU34
  97              		.loc 1 378 46 is_stmt 0 view .LVU35
  98 002e 991A     		subs	r1, r3, r2
  99              		.loc 1 378 34 view .LVU36
 100 0030 5160     		str	r1, [r2, #4]
 379:FreeRTOS/portable/MemMang/heap_4.c ****     pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 101              		.loc 1 379 5 is_stmt 1 view .LVU37
 102              		.loc 1 379 39 is_stmt 0 view .LVU38
 103 0032 1360     		str	r3, [r2]
 380:FreeRTOS/portable/MemMang/heap_4.c **** 
 381:FreeRTOS/portable/MemMang/heap_4.c ****     /* Only one block exists - and it covers the entire usable heap space. */
 382:FreeRTOS/portable/MemMang/heap_4.c ****     xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 104              		.loc 1 382 5 is_stmt 1 view .LVU39
 105              		.loc 1 382 36 is_stmt 0 view .LVU40
 106 0034 084B     		ldr	r3, .L4+12
 107              	.LVL10:
 108              		.loc 1 382 36 view .LVU41
 109 0036 1960     		str	r1, [r3]
 383:FreeRTOS/portable/MemMang/heap_4.c ****     xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 110              		.loc 1 383 5 is_stmt 1 view .LVU42
 111              		.loc 1 383 25 is_stmt 0 view .LVU43
 112 0038 084B     		ldr	r3, .L4+16
 113 003a 1960     		str	r1, [r3]
 384:FreeRTOS/portable/MemMang/heap_4.c **** 
 385:FreeRTOS/portable/MemMang/heap_4.c ****     /* Work out the position of the top bit in a size_t variable. */
 386:FreeRTOS/portable/MemMang/heap_4.c ****     xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 114              		.loc 1 386 5 is_stmt 1 view .LVU44
 115              		.loc 1 386 24 is_stmt 0 view .LVU45
 116 003c 084B     		ldr	r3, .L4+20
 117 003e 4FF00042 		mov	r2, #-2147483648
 118              	.LVL11:
 119              		.loc 1 386 24 view .LVU46
 120 0042 1A60     		str	r2, [r3]
 387:FreeRTOS/portable/MemMang/heap_4.c **** }
 121              		.loc 1 387 1 view .LVU47
 122 0044 7047     		bx	lr
 123              	.LVL12:
 124              	.L3:
 347:FreeRTOS/portable/MemMang/heap_4.c **** 
 125              		.loc 1 347 12 view .LVU48
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 10


 126 0046 4FF48043 		mov	r3, #16384
 127 004a E4E7     		b	.L2
 128              	.L5:
 129              		.align	2
 130              	.L4:
 131 004c 00000000 		.word	ucHeap
 132 0050 00000000 		.word	.LANCHOR0
 133 0054 00000000 		.word	.LANCHOR1
 134 0058 00000000 		.word	.LANCHOR2
 135 005c 00000000 		.word	.LANCHOR3
 136 0060 00000000 		.word	.LANCHOR4
 137              		.cfi_endproc
 138              	.LFE10:
 140              		.section	.text.prvInsertBlockIntoFreeList,"ax",%progbits
 141              		.align	1
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 146              	prvInsertBlockIntoFreeList:
 147              	.LVL13:
 148              	.LFB11:
 388:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 389:FreeRTOS/portable/MemMang/heap_4.c **** 
 390:FreeRTOS/portable/MemMang/heap_4.c **** static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
 391:FreeRTOS/portable/MemMang/heap_4.c **** {
 149              		.loc 1 391 1 is_stmt 1 view -0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 392:FreeRTOS/portable/MemMang/heap_4.c ****     BlockLink_t * pxIterator;
 154              		.loc 1 392 5 view .LVU50
 393:FreeRTOS/portable/MemMang/heap_4.c ****     uint8_t * puc;
 155              		.loc 1 393 5 view .LVU51
 394:FreeRTOS/portable/MemMang/heap_4.c **** 
 395:FreeRTOS/portable/MemMang/heap_4.c ****     /* Iterate through the list until a block is found that has a higher address
 396:FreeRTOS/portable/MemMang/heap_4.c ****      * than the block being inserted. */
 397:FreeRTOS/portable/MemMang/heap_4.c ****     for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterat
 156              		.loc 1 397 5 view .LVU52
 157              		.loc 1 397 21 is_stmt 0 view .LVU53
 158 0000 164B     		ldr	r3, .L21
 159              	.LVL14:
 160              	.L7:
 161              		.loc 1 397 32 is_stmt 1 discriminator 1 view .LVU54
 162 0002 1A46     		mov	r2, r3
 163              		.loc 1 397 42 is_stmt 0 discriminator 1 view .LVU55
 164 0004 1B68     		ldr	r3, [r3]
 165              	.LVL15:
 166              		.loc 1 397 5 discriminator 1 view .LVU56
 167 0006 8342     		cmp	r3, r0
 168 0008 FBD3     		bcc	.L7
 398:FreeRTOS/portable/MemMang/heap_4.c ****     {
 399:FreeRTOS/portable/MemMang/heap_4.c ****         /* Nothing to do here, just iterate to the right position. */
 400:FreeRTOS/portable/MemMang/heap_4.c ****     }
 401:FreeRTOS/portable/MemMang/heap_4.c **** 
 402:FreeRTOS/portable/MemMang/heap_4.c ****     /* Do the block being inserted, and the block it is being inserted after
 403:FreeRTOS/portable/MemMang/heap_4.c ****      * make a contiguous block of memory? */
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 11


 404:FreeRTOS/portable/MemMang/heap_4.c ****     puc = ( uint8_t * ) pxIterator;
 169              		.loc 1 404 5 is_stmt 1 view .LVU57
 170              	.LVL16:
 405:FreeRTOS/portable/MemMang/heap_4.c **** 
 406:FreeRTOS/portable/MemMang/heap_4.c ****     if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 171              		.loc 1 406 5 view .LVU58
 172              		.loc 1 406 27 is_stmt 0 view .LVU59
 173 000a 5168     		ldr	r1, [r2, #4]
 174              		.loc 1 406 15 view .LVU60
 175 000c 02EB010C 		add	ip, r2, r1
 176              		.loc 1 406 7 view .LVU61
 177 0010 8445     		cmp	ip, r0
 178 0012 09D0     		beq	.L19
 179              	.L8:
 407:FreeRTOS/portable/MemMang/heap_4.c ****     {
 408:FreeRTOS/portable/MemMang/heap_4.c ****         pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 409:FreeRTOS/portable/MemMang/heap_4.c ****         pxBlockToInsert = pxIterator;
 410:FreeRTOS/portable/MemMang/heap_4.c ****     }
 411:FreeRTOS/portable/MemMang/heap_4.c ****     else
 412:FreeRTOS/portable/MemMang/heap_4.c ****     {
 413:FreeRTOS/portable/MemMang/heap_4.c ****         mtCOVERAGE_TEST_MARKER();
 180              		.loc 1 413 33 is_stmt 1 view .LVU62
 414:FreeRTOS/portable/MemMang/heap_4.c ****     }
 415:FreeRTOS/portable/MemMang/heap_4.c **** 
 416:FreeRTOS/portable/MemMang/heap_4.c ****     /* Do the block being inserted, and the block it is being inserted before
 417:FreeRTOS/portable/MemMang/heap_4.c ****      * make a contiguous block of memory? */
 418:FreeRTOS/portable/MemMang/heap_4.c ****     puc = ( uint8_t * ) pxBlockToInsert;
 181              		.loc 1 418 5 view .LVU63
 182              	.LVL17:
 419:FreeRTOS/portable/MemMang/heap_4.c **** 
 420:FreeRTOS/portable/MemMang/heap_4.c ****     if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 183              		.loc 1 420 5 view .LVU64
 184              		.loc 1 420 32 is_stmt 0 view .LVU65
 185 0014 4168     		ldr	r1, [r0, #4]
 186              		.loc 1 420 15 view .LVU66
 187 0016 00EB010C 		add	ip, r0, r1
 188              		.loc 1 420 7 view .LVU67
 189 001a 6345     		cmp	r3, ip
 190 001c 09D0     		beq	.L20
 421:FreeRTOS/portable/MemMang/heap_4.c ****     {
 422:FreeRTOS/portable/MemMang/heap_4.c ****         if( pxIterator->pxNextFreeBlock != pxEnd )
 423:FreeRTOS/portable/MemMang/heap_4.c ****         {
 424:FreeRTOS/portable/MemMang/heap_4.c ****             /* Form one big block from the two blocks. */
 425:FreeRTOS/portable/MemMang/heap_4.c ****             pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 426:FreeRTOS/portable/MemMang/heap_4.c ****             pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 427:FreeRTOS/portable/MemMang/heap_4.c ****         }
 428:FreeRTOS/portable/MemMang/heap_4.c ****         else
 429:FreeRTOS/portable/MemMang/heap_4.c ****         {
 430:FreeRTOS/portable/MemMang/heap_4.c ****             pxBlockToInsert->pxNextFreeBlock = pxEnd;
 431:FreeRTOS/portable/MemMang/heap_4.c ****         }
 432:FreeRTOS/portable/MemMang/heap_4.c ****     }
 433:FreeRTOS/portable/MemMang/heap_4.c ****     else
 434:FreeRTOS/portable/MemMang/heap_4.c ****     {
 435:FreeRTOS/portable/MemMang/heap_4.c ****         pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 191              		.loc 1 435 9 is_stmt 1 view .LVU68
 192              		.loc 1 435 42 is_stmt 0 view .LVU69
 193 001e 0360     		str	r3, [r0]
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 12


 436:FreeRTOS/portable/MemMang/heap_4.c ****     }
 437:FreeRTOS/portable/MemMang/heap_4.c **** 
 438:FreeRTOS/portable/MemMang/heap_4.c ****     /* If the block being inserted plugged a gab, so was merged with the block
 439:FreeRTOS/portable/MemMang/heap_4.c ****      * before and the block after, then it's pxNextFreeBlock pointer will have
 440:FreeRTOS/portable/MemMang/heap_4.c ****      * already been set, and should not be set here as that would make it point
 441:FreeRTOS/portable/MemMang/heap_4.c ****      * to itself. */
 442:FreeRTOS/portable/MemMang/heap_4.c ****     if( pxIterator != pxBlockToInsert )
 194              		.loc 1 442 5 is_stmt 1 view .LVU70
 195              		.loc 1 442 7 is_stmt 0 view .LVU71
 196 0020 9042     		cmp	r0, r2
 197 0022 19D0     		beq	.L16
 443:FreeRTOS/portable/MemMang/heap_4.c ****     {
 444:FreeRTOS/portable/MemMang/heap_4.c ****         pxIterator->pxNextFreeBlock = pxBlockToInsert;
 198              		.loc 1 444 9 is_stmt 1 view .LVU72
 199              		.loc 1 444 37 is_stmt 0 view .LVU73
 200 0024 1060     		str	r0, [r2]
 445:FreeRTOS/portable/MemMang/heap_4.c ****     }
 446:FreeRTOS/portable/MemMang/heap_4.c ****     else
 447:FreeRTOS/portable/MemMang/heap_4.c ****     {
 448:FreeRTOS/portable/MemMang/heap_4.c ****         mtCOVERAGE_TEST_MARKER();
 201              		.loc 1 448 33 is_stmt 1 view .LVU74
 202 0026 7047     		bx	lr
 203              	.LVL18:
 204              	.L19:
 408:FreeRTOS/portable/MemMang/heap_4.c ****         pxBlockToInsert = pxIterator;
 205              		.loc 1 408 9 view .LVU75
 408:FreeRTOS/portable/MemMang/heap_4.c ****         pxBlockToInsert = pxIterator;
 206              		.loc 1 408 50 is_stmt 0 view .LVU76
 207 0028 4068     		ldr	r0, [r0, #4]
 208              	.LVL19:
 408:FreeRTOS/portable/MemMang/heap_4.c ****         pxBlockToInsert = pxIterator;
 209              		.loc 1 408 32 view .LVU77
 210 002a 0144     		add	r1, r1, r0
 211 002c 5160     		str	r1, [r2, #4]
 409:FreeRTOS/portable/MemMang/heap_4.c ****     }
 212              		.loc 1 409 9 is_stmt 1 view .LVU78
 213              	.LVL20:
 409:FreeRTOS/portable/MemMang/heap_4.c ****     }
 214              		.loc 1 409 25 is_stmt 0 view .LVU79
 215 002e 1046     		mov	r0, r2
 216 0030 F0E7     		b	.L8
 217              	.LVL21:
 218              	.L20:
 391:FreeRTOS/portable/MemMang/heap_4.c ****     BlockLink_t * pxIterator;
 219              		.loc 1 391 1 view .LVU80
 220 0032 10B4     		push	{r4}
 221              	.LCFI0:
 222              		.cfi_def_cfa_offset 4
 223              		.cfi_offset 4, -4
 422:FreeRTOS/portable/MemMang/heap_4.c ****         {
 224              		.loc 1 422 9 is_stmt 1 view .LVU81
 422:FreeRTOS/portable/MemMang/heap_4.c ****         {
 225              		.loc 1 422 41 is_stmt 0 view .LVU82
 226 0034 0A4C     		ldr	r4, .L21+4
 227 0036 2468     		ldr	r4, [r4]
 422:FreeRTOS/portable/MemMang/heap_4.c ****         {
 228              		.loc 1 422 11 view .LVU83
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 13


 229 0038 A342     		cmp	r3, r4
 230 003a 0BD0     		beq	.L10
 425:FreeRTOS/portable/MemMang/heap_4.c ****             pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 231              		.loc 1 425 13 is_stmt 1 view .LVU84
 425:FreeRTOS/portable/MemMang/heap_4.c ****             pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 232              		.loc 1 425 71 is_stmt 0 view .LVU85
 233 003c 5B68     		ldr	r3, [r3, #4]
 425:FreeRTOS/portable/MemMang/heap_4.c ****             pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 234              		.loc 1 425 41 view .LVU86
 235 003e 1944     		add	r1, r1, r3
 236 0040 4160     		str	r1, [r0, #4]
 426:FreeRTOS/portable/MemMang/heap_4.c ****         }
 237              		.loc 1 426 13 is_stmt 1 view .LVU87
 426:FreeRTOS/portable/MemMang/heap_4.c ****         }
 238              		.loc 1 426 58 is_stmt 0 view .LVU88
 239 0042 1368     		ldr	r3, [r2]
 426:FreeRTOS/portable/MemMang/heap_4.c ****         }
 240              		.loc 1 426 75 view .LVU89
 241 0044 1B68     		ldr	r3, [r3]
 426:FreeRTOS/portable/MemMang/heap_4.c ****         }
 242              		.loc 1 426 46 view .LVU90
 243 0046 0360     		str	r3, [r0]
 244              	.L11:
 442:FreeRTOS/portable/MemMang/heap_4.c ****     {
 245              		.loc 1 442 5 is_stmt 1 view .LVU91
 442:FreeRTOS/portable/MemMang/heap_4.c ****     {
 246              		.loc 1 442 7 is_stmt 0 view .LVU92
 247 0048 9042     		cmp	r0, r2
 248 004a 00D0     		beq	.L6
 444:FreeRTOS/portable/MemMang/heap_4.c ****     }
 249              		.loc 1 444 9 is_stmt 1 view .LVU93
 444:FreeRTOS/portable/MemMang/heap_4.c ****     }
 250              		.loc 1 444 37 is_stmt 0 view .LVU94
 251 004c 1060     		str	r0, [r2]
 252              		.loc 1 448 33 is_stmt 1 view .LVU95
 253              	.L6:
 449:FreeRTOS/portable/MemMang/heap_4.c ****     }
 450:FreeRTOS/portable/MemMang/heap_4.c **** }
 254              		.loc 1 450 1 is_stmt 0 view .LVU96
 255 004e 5DF8044B 		ldr	r4, [sp], #4
 256              	.LCFI1:
 257              		.cfi_remember_state
 258              		.cfi_restore 4
 259              		.cfi_def_cfa_offset 0
 260 0052 7047     		bx	lr
 261              	.L10:
 262              	.LCFI2:
 263              		.cfi_restore_state
 430:FreeRTOS/portable/MemMang/heap_4.c ****         }
 264              		.loc 1 430 13 is_stmt 1 view .LVU97
 430:FreeRTOS/portable/MemMang/heap_4.c ****         }
 265              		.loc 1 430 46 is_stmt 0 view .LVU98
 266 0054 0460     		str	r4, [r0]
 267 0056 F7E7     		b	.L11
 268              	.L16:
 269              	.LCFI3:
 270              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 14


 271              		.cfi_restore 4
 430:FreeRTOS/portable/MemMang/heap_4.c ****         }
 272              		.loc 1 430 46 view .LVU99
 273 0058 7047     		bx	lr
 274              	.L22:
 275 005a 00BF     		.align	2
 276              	.L21:
 277 005c 00000000 		.word	.LANCHOR0
 278 0060 00000000 		.word	.LANCHOR1
 279              		.cfi_endproc
 280              	.LFE11:
 282              		.section	.text.pvPortMalloc,"ax",%progbits
 283              		.align	1
 284              		.global	pvPortMalloc
 285              		.syntax unified
 286              		.thumb
 287              		.thumb_func
 289              	pvPortMalloc:
 290              	.LVL22:
 291              	.LFB5:
 116:FreeRTOS/portable/MemMang/heap_4.c ****     BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
 292              		.loc 1 116 1 is_stmt 1 view -0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 116:FreeRTOS/portable/MemMang/heap_4.c ****     BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
 296              		.loc 1 116 1 is_stmt 0 view .LVU101
 297 0000 38B5     		push	{r3, r4, r5, lr}
 298              	.LCFI4:
 299              		.cfi_def_cfa_offset 16
 300              		.cfi_offset 3, -16
 301              		.cfi_offset 4, -12
 302              		.cfi_offset 5, -8
 303              		.cfi_offset 14, -4
 304 0002 0446     		mov	r4, r0
 117:FreeRTOS/portable/MemMang/heap_4.c ****     void * pvReturn = NULL;
 305              		.loc 1 117 5 is_stmt 1 view .LVU102
 118:FreeRTOS/portable/MemMang/heap_4.c **** 
 306              		.loc 1 118 5 view .LVU103
 307              	.LVL23:
 120:FreeRTOS/portable/MemMang/heap_4.c ****     {
 308              		.loc 1 120 5 view .LVU104
 309 0004 FFF7FEFF 		bl	vTaskSuspendAll
 310              	.LVL24:
 124:FreeRTOS/portable/MemMang/heap_4.c ****         {
 311              		.loc 1 124 9 view .LVU105
 124:FreeRTOS/portable/MemMang/heap_4.c ****         {
 312              		.loc 1 124 19 is_stmt 0 view .LVU106
 313 0008 3B4B     		ldr	r3, .L44
 314 000a 1B68     		ldr	r3, [r3]
 124:FreeRTOS/portable/MemMang/heap_4.c ****         {
 315              		.loc 1 124 11 view .LVU107
 316 000c DBB1     		cbz	r3, .L43
 317              	.L24:
 130:FreeRTOS/portable/MemMang/heap_4.c ****         }
 318              		.loc 1 130 37 is_stmt 1 view .LVU108
 137:FreeRTOS/portable/MemMang/heap_4.c ****         {
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 15


 319              		.loc 1 137 9 view .LVU109
 137:FreeRTOS/portable/MemMang/heap_4.c ****         {
 320              		.loc 1 137 27 is_stmt 0 view .LVU110
 321 000e 3B4B     		ldr	r3, .L44+4
 322 0010 1B68     		ldr	r3, [r3]
 137:FreeRTOS/portable/MemMang/heap_4.c ****         {
 323              		.loc 1 137 11 view .LVU111
 324 0012 1C42     		tst	r4, r3
 325 0014 55D1     		bne	.L35
 141:FreeRTOS/portable/MemMang/heap_4.c ****                 ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 326              		.loc 1 141 13 is_stmt 1 view .LVU112
 141:FreeRTOS/portable/MemMang/heap_4.c ****                 ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 327              		.loc 1 141 37 is_stmt 0 view .LVU113
 328 0016 631E     		subs	r3, r4, #1
 141:FreeRTOS/portable/MemMang/heap_4.c ****                 ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 329              		.loc 1 141 15 view .LVU114
 330 0018 13F10A0F 		cmn	r3, #10
 331 001c 53D8     		bhi	.L36
 144:FreeRTOS/portable/MemMang/heap_4.c **** 
 332              		.loc 1 144 17 is_stmt 1 view .LVU115
 144:FreeRTOS/portable/MemMang/heap_4.c **** 
 333              		.loc 1 144 29 is_stmt 0 view .LVU116
 334 001e 04F10802 		add	r2, r4, #8
 335              	.LVL25:
 147:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 336              		.loc 1 147 17 is_stmt 1 view .LVU117
 147:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 337              		.loc 1 147 19 is_stmt 0 view .LVU118
 338 0022 14F0070F 		tst	r4, #7
 339 0026 05D0     		beq	.L26
 150:FreeRTOS/portable/MemMang/heap_4.c ****                             > xWantedSize )
 340              		.loc 1 150 21 is_stmt 1 view .LVU119
 150:FreeRTOS/portable/MemMang/heap_4.c ****                             > xWantedSize )
 341              		.loc 1 150 39 is_stmt 0 view .LVU120
 342 0028 22F00703 		bic	r3, r2, #7
 343 002c 0833     		adds	r3, r3, #8
 150:FreeRTOS/portable/MemMang/heap_4.c ****                             > xWantedSize )
 344              		.loc 1 150 23 view .LVU121
 345 002e 9342     		cmp	r3, r2
 346 0030 58D9     		bls	.L37
 153:FreeRTOS/portable/MemMang/heap_4.c ****                         configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 347              		.loc 1 153 37 view .LVU122
 348 0032 1A46     		mov	r2, r3
 349              	.LVL26:
 350              	.L26:
 171:FreeRTOS/portable/MemMang/heap_4.c ****             {
 351              		.loc 1 171 13 is_stmt 1 view .LVU123
 171:FreeRTOS/portable/MemMang/heap_4.c ****             {
 352              		.loc 1 171 15 is_stmt 0 view .LVU124
 353 0034 002A     		cmp	r2, #0
 354 0036 57D0     		beq	.L38
 171:FreeRTOS/portable/MemMang/heap_4.c ****             {
 355              		.loc 1 171 54 discriminator 1 view .LVU125
 356 0038 314B     		ldr	r3, .L44+8
 357 003a 1B68     		ldr	r3, [r3]
 171:FreeRTOS/portable/MemMang/heap_4.c ****             {
 358              		.loc 1 171 37 discriminator 1 view .LVU126
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 16


 359 003c 9342     		cmp	r3, r2
 360 003e 55D3     		bcc	.L39
 175:FreeRTOS/portable/MemMang/heap_4.c ****                 pxBlock = xStart.pxNextFreeBlock;
 361              		.loc 1 175 17 is_stmt 1 view .LVU127
 362              	.LVL27:
 176:FreeRTOS/portable/MemMang/heap_4.c **** 
 363              		.loc 1 176 17 view .LVU128
 176:FreeRTOS/portable/MemMang/heap_4.c **** 
 364              		.loc 1 176 25 is_stmt 0 view .LVU129
 365 0040 3049     		ldr	r1, .L44+12
 366 0042 0C68     		ldr	r4, [r1]
 367              	.LVL28:
 178:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 368              		.loc 1 178 17 is_stmt 1 view .LVU130
 178:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 369              		.loc 1 178 22 is_stmt 0 view .LVU131
 370 0044 04E0     		b	.L28
 371              	.LVL29:
 372              	.L43:
 126:FreeRTOS/portable/MemMang/heap_4.c ****         }
 373              		.loc 1 126 13 is_stmt 1 view .LVU132
 374 0046 FFF7FEFF 		bl	prvHeapInit
 375              	.LVL30:
 376 004a E0E7     		b	.L24
 377              	.LVL31:
 378              	.L40:
 180:FreeRTOS/portable/MemMang/heap_4.c ****                     pxBlock = pxBlock->pxNextFreeBlock;
 379              		.loc 1 180 37 is_stmt 0 view .LVU133
 380 004c 2146     		mov	r1, r4
 381              	.LVL32:
 181:FreeRTOS/portable/MemMang/heap_4.c ****                 }
 382              		.loc 1 181 29 view .LVU134
 383 004e 1C46     		mov	r4, r3
 384              	.LVL33:
 385              	.L28:
 178:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 386              		.loc 1 178 22 is_stmt 1 view .LVU135
 178:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 387              		.loc 1 178 33 is_stmt 0 view .LVU136
 388 0050 6368     		ldr	r3, [r4, #4]
 178:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 389              		.loc 1 178 22 view .LVU137
 390 0052 9342     		cmp	r3, r2
 391 0054 02D2     		bcs	.L27
 178:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 392              		.loc 1 178 74 discriminator 1 view .LVU138
 393 0056 2368     		ldr	r3, [r4]
 178:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 394              		.loc 1 178 62 discriminator 1 view .LVU139
 395 0058 002B     		cmp	r3, #0
 396 005a F7D1     		bne	.L40
 397              	.L27:
 186:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 398              		.loc 1 186 17 is_stmt 1 view .LVU140
 186:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 399              		.loc 1 186 29 is_stmt 0 view .LVU141
 400 005c 264B     		ldr	r3, .L44
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 17


 401 005e 1B68     		ldr	r3, [r3]
 186:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 402              		.loc 1 186 19 view .LVU142
 403 0060 A342     		cmp	r3, r4
 404 0062 45D0     		beq	.L41
 190:FreeRTOS/portable/MemMang/heap_4.c **** 
 405              		.loc 1 190 21 is_stmt 1 view .LVU143
 190:FreeRTOS/portable/MemMang/heap_4.c **** 
 406              		.loc 1 190 76 is_stmt 0 view .LVU144
 407 0064 0D68     		ldr	r5, [r1]
 190:FreeRTOS/portable/MemMang/heap_4.c **** 
 408              		.loc 1 190 30 view .LVU145
 409 0066 0835     		adds	r5, r5, #8
 410              	.LVL34:
 194:FreeRTOS/portable/MemMang/heap_4.c **** 
 411              		.loc 1 194 21 is_stmt 1 view .LVU146
 194:FreeRTOS/portable/MemMang/heap_4.c **** 
 412              		.loc 1 194 63 is_stmt 0 view .LVU147
 413 0068 2368     		ldr	r3, [r4]
 194:FreeRTOS/portable/MemMang/heap_4.c **** 
 414              		.loc 1 194 54 view .LVU148
 415 006a 0B60     		str	r3, [r1]
 198:FreeRTOS/portable/MemMang/heap_4.c ****                     {
 416              		.loc 1 198 21 is_stmt 1 view .LVU149
 198:FreeRTOS/portable/MemMang/heap_4.c ****                     {
 417              		.loc 1 198 34 is_stmt 0 view .LVU150
 418 006c 6368     		ldr	r3, [r4, #4]
 198:FreeRTOS/portable/MemMang/heap_4.c ****                     {
 419              		.loc 1 198 47 view .LVU151
 420 006e 9B1A     		subs	r3, r3, r2
 198:FreeRTOS/portable/MemMang/heap_4.c ****                     {
 421              		.loc 1 198 23 view .LVU152
 422 0070 102B     		cmp	r3, #16
 423 0072 10D9     		bls	.L29
 204:FreeRTOS/portable/MemMang/heap_4.c ****                         configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) =
 424              		.loc 1 204 25 is_stmt 1 view .LVU153
 204:FreeRTOS/portable/MemMang/heap_4.c ****                         configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) =
 425              		.loc 1 204 40 is_stmt 0 view .LVU154
 426 0074 A018     		adds	r0, r4, r2
 427              	.LVL35:
 205:FreeRTOS/portable/MemMang/heap_4.c **** 
 428              		.loc 1 205 25 is_stmt 1 view .LVU155
 429 0076 10F0070F 		tst	r0, #7
 430 007a 08D0     		beq	.L30
 205:FreeRTOS/portable/MemMang/heap_4.c **** 
 431              		.loc 1 205 25 view .LVU156
 432              	.LBB12:
 433              	.LBI12:
 434              		.file 2 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h"
   1:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.4.3
   3:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 18


   9:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://www.FreeRTOS.org
  23:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://github.com/FreeRTOS
  24:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define PORTMACRO_H
  31:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifdef __cplusplus
  33:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         extern "C" {
  34:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
  35:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portCHAR          char
  48:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portFLOAT         float
  49:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDOUBLE        double
  50:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portLONG          long
  51:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSHORT         short
  52:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  53:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portBASE_TYPE     long
  54:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  56:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef long             BaseType_t;
  57:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef unsigned long    UBaseType_t;
  58:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  60:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         typedef uint16_t     TickType_t;
  61:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  62:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #else
  63:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         typedef uint32_t     TickType_t;
  64:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  65:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 19


  66:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not need to be guarded with a critical section. */
  68:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  69:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
  70:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  74:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  76:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  77:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  78:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  79:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  80:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portYIELD()                                 \
  81:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {                                                   \
  82:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  83:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  84:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****                                                         \
  85:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  86:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  87:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  88:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "isb" );                                  \
  89:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
  90:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  91:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  92:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  93:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired ) { if( xSwitchRequired != pdFALSE ) { traceISR_
  94:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  95:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  96:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  98:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortEnterCritical( void );
  99:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortExitCritical( void );
 100:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 101:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 102:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 103:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 104:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 105:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 106:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 107:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 108:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 109:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 110:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 111:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * (which build with all the ports) will build. */
 112:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 113:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 114:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 115:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 116:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 117:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 118:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 119:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 120:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 121:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 122:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 20


 123:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 124:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 125:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 126:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 127:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 128:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 129:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 130:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Generic helper function. */
 131:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 132:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 133:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             uint8_t ucReturn;
 134:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 135:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 136:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 137:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             return ucReturn;
 138:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 139:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 140:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Check the configuration. */
 141:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 142:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 143:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #endif
 144:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 145:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 146:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 147:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 148:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 150:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 152:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 154:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifdef configASSERT
 158:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         void vPortValidateInterruptPriority( void );
 159:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 160:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 161:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 162:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 163:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNOP()
 164:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portINLINE              __inline
 166:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 167:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef portFORCE_INLINE
 168:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 169:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 170:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 173:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulCurrentInterrupt;
 174:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         BaseType_t xReturn;
 175:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 177:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 178:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 179:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         if( ulCurrentInterrupt == 0 )
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 21


 180:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 181:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             xReturn = pdFALSE;
 182:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 183:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         else
 184:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 185:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             xReturn = pdTRUE;
 186:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 187:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 188:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         return xReturn;
 189:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 190:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 192:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 435              		.loc 2 193 34 view .LVU157
 436              	.LBB13:
 194:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulNewBASEPRI;
 437              		.loc 2 195 9 view .LVU158
 196:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
 438              		.loc 2 197 9 view .LVU159
 439              		.syntax unified
 440              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 441 007c 4FF05003 			mov r3, #80												
 442 0080 83F31188 		msr basepri, r3											
 443 0084 BFF36F8F 		isb														
 444 0088 BFF34F8F 		dsb														
 445              	
 446              	@ 0 "" 2
 447              	.LVL36:
 448              		.thumb
 449              		.syntax unified
 450              	.L31:
 451              		.loc 2 197 9 is_stmt 0 view .LVU160
 452              	.LBE13:
 453              	.LBE12:
 205:FreeRTOS/portable/MemMang/heap_4.c **** 
 454              		.loc 1 205 25 is_stmt 1 discriminator 4 view .LVU161
 205:FreeRTOS/portable/MemMang/heap_4.c **** 
 455              		.loc 1 205 25 discriminator 4 view .LVU162
 205:FreeRTOS/portable/MemMang/heap_4.c **** 
 456              		.loc 1 205 25 discriminator 4 view .LVU163
 457 008c FEE7     		b	.L31
 458              	.L30:
 205:FreeRTOS/portable/MemMang/heap_4.c **** 
 459              		.loc 1 205 105 discriminator 2 view .LVU164
 209:FreeRTOS/portable/MemMang/heap_4.c ****                         pxBlock->xBlockSize = xWantedSize;
 460              		.loc 1 209 25 discriminator 2 view .LVU165
 209:FreeRTOS/portable/MemMang/heap_4.c ****                         pxBlock->xBlockSize = xWantedSize;
 461              		.loc 1 209 52 is_stmt 0 discriminator 2 view .LVU166
 462 008e 4360     		str	r3, [r0, #4]
 210:FreeRTOS/portable/MemMang/heap_4.c **** 
 463              		.loc 1 210 25 is_stmt 1 discriminator 2 view .LVU167
 210:FreeRTOS/portable/MemMang/heap_4.c **** 
 464              		.loc 1 210 45 is_stmt 0 discriminator 2 view .LVU168
 465 0090 6260     		str	r2, [r4, #4]
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 22


 213:FreeRTOS/portable/MemMang/heap_4.c ****                     }
 466              		.loc 1 213 25 is_stmt 1 discriminator 2 view .LVU169
 467 0092 FFF7FEFF 		bl	prvInsertBlockIntoFreeList
 468              	.LVL37:
 469              	.L29:
 217:FreeRTOS/portable/MemMang/heap_4.c ****                     }
 470              		.loc 1 217 49 view .LVU170
 220:FreeRTOS/portable/MemMang/heap_4.c **** 
 471              		.loc 1 220 21 view .LVU171
 220:FreeRTOS/portable/MemMang/heap_4.c **** 
 472              		.loc 1 220 51 is_stmt 0 view .LVU172
 473 0096 6268     		ldr	r2, [r4, #4]
 220:FreeRTOS/portable/MemMang/heap_4.c **** 
 474              		.loc 1 220 41 view .LVU173
 475 0098 1949     		ldr	r1, .L44+8
 476 009a 0B68     		ldr	r3, [r1]
 477 009c 9B1A     		subs	r3, r3, r2
 478 009e 0B60     		str	r3, [r1]
 222:FreeRTOS/portable/MemMang/heap_4.c ****                     {
 479              		.loc 1 222 21 is_stmt 1 view .LVU174
 222:FreeRTOS/portable/MemMang/heap_4.c ****                     {
 480              		.loc 1 222 45 is_stmt 0 view .LVU175
 481 00a0 1949     		ldr	r1, .L44+16
 482 00a2 0968     		ldr	r1, [r1]
 222:FreeRTOS/portable/MemMang/heap_4.c ****                     {
 483              		.loc 1 222 23 view .LVU176
 484 00a4 8B42     		cmp	r3, r1
 485 00a6 01D2     		bcs	.L32
 224:FreeRTOS/portable/MemMang/heap_4.c ****                     }
 486              		.loc 1 224 25 is_stmt 1 view .LVU177
 224:FreeRTOS/portable/MemMang/heap_4.c ****                     }
 487              		.loc 1 224 56 is_stmt 0 view .LVU178
 488 00a8 1749     		ldr	r1, .L44+16
 489 00aa 0B60     		str	r3, [r1]
 490              	.L32:
 228:FreeRTOS/portable/MemMang/heap_4.c ****                     }
 491              		.loc 1 228 49 is_stmt 1 view .LVU179
 233:FreeRTOS/portable/MemMang/heap_4.c ****                     pxBlock->pxNextFreeBlock = NULL;
 492              		.loc 1 233 21 view .LVU180
 233:FreeRTOS/portable/MemMang/heap_4.c ****                     pxBlock->pxNextFreeBlock = NULL;
 493              		.loc 1 233 41 is_stmt 0 view .LVU181
 494 00ac 134B     		ldr	r3, .L44+4
 495 00ae 1B68     		ldr	r3, [r3]
 496 00b0 1343     		orrs	r3, r3, r2
 497 00b2 6360     		str	r3, [r4, #4]
 234:FreeRTOS/portable/MemMang/heap_4.c ****                     xNumberOfSuccessfulAllocations++;
 498              		.loc 1 234 21 is_stmt 1 view .LVU182
 234:FreeRTOS/portable/MemMang/heap_4.c ****                     xNumberOfSuccessfulAllocations++;
 499              		.loc 1 234 46 is_stmt 0 view .LVU183
 500 00b4 0023     		movs	r3, #0
 501 00b6 2360     		str	r3, [r4]
 235:FreeRTOS/portable/MemMang/heap_4.c ****                 }
 502              		.loc 1 235 21 is_stmt 1 view .LVU184
 235:FreeRTOS/portable/MemMang/heap_4.c ****                 }
 503              		.loc 1 235 51 is_stmt 0 view .LVU185
 504 00b8 144A     		ldr	r2, .L44+20
 505 00ba 1368     		ldr	r3, [r2]
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 23


 506 00bc 0133     		adds	r3, r3, #1
 507 00be 1360     		str	r3, [r2]
 508 00c0 02E0     		b	.L25
 509              	.LVL38:
 510              	.L35:
 118:FreeRTOS/portable/MemMang/heap_4.c **** 
 511              		.loc 1 118 12 view .LVU186
 512 00c2 0025     		movs	r5, #0
 513 00c4 00E0     		b	.L25
 514              	.L36:
 515 00c6 0025     		movs	r5, #0
 516              	.LVL39:
 517              	.L25:
 249:FreeRTOS/portable/MemMang/heap_4.c ****         }
 518              		.loc 1 249 37 is_stmt 1 view .LVU187
 252:FreeRTOS/portable/MemMang/heap_4.c ****     }
 519              		.loc 1 252 45 view .LVU188
 254:FreeRTOS/portable/MemMang/heap_4.c **** 
 520              		.loc 1 254 5 view .LVU189
 254:FreeRTOS/portable/MemMang/heap_4.c **** 
 521              		.loc 1 254 14 is_stmt 0 view .LVU190
 522 00c8 FFF7FEFF 		bl	xTaskResumeAll
 523              	.LVL40:
 270:FreeRTOS/portable/MemMang/heap_4.c ****     return pvReturn;
 524              		.loc 1 270 5 is_stmt 1 view .LVU191
 525 00cc 15F0070F 		tst	r5, #7
 526 00d0 10D0     		beq	.L23
 270:FreeRTOS/portable/MemMang/heap_4.c ****     return pvReturn;
 527              		.loc 1 270 5 view .LVU192
 528              	.LBB14:
 529              	.LBI14:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 530              		.loc 2 193 34 view .LVU193
 531              	.LBB15:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 532              		.loc 2 195 9 view .LVU194
 533              		.loc 2 197 9 view .LVU195
 534              		.syntax unified
 535              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 536 00d2 4FF05003 			mov r3, #80												
 537 00d6 83F31188 		msr basepri, r3											
 538 00da BFF36F8F 		isb														
 539 00de BFF34F8F 		dsb														
 540              	
 541              	@ 0 "" 2
 542              	.LVL41:
 543              		.thumb
 544              		.syntax unified
 545              	.L34:
 546              		.loc 2 197 9 is_stmt 0 view .LVU196
 547              	.LBE15:
 548              	.LBE14:
 270:FreeRTOS/portable/MemMang/heap_4.c ****     return pvReturn;
 549              		.loc 1 270 5 is_stmt 1 discriminator 6 view .LVU197
 270:FreeRTOS/portable/MemMang/heap_4.c ****     return pvReturn;
 550              		.loc 1 270 5 discriminator 6 view .LVU198
 270:FreeRTOS/portable/MemMang/heap_4.c ****     return pvReturn;
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 24


 551              		.loc 1 270 5 discriminator 6 view .LVU199
 552 00e2 FEE7     		b	.L34
 553              	.LVL42:
 554              	.L37:
 118:FreeRTOS/portable/MemMang/heap_4.c **** 
 555              		.loc 1 118 12 is_stmt 0 view .LVU200
 556 00e4 0025     		movs	r5, #0
 557 00e6 EFE7     		b	.L25
 558              	.L38:
 118:FreeRTOS/portable/MemMang/heap_4.c **** 
 559              		.loc 1 118 12 view .LVU201
 560 00e8 0025     		movs	r5, #0
 561 00ea EDE7     		b	.L25
 562              	.L39:
 563 00ec 0025     		movs	r5, #0
 564 00ee EBE7     		b	.L25
 565              	.LVL43:
 566              	.L41:
 118:FreeRTOS/portable/MemMang/heap_4.c **** 
 567              		.loc 1 118 12 view .LVU202
 568 00f0 0025     		movs	r5, #0
 569 00f2 E9E7     		b	.L25
 570              	.LVL44:
 571              	.L23:
 272:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 572              		.loc 1 272 1 view .LVU203
 573 00f4 2846     		mov	r0, r5
 574 00f6 38BD     		pop	{r3, r4, r5, pc}
 575              	.LVL45:
 576              	.L45:
 272:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 577              		.loc 1 272 1 view .LVU204
 578              		.align	2
 579              	.L44:
 580 00f8 00000000 		.word	.LANCHOR1
 581 00fc 00000000 		.word	.LANCHOR4
 582 0100 00000000 		.word	.LANCHOR3
 583 0104 00000000 		.word	.LANCHOR0
 584 0108 00000000 		.word	.LANCHOR2
 585 010c 00000000 		.word	.LANCHOR5
 586              		.cfi_endproc
 587              	.LFE5:
 589              		.section	.text.vPortFree,"ax",%progbits
 590              		.align	1
 591              		.global	vPortFree
 592              		.syntax unified
 593              		.thumb
 594              		.thumb_func
 596              	vPortFree:
 597              	.LVL46:
 598              	.LFB6:
 276:FreeRTOS/portable/MemMang/heap_4.c ****     uint8_t * puc = ( uint8_t * ) pv;
 599              		.loc 1 276 1 is_stmt 1 view -0
 600              		.cfi_startproc
 601              		@ args = 0, pretend = 0, frame = 0
 602              		@ frame_needed = 0, uses_anonymous_args = 0
 277:FreeRTOS/portable/MemMang/heap_4.c ****     BlockLink_t * pxLink;
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 25


 603              		.loc 1 277 5 view .LVU206
 278:FreeRTOS/portable/MemMang/heap_4.c **** 
 604              		.loc 1 278 5 view .LVU207
 280:FreeRTOS/portable/MemMang/heap_4.c ****     {
 605              		.loc 1 280 5 view .LVU208
 280:FreeRTOS/portable/MemMang/heap_4.c ****     {
 606              		.loc 1 280 7 is_stmt 0 view .LVU209
 607 0000 0028     		cmp	r0, #0
 608 0002 34D0     		beq	.L53
 276:FreeRTOS/portable/MemMang/heap_4.c ****     uint8_t * puc = ( uint8_t * ) pv;
 609              		.loc 1 276 1 view .LVU210
 610 0004 38B5     		push	{r3, r4, r5, lr}
 611              	.LCFI5:
 612              		.cfi_def_cfa_offset 16
 613              		.cfi_offset 3, -16
 614              		.cfi_offset 4, -12
 615              		.cfi_offset 5, -8
 616              		.cfi_offset 14, -4
 617 0006 0446     		mov	r4, r0
 284:FreeRTOS/portable/MemMang/heap_4.c **** 
 618              		.loc 1 284 9 is_stmt 1 view .LVU211
 284:FreeRTOS/portable/MemMang/heap_4.c **** 
 619              		.loc 1 284 13 is_stmt 0 view .LVU212
 620 0008 A0F10805 		sub	r5, r0, #8
 621              	.LVL47:
 287:FreeRTOS/portable/MemMang/heap_4.c **** 
 622              		.loc 1 287 9 is_stmt 1 view .LVU213
 290:FreeRTOS/portable/MemMang/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 623              		.loc 1 290 9 view .LVU214
 624 000c 50F8043C 		ldr	r3, [r0, #-4]
 625 0010 174A     		ldr	r2, .L56
 626 0012 1268     		ldr	r2, [r2]
 627 0014 1342     		tst	r3, r2
 628 0016 08D1     		bne	.L48
 290:FreeRTOS/portable/MemMang/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 629              		.loc 1 290 9 view .LVU215
 630              	.LBB16:
 631              	.LBI16:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 632              		.loc 2 193 34 view .LVU216
 633              	.LBB17:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 634              		.loc 2 195 9 view .LVU217
 635              		.loc 2 197 9 view .LVU218
 636              		.syntax unified
 637              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 638 0018 4FF05003 			mov r3, #80												
 639 001c 83F31188 		msr basepri, r3											
 640 0020 BFF36F8F 		isb														
 641 0024 BFF34F8F 		dsb														
 642              	
 643              	@ 0 "" 2
 644              	.LVL48:
 645              		.thumb
 646              		.syntax unified
 647              	.L49:
 648              		.loc 2 197 9 is_stmt 0 view .LVU219
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 26


 649              	.LBE17:
 650              	.LBE16:
 290:FreeRTOS/portable/MemMang/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 651              		.loc 1 290 9 is_stmt 1 discriminator 1 view .LVU220
 290:FreeRTOS/portable/MemMang/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 652              		.loc 1 290 9 discriminator 1 view .LVU221
 290:FreeRTOS/portable/MemMang/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 653              		.loc 1 290 9 discriminator 1 view .LVU222
 654 0028 FEE7     		b	.L49
 655              	.L48:
 290:FreeRTOS/portable/MemMang/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 656              		.loc 1 290 73 discriminator 2 view .LVU223
 291:FreeRTOS/portable/MemMang/heap_4.c **** 
 657              		.loc 1 291 9 discriminator 2 view .LVU224
 658 002a 50F8081C 		ldr	r1, [r0, #-8]
 659 002e 41B1     		cbz	r1, .L50
 291:FreeRTOS/portable/MemMang/heap_4.c **** 
 660              		.loc 1 291 9 view .LVU225
 661              	.LBB18:
 662              	.LBI18:
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 663              		.loc 2 193 34 view .LVU226
 664              	.LBB19:
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 665              		.loc 2 195 9 view .LVU227
 666              		.loc 2 197 9 view .LVU228
 667              		.syntax unified
 668              	@ 197 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 669 0030 4FF05003 			mov r3, #80												
 670 0034 83F31188 		msr basepri, r3											
 671 0038 BFF36F8F 		isb														
 672 003c BFF34F8F 		dsb														
 673              	
 674              	@ 0 "" 2
 675              	.LVL49:
 676              		.thumb
 677              		.syntax unified
 678              	.L51:
 679              		.loc 2 197 9 is_stmt 0 view .LVU229
 680              	.LBE19:
 681              	.LBE18:
 291:FreeRTOS/portable/MemMang/heap_4.c **** 
 682              		.loc 1 291 9 is_stmt 1 discriminator 2 view .LVU230
 291:FreeRTOS/portable/MemMang/heap_4.c **** 
 683              		.loc 1 291 9 discriminator 2 view .LVU231
 291:FreeRTOS/portable/MemMang/heap_4.c **** 
 684              		.loc 1 291 9 discriminator 2 view .LVU232
 685 0040 FEE7     		b	.L51
 686              	.L50:
 291:FreeRTOS/portable/MemMang/heap_4.c **** 
 687              		.loc 1 291 56 view .LVU233
 293:FreeRTOS/portable/MemMang/heap_4.c ****         {
 688              		.loc 1 293 9 view .LVU234
 295:FreeRTOS/portable/MemMang/heap_4.c ****             {
 689              		.loc 1 295 13 view .LVU235
 299:FreeRTOS/portable/MemMang/heap_4.c **** 
 690              		.loc 1 299 17 view .LVU236
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 27


 299:FreeRTOS/portable/MemMang/heap_4.c **** 
 691              		.loc 1 299 36 is_stmt 0 view .LVU237
 692 0042 23EA0203 		bic	r3, r3, r2
 693 0046 40F8043C 		str	r3, [r0, #-4]
 301:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 694              		.loc 1 301 17 is_stmt 1 view .LVU238
 695 004a FFF7FEFF 		bl	vTaskSuspendAll
 696              	.LVL50:
 304:FreeRTOS/portable/MemMang/heap_4.c ****                     traceFREE( pv, pxLink->xBlockSize );
 697              		.loc 1 304 21 view .LVU239
 304:FreeRTOS/portable/MemMang/heap_4.c ****                     traceFREE( pv, pxLink->xBlockSize );
 698              		.loc 1 304 50 is_stmt 0 view .LVU240
 699 004e 54F8041C 		ldr	r1, [r4, #-4]
 304:FreeRTOS/portable/MemMang/heap_4.c ****                     traceFREE( pv, pxLink->xBlockSize );
 700              		.loc 1 304 41 view .LVU241
 701 0052 084A     		ldr	r2, .L56+4
 702 0054 1368     		ldr	r3, [r2]
 703 0056 0B44     		add	r3, r3, r1
 704 0058 1360     		str	r3, [r2]
 305:FreeRTOS/portable/MemMang/heap_4.c ****                     prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 705              		.loc 1 305 56 is_stmt 1 view .LVU242
 306:FreeRTOS/portable/MemMang/heap_4.c ****                     xNumberOfSuccessfulFrees++;
 706              		.loc 1 306 21 view .LVU243
 707 005a 2846     		mov	r0, r5
 708 005c FFF7FEFF 		bl	prvInsertBlockIntoFreeList
 709              	.LVL51:
 307:FreeRTOS/portable/MemMang/heap_4.c ****                 }
 710              		.loc 1 307 21 view .LVU244
 307:FreeRTOS/portable/MemMang/heap_4.c ****                 }
 711              		.loc 1 307 45 is_stmt 0 view .LVU245
 712 0060 054A     		ldr	r2, .L56+8
 713 0062 1368     		ldr	r3, [r2]
 714 0064 0133     		adds	r3, r3, #1
 715 0066 1360     		str	r3, [r2]
 309:FreeRTOS/portable/MemMang/heap_4.c ****             }
 716              		.loc 1 309 17 is_stmt 1 view .LVU246
 309:FreeRTOS/portable/MemMang/heap_4.c ****             }
 717              		.loc 1 309 26 is_stmt 0 view .LVU247
 718 0068 FFF7FEFF 		bl	xTaskResumeAll
 719              	.LVL52:
 318:FreeRTOS/portable/MemMang/heap_4.c ****         }
 720              		.loc 1 318 37 is_stmt 1 view .LVU248
 321:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 721              		.loc 1 321 1 is_stmt 0 view .LVU249
 722 006c 38BD     		pop	{r3, r4, r5, pc}
 723              	.LVL53:
 724              	.L53:
 725              	.LCFI6:
 726              		.cfi_def_cfa_offset 0
 727              		.cfi_restore 3
 728              		.cfi_restore 4
 729              		.cfi_restore 5
 730              		.cfi_restore 14
 321:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 731              		.loc 1 321 1 view .LVU250
 732 006e 7047     		bx	lr
 733              	.L57:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 28


 734              		.align	2
 735              	.L56:
 736 0070 00000000 		.word	.LANCHOR4
 737 0074 00000000 		.word	.LANCHOR3
 738 0078 00000000 		.word	.LANCHOR6
 739              		.cfi_endproc
 740              	.LFE6:
 742              		.section	.text.xPortGetFreeHeapSize,"ax",%progbits
 743              		.align	1
 744              		.global	xPortGetFreeHeapSize
 745              		.syntax unified
 746              		.thumb
 747              		.thumb_func
 749              	xPortGetFreeHeapSize:
 750              	.LFB7:
 325:FreeRTOS/portable/MemMang/heap_4.c ****     return xFreeBytesRemaining;
 751              		.loc 1 325 1 is_stmt 1 view -0
 752              		.cfi_startproc
 753              		@ args = 0, pretend = 0, frame = 0
 754              		@ frame_needed = 0, uses_anonymous_args = 0
 755              		@ link register save eliminated.
 326:FreeRTOS/portable/MemMang/heap_4.c **** }
 756              		.loc 1 326 5 view .LVU252
 327:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 757              		.loc 1 327 1 is_stmt 0 view .LVU253
 758 0000 014B     		ldr	r3, .L59
 759 0002 1868     		ldr	r0, [r3]
 760 0004 7047     		bx	lr
 761              	.L60:
 762 0006 00BF     		.align	2
 763              	.L59:
 764 0008 00000000 		.word	.LANCHOR3
 765              		.cfi_endproc
 766              	.LFE7:
 768              		.section	.text.xPortGetMinimumEverFreeHeapSize,"ax",%progbits
 769              		.align	1
 770              		.global	xPortGetMinimumEverFreeHeapSize
 771              		.syntax unified
 772              		.thumb
 773              		.thumb_func
 775              	xPortGetMinimumEverFreeHeapSize:
 776              	.LFB8:
 331:FreeRTOS/portable/MemMang/heap_4.c ****     return xMinimumEverFreeBytesRemaining;
 777              		.loc 1 331 1 is_stmt 1 view -0
 778              		.cfi_startproc
 779              		@ args = 0, pretend = 0, frame = 0
 780              		@ frame_needed = 0, uses_anonymous_args = 0
 781              		@ link register save eliminated.
 332:FreeRTOS/portable/MemMang/heap_4.c **** }
 782              		.loc 1 332 5 view .LVU255
 333:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 783              		.loc 1 333 1 is_stmt 0 view .LVU256
 784 0000 014B     		ldr	r3, .L62
 785 0002 1868     		ldr	r0, [r3]
 786 0004 7047     		bx	lr
 787              	.L63:
 788 0006 00BF     		.align	2
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 29


 789              	.L62:
 790 0008 00000000 		.word	.LANCHOR2
 791              		.cfi_endproc
 792              	.LFE8:
 794              		.section	.text.vPortInitialiseBlocks,"ax",%progbits
 795              		.align	1
 796              		.global	vPortInitialiseBlocks
 797              		.syntax unified
 798              		.thumb
 799              		.thumb_func
 801              	vPortInitialiseBlocks:
 802              	.LFB9:
 337:FreeRTOS/portable/MemMang/heap_4.c ****     /* This just exists to keep the linker quiet. */
 803              		.loc 1 337 1 is_stmt 1 view -0
 804              		.cfi_startproc
 805              		@ args = 0, pretend = 0, frame = 0
 806              		@ frame_needed = 0, uses_anonymous_args = 0
 807              		@ link register save eliminated.
 339:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 808              		.loc 1 339 1 view .LVU258
 809 0000 7047     		bx	lr
 810              		.cfi_endproc
 811              	.LFE9:
 813              		.section	.text.vPortGetHeapStats,"ax",%progbits
 814              		.align	1
 815              		.global	vPortGetHeapStats
 816              		.syntax unified
 817              		.thumb
 818              		.thumb_func
 820              	vPortGetHeapStats:
 821              	.LVL54:
 822              	.LFB12:
 451:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 452:FreeRTOS/portable/MemMang/heap_4.c **** 
 453:FreeRTOS/portable/MemMang/heap_4.c **** void vPortGetHeapStats( HeapStats_t * pxHeapStats )
 454:FreeRTOS/portable/MemMang/heap_4.c **** {
 823              		.loc 1 454 1 view -0
 824              		.cfi_startproc
 825              		@ args = 0, pretend = 0, frame = 0
 826              		@ frame_needed = 0, uses_anonymous_args = 0
 827              		.loc 1 454 1 is_stmt 0 view .LVU260
 828 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 829              	.LCFI7:
 830              		.cfi_def_cfa_offset 24
 831              		.cfi_offset 3, -24
 832              		.cfi_offset 4, -20
 833              		.cfi_offset 5, -16
 834              		.cfi_offset 6, -12
 835              		.cfi_offset 7, -8
 836              		.cfi_offset 14, -4
 837 0002 0746     		mov	r7, r0
 455:FreeRTOS/portable/MemMang/heap_4.c ****     BlockLink_t * pxBlock;
 838              		.loc 1 455 5 is_stmt 1 view .LVU261
 456:FreeRTOS/portable/MemMang/heap_4.c ****     size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable
 839              		.loc 1 456 5 view .LVU262
 840              	.LVL55:
 457:FreeRTOS/portable/MemMang/heap_4.c **** 
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 30


 458:FreeRTOS/portable/MemMang/heap_4.c ****     vTaskSuspendAll();
 841              		.loc 1 458 5 view .LVU263
 842 0004 FFF7FEFF 		bl	vTaskSuspendAll
 843              	.LVL56:
 459:FreeRTOS/portable/MemMang/heap_4.c ****     {
 460:FreeRTOS/portable/MemMang/heap_4.c ****         pxBlock = xStart.pxNextFreeBlock;
 844              		.loc 1 460 9 view .LVU264
 845              		.loc 1 460 17 is_stmt 0 view .LVU265
 846 0008 174B     		ldr	r3, .L74
 847 000a 1B68     		ldr	r3, [r3]
 848              	.LVL57:
 461:FreeRTOS/portable/MemMang/heap_4.c **** 
 462:FreeRTOS/portable/MemMang/heap_4.c ****         /* pxBlock will be NULL if the heap has not been initialised.  The heap
 463:FreeRTOS/portable/MemMang/heap_4.c ****          * is initialised automatically when the first allocation is made. */
 464:FreeRTOS/portable/MemMang/heap_4.c ****         if( pxBlock != NULL )
 849              		.loc 1 464 9 is_stmt 1 view .LVU266
 850              		.loc 1 464 11 is_stmt 0 view .LVU267
 851 000c 93B1     		cbz	r3, .L70
 456:FreeRTOS/portable/MemMang/heap_4.c **** 
 852              		.loc 1 456 39 view .LVU268
 853 000e 4FF0FF36 		mov	r6, #-1
 456:FreeRTOS/portable/MemMang/heap_4.c **** 
 854              		.loc 1 456 25 view .LVU269
 855 0012 0025     		movs	r5, #0
 456:FreeRTOS/portable/MemMang/heap_4.c **** 
 856              		.loc 1 456 12 view .LVU270
 857 0014 2C46     		mov	r4, r5
 858 0016 04E0     		b	.L69
 859              	.LVL58:
 860              	.L68:
 465:FreeRTOS/portable/MemMang/heap_4.c ****         {
 466:FreeRTOS/portable/MemMang/heap_4.c ****             do
 467:FreeRTOS/portable/MemMang/heap_4.c ****             {
 468:FreeRTOS/portable/MemMang/heap_4.c ****                 /* Increment the number of blocks and record the largest block seen
 469:FreeRTOS/portable/MemMang/heap_4.c ****                  * so far. */
 470:FreeRTOS/portable/MemMang/heap_4.c ****                 xBlocks++;
 471:FreeRTOS/portable/MemMang/heap_4.c **** 
 472:FreeRTOS/portable/MemMang/heap_4.c ****                 if( pxBlock->xBlockSize > xMaxSize )
 473:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 474:FreeRTOS/portable/MemMang/heap_4.c ****                     xMaxSize = pxBlock->xBlockSize;
 475:FreeRTOS/portable/MemMang/heap_4.c ****                 }
 476:FreeRTOS/portable/MemMang/heap_4.c **** 
 477:FreeRTOS/portable/MemMang/heap_4.c ****                 if( pxBlock->xBlockSize < xMinSize )
 478:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 479:FreeRTOS/portable/MemMang/heap_4.c ****                     xMinSize = pxBlock->xBlockSize;
 480:FreeRTOS/portable/MemMang/heap_4.c ****                 }
 481:FreeRTOS/portable/MemMang/heap_4.c **** 
 482:FreeRTOS/portable/MemMang/heap_4.c ****                 /* Move to the next block in the chain until the last block is
 483:FreeRTOS/portable/MemMang/heap_4.c ****                  * reached. */
 484:FreeRTOS/portable/MemMang/heap_4.c ****                 pxBlock = pxBlock->pxNextFreeBlock;
 861              		.loc 1 484 17 is_stmt 1 view .LVU271
 862              		.loc 1 484 25 is_stmt 0 view .LVU272
 863 0018 1B68     		ldr	r3, [r3]
 864              	.LVL59:
 485:FreeRTOS/portable/MemMang/heap_4.c ****             } while( pxBlock != pxEnd );
 865              		.loc 1 485 20 is_stmt 1 view .LVU273
 866              		.loc 1 485 30 is_stmt 0 view .LVU274
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 31


 867 001a 144A     		ldr	r2, .L74+4
 868 001c 1268     		ldr	r2, [r2]
 869              		.loc 1 485 13 view .LVU275
 870 001e 9A42     		cmp	r2, r3
 871 0020 0CD0     		beq	.L66
 872              	.LVL60:
 873              	.L69:
 466:FreeRTOS/portable/MemMang/heap_4.c ****             {
 874              		.loc 1 466 13 is_stmt 1 view .LVU276
 470:FreeRTOS/portable/MemMang/heap_4.c **** 
 875              		.loc 1 470 17 view .LVU277
 470:FreeRTOS/portable/MemMang/heap_4.c **** 
 876              		.loc 1 470 24 is_stmt 0 view .LVU278
 877 0022 0134     		adds	r4, r4, #1
 878              	.LVL61:
 472:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 879              		.loc 1 472 17 is_stmt 1 view .LVU279
 472:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 880              		.loc 1 472 28 is_stmt 0 view .LVU280
 881 0024 5A68     		ldr	r2, [r3, #4]
 472:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 882              		.loc 1 472 19 view .LVU281
 883 0026 AA42     		cmp	r2, r5
 884 0028 00D9     		bls	.L67
 474:FreeRTOS/portable/MemMang/heap_4.c ****                 }
 885              		.loc 1 474 30 view .LVU282
 886 002a 1546     		mov	r5, r2
 887              	.LVL62:
 888              	.L67:
 477:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 889              		.loc 1 477 17 is_stmt 1 view .LVU283
 477:FreeRTOS/portable/MemMang/heap_4.c ****                 {
 890              		.loc 1 477 19 is_stmt 0 view .LVU284
 891 002c B242     		cmp	r2, r6
 892 002e F3D2     		bcs	.L68
 479:FreeRTOS/portable/MemMang/heap_4.c ****                 }
 893              		.loc 1 479 30 view .LVU285
 894 0030 1646     		mov	r6, r2
 895              	.LVL63:
 479:FreeRTOS/portable/MemMang/heap_4.c ****                 }
 896              		.loc 1 479 30 view .LVU286
 897 0032 F1E7     		b	.L68
 898              	.LVL64:
 899              	.L70:
 456:FreeRTOS/portable/MemMang/heap_4.c **** 
 900              		.loc 1 456 39 view .LVU287
 901 0034 4FF0FF36 		mov	r6, #-1
 456:FreeRTOS/portable/MemMang/heap_4.c **** 
 902              		.loc 1 456 25 view .LVU288
 903 0038 0025     		movs	r5, #0
 456:FreeRTOS/portable/MemMang/heap_4.c **** 
 904              		.loc 1 456 12 view .LVU289
 905 003a 2C46     		mov	r4, r5
 906              	.LVL65:
 907              	.L66:
 486:FreeRTOS/portable/MemMang/heap_4.c ****         }
 487:FreeRTOS/portable/MemMang/heap_4.c ****     }
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 32


 488:FreeRTOS/portable/MemMang/heap_4.c ****     ( void ) xTaskResumeAll();
 908              		.loc 1 488 5 is_stmt 1 view .LVU290
 909              		.loc 1 488 14 is_stmt 0 view .LVU291
 910 003c FFF7FEFF 		bl	xTaskResumeAll
 911              	.LVL66:
 489:FreeRTOS/portable/MemMang/heap_4.c **** 
 490:FreeRTOS/portable/MemMang/heap_4.c ****     pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 912              		.loc 1 490 5 is_stmt 1 view .LVU292
 913              		.loc 1 490 49 is_stmt 0 view .LVU293
 914 0040 7D60     		str	r5, [r7, #4]
 491:FreeRTOS/portable/MemMang/heap_4.c ****     pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 915              		.loc 1 491 5 is_stmt 1 view .LVU294
 916              		.loc 1 491 50 is_stmt 0 view .LVU295
 917 0042 BE60     		str	r6, [r7, #8]
 492:FreeRTOS/portable/MemMang/heap_4.c ****     pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 918              		.loc 1 492 5 is_stmt 1 view .LVU296
 919              		.loc 1 492 38 is_stmt 0 view .LVU297
 920 0044 FC60     		str	r4, [r7, #12]
 493:FreeRTOS/portable/MemMang/heap_4.c **** 
 494:FreeRTOS/portable/MemMang/heap_4.c ****     taskENTER_CRITICAL();
 921              		.loc 1 494 5 is_stmt 1 view .LVU298
 922 0046 FFF7FEFF 		bl	vPortEnterCritical
 923              	.LVL67:
 495:FreeRTOS/portable/MemMang/heap_4.c ****     {
 496:FreeRTOS/portable/MemMang/heap_4.c ****         pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 924              		.loc 1 496 9 view .LVU299
 925              		.loc 1 496 49 is_stmt 0 view .LVU300
 926 004a 094B     		ldr	r3, .L74+8
 927 004c 1B68     		ldr	r3, [r3]
 928 004e 3B60     		str	r3, [r7]
 497:FreeRTOS/portable/MemMang/heap_4.c ****         pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 929              		.loc 1 497 9 is_stmt 1 view .LVU301
 930              		.loc 1 497 53 is_stmt 0 view .LVU302
 931 0050 084B     		ldr	r3, .L74+12
 932 0052 1B68     		ldr	r3, [r3]
 933 0054 7B61     		str	r3, [r7, #20]
 498:FreeRTOS/portable/MemMang/heap_4.c ****         pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 934              		.loc 1 498 9 is_stmt 1 view .LVU303
 935              		.loc 1 498 47 is_stmt 0 view .LVU304
 936 0056 084B     		ldr	r3, .L74+16
 937 0058 1B68     		ldr	r3, [r3]
 938 005a BB61     		str	r3, [r7, #24]
 499:FreeRTOS/portable/MemMang/heap_4.c ****         pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 939              		.loc 1 499 9 is_stmt 1 view .LVU305
 940              		.loc 1 499 53 is_stmt 0 view .LVU306
 941 005c 074B     		ldr	r3, .L74+20
 942 005e 1B68     		ldr	r3, [r3]
 943 0060 3B61     		str	r3, [r7, #16]
 500:FreeRTOS/portable/MemMang/heap_4.c ****     }
 501:FreeRTOS/portable/MemMang/heap_4.c ****     taskEXIT_CRITICAL();
 944              		.loc 1 501 5 is_stmt 1 view .LVU307
 945 0062 FFF7FEFF 		bl	vPortExitCritical
 946              	.LVL68:
 502:FreeRTOS/portable/MemMang/heap_4.c **** }
 947              		.loc 1 502 1 is_stmt 0 view .LVU308
 948 0066 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 949              	.LVL69:
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 33


 950              	.L75:
 951              		.loc 1 502 1 view .LVU309
 952              		.align	2
 953              	.L74:
 954 0068 00000000 		.word	.LANCHOR0
 955 006c 00000000 		.word	.LANCHOR1
 956 0070 00000000 		.word	.LANCHOR3
 957 0074 00000000 		.word	.LANCHOR5
 958 0078 00000000 		.word	.LANCHOR6
 959 007c 00000000 		.word	.LANCHOR2
 960              		.cfi_endproc
 961              	.LFE12:
 963              		.section	.bss.pxEnd,"aw",%nobits
 964              		.align	2
 965              		.set	.LANCHOR1,. + 0
 968              	pxEnd:
 969 0000 00000000 		.space	4
 970              		.section	.bss.ucHeap,"aw",%nobits
 971              		.align	2
 974              	ucHeap:
 975 0000 00000000 		.space	16384
 975      00000000 
 975      00000000 
 975      00000000 
 975      00000000 
 976              		.section	.bss.xBlockAllocatedBit,"aw",%nobits
 977              		.align	2
 978              		.set	.LANCHOR4,. + 0
 981              	xBlockAllocatedBit:
 982 0000 00000000 		.space	4
 983              		.section	.bss.xFreeBytesRemaining,"aw",%nobits
 984              		.align	2
 985              		.set	.LANCHOR3,. + 0
 988              	xFreeBytesRemaining:
 989 0000 00000000 		.space	4
 990              		.section	.bss.xMinimumEverFreeBytesRemaining,"aw",%nobits
 991              		.align	2
 992              		.set	.LANCHOR2,. + 0
 995              	xMinimumEverFreeBytesRemaining:
 996 0000 00000000 		.space	4
 997              		.section	.bss.xNumberOfSuccessfulAllocations,"aw",%nobits
 998              		.align	2
 999              		.set	.LANCHOR5,. + 0
 1002              	xNumberOfSuccessfulAllocations:
 1003 0000 00000000 		.space	4
 1004              		.section	.bss.xNumberOfSuccessfulFrees,"aw",%nobits
 1005              		.align	2
 1006              		.set	.LANCHOR6,. + 0
 1009              	xNumberOfSuccessfulFrees:
 1010 0000 00000000 		.space	4
 1011              		.section	.bss.xStart,"aw",%nobits
 1012              		.align	2
 1013              		.set	.LANCHOR0,. + 0
 1016              	xStart:
 1017 0000 00000000 		.space	8
 1017      00000000 
 1018              		.text
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 34


 1019              	.Letext0:
 1020              		.file 3 "d:\\gcc-arm-none-eabi-10.3-2021.10\\lib\\gcc\\arm-none-eabi\\10.3.1\\include\\stddef.h"
 1021              		.file 4 "d:\\gcc-arm-none-eabi-10.3-2021.10\\arm-none-eabi\\include\\machine\\_default_types.h"
 1022              		.file 5 "d:\\gcc-arm-none-eabi-10.3-2021.10\\arm-none-eabi\\include\\sys\\_stdint.h"
 1023              		.file 6 "FreeRTOS/include/portable.h"
 1024              		.file 7 "FreeRTOS/include/task.h"
ARM GAS  C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s 			page 35


DEFINED SYMBOLS
                            *ABS*:00000000 heap_4.c
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:20     .text.prvHeapInit:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:25     .text.prvHeapInit:00000000 prvHeapInit
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:131    .text.prvHeapInit:0000004c $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:974    .bss.ucHeap:00000000 ucHeap
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:141    .text.prvInsertBlockIntoFreeList:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:146    .text.prvInsertBlockIntoFreeList:00000000 prvInsertBlockIntoFreeList
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:277    .text.prvInsertBlockIntoFreeList:0000005c $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:283    .text.pvPortMalloc:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:289    .text.pvPortMalloc:00000000 pvPortMalloc
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:580    .text.pvPortMalloc:000000f8 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:590    .text.vPortFree:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:596    .text.vPortFree:00000000 vPortFree
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:736    .text.vPortFree:00000070 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:743    .text.xPortGetFreeHeapSize:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:749    .text.xPortGetFreeHeapSize:00000000 xPortGetFreeHeapSize
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:764    .text.xPortGetFreeHeapSize:00000008 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:769    .text.xPortGetMinimumEverFreeHeapSize:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:775    .text.xPortGetMinimumEverFreeHeapSize:00000000 xPortGetMinimumEverFreeHeapSize
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:790    .text.xPortGetMinimumEverFreeHeapSize:00000008 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:795    .text.vPortInitialiseBlocks:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:801    .text.vPortInitialiseBlocks:00000000 vPortInitialiseBlocks
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:814    .text.vPortGetHeapStats:00000000 $t
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:820    .text.vPortGetHeapStats:00000000 vPortGetHeapStats
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:954    .text.vPortGetHeapStats:00000068 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:964    .bss.pxEnd:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:968    .bss.pxEnd:00000000 pxEnd
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:971    .bss.ucHeap:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:977    .bss.xBlockAllocatedBit:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:981    .bss.xBlockAllocatedBit:00000000 xBlockAllocatedBit
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:984    .bss.xFreeBytesRemaining:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:988    .bss.xFreeBytesRemaining:00000000 xFreeBytesRemaining
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:991    .bss.xMinimumEverFreeBytesRemaining:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:995    .bss.xMinimumEverFreeBytesRemaining:00000000 xMinimumEverFreeBytesRemaining
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:998    .bss.xNumberOfSuccessfulAllocations:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:1002   .bss.xNumberOfSuccessfulAllocations:00000000 xNumberOfSuccessfulAllocations
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:1005   .bss.xNumberOfSuccessfulFrees:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:1009   .bss.xNumberOfSuccessfulFrees:00000000 xNumberOfSuccessfulFrees
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:1012   .bss.xStart:00000000 $d
C:\Users\LINZHE~1\AppData\Local\Temp\ccR8X8fK.s:1016   .bss.xStart:00000000 xStart

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskResumeAll
vPortEnterCritical
vPortExitCritical
